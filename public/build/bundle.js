
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
(function () {
    'use strict';

    function noop$2() { }
    function assign$1(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$2;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign$1($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$2;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update$1(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update$1($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$2,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$2;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.37.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /*!
     * Chart.js v3.2.0
     * https://www.chartjs.org
     * (c) 2021 Chart.js Contributors
     * Released under the MIT License
     */
    const requestAnimFrame = (function() {
      if (typeof window === 'undefined') {
        return function(callback) {
          return callback();
        };
      }
      return window.requestAnimationFrame;
    }());
    function throttled(fn, thisArg, updateFn) {
      const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));
      let ticking = false;
      let args = [];
      return function(...rest) {
        args = updateArgs(rest);
        if (!ticking) {
          ticking = true;
          requestAnimFrame.call(window, () => {
            ticking = false;
            fn.apply(thisArg, args);
          });
        }
      };
    }
    function debounce(fn, delay) {
      let timeout;
      return function() {
        if (delay) {
          clearTimeout(timeout);
          timeout = setTimeout(fn, delay);
        } else {
          fn();
        }
        return delay;
      };
    }
    const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
    const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
    const _textX = (align, left, right) => align === 'right' ? right : align === 'center' ? (left + right) / 2 : left;

    function noop$1() {}
    const uid = (function() {
      let id = 0;
      return function() {
        return id++;
      };
    }());
    function isNullOrUndef(value) {
      return value === null || typeof value === 'undefined';
    }
    function isArray(value) {
      if (Array.isArray && Array.isArray(value)) {
        return true;
      }
      const type = Object.prototype.toString.call(value);
      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
        return true;
      }
      return false;
    }
    function isObject(value) {
      return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    }
    const isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);
    function finiteOrDefault(value, defaultValue) {
      return isNumberFinite(value) ? value : defaultValue;
    }
    function valueOrDefault(value, defaultValue) {
      return typeof value === 'undefined' ? defaultValue : value;
    }
    const toPercentage = (value, dimension) =>
      typeof value === 'string' && value.endsWith('%') ?
        parseFloat(value) / 100
        : value / dimension;
    const toDimension = (value, dimension) =>
      typeof value === 'string' && value.endsWith('%') ?
        parseFloat(value) / 100 * dimension
        : +value;
    function callback(fn, args, thisArg) {
      if (fn && typeof fn.call === 'function') {
        return fn.apply(thisArg, args);
      }
    }
    function each(loopable, fn, thisArg, reverse) {
      let i, len, keys;
      if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) {
          for (i = len - 1; i >= 0; i--) {
            fn.call(thisArg, loopable[i], i);
          }
        } else {
          for (i = 0; i < len; i++) {
            fn.call(thisArg, loopable[i], i);
          }
        }
      } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for (i = 0; i < len; i++) {
          fn.call(thisArg, loopable[keys[i]], keys[i]);
        }
      }
    }
    function _elementsEqual(a0, a1) {
      let i, ilen, v0, v1;
      if (!a0 || !a1 || a0.length !== a1.length) {
        return false;
      }
      for (i = 0, ilen = a0.length; i < ilen; ++i) {
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
          return false;
        }
      }
      return true;
    }
    function clone$1(source) {
      if (isArray(source)) {
        return source.map(clone$1);
      }
      if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for (; k < klen; ++k) {
          target[keys[k]] = clone$1(source[keys[k]]);
        }
        return target;
      }
      return source;
    }
    function isValidKey(key) {
      return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
    }
    function _merger(key, target, source, options) {
      if (!isValidKey(key)) {
        return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
        merge(tval, sval, options);
      } else {
        target[key] = clone$1(sval);
      }
    }
    function merge(target, source, options) {
      const sources = isArray(source) ? source : [source];
      const ilen = sources.length;
      if (!isObject(target)) {
        return target;
      }
      options = options || {};
      const merger = options.merger || _merger;
      for (let i = 0; i < ilen; ++i) {
        source = sources[i];
        if (!isObject(source)) {
          continue;
        }
        const keys = Object.keys(source);
        for (let k = 0, klen = keys.length; k < klen; ++k) {
          merger(keys[k], target, source, options);
        }
      }
      return target;
    }
    function mergeIf(target, source) {
      return merge(target, source, {merger: _mergerIf});
    }
    function _mergerIf(key, target, source) {
      if (!isValidKey(key)) {
        return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
        mergeIf(tval, sval);
      } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
        target[key] = clone$1(sval);
      }
    }
    const emptyString = '';
    const dot = '.';
    function indexOfDotOrLength(key, start) {
      const idx = key.indexOf(dot, start);
      return idx === -1 ? key.length : idx;
    }
    function resolveObjectKey(obj, key) {
      if (key === emptyString) {
        return obj;
      }
      let pos = 0;
      let idx = indexOfDotOrLength(key, pos);
      while (obj && idx > pos) {
        obj = obj[key.substr(pos, idx - pos)];
        pos = idx + 1;
        idx = indexOfDotOrLength(key, pos);
      }
      return obj;
    }
    function _capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    const defined = (value) => typeof value !== 'undefined';
    const isFunction = (value) => typeof value === 'function';
    const setsEqual = (a, b) => {
      if (a.size !== b.size) {
        return false;
      }
      for (const item of a) {
        if (!b.has(item)) {
          return false;
        }
      }
      return true;
    };

    const PI = Math.PI;
    const TAU = 2 * PI;
    const PITAU = TAU + PI;
    const INFINITY = Number.POSITIVE_INFINITY;
    const RAD_PER_DEG = PI / 180;
    const HALF_PI = PI / 2;
    const QUARTER_PI = PI / 4;
    const TWO_THIRDS_PI = PI * 2 / 3;
    const log10 = Math.log10;
    const sign = Math.sign;
    function niceNum(range) {
      const niceRange = Math.pow(10, Math.floor(log10(range)));
      const fraction = range / niceRange;
      const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
      return niceFraction * niceRange;
    }
    function _factorize(value) {
      const result = [];
      const sqrt = Math.sqrt(value);
      let i;
      for (i = 1; i < sqrt; i++) {
        if (value % i === 0) {
          result.push(i);
          result.push(value / i);
        }
      }
      if (sqrt === (sqrt | 0)) {
        result.push(sqrt);
      }
      result.sort((a, b) => a - b).pop();
      return result;
    }
    function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function almostEquals(x, y, epsilon) {
      return Math.abs(x - y) < epsilon;
    }
    function almostWhole(x, epsilon) {
      const rounded = Math.round(x);
      return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
    }
    function _setMinAndMaxByKey(array, target, property) {
      let i, ilen, value;
      for (i = 0, ilen = array.length; i < ilen; i++) {
        value = array[i][property];
        if (!isNaN(value)) {
          target.min = Math.min(target.min, value);
          target.max = Math.max(target.max, value);
        }
      }
    }
    function toRadians(degrees) {
      return degrees * (PI / 180);
    }
    function toDegrees(radians) {
      return radians * (180 / PI);
    }
    function _decimalPlaces(x) {
      if (!isNumberFinite(x)) {
        return;
      }
      let e = 1;
      let p = 0;
      while (Math.round(x * e) / e !== x) {
        e *= 10;
        p++;
      }
      return p;
    }
    function getAngleFromPoint(centrePoint, anglePoint) {
      const distanceFromXCenter = anglePoint.x - centrePoint.x;
      const distanceFromYCenter = anglePoint.y - centrePoint.y;
      const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
      let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
      if (angle < (-0.5 * PI)) {
        angle += TAU;
      }
      return {
        angle,
        distance: radialDistanceFromCenter
      };
    }
    function distanceBetweenPoints(pt1, pt2) {
      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    }
    function _angleDiff(a, b) {
      return (a - b + PITAU) % TAU - PI;
    }
    function _normalizeAngle(a) {
      return (a % TAU + TAU) % TAU;
    }
    function _angleBetween(angle, start, end) {
      const a = _normalizeAngle(angle);
      const s = _normalizeAngle(start);
      const e = _normalizeAngle(end);
      const angleToStart = _normalizeAngle(s - a);
      const angleToEnd = _normalizeAngle(e - a);
      const startToAngle = _normalizeAngle(a - s);
      const endToAngle = _normalizeAngle(a - e);
      return a === s || a === e || (angleToStart > angleToEnd && startToAngle < endToAngle);
    }
    function _limitValue(value, min, max) {
      return Math.max(min, Math.min(max, value));
    }
    function _int16Range(value) {
      return _limitValue(value, -32768, 32767);
    }

    const atEdge = (t) => t === 0 || t === 1;
    const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
    const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
    const effects = {
      linear: t => t,
      easeInQuad: t => t * t,
      easeOutQuad: t => -t * (t - 2),
      easeInOutQuad: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t
        : -0.5 * ((--t) * (t - 2) - 1),
      easeInCubic: t => t * t * t,
      easeOutCubic: t => (t -= 1) * t * t + 1,
      easeInOutCubic: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t
        : 0.5 * ((t -= 2) * t * t + 2),
      easeInQuart: t => t * t * t * t,
      easeOutQuart: t => -((t -= 1) * t * t * t - 1),
      easeInOutQuart: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t * t
        : -0.5 * ((t -= 2) * t * t * t - 2),
      easeInQuint: t => t * t * t * t * t,
      easeOutQuint: t => (t -= 1) * t * t * t * t + 1,
      easeInOutQuint: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t * t * t
        : 0.5 * ((t -= 2) * t * t * t * t + 2),
      easeInSine: t => -Math.cos(t * HALF_PI) + 1,
      easeOutSine: t => Math.sin(t * HALF_PI),
      easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),
      easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),
      easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,
      easeInOutExpo: t => atEdge(t) ? t : t < 0.5
        ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))
        : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
      easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),
      easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),
      easeInOutCirc: t => ((t /= 0.5) < 1)
        ? -0.5 * (Math.sqrt(1 - t * t) - 1)
        : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
      easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
      easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
      easeInOutElastic(t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t :
          t < 0.5
            ? 0.5 * elasticIn(t * 2, s, p)
            : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
      },
      easeInBack(t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
      },
      easeOutBack(t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
      },
      easeInOutBack(t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) {
          return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
        }
        return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
      },
      easeInBounce: t => 1 - effects.easeOutBounce(1 - t),
      easeOutBounce(t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < (1 / d)) {
          return m * t * t;
        }
        if (t < (2 / d)) {
          return m * (t -= (1.5 / d)) * t + 0.75;
        }
        if (t < (2.5 / d)) {
          return m * (t -= (2.25 / d)) * t + 0.9375;
        }
        return m * (t -= (2.625 / d)) * t + 0.984375;
      },
      easeInOutBounce: t => (t < 0.5)
        ? effects.easeInBounce(t * 2) * 0.5
        : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,
    };

    /*!
     * @kurkle/color v0.1.9
     * https://github.com/kurkle/color#readme
     * (c) 2020 Jukka Kurkela
     * Released under the MIT License
     */
    const map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
    const hex = '0123456789ABCDEF';
    const h1 = (b) => hex[b & 0xF];
    const h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
    const eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));
    function isShort(v) {
    	return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
    }
    function hexParse(str) {
    	var len = str.length;
    	var ret;
    	if (str[0] === '#') {
    		if (len === 4 || len === 5) {
    			ret = {
    				r: 255 & map[str[1]] * 17,
    				g: 255 & map[str[2]] * 17,
    				b: 255 & map[str[3]] * 17,
    				a: len === 5 ? map[str[4]] * 17 : 255
    			};
    		} else if (len === 7 || len === 9) {
    			ret = {
    				r: map[str[1]] << 4 | map[str[2]],
    				g: map[str[3]] << 4 | map[str[4]],
    				b: map[str[5]] << 4 | map[str[6]],
    				a: len === 9 ? (map[str[7]] << 4 | map[str[8]]) : 255
    			};
    		}
    	}
    	return ret;
    }
    function hexString(v) {
    	var f = isShort(v) ? h1 : h2;
    	return v
    		? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')
    		: v;
    }
    function round(v) {
    	return v + 0.5 | 0;
    }
    const lim = (v, l, h) => Math.max(Math.min(v, h), l);
    function p2b(v) {
    	return lim(round(v * 2.55), 0, 255);
    }
    function n2b(v) {
    	return lim(round(v * 255), 0, 255);
    }
    function b2n(v) {
    	return lim(round(v / 2.55) / 100, 0, 1);
    }
    function n2p(v) {
    	return lim(round(v * 100), 0, 100);
    }
    const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    function rgbParse(str) {
    	const m = RGB_RE.exec(str);
    	let a = 255;
    	let r, g, b;
    	if (!m) {
    		return;
    	}
    	if (m[7] !== r) {
    		const v = +m[7];
    		a = 255 & (m[8] ? p2b(v) : v * 255);
    	}
    	r = +m[1];
    	g = +m[3];
    	b = +m[5];
    	r = 255 & (m[2] ? p2b(r) : r);
    	g = 255 & (m[4] ? p2b(g) : g);
    	b = 255 & (m[6] ? p2b(b) : b);
    	return {
    		r: r,
    		g: g,
    		b: b,
    		a: a
    	};
    }
    function rgbString(v) {
    	return v && (
    		v.a < 255
    			? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
    			: `rgb(${v.r}, ${v.g}, ${v.b})`
    	);
    }
    const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function hsl2rgbn(h, s, l) {
    	const a = s * Math.min(l, 1 - l);
    	const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    	return [f(0), f(8), f(4)];
    }
    function hsv2rgbn(h, s, v) {
    	const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    	return [f(5), f(3), f(1)];
    }
    function hwb2rgbn(h, w, b) {
    	const rgb = hsl2rgbn(h, 1, 0.5);
    	let i;
    	if (w + b > 1) {
    		i = 1 / (w + b);
    		w *= i;
    		b *= i;
    	}
    	for (i = 0; i < 3; i++) {
    		rgb[i] *= 1 - w - b;
    		rgb[i] += w;
    	}
    	return rgb;
    }
    function rgb2hsl(v) {
    	const range = 255;
    	const r = v.r / range;
    	const g = v.g / range;
    	const b = v.b / range;
    	const max = Math.max(r, g, b);
    	const min = Math.min(r, g, b);
    	const l = (max + min) / 2;
    	let h, s, d;
    	if (max !== min) {
    		d = max - min;
    		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    		h = max === r
    			? ((g - b) / d) + (g < b ? 6 : 0)
    			: max === g
    				? (b - r) / d + 2
    				: (r - g) / d + 4;
    		h = h * 60 + 0.5;
    	}
    	return [h | 0, s || 0, l];
    }
    function calln(f, a, b, c) {
    	return (
    		Array.isArray(a)
    			? f(a[0], a[1], a[2])
    			: f(a, b, c)
    	).map(n2b);
    }
    function hsl2rgb(h, s, l) {
    	return calln(hsl2rgbn, h, s, l);
    }
    function hwb2rgb(h, w, b) {
    	return calln(hwb2rgbn, h, w, b);
    }
    function hsv2rgb(h, s, v) {
    	return calln(hsv2rgbn, h, s, v);
    }
    function hue(h) {
    	return (h % 360 + 360) % 360;
    }
    function hueParse(str) {
    	const m = HUE_RE.exec(str);
    	let a = 255;
    	let v;
    	if (!m) {
    		return;
    	}
    	if (m[5] !== v) {
    		a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    	}
    	const h = hue(+m[2]);
    	const p1 = +m[3] / 100;
    	const p2 = +m[4] / 100;
    	if (m[1] === 'hwb') {
    		v = hwb2rgb(h, p1, p2);
    	} else if (m[1] === 'hsv') {
    		v = hsv2rgb(h, p1, p2);
    	} else {
    		v = hsl2rgb(h, p1, p2);
    	}
    	return {
    		r: v[0],
    		g: v[1],
    		b: v[2],
    		a: a
    	};
    }
    function rotate(v, deg) {
    	var h = rgb2hsl(v);
    	h[0] = hue(h[0] + deg);
    	h = hsl2rgb(h);
    	v.r = h[0];
    	v.g = h[1];
    	v.b = h[2];
    }
    function hslString(v) {
    	if (!v) {
    		return;
    	}
    	const a = rgb2hsl(v);
    	const h = a[0];
    	const s = n2p(a[1]);
    	const l = n2p(a[2]);
    	return v.a < 255
    		? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
    		: `hsl(${h}, ${s}%, ${l}%)`;
    }
    const map$1 = {
    	x: 'dark',
    	Z: 'light',
    	Y: 're',
    	X: 'blu',
    	W: 'gr',
    	V: 'medium',
    	U: 'slate',
    	A: 'ee',
    	T: 'ol',
    	S: 'or',
    	B: 'ra',
    	C: 'lateg',
    	D: 'ights',
    	R: 'in',
    	Q: 'turquois',
    	E: 'hi',
    	P: 'ro',
    	O: 'al',
    	N: 'le',
    	M: 'de',
    	L: 'yello',
    	F: 'en',
    	K: 'ch',
    	G: 'arks',
    	H: 'ea',
    	I: 'ightg',
    	J: 'wh'
    };
    const names = {
    	OiceXe: 'f0f8ff',
    	antiquewEte: 'faebd7',
    	aqua: 'ffff',
    	aquamarRe: '7fffd4',
    	azuY: 'f0ffff',
    	beige: 'f5f5dc',
    	bisque: 'ffe4c4',
    	black: '0',
    	blanKedOmond: 'ffebcd',
    	Xe: 'ff',
    	XeviTet: '8a2be2',
    	bPwn: 'a52a2a',
    	burlywood: 'deb887',
    	caMtXe: '5f9ea0',
    	KartYuse: '7fff00',
    	KocTate: 'd2691e',
    	cSO: 'ff7f50',
    	cSnflowerXe: '6495ed',
    	cSnsilk: 'fff8dc',
    	crimson: 'dc143c',
    	cyan: 'ffff',
    	xXe: '8b',
    	xcyan: '8b8b',
    	xgTMnPd: 'b8860b',
    	xWay: 'a9a9a9',
    	xgYF: '6400',
    	xgYy: 'a9a9a9',
    	xkhaki: 'bdb76b',
    	xmagFta: '8b008b',
    	xTivegYF: '556b2f',
    	xSange: 'ff8c00',
    	xScEd: '9932cc',
    	xYd: '8b0000',
    	xsOmon: 'e9967a',
    	xsHgYF: '8fbc8f',
    	xUXe: '483d8b',
    	xUWay: '2f4f4f',
    	xUgYy: '2f4f4f',
    	xQe: 'ced1',
    	xviTet: '9400d3',
    	dAppRk: 'ff1493',
    	dApskyXe: 'bfff',
    	dimWay: '696969',
    	dimgYy: '696969',
    	dodgerXe: '1e90ff',
    	fiYbrick: 'b22222',
    	flSOwEte: 'fffaf0',
    	foYstWAn: '228b22',
    	fuKsia: 'ff00ff',
    	gaRsbSo: 'dcdcdc',
    	ghostwEte: 'f8f8ff',
    	gTd: 'ffd700',
    	gTMnPd: 'daa520',
    	Way: '808080',
    	gYF: '8000',
    	gYFLw: 'adff2f',
    	gYy: '808080',
    	honeyMw: 'f0fff0',
    	hotpRk: 'ff69b4',
    	RdianYd: 'cd5c5c',
    	Rdigo: '4b0082',
    	ivSy: 'fffff0',
    	khaki: 'f0e68c',
    	lavFMr: 'e6e6fa',
    	lavFMrXsh: 'fff0f5',
    	lawngYF: '7cfc00',
    	NmoncEffon: 'fffacd',
    	ZXe: 'add8e6',
    	ZcSO: 'f08080',
    	Zcyan: 'e0ffff',
    	ZgTMnPdLw: 'fafad2',
    	ZWay: 'd3d3d3',
    	ZgYF: '90ee90',
    	ZgYy: 'd3d3d3',
    	ZpRk: 'ffb6c1',
    	ZsOmon: 'ffa07a',
    	ZsHgYF: '20b2aa',
    	ZskyXe: '87cefa',
    	ZUWay: '778899',
    	ZUgYy: '778899',
    	ZstAlXe: 'b0c4de',
    	ZLw: 'ffffe0',
    	lime: 'ff00',
    	limegYF: '32cd32',
    	lRF: 'faf0e6',
    	magFta: 'ff00ff',
    	maPon: '800000',
    	VaquamarRe: '66cdaa',
    	VXe: 'cd',
    	VScEd: 'ba55d3',
    	VpurpN: '9370db',
    	VsHgYF: '3cb371',
    	VUXe: '7b68ee',
    	VsprRggYF: 'fa9a',
    	VQe: '48d1cc',
    	VviTetYd: 'c71585',
    	midnightXe: '191970',
    	mRtcYam: 'f5fffa',
    	mistyPse: 'ffe4e1',
    	moccasR: 'ffe4b5',
    	navajowEte: 'ffdead',
    	navy: '80',
    	Tdlace: 'fdf5e6',
    	Tive: '808000',
    	TivedBb: '6b8e23',
    	Sange: 'ffa500',
    	SangeYd: 'ff4500',
    	ScEd: 'da70d6',
    	pOegTMnPd: 'eee8aa',
    	pOegYF: '98fb98',
    	pOeQe: 'afeeee',
    	pOeviTetYd: 'db7093',
    	papayawEp: 'ffefd5',
    	pHKpuff: 'ffdab9',
    	peru: 'cd853f',
    	pRk: 'ffc0cb',
    	plum: 'dda0dd',
    	powMrXe: 'b0e0e6',
    	purpN: '800080',
    	YbeccapurpN: '663399',
    	Yd: 'ff0000',
    	Psybrown: 'bc8f8f',
    	PyOXe: '4169e1',
    	saddNbPwn: '8b4513',
    	sOmon: 'fa8072',
    	sandybPwn: 'f4a460',
    	sHgYF: '2e8b57',
    	sHshell: 'fff5ee',
    	siFna: 'a0522d',
    	silver: 'c0c0c0',
    	skyXe: '87ceeb',
    	UXe: '6a5acd',
    	UWay: '708090',
    	UgYy: '708090',
    	snow: 'fffafa',
    	sprRggYF: 'ff7f',
    	stAlXe: '4682b4',
    	tan: 'd2b48c',
    	teO: '8080',
    	tEstN: 'd8bfd8',
    	tomato: 'ff6347',
    	Qe: '40e0d0',
    	viTet: 'ee82ee',
    	JHt: 'f5deb3',
    	wEte: 'ffffff',
    	wEtesmoke: 'f5f5f5',
    	Lw: 'ffff00',
    	LwgYF: '9acd32'
    };
    function unpack() {
    	const unpacked = {};
    	const keys = Object.keys(names);
    	const tkeys = Object.keys(map$1);
    	let i, j, k, ok, nk;
    	for (i = 0; i < keys.length; i++) {
    		ok = nk = keys[i];
    		for (j = 0; j < tkeys.length; j++) {
    			k = tkeys[j];
    			nk = nk.replace(k, map$1[k]);
    		}
    		k = parseInt(names[ok], 16);
    		unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
    	}
    	return unpacked;
    }
    let names$1;
    function nameParse(str) {
    	if (!names$1) {
    		names$1 = unpack();
    		names$1.transparent = [0, 0, 0, 0];
    	}
    	const a = names$1[str.toLowerCase()];
    	return a && {
    		r: a[0],
    		g: a[1],
    		b: a[2],
    		a: a.length === 4 ? a[3] : 255
    	};
    }
    function modHSL(v, i, ratio) {
    	if (v) {
    		let tmp = rgb2hsl(v);
    		tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    		tmp = hsl2rgb(tmp);
    		v.r = tmp[0];
    		v.g = tmp[1];
    		v.b = tmp[2];
    	}
    }
    function clone(v, proto) {
    	return v ? Object.assign(proto || {}, v) : v;
    }
    function fromObject(input) {
    	var v = {r: 0, g: 0, b: 0, a: 255};
    	if (Array.isArray(input)) {
    		if (input.length >= 3) {
    			v = {r: input[0], g: input[1], b: input[2], a: 255};
    			if (input.length > 3) {
    				v.a = n2b(input[3]);
    			}
    		}
    	} else {
    		v = clone(input, {r: 0, g: 0, b: 0, a: 1});
    		v.a = n2b(v.a);
    	}
    	return v;
    }
    function functionParse(str) {
    	if (str.charAt(0) === 'r') {
    		return rgbParse(str);
    	}
    	return hueParse(str);
    }
    class Color {
    	constructor(input) {
    		if (input instanceof Color) {
    			return input;
    		}
    		const type = typeof input;
    		let v;
    		if (type === 'object') {
    			v = fromObject(input);
    		} else if (type === 'string') {
    			v = hexParse(input) || nameParse(input) || functionParse(input);
    		}
    		this._rgb = v;
    		this._valid = !!v;
    	}
    	get valid() {
    		return this._valid;
    	}
    	get rgb() {
    		var v = clone(this._rgb);
    		if (v) {
    			v.a = b2n(v.a);
    		}
    		return v;
    	}
    	set rgb(obj) {
    		this._rgb = fromObject(obj);
    	}
    	rgbString() {
    		return this._valid ? rgbString(this._rgb) : this._rgb;
    	}
    	hexString() {
    		return this._valid ? hexString(this._rgb) : this._rgb;
    	}
    	hslString() {
    		return this._valid ? hslString(this._rgb) : this._rgb;
    	}
    	mix(color, weight) {
    		const me = this;
    		if (color) {
    			const c1 = me.rgb;
    			const c2 = color.rgb;
    			let w2;
    			const p = weight === w2 ? 0.5 : weight;
    			const w = 2 * p - 1;
    			const a = c1.a - c2.a;
    			const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    			w2 = 1 - w1;
    			c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
    			c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
    			c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
    			c1.a = p * c1.a + (1 - p) * c2.a;
    			me.rgb = c1;
    		}
    		return me;
    	}
    	clone() {
    		return new Color(this.rgb);
    	}
    	alpha(a) {
    		this._rgb.a = n2b(a);
    		return this;
    	}
    	clearer(ratio) {
    		const rgb = this._rgb;
    		rgb.a *= 1 - ratio;
    		return this;
    	}
    	greyscale() {
    		const rgb = this._rgb;
    		const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    		rgb.r = rgb.g = rgb.b = val;
    		return this;
    	}
    	opaquer(ratio) {
    		const rgb = this._rgb;
    		rgb.a *= 1 + ratio;
    		return this;
    	}
    	negate() {
    		const v = this._rgb;
    		v.r = 255 - v.r;
    		v.g = 255 - v.g;
    		v.b = 255 - v.b;
    		return this;
    	}
    	lighten(ratio) {
    		modHSL(this._rgb, 2, ratio);
    		return this;
    	}
    	darken(ratio) {
    		modHSL(this._rgb, 2, -ratio);
    		return this;
    	}
    	saturate(ratio) {
    		modHSL(this._rgb, 1, ratio);
    		return this;
    	}
    	desaturate(ratio) {
    		modHSL(this._rgb, 1, -ratio);
    		return this;
    	}
    	rotate(deg) {
    		rotate(this._rgb, deg);
    		return this;
    	}
    }
    function index_esm(input) {
    	return new Color(input);
    }

    const isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;
    function color(value) {
      return isPatternOrGradient(value) ? value : index_esm(value);
    }
    function getHoverColor(value) {
      return isPatternOrGradient(value)
        ? value
        : index_esm(value).saturate(0.5).darken(0.1).hexString();
    }

    const overrides = Object.create(null);
    const descriptors = Object.create(null);
    function getScope$1(node, key) {
      if (!key) {
        return node;
      }
      const keys = key.split('.');
      for (let i = 0, n = keys.length; i < n; ++i) {
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
      }
      return node;
    }
    function set(root, scope, values) {
      if (typeof scope === 'string') {
        return merge(getScope$1(root, scope), values);
      }
      return merge(getScope$1(root, ''), scope);
    }
    class Defaults {
      constructor(_descriptors) {
        this.animation = undefined;
        this.backgroundColor = 'rgba(0,0,0,0.1)';
        this.borderColor = 'rgba(0,0,0,0.1)';
        this.color = '#666';
        this.datasets = {};
        this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
          'mousemove',
          'mouseout',
          'click',
          'touchstart',
          'touchmove'
        ];
        this.font = {
          family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          size: 12,
          style: 'normal',
          lineHeight: 1.2,
          weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options) => getHoverColor(options.color);
        this.indexAxis = 'x';
        this.interaction = {
          mode: 'nearest',
          intersect: true
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.describe(_descriptors);
      }
      set(scope, values) {
        return set(this, scope, values);
      }
      get(scope) {
        return getScope$1(this, scope);
      }
      describe(scope, values) {
        return set(descriptors, scope, values);
      }
      override(scope, values) {
        return set(overrides, scope, values);
      }
      route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = '_' + name;
        Object.defineProperties(scopeObject, {
          [privateName]: {
            value: scopeObject[name],
            writable: true
          },
          [name]: {
            enumerable: true,
            get() {
              const local = this[privateName];
              const target = targetScopeObject[targetName];
              if (isObject(local)) {
                return Object.assign({}, target, local);
              }
              return valueOrDefault(local, target);
            },
            set(value) {
              this[privateName] = value;
            }
          }
        });
      }
    }
    var defaults = new Defaults({
      _scriptable: (name) => !name.startsWith('on'),
      _indexable: (name) => name !== 'events',
      hover: {
        _fallback: 'interaction'
      },
      interaction: {
        _scriptable: false,
        _indexable: false,
      }
    });

    function toFontString(font) {
      if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
        return null;
      }
      return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }
    function _measureText(ctx, data, gc, longest, string) {
      let textWidth = data[string];
      if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
      }
      if (textWidth > longest) {
        longest = textWidth;
      }
      return longest;
    }
    function _longestText(ctx, font, arrayOfThings, cache) {
      cache = cache || {};
      let data = cache.data = cache.data || {};
      let gc = cache.garbageCollect = cache.garbageCollect || [];
      if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
      }
      ctx.save();
      ctx.font = font;
      let longest = 0;
      const ilen = arrayOfThings.length;
      let i, j, jlen, thing, nestedThing;
      for (i = 0; i < ilen; i++) {
        thing = arrayOfThings[i];
        if (thing !== undefined && thing !== null && isArray(thing) !== true) {
          longest = _measureText(ctx, data, gc, longest, thing);
        } else if (isArray(thing)) {
          for (j = 0, jlen = thing.length; j < jlen; j++) {
            nestedThing = thing[j];
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
              longest = _measureText(ctx, data, gc, longest, nestedThing);
            }
          }
        }
      }
      ctx.restore();
      const gcLen = gc.length / 2;
      if (gcLen > arrayOfThings.length) {
        for (i = 0; i < gcLen; i++) {
          delete data[gc[i]];
        }
        gc.splice(0, gcLen);
      }
      return longest;
    }
    function _alignPixel(chart, pixel, width) {
      const devicePixelRatio = chart.currentDevicePixelRatio;
      const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    }
    function clearCanvas(canvas, ctx) {
      ctx = ctx || canvas.getContext('2d');
      ctx.save();
      ctx.resetTransform();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.restore();
    }
    function drawPoint(ctx, options, x, y) {
      let type, xOffset, yOffset, size, cornerRadius;
      const style = options.pointStyle;
      const rotation = options.rotation;
      const radius = options.radius;
      let rad = (rotation || 0) * RAD_PER_DEG;
      if (style && typeof style === 'object') {
        type = style.toString();
        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
          ctx.save();
          ctx.translate(x, y);
          ctx.rotate(rad);
          ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
          ctx.restore();
          return;
        }
      }
      if (isNaN(radius) || radius <= 0) {
        return;
      }
      ctx.beginPath();
      switch (style) {
      default:
        ctx.arc(x, y, radius, 0, TAU);
        ctx.closePath();
        break;
      case 'triangle':
        ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        ctx.closePath();
        break;
      case 'rectRounded':
        cornerRadius = radius * 0.516;
        size = radius - cornerRadius;
        xOffset = Math.cos(rad + QUARTER_PI) * size;
        yOffset = Math.sin(rad + QUARTER_PI) * size;
        ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
        ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
        ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
        ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
        ctx.closePath();
        break;
      case 'rect':
        if (!rotation) {
          size = Math.SQRT1_2 * radius;
          ctx.rect(x - size, y - size, 2 * size, 2 * size);
          break;
        }
        rad += QUARTER_PI;
      case 'rectRot':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + yOffset, y - xOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        ctx.closePath();
        break;
      case 'crossRot':
        rad += QUARTER_PI;
      case 'cross':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        break;
      case 'star':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        rad += QUARTER_PI;
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        break;
      case 'line':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        break;
      case 'dash':
        ctx.moveTo(x, y);
        ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
        break;
      }
      ctx.fill();
      if (options.borderWidth > 0) {
        ctx.stroke();
      }
    }
    function _isPointInArea(point, area, margin) {
      margin = margin || 0.5;
      return point && point.x > area.left - margin && point.x < area.right + margin &&
    		point.y > area.top - margin && point.y < area.bottom + margin;
    }
    function clipArea(ctx, area) {
      ctx.save();
      ctx.beginPath();
      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
      ctx.clip();
    }
    function unclipArea(ctx) {
      ctx.restore();
    }
    function _steppedLineTo(ctx, previous, target, flip, mode) {
      if (!previous) {
        return ctx.lineTo(target.x, target.y);
      }
      if (mode === 'middle') {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
      } else if (mode === 'after' !== !!flip) {
        ctx.lineTo(previous.x, target.y);
      } else {
        ctx.lineTo(target.x, previous.y);
      }
      ctx.lineTo(target.x, target.y);
    }
    function _bezierCurveTo(ctx, previous, target, flip) {
      if (!previous) {
        return ctx.lineTo(target.x, target.y);
      }
      ctx.bezierCurveTo(
        flip ? previous.cp1x : previous.cp2x,
        flip ? previous.cp1y : previous.cp2y,
        flip ? target.cp2x : target.cp1x,
        flip ? target.cp2y : target.cp1y,
        target.x,
        target.y);
    }
    function renderText(ctx, text, x, y, font, opts = {}) {
      const lines = isArray(text) ? text : [text];
      const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
      let i, line;
      ctx.save();
      if (opts.translation) {
        ctx.translate(opts.translation[0], opts.translation[1]);
      }
      if (!isNullOrUndef(opts.rotation)) {
        ctx.rotate(opts.rotation);
      }
      ctx.font = font.string;
      if (opts.color) {
        ctx.fillStyle = opts.color;
      }
      if (opts.textAlign) {
        ctx.textAlign = opts.textAlign;
      }
      if (opts.textBaseline) {
        ctx.textBaseline = opts.textBaseline;
      }
      for (i = 0; i < lines.length; ++i) {
        line = lines[i];
        if (stroke) {
          if (opts.strokeColor) {
            ctx.strokeStyle = opts.strokeColor;
          }
          if (!isNullOrUndef(opts.strokeWidth)) {
            ctx.lineWidth = opts.strokeWidth;
          }
          ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        if (opts.strikethrough || opts.underline) {
          const metrics = ctx.measureText(line);
          const left = x - metrics.actualBoundingBoxLeft;
          const right = x + metrics.actualBoundingBoxRight;
          const top = y - metrics.actualBoundingBoxAscent;
          const bottom = y + metrics.actualBoundingBoxDescent;
          const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
          ctx.strokeStyle = ctx.fillStyle;
          ctx.beginPath();
          ctx.lineWidth = opts.decorationWidth || 2;
          ctx.moveTo(left, yDecoration);
          ctx.lineTo(right, yDecoration);
          ctx.stroke();
        }
        y += font.lineHeight;
      }
      ctx.restore();
    }
    function addRoundedRectPath(ctx, rect) {
      const {x, y, w, h, radius} = rect;
      ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
      ctx.lineTo(x, y + h - radius.bottomLeft);
      ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
      ctx.lineTo(x + w - radius.bottomRight, y + h);
      ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
      ctx.lineTo(x + w, y + radius.topRight);
      ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
      ctx.lineTo(x + radius.topLeft, y);
    }

    const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
    function toLineHeight(value, size) {
      const matches = ('' + value).match(LINE_HEIGHT);
      if (!matches || matches[1] === 'normal') {
        return size * 1.2;
      }
      value = +matches[2];
      switch (matches[3]) {
      case 'px':
        return value;
      case '%':
        value /= 100;
        break;
      }
      return size * value;
    }
    const numberOrZero$1 = v => +v || 0;
    function _readValueToProps(value, props) {
      const ret = {};
      const objProps = isObject(props);
      const keys = objProps ? Object.keys(props) : props;
      const read = isObject(value)
        ? objProps
          ? prop => valueOrDefault(value[prop], value[props[prop]])
          : prop => value[prop]
        : () => value;
      for (const prop of keys) {
        ret[prop] = numberOrZero$1(read(prop));
      }
      return ret;
    }
    function toTRBL(value) {
      return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});
    }
    function toTRBLCorners(value) {
      return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
    }
    function toPadding(value) {
      const obj = toTRBL(value);
      obj.width = obj.left + obj.right;
      obj.height = obj.top + obj.bottom;
      return obj;
    }
    function toFont(options, fallback) {
      options = options || {};
      fallback = fallback || defaults.font;
      let size = valueOrDefault(options.size, fallback.size);
      if (typeof size === 'string') {
        size = parseInt(size, 10);
      }
      let style = valueOrDefault(options.style, fallback.style);
      if (style && !('' + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = '';
      }
      const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ''
      };
      font.string = toFontString(font);
      return font;
    }
    function resolve(inputs, context, index, info) {
      let cacheable = true;
      let i, ilen, value;
      for (i = 0, ilen = inputs.length; i < ilen; ++i) {
        value = inputs[i];
        if (value === undefined) {
          continue;
        }
        if (context !== undefined && typeof value === 'function') {
          value = value(context);
          cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
          value = value[index % value.length];
          cacheable = false;
        }
        if (value !== undefined) {
          if (info && !cacheable) {
            info.cacheable = false;
          }
          return value;
        }
      }
    }
    function _addGrace(minmax, grace) {
      const {min, max} = minmax;
      return {
        min: min - Math.abs(toDimension(grace, min)),
        max: max + toDimension(grace, max)
      };
    }

    function _lookup(table, value, cmp) {
      cmp = cmp || ((index) => table[index] < value);
      let hi = table.length - 1;
      let lo = 0;
      let mid;
      while (hi - lo > 1) {
        mid = (lo + hi) >> 1;
        if (cmp(mid)) {
          lo = mid;
        } else {
          hi = mid;
        }
      }
      return {lo, hi};
    }
    const _lookupByKey = (table, key, value) =>
      _lookup(table, value, index => table[index][key] < value);
    const _rlookupByKey = (table, key, value) =>
      _lookup(table, value, index => table[index][key] >= value);
    function _filterBetween(values, min, max) {
      let start = 0;
      let end = values.length;
      while (start < end && values[start] < min) {
        start++;
      }
      while (end > start && values[end - 1] > max) {
        end--;
      }
      return start > 0 || end < values.length
        ? values.slice(start, end)
        : values;
    }
    const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
    function listenArrayEvents(array, listener) {
      if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
      }
      Object.defineProperty(array, '_chartjs', {
        configurable: true,
        enumerable: false,
        value: {
          listeners: [listener]
        }
      });
      arrayEvents.forEach((key) => {
        const method = '_onData' + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
          configurable: true,
          enumerable: false,
          value(...args) {
            const res = base.apply(this, args);
            array._chartjs.listeners.forEach((object) => {
              if (typeof object[method] === 'function') {
                object[method](...args);
              }
            });
            return res;
          }
        });
      });
    }
    function unlistenArrayEvents(array, listener) {
      const stub = array._chartjs;
      if (!stub) {
        return;
      }
      const listeners = stub.listeners;
      const index = listeners.indexOf(listener);
      if (index !== -1) {
        listeners.splice(index, 1);
      }
      if (listeners.length > 0) {
        return;
      }
      arrayEvents.forEach((key) => {
        delete array[key];
      });
      delete array._chartjs;
    }
    function _arrayUnique(items) {
      const set = new Set();
      let i, ilen;
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        set.add(items[i]);
      }
      if (set.size === ilen) {
        return items;
      }
      const result = [];
      set.forEach(item => {
        result.push(item);
      });
      return result;
    }

    function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
      if (!defined(fallback)) {
        fallback = _resolve('_fallback', scopes);
      }
      const cache = {
        [Symbol.toStringTag]: 'Object',
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: rootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),
      };
      return new Proxy(cache, {
        deleteProperty(target, prop) {
          delete target[prop];
          delete target._keys;
          delete scopes[0][prop];
          return true;
        },
        get(target, prop) {
          return _cached(target, prop,
            () => _resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        getOwnPropertyDescriptor(target, prop) {
          return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        getPrototypeOf() {
          return Reflect.getPrototypeOf(scopes[0]);
        },
        has(target, prop) {
          return getKeysFromAllScopes(target).includes(prop);
        },
        ownKeys(target) {
          return getKeysFromAllScopes(target);
        },
        set(target, prop, value) {
          const storage = target._storage || (target._storage = getTarget());
          storage[prop] = value;
          delete target[prop];
          delete target._keys;
          return true;
        }
      });
    }
    function _attachContext(proxy, context, subProxy, descriptorDefaults) {
      const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
      };
      return new Proxy(cache, {
        deleteProperty(target, prop) {
          delete target[prop];
          delete proxy[prop];
          return true;
        },
        get(target, prop, receiver) {
          return _cached(target, prop,
            () => _resolveWithContext(target, prop, receiver));
        },
        getOwnPropertyDescriptor(target, prop) {
          return target._descriptors.allKeys
            ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined
            : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        getPrototypeOf() {
          return Reflect.getPrototypeOf(proxy);
        },
        has(target, prop) {
          return Reflect.has(proxy, prop);
        },
        ownKeys() {
          return Reflect.ownKeys(proxy);
        },
        set(target, prop, value) {
          proxy[prop] = value;
          delete target[prop];
          return true;
        }
      });
    }
    function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {
      const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;
      return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
      };
    }
    const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
    const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters';
    function _cached(target, prop, resolve) {
      let value = target[prop];
      if (defined(value)) {
        return value;
      }
      value = resolve();
      if (defined(value)) {
        target[prop] = value;
      }
      return value;
    }
    function _resolveWithContext(target, prop, receiver) {
      const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
      let value = _proxy[prop];
      if (isFunction(value) && descriptors.isScriptable(prop)) {
        value = _resolveScriptable(prop, value, target, receiver);
      }
      if (isArray(value) && value.length) {
        value = _resolveArray(prop, value, target, descriptors.isIndexable);
      }
      if (needsSubResolver(prop, value)) {
        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
      }
      return value;
    }
    function _resolveScriptable(prop, value, target, receiver) {
      const {_proxy, _context, _subProxy, _stack} = target;
      if (_stack.has(prop)) {
        throw new Error('Recursion detected: ' + [..._stack].join('->') + '->' + prop);
      }
      _stack.add(prop);
      value = value(_context, _subProxy || receiver);
      _stack.delete(prop);
      if (isObject(value)) {
        value = createSubResolver(_proxy._scopes, _proxy, prop, value);
      }
      return value;
    }
    function _resolveArray(prop, value, target, isIndexable) {
      const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
      if (defined(_context.index) && isIndexable(prop)) {
        value = value[_context.index % value.length];
      } else if (isObject(value[0])) {
        const arr = value;
        const scopes = _proxy._scopes.filter(s => s !== arr);
        value = [];
        for (const item of arr) {
          const resolver = createSubResolver(scopes, _proxy, prop, item);
          value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
      }
      return value;
    }
    function resolveFallback(fallback, prop, value) {
      return isFunction(fallback) ? fallback(prop, value) : fallback;
    }
    const getScope = (key, parent) => key === true ? parent
      : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
    function addScopes(set, parentScopes, key, parentFallback) {
      for (const parent of parentScopes) {
        const scope = getScope(key, parent);
        if (scope) {
          set.add(scope);
          const fallback = resolveFallback(scope._fallback, key, scope);
          if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
            return fallback;
          }
        } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
          return null;
        }
      }
      return false;
    }
    function createSubResolver(parentScopes, resolver, prop, value) {
      const rootScopes = resolver._rootScopes;
      const fallback = resolveFallback(resolver._fallback, prop, value);
      const allScopes = [...parentScopes, ...rootScopes];
      const set = new Set();
      set.add(value);
      let key = addScopesFromKey(set, allScopes, prop, fallback || prop);
      if (key === null) {
        return false;
      }
      if (defined(fallback) && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key);
        if (key === null) {
          return false;
        }
      }
      return _createResolver([...set], [''], rootScopes, fallback, () => {
        const parent = resolver._getTarget();
        if (!(prop in parent)) {
          parent[prop] = {};
        }
        return parent[prop];
      });
    }
    function addScopesFromKey(set, allScopes, key, fallback) {
      while (key) {
        key = addScopes(set, allScopes, key, fallback);
      }
      return key;
    }
    function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
      let value;
      for (const prefix of prefixes) {
        value = _resolve(readKey(prefix, prop), scopes);
        if (defined(value)) {
          return needsSubResolver(prop, value)
            ? createSubResolver(scopes, proxy, prop, value)
            : value;
        }
      }
    }
    function _resolve(key, scopes) {
      for (const scope of scopes) {
        if (!scope) {
          continue;
        }
        const value = scope[key];
        if (defined(value)) {
          return value;
        }
      }
    }
    function getKeysFromAllScopes(target) {
      let keys = target._keys;
      if (!keys) {
        keys = target._keys = resolveKeysFromAllScopes(target._scopes);
      }
      return keys;
    }
    function resolveKeysFromAllScopes(scopes) {
      const set = new Set();
      for (const scope of scopes) {
        for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {
          set.add(key);
        }
      }
      return [...set];
    }

    const EPSILON = Number.EPSILON || 1e-14;
    const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
    function splineCurve(firstPoint, middlePoint, afterPoint, t) {
      const previous = firstPoint.skip ? middlePoint : firstPoint;
      const current = middlePoint;
      const next = afterPoint.skip ? middlePoint : afterPoint;
      const d01 = distanceBetweenPoints(current, previous);
      const d12 = distanceBetweenPoints(next, current);
      let s01 = d01 / (d01 + d12);
      let s12 = d12 / (d01 + d12);
      s01 = isNaN(s01) ? 0 : s01;
      s12 = isNaN(s12) ? 0 : s12;
      const fa = t * s01;
      const fb = t * s12;
      return {
        previous: {
          x: current.x - fa * (next.x - previous.x),
          y: current.y - fa * (next.y - previous.y)
        },
        next: {
          x: current.x + fb * (next.x - previous.x),
          y: current.y + fb * (next.y - previous.y)
        }
      };
    }
    function monotoneAdjust(points, deltaK, mK) {
      const pointsLen = points.length;
      let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (let i = 0; i < pointsLen - 1; ++i) {
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) {
          continue;
        }
        if (almostEquals(deltaK[i], 0, EPSILON)) {
          mK[i] = mK[i + 1] = 0;
          continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) {
          continue;
        }
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
      }
    }
    function monotoneCompute(points, mK) {
      const pointsLen = points.length;
      let deltaX, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (let i = 0; i < pointsLen; ++i) {
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
          continue;
        }
        const {x, y} = pointCurrent;
        if (pointBefore) {
          deltaX = (x - pointBefore.x) / 3;
          pointCurrent.cp1x = x - deltaX;
          pointCurrent.cp1y = y - deltaX * mK[i];
        }
        if (pointAfter) {
          deltaX = (pointAfter.x - x) / 3;
          pointCurrent.cp2x = x + deltaX;
          pointCurrent.cp2y = y + deltaX * mK[i];
        }
      }
    }
    function splineCurveMonotone(points) {
      const pointsLen = points.length;
      const deltaK = Array(pointsLen).fill(0);
      const mK = Array(pointsLen);
      let i, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (i = 0; i < pointsLen; ++i) {
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
          continue;
        }
        if (pointAfter) {
          const slopeDeltaX = (pointAfter.x - pointCurrent.x);
          deltaK[i] = slopeDeltaX !== 0 ? (pointAfter.y - pointCurrent.y) / slopeDeltaX : 0;
        }
        mK[i] = !pointBefore ? deltaK[i]
          : !pointAfter ? deltaK[i - 1]
          : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0
          : (deltaK[i - 1] + deltaK[i]) / 2;
      }
      monotoneAdjust(points, deltaK, mK);
      monotoneCompute(points, mK);
    }
    function capControlPoint(pt, min, max) {
      return Math.max(Math.min(pt, max), min);
    }
    function capBezierPoints(points, area) {
      let i, ilen, point, inArea, inAreaPrev;
      let inAreaNext = _isPointInArea(points[0], area);
      for (i = 0, ilen = points.length; i < ilen; ++i) {
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) {
          continue;
        }
        point = points[i];
        if (inAreaPrev) {
          point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
          point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
          point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
          point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
      }
    }
    function _updateBezierControlPoints(points, options, area, loop) {
      let i, ilen, point, controlPoints;
      if (options.spanGaps) {
        points = points.filter((pt) => !pt.skip);
      }
      if (options.cubicInterpolationMode === 'monotone') {
        splineCurveMonotone(points);
      } else {
        let prev = loop ? points[points.length - 1] : points[0];
        for (i = 0, ilen = points.length; i < ilen; ++i) {
          point = points[i];
          controlPoints = splineCurve(
            prev,
            point,
            points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],
            options.tension
          );
          point.cp1x = controlPoints.previous.x;
          point.cp1y = controlPoints.previous.y;
          point.cp2x = controlPoints.next.x;
          point.cp2y = controlPoints.next.y;
          prev = point;
        }
      }
      if (options.capBezierPoints) {
        capBezierPoints(points, area);
      }
    }

    function _getParentNode(domNode) {
      let parent = domNode.parentNode;
      if (parent && parent.toString() === '[object ShadowRoot]') {
        parent = parent.host;
      }
      return parent;
    }
    function parseMaxStyle(styleValue, node, parentProperty) {
      let valueInPixels;
      if (typeof styleValue === 'string') {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf('%') !== -1) {
          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
        }
      } else {
        valueInPixels = styleValue;
      }
      return valueInPixels;
    }
    const getComputedStyle = (element) => window.getComputedStyle(element, null);
    function getStyle(el, property) {
      return getComputedStyle(el).getPropertyValue(property);
    }
    const positions = ['top', 'right', 'bottom', 'left'];
    function getPositionedStyle(styles, style, suffix) {
      const result = {};
      suffix = suffix ? '-' + suffix : '';
      for (let i = 0; i < 4; i++) {
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
      }
      result.width = result.left + result.right;
      result.height = result.top + result.bottom;
      return result;
    }
    const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);
    function getCanvasPosition(evt, canvas) {
      const e = evt.native || evt;
      const touches = e.touches;
      const source = touches && touches.length ? touches[0] : e;
      const {offsetX, offsetY} = source;
      let box = false;
      let x, y;
      if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
      } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
      }
      return {x, y, box};
    }
    function getRelativePosition$1(evt, chart) {
      const {canvas, currentDevicePixelRatio} = chart;
      const style = getComputedStyle(canvas);
      const borderBox = style.boxSizing === 'border-box';
      const paddings = getPositionedStyle(style, 'padding');
      const borders = getPositionedStyle(style, 'border', 'width');
      const {x, y, box} = getCanvasPosition(evt, canvas);
      const xOffset = paddings.left + (box && borders.left);
      const yOffset = paddings.top + (box && borders.top);
      let {width, height} = chart;
      if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
      }
      return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
      };
    }
    function getContainerSize(canvas, width, height) {
      let maxWidth, maxHeight;
      if (width === undefined || height === undefined) {
        const container = _getParentNode(canvas);
        if (!container) {
          width = canvas.clientWidth;
          height = canvas.clientHeight;
        } else {
          const rect = container.getBoundingClientRect();
          const containerStyle = getComputedStyle(container);
          const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
          const containerPadding = getPositionedStyle(containerStyle, 'padding');
          width = rect.width - containerPadding.width - containerBorder.width;
          height = rect.height - containerPadding.height - containerBorder.height;
          maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
          maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
        }
      }
      return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
      };
    }
    const round1 = v => Math.round(v * 10) / 10;
    function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
      const style = getComputedStyle(canvas);
      const margins = getPositionedStyle(style, 'margin');
      const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
      const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
      const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
      let {width, height} = containerSize;
      if (style.boxSizing === 'content-box') {
        const borders = getPositionedStyle(style, 'border', 'width');
        const paddings = getPositionedStyle(style, 'padding');
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
      }
      width = Math.max(0, width - margins.width);
      height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
      width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
      height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
      if (width && !height) {
        height = round1(width / 2);
      }
      return {
        width,
        height
      };
    }
    function retinaScale(chart, forceRatio, forceStyle) {
      const pixelRatio = chart.currentDevicePixelRatio = forceRatio || 1;
      const {canvas, width, height} = chart;
      canvas.height = height * pixelRatio;
      canvas.width = width * pixelRatio;
      chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
      if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {
        canvas.style.height = height + 'px';
        canvas.style.width = width + 'px';
      }
    }
    const supportsEventListenerOptions = (function() {
      let passiveSupported = false;
      try {
        const options = {
          get passive() {
            passiveSupported = true;
            return false;
          }
        };
        window.addEventListener('test', null, options);
        window.removeEventListener('test', null, options);
      } catch (e) {
      }
      return passiveSupported;
    }());
    function readUsedSize(element, property) {
      const value = getStyle(element, property);
      const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
      return matches ? +matches[1] : undefined;
    }

    function _pointInLine(p1, p2, t, mode) {
      return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
      };
    }
    function _steppedInterpolation(p1, p2, t, mode) {
      return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y
        : mode === 'after' ? t < 1 ? p1.y : p2.y
        : t > 0 ? p2.y : p1.y
      };
    }
    function _bezierInterpolation(p1, p2, t, mode) {
      const cp1 = {x: p1.cp2x, y: p1.cp2y};
      const cp2 = {x: p2.cp1x, y: p2.cp1y};
      const a = _pointInLine(p1, cp1, t);
      const b = _pointInLine(cp1, cp2, t);
      const c = _pointInLine(cp2, p2, t);
      const d = _pointInLine(a, b, t);
      const e = _pointInLine(b, c, t);
      return _pointInLine(d, e, t);
    }

    const intlCache = new Map();
    function getNumberFormat(locale, options) {
      options = options || {};
      const cacheKey = locale + JSON.stringify(options);
      let formatter = intlCache.get(cacheKey);
      if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
      }
      return formatter;
    }
    function formatNumber(num, locale, options) {
      return getNumberFormat(locale, options).format(num);
    }

    const getRightToLeftAdapter = function(rectX, width) {
      return {
        x(x) {
          return rectX + rectX + width - x;
        },
        setWidth(w) {
          width = w;
        },
        textAlign(align) {
          if (align === 'center') {
            return align;
          }
          return align === 'right' ? 'left' : 'right';
        },
        xPlus(x, value) {
          return x - value;
        },
        leftForLtr(x, itemWidth) {
          return x - itemWidth;
        },
      };
    };
    const getLeftToRightAdapter = function() {
      return {
        x(x) {
          return x;
        },
        setWidth(w) {
        },
        textAlign(align) {
          return align;
        },
        xPlus(x, value) {
          return x + value;
        },
        leftForLtr(x, _itemWidth) {
          return x;
        },
      };
    };
    function getRtlAdapter(rtl, rectX, width) {
      return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
    }
    function overrideTextDirection(ctx, direction) {
      let style, original;
      if (direction === 'ltr' || direction === 'rtl') {
        style = ctx.canvas.style;
        original = [
          style.getPropertyValue('direction'),
          style.getPropertyPriority('direction'),
        ];
        style.setProperty('direction', direction, 'important');
        ctx.prevTextDirection = original;
      }
    }
    function restoreTextDirection(ctx, original) {
      if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty('direction', original[0], original[1]);
      }
    }

    function propertyFn(property) {
      if (property === 'angle') {
        return {
          between: _angleBetween,
          compare: _angleDiff,
          normalize: _normalizeAngle,
        };
      }
      return {
        between: (n, s, e) => n >= Math.min(s, e) && n <= Math.max(e, s),
        compare: (a, b) => a - b,
        normalize: x => x
      };
    }
    function normalizeSegment({start, end, count, loop, style}) {
      return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
      };
    }
    function getSegment(segment, points, bounds) {
      const {property, start: startBound, end: endBound} = bounds;
      const {between, normalize} = propertyFn(property);
      const count = points.length;
      let {start, end, loop} = segment;
      let i, ilen;
      if (loop) {
        start += count;
        end += count;
        for (i = 0, ilen = count; i < ilen; ++i) {
          if (!between(normalize(points[start % count][property]), startBound, endBound)) {
            break;
          }
          start--;
          end--;
        }
        start %= count;
        end %= count;
      }
      if (end < start) {
        end += count;
      }
      return {start, end, loop, style: segment.style};
    }
    function _boundSegment(segment, points, bounds) {
      if (!bounds) {
        return [segment];
      }
      const {property, start: startBound, end: endBound} = bounds;
      const count = points.length;
      const {compare, between, normalize} = propertyFn(property);
      const {start, end, loop, style} = getSegment(segment, points, bounds);
      const result = [];
      let inside = false;
      let subStart = null;
      let value, point, prevValue;
      const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
      const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
      const shouldStart = () => inside || startIsBefore();
      const shouldStop = () => !inside || endIsBefore();
      for (let i = start, prev = start; i <= end; ++i) {
        point = points[i % count];
        if (point.skip) {
          continue;
        }
        value = normalize(point[property]);
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) {
          subStart = compare(value, startBound) === 0 ? i : prev;
        }
        if (subStart !== null && shouldStop()) {
          result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));
          subStart = null;
        }
        prev = i;
        prevValue = value;
      }
      if (subStart !== null) {
        result.push(normalizeSegment({start: subStart, end, loop, count, style}));
      }
      return result;
    }
    function _boundSegments(line, bounds) {
      const result = [];
      const segments = line.segments;
      for (let i = 0; i < segments.length; i++) {
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) {
          result.push(...sub);
        }
      }
      return result;
    }
    function findStartAndEnd(points, count, loop, spanGaps) {
      let start = 0;
      let end = count - 1;
      if (loop && !spanGaps) {
        while (start < count && !points[start].skip) {
          start++;
        }
      }
      while (start < count && points[start].skip) {
        start++;
      }
      start %= count;
      if (loop) {
        end += start;
      }
      while (end > start && points[end % count].skip) {
        end--;
      }
      end %= count;
      return {start, end};
    }
    function solidSegments(points, start, max, loop) {
      const count = points.length;
      const result = [];
      let last = start;
      let prev = points[start];
      let end;
      for (end = start + 1; end <= max; ++end) {
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
          if (!prev.skip) {
            loop = false;
            result.push({start: start % count, end: (end - 1) % count, loop});
            start = last = cur.stop ? end : null;
          }
        } else {
          last = end;
          if (prev.skip) {
            start = end;
          }
        }
        prev = cur;
      }
      if (last !== null) {
        result.push({start: start % count, end: last % count, loop});
      }
      return result;
    }
    function _computeSegments(line, segmentOptions) {
      const points = line.points;
      const spanGaps = line.options.spanGaps;
      const count = points.length;
      if (!count) {
        return [];
      }
      const loop = !!line._loop;
      const {start, end} = findStartAndEnd(points, count, loop, spanGaps);
      if (spanGaps === true) {
        return splitByStyles([{start, end, loop}], points, segmentOptions);
      }
      const max = end < start ? end + count : end;
      const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
      return splitByStyles(solidSegments(points, start, max, completeLoop), points, segmentOptions);
    }
    function splitByStyles(segments, points, segmentOptions) {
      if (!segmentOptions || !segmentOptions.setContext || !points) {
        return segments;
      }
      return doSplitByStyles(segments, points, segmentOptions);
    }
    function doSplitByStyles(segments, points, segmentOptions) {
      const count = points.length;
      const result = [];
      let start = segments[0].start;
      let i = start;
      for (const segment of segments) {
        let prevStyle, style;
        let prev = points[start % count];
        for (i = start + 1; i <= segment.end; i++) {
          const pt = points[i % count];
          style = readStyle(segmentOptions.setContext({type: 'segment', p0: prev, p1: pt}));
          if (styleChanged(style, prevStyle)) {
            result.push({start: start, end: i - 1, loop: segment.loop, style: prevStyle});
            prevStyle = style;
            start = i - 1;
          }
          prev = pt;
          prevStyle = style;
        }
        if (start < i - 1) {
          result.push({start, end: i - 1, loop: segment.loop, style});
          start = i - 1;
        }
      }
      return result;
    }
    function readStyle(options) {
      return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
      };
    }
    function styleChanged(style, prevStyle) {
      return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
    }

    /*!
     * Chart.js v3.2.0
     * https://www.chartjs.org
     * (c) 2021 Chart.js Contributors
     * Released under the MIT License
     */

    class Animator {
      constructor() {
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
      }
      _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach(fn => fn({
          chart,
          initial: anims.initial,
          numSteps,
          currentStep: Math.min(date - anims.start, numSteps)
        }));
      }
      _refresh() {
        const me = this;
        if (me._request) {
          return;
        }
        me._running = true;
        me._request = requestAnimFrame.call(window, () => {
          me._update();
          me._request = null;
          if (me._running) {
            me._refresh();
          }
        });
      }
      _update(date = Date.now()) {
        const me = this;
        let remaining = 0;
        me._charts.forEach((anims, chart) => {
          if (!anims.running || !anims.items.length) {
            return;
          }
          const items = anims.items;
          let i = items.length - 1;
          let draw = false;
          let item;
          for (; i >= 0; --i) {
            item = items[i];
            if (item._active) {
              if (item._total > anims.duration) {
                anims.duration = item._total;
              }
              item.tick(date);
              draw = true;
            } else {
              items[i] = items[items.length - 1];
              items.pop();
            }
          }
          if (draw) {
            chart.draw();
            me._notify(chart, anims, date, 'progress');
          }
          if (!items.length) {
            anims.running = false;
            me._notify(chart, anims, date, 'complete');
            anims.initial = false;
          }
          remaining += items.length;
        });
        me._lastDate = date;
        if (remaining === 0) {
          me._running = false;
        }
      }
      _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
          anims = {
            running: false,
            initial: true,
            items: [],
            listeners: {
              complete: [],
              progress: []
            }
          };
          charts.set(chart, anims);
        }
        return anims;
      }
      listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
      }
      add(chart, items) {
        if (!items || !items.length) {
          return;
        }
        this._getAnims(chart).items.push(...items);
      }
      has(chart) {
        return this._getAnims(chart).items.length > 0;
      }
      start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) {
          return;
        }
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
        this._refresh();
      }
      running(chart) {
        if (!this._running) {
          return false;
        }
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) {
          return false;
        }
        return true;
      }
      stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) {
          return;
        }
        const items = anims.items;
        let i = items.length - 1;
        for (; i >= 0; --i) {
          items[i].cancel();
        }
        anims.items = [];
        this._notify(chart, anims, Date.now(), 'complete');
      }
      remove(chart) {
        return this._charts.delete(chart);
      }
    }
    var animator = new Animator();

    const transparent = 'transparent';
    const interpolators = {
      boolean(from, to, factor) {
        return factor > 0.5 ? to : from;
      },
      color(from, to, factor) {
        const c0 = color(from || transparent);
        const c1 = c0.valid && color(to || transparent);
        return c1 && c1.valid
          ? c1.mix(c0, factor).hexString()
          : to;
      },
      number(from, to, factor) {
        return from + (to - from) * factor;
      }
    };
    class Animation {
      constructor(cfg, target, prop, to) {
        const currentValue = target[prop];
        to = resolve([cfg.to, to, currentValue, cfg.from]);
        const from = resolve([cfg.from, currentValue, to]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = effects[cfg.easing] || effects.linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
      }
      active() {
        return this._active;
      }
      update(cfg, to, date) {
        const me = this;
        if (me._active) {
          me._notify(false);
          const currentValue = me._target[me._prop];
          const elapsed = date - me._start;
          const remain = me._duration - elapsed;
          me._start = date;
          me._duration = Math.floor(Math.max(remain, cfg.duration));
          me._total += elapsed;
          me._loop = !!cfg.loop;
          me._to = resolve([cfg.to, to, currentValue, cfg.from]);
          me._from = resolve([cfg.from, currentValue, to]);
        }
      }
      cancel() {
        const me = this;
        if (me._active) {
          me.tick(Date.now());
          me._active = false;
          me._notify(false);
        }
      }
      tick(date) {
        const me = this;
        const elapsed = date - me._start;
        const duration = me._duration;
        const prop = me._prop;
        const from = me._from;
        const loop = me._loop;
        const to = me._to;
        let factor;
        me._active = from !== to && (loop || (elapsed < duration));
        if (!me._active) {
          me._target[prop] = to;
          me._notify(true);
          return;
        }
        if (elapsed < 0) {
          me._target[prop] = from;
          return;
        }
        factor = (elapsed / duration) % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = me._easing(Math.min(1, Math.max(0, factor)));
        me._target[prop] = me._fn(from, to, factor);
      }
      wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej) => {
          promises.push({res, rej});
        });
      }
      _notify(resolved) {
        const method = resolved ? 'res' : 'rej';
        const promises = this._promises || [];
        for (let i = 0; i < promises.length; i++) {
          promises[i][method]();
        }
      }
    }

    const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
    const colors = ['color', 'borderColor', 'backgroundColor'];
    defaults.set('animation', {
      delay: undefined,
      duration: 1000,
      easing: 'easeOutQuart',
      fn: undefined,
      from: undefined,
      loop: undefined,
      to: undefined,
      type: undefined,
    });
    const animationOptions = Object.keys(defaults.animation);
    defaults.describe('animation', {
      _fallback: false,
      _indexable: false,
      _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',
    });
    defaults.set('animations', {
      colors: {
        type: 'color',
        properties: colors
      },
      numbers: {
        type: 'number',
        properties: numbers
      },
    });
    defaults.describe('animations', {
      _fallback: 'animation',
    });
    defaults.set('transitions', {
      active: {
        animation: {
          duration: 400
        }
      },
      resize: {
        animation: {
          duration: 0
        }
      },
      show: {
        animations: {
          colors: {
            from: 'transparent'
          },
          visible: {
            type: 'boolean',
            duration: 0
          },
        }
      },
      hide: {
        animations: {
          colors: {
            to: 'transparent'
          },
          visible: {
            type: 'boolean',
            easing: 'linear',
            fn: v => v | 0
          },
        }
      }
    });
    class Animations {
      constructor(chart, config) {
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
      }
      configure(config) {
        if (!isObject(config)) {
          return;
        }
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach(key => {
          const cfg = config[key];
          if (!isObject(cfg)) {
            return;
          }
          const resolved = {};
          for (const option of animationOptions) {
            resolved[option] = cfg[option];
          }
          (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {
            if (prop === key || !animatedProps.has(prop)) {
              animatedProps.set(prop, resolved);
            }
          });
        });
      }
      _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) {
          return [];
        }
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) {
          awaitAll(target.options.$animations, newOptions).then(() => {
            target.options = newOptions;
          }, () => {
          });
        }
        return animations;
      }
      _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for (i = props.length - 1; i >= 0; --i) {
          const prop = props[i];
          if (prop.charAt(0) === '$') {
            continue;
          }
          if (prop === 'options') {
            animations.push(...this._animateOptions(target, values));
            continue;
          }
          const value = values[prop];
          let animation = running[prop];
          const cfg = animatedProps.get(prop);
          if (animation) {
            if (cfg && animation.active()) {
              animation.update(cfg, value, date);
              continue;
            } else {
              animation.cancel();
            }
          }
          if (!cfg || !cfg.duration) {
            target[prop] = value;
            continue;
          }
          running[prop] = animation = new Animation(cfg, target, prop, value);
          animations.push(animation);
        }
        return animations;
      }
      update(target, values) {
        if (this._properties.size === 0) {
          Object.assign(target, values);
          return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
          animator.add(this._chart, animations);
          return true;
        }
      }
    }
    function awaitAll(animations, properties) {
      const running = [];
      const keys = Object.keys(properties);
      for (let i = 0; i < keys.length; i++) {
        const anim = animations[keys[i]];
        if (anim && anim.active()) {
          running.push(anim.wait());
        }
      }
      return Promise.all(running);
    }
    function resolveTargetOptions(target, newOptions) {
      if (!newOptions) {
        return;
      }
      let options = target.options;
      if (!options) {
        target.options = newOptions;
        return;
      }
      if (options.$shared) {
        target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});
      }
      return options;
    }

    function scaleClip(scale, allowedOverflow) {
      const opts = scale && scale.options || {};
      const reverse = opts.reverse;
      const min = opts.min === undefined ? allowedOverflow : 0;
      const max = opts.max === undefined ? allowedOverflow : 0;
      return {
        start: reverse ? max : min,
        end: reverse ? min : max
      };
    }
    function defaultClip(xScale, yScale, allowedOverflow) {
      if (allowedOverflow === false) {
        return false;
      }
      const x = scaleClip(xScale, allowedOverflow);
      const y = scaleClip(yScale, allowedOverflow);
      return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
      };
    }
    function toClip(value) {
      let t, r, b, l;
      if (isObject(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
      } else {
        t = r = b = l = value;
      }
      return {
        top: t,
        right: r,
        bottom: b,
        left: l
      };
    }
    function getSortedDatasetIndices(chart, filterVisible) {
      const keys = [];
      const metasets = chart._getSortedDatasetMetas(filterVisible);
      let i, ilen;
      for (i = 0, ilen = metasets.length; i < ilen; ++i) {
        keys.push(metasets[i].index);
      }
      return keys;
    }
    function applyStack(stack, value, dsIndex, options) {
      const keys = stack.keys;
      const singleMode = options.mode === 'single';
      let i, ilen, datasetIndex, otherValue;
      if (value === null) {
        return;
      }
      for (i = 0, ilen = keys.length; i < ilen; ++i) {
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
          if (options.all) {
            continue;
          }
          break;
        }
        otherValue = stack.values[datasetIndex];
        if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {
          value += otherValue;
        }
      }
      return value;
    }
    function convertObjectDataToArray(data) {
      const keys = Object.keys(data);
      const adata = new Array(keys.length);
      let i, ilen, key;
      for (i = 0, ilen = keys.length; i < ilen; ++i) {
        key = keys[i];
        adata[i] = {
          x: key,
          y: data[key]
        };
      }
      return adata;
    }
    function isStacked(scale, meta) {
      const stacked = scale && scale.options.stacked;
      return stacked || (stacked === undefined && meta.stack !== undefined);
    }
    function getStackKey(indexScale, valueScale, meta) {
      return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
    }
    function getUserBounds(scale) {
      const {min, max, minDefined, maxDefined} = scale.getUserBounds();
      return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
      };
    }
    function getOrCreateStack(stacks, stackKey, indexValue) {
      const subStack = stacks[stackKey] || (stacks[stackKey] = {});
      return subStack[indexValue] || (subStack[indexValue] = {});
    }
    function getLastIndexInStack(stack, vScale, positive) {
      for (const meta of vScale.getMatchingVisibleMetas('bar').reverse()) {
        const value = stack[meta.index];
        if ((positive && value > 0) || (!positive && value < 0)) {
          return meta.index;
        }
      }
      return null;
    }
    function updateStacks(controller, parsed) {
      const {chart, _cachedMeta: meta} = controller;
      const stacks = chart._stacks || (chart._stacks = {});
      const {iScale, vScale, index: datasetIndex} = meta;
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const key = getStackKey(iScale, vScale, meta);
      const ilen = parsed.length;
      let stack;
      for (let i = 0; i < ilen; ++i) {
        const item = parsed[i];
        const {[iAxis]: index, [vAxis]: value} = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true);
        stack._bottom = getLastIndexInStack(stack, vScale, false);
      }
    }
    function getFirstScaleId(chart, axis) {
      const scales = chart.scales;
      return Object.keys(scales).filter(key => scales[key].axis === axis).shift();
    }
    function createDatasetContext(parent, index) {
      return Object.assign(Object.create(parent),
        {
          active: false,
          dataset: undefined,
          datasetIndex: index,
          index,
          mode: 'default',
          type: 'dataset'
        }
      );
    }
    function createDataContext(parent, index, element) {
      return Object.assign(Object.create(parent), {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: 'default',
        type: 'data'
      });
    }
    function clearStacks(meta, items) {
      items = items || meta._parsed;
      for (const parsed of items) {
        const stacks = parsed._stacks;
        if (!stacks || stacks[meta.vScale.id] === undefined || stacks[meta.vScale.id][meta.index] === undefined) {
          return;
        }
        delete stacks[meta.vScale.id][meta.index];
      }
    }
    const isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';
    const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
    class DatasetController {
      constructor(chart, datasetIndex) {
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.$context = undefined;
        this.initialize();
      }
      initialize() {
        const me = this;
        const meta = me._cachedMeta;
        me.configure();
        me.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        me.addElements();
      }
      updateIndex(datasetIndex) {
        this.index = datasetIndex;
      }
      linkScales() {
        const me = this;
        const chart = me.chart;
        const meta = me._cachedMeta;
        const dataset = me.getDataset();
        const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;
        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = me.getScaleForId(xid);
        meta.yScale = me.getScaleForId(yid);
        meta.rScale = me.getScaleForId(rid);
        meta.iScale = me.getScaleForId(iid);
        meta.vScale = me.getScaleForId(vid);
      }
      getDataset() {
        return this.chart.data.datasets[this.index];
      }
      getMeta() {
        return this.chart.getDatasetMeta(this.index);
      }
      getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
      }
      _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale
          ? meta.vScale
          : meta.iScale;
      }
      reset() {
        this._update('reset');
      }
      _destroy() {
        const meta = this._cachedMeta;
        if (this._data) {
          unlistenArrayEvents(this._data, this);
        }
        if (meta._stacked) {
          clearStacks(meta);
        }
      }
      _dataCheck() {
        const me = this;
        const dataset = me.getDataset();
        const data = dataset.data || (dataset.data = []);
        if (isObject(data)) {
          me._data = convertObjectDataToArray(data);
        } else if (me._data !== data) {
          if (me._data) {
            unlistenArrayEvents(me._data, me);
            clearStacks(me._cachedMeta);
          }
          if (data && Object.isExtensible(data)) {
            listenArrayEvents(data, me);
          }
          me._data = data;
        }
      }
      addElements() {
        const me = this;
        const meta = me._cachedMeta;
        me._dataCheck();
        if (me.datasetElementType) {
          meta.dataset = new me.datasetElementType();
        }
      }
      buildOrUpdateElements(resetNewElements) {
        const me = this;
        const meta = me._cachedMeta;
        const dataset = me.getDataset();
        let stackChanged = false;
        me._dataCheck();
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
          stackChanged = true;
          clearStacks(meta);
          meta.stack = dataset.stack;
        }
        me._resyncElements(resetNewElements);
        if (stackChanged) {
          updateStacks(me, meta._parsed);
        }
      }
      configure() {
        const me = this;
        const config = me.chart.config;
        const scopeKeys = config.datasetScopeKeys(me._type);
        const scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);
        me.options = config.createResolver(scopes, me.getContext());
        me._parsing = me.options.parsing;
      }
      parse(start, count) {
        const me = this;
        const {_cachedMeta: meta, _data: data} = me;
        const {iScale, _stacked} = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (me._parsing === false) {
          meta._parsed = data;
          meta._sorted = true;
          parsed = data;
        } else {
          if (isArray(data[start])) {
            parsed = me.parseArrayData(meta, data, start, count);
          } else if (isObject(data[start])) {
            parsed = me.parseObjectData(meta, data, start, count);
          } else {
            parsed = me.parsePrimitiveData(meta, data, start, count);
          }
          const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);
          for (i = 0; i < count; ++i) {
            meta._parsed[i + start] = cur = parsed[i];
            if (sorted) {
              if (isNotInOrderComparedToPrev()) {
                sorted = false;
              }
              prev = cur;
            }
          }
          meta._sorted = sorted;
        }
        if (_stacked) {
          updateStacks(me, parsed);
        }
      }
      parsePrimitiveData(meta, data, start, count) {
        const {iScale, vScale} = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          parsed[i] = {
            [iAxis]: singleScale || iScale.parse(labels[index], index),
            [vAxis]: vScale.parse(data[index], index)
          };
        }
        return parsed;
      }
      parseArrayData(meta, data, start, count) {
        const {xScale, yScale} = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          item = data[index];
          parsed[i] = {
            x: xScale.parse(item[0], index),
            y: yScale.parse(item[1], index)
          };
        }
        return parsed;
      }
      parseObjectData(meta, data, start, count) {
        const {xScale, yScale} = meta;
        const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          item = data[index];
          parsed[i] = {
            x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
            y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
          };
        }
        return parsed;
      }
      getParsed(index) {
        return this._cachedMeta._parsed[index];
      }
      getDataElement(index) {
        return this._cachedMeta.data[index];
      }
      applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
          keys: getSortedDatasetIndices(chart, true),
          values: parsed._stacks[scale.axis]
        };
        return applyStack(stack, value, meta.index, {mode});
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
          stack.values = values;
          range.min = Math.min(range.min, value);
          range.max = Math.max(range.max, value);
          value = applyStack(stack, parsedValue, this._cachedMeta.index, {all: true});
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
      }
      getMinMax(scale, canStack) {
        const me = this;
        const meta = me._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = me._getOtherScale(scale);
        const stack = canStack && meta._stacked && {keys: getSortedDatasetIndices(me.chart, true), values: null};
        const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};
        const {min: otherMin, max: otherMax} = getUserBounds(otherScale);
        let i, value, parsed, otherValue;
        function _skip() {
          parsed = _parsed[i];
          value = parsed[scale.axis];
          otherValue = parsed[otherScale.axis];
          return !isNumberFinite(value) || otherMin > otherValue || otherMax < otherValue;
        }
        for (i = 0; i < ilen; ++i) {
          if (_skip()) {
            continue;
          }
          me.updateRangeFromParsed(range, scale, parsed, stack);
          if (sorted) {
            break;
          }
        }
        if (sorted) {
          for (i = ilen - 1; i >= 0; --i) {
            if (_skip()) {
              continue;
            }
            me.updateRangeFromParsed(range, scale, parsed, stack);
            break;
          }
        }
        return range;
      }
      getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for (i = 0, ilen = parsed.length; i < ilen; ++i) {
          value = parsed[i][scale.axis];
          if (isNumberFinite(value)) {
            values.push(value);
          }
        }
        return values;
      }
      getMaxOverflow() {
        return false;
      }
      getLabelAndValue(index) {
        const me = this;
        const meta = me._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = me.getParsed(index);
        return {
          label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
          value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
        };
      }
      _update(mode) {
        const me = this;
        const meta = me._cachedMeta;
        me.configure();
        me._cachedDataOpts = {};
        me.update(mode || 'default');
        meta._clip = toClip(valueOrDefault(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));
      }
      update(mode) {}
      draw() {
        const me = this;
        const ctx = me._ctx;
        const chart = me.chart;
        const meta = me._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = me._drawStart || 0;
        const count = me._drawCount || (elements.length - start);
        let i;
        if (meta.dataset) {
          meta.dataset.draw(ctx, area, start, count);
        }
        for (i = start; i < start + count; ++i) {
          const element = elements[i];
          if (element.active) {
            active.push(element);
          } else {
            element.draw(ctx, area);
          }
        }
        for (i = 0; i < active.length; ++i) {
          active[i].draw(ctx, area);
        }
      }
      getStyle(index, active) {
        const mode = active ? 'active' : 'default';
        return index === undefined && this._cachedMeta.dataset
          ? this.resolveDatasetElementOptions(mode)
          : this.resolveDataElementOptions(index || 0, mode);
      }
      getContext(index, active, mode) {
        const me = this;
        const dataset = me.getDataset();
        let context;
        if (index >= 0 && index < me._cachedMeta.data.length) {
          const element = me._cachedMeta.data[index];
          context = element.$context ||
            (element.$context = createDataContext(me.getContext(), index, element));
          context.parsed = me.getParsed(index);
          context.raw = dataset.data[index];
        } else {
          context = me.$context ||
            (me.$context = createDatasetContext(me.chart.getContext(), me.index));
          context.dataset = dataset;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
      }
      resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
      }
      resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
      }
      _resolveElementOptions(elementType, mode = 'default', index) {
        const me = this;
        const active = mode === 'active';
        const cache = me._cachedDataOpts;
        const cacheKey = elementType + '-' + mode;
        const cached = cache[cacheKey];
        const sharing = me.enableOptionSharing && defined(index);
        if (cached) {
          return cloneIfNotShared(cached, sharing);
        }
        const config = me.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(me._type, elementType);
        const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];
        const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
        const names = Object.keys(defaults.elements[elementType]);
        const context = () => me.getContext(index, active);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
          values.$shared = sharing;
          cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
      }
      _resolveAnimations(index, transition, active) {
        const me = this;
        const chart = me.chart;
        const cache = me._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) {
          return cached;
        }
        let options;
        if (chart.options.animation !== false) {
          const config = me.chart.config;
          const scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);
          const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
          options = config.createResolver(scopes, me.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) {
          cache[cacheKey] = Object.freeze(animations);
        }
        return animations;
      }
      getSharedOptions(options) {
        if (!options.$shared) {
          return;
        }
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
      }
      includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
      }
      updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) {
          Object.assign(element, properties);
        } else {
          this._resolveAnimations(index, mode).update(element, properties);
        }
      }
      updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) {
          this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
        }
      }
      _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
          options: (!active && this.getSharedOptions(options)) || options
        });
      }
      removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', false);
      }
      setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', true);
      }
      _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, undefined, 'active', false);
        }
      }
      _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, undefined, 'active', true);
        }
      }
      _resyncElements(resetNewElements) {
        const me = this;
        const numMeta = me._cachedMeta.data.length;
        const numData = me._data.length;
        if (numData > numMeta) {
          me._insertElements(numMeta, numData - numMeta, resetNewElements);
        } else if (numData < numMeta) {
          me._removeElements(numData, numMeta - numData);
        }
        const count = Math.min(numData, numMeta);
        if (count) {
          me.parse(0, count);
        }
      }
      _insertElements(start, count, resetNewElements = true) {
        const me = this;
        const meta = me._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr) => {
          arr.length += count;
          for (i = arr.length - 1; i >= end; i--) {
            arr[i] = arr[i - count];
          }
        };
        move(data);
        for (i = start; i < end; ++i) {
          data[i] = new me.dataElementType();
        }
        if (me._parsing) {
          move(meta._parsed);
        }
        me.parse(start, count);
        if (resetNewElements) {
          me.updateElements(data, start, count, 'reset');
        }
      }
      updateElements(element, start, count, mode) {}
      _removeElements(start, count) {
        const me = this;
        const meta = me._cachedMeta;
        if (me._parsing) {
          const removed = meta._parsed.splice(start, count);
          if (meta._stacked) {
            clearStacks(meta, removed);
          }
        }
        meta.data.splice(start, count);
      }
      _onDataPush() {
        const count = arguments.length;
        this._insertElements(this.getDataset().data.length - count, count);
      }
      _onDataPop() {
        this._removeElements(this._cachedMeta.data.length - 1, 1);
      }
      _onDataShift() {
        this._removeElements(0, 1);
      }
      _onDataSplice(start, count) {
        this._removeElements(start, count);
        this._insertElements(start, arguments.length - 2);
      }
      _onDataUnshift() {
        this._insertElements(0, arguments.length);
      }
    }
    DatasetController.defaults = {};
    DatasetController.prototype.datasetElementType = null;
    DatasetController.prototype.dataElementType = null;

    function getAllScaleValues(scale) {
      if (!scale._cache.$bar) {
        const metas = scale.getMatchingVisibleMetas('bar');
        let values = [];
        for (let i = 0, ilen = metas.length; i < ilen; i++) {
          values = values.concat(metas[i].controller.getAllParsedValues(scale));
        }
        scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));
      }
      return scale._cache.$bar;
    }
    function computeMinSampleSize(scale) {
      const values = getAllScaleValues(scale);
      let min = scale._length;
      let i, ilen, curr, prev;
      const updateMinAndPrev = () => {
        min = Math.min(min, i && Math.abs(curr - prev) || min);
        prev = curr;
      };
      for (i = 0, ilen = values.length; i < ilen; ++i) {
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
      }
      for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
      }
      return min;
    }
    function computeFitCategoryTraits(index, ruler, options, stackCount) {
      const thickness = options.barThickness;
      let size, ratio;
      if (isNullOrUndef(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
      } else {
        size = thickness * stackCount;
        ratio = 1;
      }
      return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - (size / 2)
      };
    }
    function computeFlexCategoryTraits(index, ruler, options, stackCount) {
      const pixels = ruler.pixels;
      const curr = pixels[index];
      let prev = index > 0 ? pixels[index - 1] : null;
      let next = index < pixels.length - 1 ? pixels[index + 1] : null;
      const percent = options.categoryPercentage;
      if (prev === null) {
        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
      }
      if (next === null) {
        next = curr + curr - prev;
      }
      const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
      const size = Math.abs(next - prev) / 2 * percent;
      return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
      };
    }
    function parseFloatBar(entry, item, vScale, i) {
      const startValue = vScale.parse(entry[0], i);
      const endValue = vScale.parse(entry[1], i);
      const min = Math.min(startValue, endValue);
      const max = Math.max(startValue, endValue);
      let barStart = min;
      let barEnd = max;
      if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
      }
      item[vScale.axis] = barEnd;
      item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
      };
    }
    function parseValue(entry, item, vScale, i) {
      if (isArray(entry)) {
        parseFloatBar(entry, item, vScale, i);
      } else {
        item[vScale.axis] = vScale.parse(entry, i);
      }
      return item;
    }
    function parseArrayOrPrimitive(meta, data, start, count) {
      const iScale = meta.iScale;
      const vScale = meta.vScale;
      const labels = iScale.getLabels();
      const singleScale = iScale === vScale;
      const parsed = [];
      let i, ilen, item, entry;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
      }
      return parsed;
    }
    function isFloatBar(custom) {
      return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
    }
    class BarController extends DatasetController {
      parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseObjectData(meta, data, start, count) {
        const {iScale, vScale} = meta;
        const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for (i = start, ilen = start + count; i < ilen; ++i) {
          obj = data[i];
          item = {};
          item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
          parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
          range.min = Math.min(range.min, custom.min);
          range.max = Math.max(range.max, custom.max);
        }
      }
      getLabelAndValue(index) {
        const me = this;
        const meta = me._cachedMeta;
        const {iScale, vScale} = meta;
        const parsed = me.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom)
          ? '[' + custom.start + ', ' + custom.end + ']'
          : '' + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
          label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
          value
        };
      }
      initialize() {
        const me = this;
        me.enableOptionSharing = true;
        super.initialize();
        const meta = me._cachedMeta;
        meta.stack = me.getDataset().stack;
      }
      update(mode) {
        const me = this;
        const meta = me._cachedMeta;
        me.updateElements(meta.data, 0, meta.data.length, mode);
      }
      updateElements(bars, start, count, mode) {
        const me = this;
        const reset = mode === 'reset';
        const vScale = me._cachedMeta.vScale;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = me._getRuler();
        const firstOpts = me.resolveDataElementOptions(start, mode);
        const sharedOptions = me.getSharedOptions(firstOpts);
        const includeOptions = me.includeOptions(mode, sharedOptions);
        me.updateSharedOptions(sharedOptions, mode, firstOpts);
        for (let i = start; i < start + count; i++) {
          const parsed = me.getParsed(i);
          const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : me._calculateBarValuePixels(i);
          const ipixels = me._calculateBarIndexPixels(i, ruler);
          const stack = (parsed._stacks || {})[vScale.axis];
          const properties = {
            horizontal,
            base: vpixels.base,
            enableBorderRadius: !stack || isFloatBar(parsed._custom) || (me.index === stack._top || me.index === stack._bottom),
            x: horizontal ? vpixels.head : ipixels.center,
            y: horizontal ? ipixels.center : vpixels.head,
            height: horizontal ? ipixels.size : undefined,
            width: horizontal ? undefined : ipixels.size
          };
          if (includeOptions) {
            properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);
          }
          me.updateElement(bars[i], i, properties, mode);
        }
      }
      _getStacks(last, dataIndex) {
        const me = this;
        const meta = me._cachedMeta;
        const iScale = meta.iScale;
        const metasets = iScale.getMatchingVisibleMetas(me._type);
        const stacked = iScale.options.stacked;
        const ilen = metasets.length;
        const stacks = [];
        let i, item;
        for (i = 0; i < ilen; ++i) {
          item = metasets[i];
          if (typeof dataIndex !== 'undefined') {
            const val = item.controller.getParsed(dataIndex)[
              item.controller._cachedMeta.vScale.axis
            ];
            if (isNullOrUndef(val) || isNaN(val)) {
              continue;
            }
          }
          if (stacked === false || stacks.indexOf(item.stack) === -1 ||
    				(stacked === undefined && item.stack === undefined)) {
            stacks.push(item.stack);
          }
          if (item.index === last) {
            break;
          }
        }
        if (!stacks.length) {
          stacks.push(undefined);
        }
        return stacks;
      }
      _getStackCount(index) {
        return this._getStacks(undefined, index).length;
      }
      _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = (name !== undefined)
          ? stacks.indexOf(name)
          : -1;
        return (index === -1)
          ? stacks.length - 1
          : index;
      }
      _getRuler() {
        const me = this;
        const opts = me.options;
        const meta = me._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
          pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));
        }
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(iScale);
        return {
          min,
          pixels,
          start: iScale._startPixel,
          end: iScale._endPixel,
          stackCount: me._getStackCount(),
          scale: iScale,
          grouped: opts.grouped,
          ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
      }
      _calculateBarValuePixels(index) {
        const me = this;
        const {vScale, _stacked} = me._cachedMeta;
        const {base: baseValue, minBarLength} = me.options;
        const parsed = me.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
          start = length - value;
          length = value;
        }
        if (floating) {
          value = custom.barStart;
          length = custom.barEnd - custom.barStart;
          if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
            start = 0;
          }
          start += value;
        }
        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) {
          head = vScale.getPixelForValue(start + length);
        } else {
          head = base;
        }
        size = head - base;
        if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
          size = size < 0 ? -minBarLength : minBarLength;
          if (value === 0) {
            base -= size / 2;
          }
          head = base + size;
        }
        const actualBase = baseValue || 0;
        if (base === vScale.getPixelForValue(actualBase)) {
          const halfGrid = vScale.getLineWidthForValue(actualBase) / 2;
          if (size > 0) {
            base += halfGrid;
            size -= halfGrid;
          } else if (size < 0) {
            base -= halfGrid;
            size += halfGrid;
          }
        }
        return {
          size,
          base,
          head,
          center: head + size / 2
        };
      }
      _calculateBarIndexPixels(index, ruler) {
        const me = this;
        const scale = ruler.scale;
        const options = me.options;
        const skipNull = options.skipNull;
        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
          const stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;
          const range = options.barThickness === 'flex'
            ? computeFlexCategoryTraits(index, ruler, options, stackCount)
            : computeFitCategoryTraits(index, ruler, options, stackCount);
          const stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);
          center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
          size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
          center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);
          size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
          base: center - size / 2,
          head: center + size / 2,
          center,
          size
        };
      }
      draw() {
        const me = this;
        const chart = me.chart;
        const meta = me._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        clipArea(chart.ctx, chart.chartArea);
        for (; i < ilen; ++i) {
          if (me.getParsed(i)[vScale.axis] !== null) {
            rects[i].draw(me._ctx);
          }
        }
        unclipArea(chart.ctx);
      }
    }
    BarController.id = 'bar';
    BarController.defaults = {
      datasetElementType: false,
      dataElementType: 'bar',
      categoryPercentage: 0.8,
      barPercentage: 0.9,
      grouped: true,
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'base', 'width', 'height']
        }
      }
    };
    BarController.overrides = {
      interaction: {
        mode: 'index'
      },
      scales: {
        _index_: {
          type: 'category',
          offset: true,
          grid: {
            offset: true
          }
        },
        _value_: {
          type: 'linear',
          beginAtZero: true,
        }
      }
    };

    class BubbleController extends DatasetController {
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      parseObjectData(meta, data, start, count) {
        const {xScale, yScale} = meta;
        const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
        const parsed = [];
        let i, ilen, item;
        for (i = start, ilen = start + count; i < ilen; ++i) {
          item = data[i];
          parsed.push({
            x: xScale.parse(resolveObjectKey(item, xAxisKey), i),
            y: yScale.parse(resolveObjectKey(item, yAxisKey), i),
            _custom: item && item.r && +item.r
          });
        }
        return parsed;
      }
      getMaxOverflow() {
        const {data, _parsed} = this._cachedMeta;
        let max = 0;
        for (let i = data.length - 1; i >= 0; --i) {
          max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);
        }
        return max > 0 && max;
      }
      getLabelAndValue(index) {
        const me = this;
        const meta = me._cachedMeta;
        const {xScale, yScale} = meta;
        const parsed = me.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
          label: meta.label,
          value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
        };
      }
      update(mode) {
        const me = this;
        const points = me._cachedMeta.data;
        me.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const me = this;
        const reset = mode === 'reset';
        const {xScale, yScale} = me._cachedMeta;
        const firstOpts = me.resolveDataElementOptions(start, mode);
        const sharedOptions = me.getSharedOptions(firstOpts);
        const includeOptions = me.includeOptions(mode, sharedOptions);
        for (let i = start; i < start + count; i++) {
          const point = points[i];
          const parsed = !reset && me.getParsed(i);
          const x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(parsed.x);
          const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);
          const properties = {
            x,
            y,
            skip: isNaN(x) || isNaN(y)
          };
          if (includeOptions) {
            properties.options = me.resolveDataElementOptions(i, mode);
            if (reset) {
              properties.options.radius = 0;
            }
          }
          me.updateElement(point, i, properties, mode);
        }
        me.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) {
          values = Object.assign({}, values, {$shared: false});
        }
        const radius = values.radius;
        if (mode !== 'active') {
          values.radius = 0;
        }
        values.radius += valueOrDefault(parsed && parsed._custom, radius);
        return values;
      }
    }
    BubbleController.id = 'bubble';
    BubbleController.defaults = {
      datasetElementType: false,
      dataElementType: 'point',
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'borderWidth', 'radius']
        }
      }
    };
    BubbleController.overrides = {
      scales: {
        x: {
          type: 'linear'
        },
        y: {
          type: 'linear'
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            title() {
              return '';
            }
          }
        }
      }
    };

    function getRatioAndOffset(rotation, circumference, cutout) {
      let ratioX = 1;
      let ratioY = 1;
      let offsetX = 0;
      let offsetY = 0;
      if (circumference < TAU) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax(HALF_PI, startY, endY);
        const minX = calcMin(PI, startX, endX);
        const minY = calcMin(PI + HALF_PI, startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
      }
      return {ratioX, ratioY, offsetX, offsetY};
    }
    class DoughnutController extends DatasetController {
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
      }
      linkScales() {}
      parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        let i, ilen;
        for (i = start, ilen = start + count; i < ilen; ++i) {
          meta._parsed[i] = +data[i];
        }
      }
      _getRotation() {
        return toRadians(this.options.rotation - 90);
      }
      _getCircumference() {
        return toRadians(this.options.circumference);
      }
      _getRotationExtents() {
        let min = TAU;
        let max = -TAU;
        const me = this;
        for (let i = 0; i < me.chart.data.datasets.length; ++i) {
          if (me.chart.isDatasetVisible(i)) {
            const controller = me.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
          }
        }
        return {
          rotation: min,
          circumference: max - min,
        };
      }
      update(mode) {
        const me = this;
        const chart = me.chart;
        const {chartArea} = chart;
        const meta = me._cachedMeta;
        const arcs = meta.data;
        const spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs);
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min(toPercentage(me.options.cutout, maxSize), 1);
        const chartWeight = me._getRingWeight(me.index);
        const {circumference, rotation} = me._getRotationExtents();
        const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = toDimension(me.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();
        me.offsetX = offsetX * outerRadius;
        me.offsetY = offsetY * outerRadius;
        meta.total = me.calculateTotal();
        me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);
        me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);
        me.updateElements(arcs, 0, arcs.length, mode);
      }
      _circumference(i, reset) {
        const me = this;
        const opts = me.options;
        const meta = me._cachedMeta;
        const circumference = me._getCircumference();
        if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null) {
          return 0;
        }
        return me.calculateCircumference(meta._parsed[i] * circumference / TAU);
      }
      updateElements(arcs, start, count, mode) {
        const me = this;
        const reset = mode === 'reset';
        const chart = me.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : me.innerRadius;
        const outerRadius = animateScale ? 0 : me.outerRadius;
        const firstOpts = me.resolveDataElementOptions(start, mode);
        const sharedOptions = me.getSharedOptions(firstOpts);
        const includeOptions = me.includeOptions(mode, sharedOptions);
        let startAngle = me._getRotation();
        let i;
        for (i = 0; i < start; ++i) {
          startAngle += me._circumference(i, reset);
        }
        for (i = start; i < start + count; ++i) {
          const circumference = me._circumference(i, reset);
          const arc = arcs[i];
          const properties = {
            x: centerX + me.offsetX,
            y: centerY + me.offsetY,
            startAngle,
            endAngle: startAngle + circumference,
            circumference,
            outerRadius,
            innerRadius
          };
          if (includeOptions) {
            properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);
          }
          startAngle += circumference;
          me.updateElement(arc, i, properties, mode);
        }
        me.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for (i = 0; i < metaData.length; i++) {
          const value = meta._parsed[i];
          if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i)) {
            total += Math.abs(value);
          }
        }
        return total;
      }
      calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) {
          return TAU * (Math.abs(value) / total);
        }
        return 0;
      }
      getLabelAndValue(index) {
        const me = this;
        const meta = me._cachedMeta;
        const chart = me.chart;
        const labels = chart.data.labels || [];
        const value = formatNumber(meta._parsed[index], chart.options.locale);
        return {
          label: labels[index] || '',
          value,
        };
      }
      getMaxBorderWidth(arcs) {
        const me = this;
        let max = 0;
        const chart = me.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
          for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              meta = chart.getDatasetMeta(i);
              arcs = meta.data;
              controller = meta.controller;
              if (controller !== me) {
                controller.configure();
              }
              break;
            }
          }
        }
        if (!arcs) {
          return 0;
        }
        for (i = 0, ilen = arcs.length; i < ilen; ++i) {
          options = controller.resolveDataElementOptions(i);
          if (options.borderAlign !== 'inner') {
            max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
          }
        }
        return max;
      }
      getMaxOffset(arcs) {
        let max = 0;
        for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
          const options = this.resolveDataElementOptions(i);
          max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
      }
      _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for (let i = 0; i < datasetIndex; ++i) {
          if (this.chart.isDatasetVisible(i)) {
            ringWeightOffset += this._getRingWeight(i);
          }
        }
        return ringWeightOffset;
      }
      _getRingWeight(datasetIndex) {
        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
      }
      _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
      }
    }
    DoughnutController.id = 'doughnut';
    DoughnutController.defaults = {
      datasetElementType: false,
      dataElementType: 'arc',
      animation: {
        animateRotate: true,
        animateScale: false
      },
      animations: {
        numbers: {
          type: 'number',
          properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth']
        },
      },
      cutout: '50%',
      rotation: 0,
      circumference: 360,
      radius: '100%',
      indexAxis: 'r',
    };
    DoughnutController.overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(chart) {
              const data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map((label, i) => {
                  const meta = chart.getDatasetMeta(0);
                  const style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: !chart.getDataVisibility(i),
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick(e, legendItem, legend) {
            legend.chart.toggleDataVisibility(legendItem.index);
            legend.chart.update();
          }
        },
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(tooltipItem) {
              let dataLabel = tooltipItem.label;
              const value = ': ' + tooltipItem.formattedValue;
              if (isArray(dataLabel)) {
                dataLabel = dataLabel.slice();
                dataLabel[0] += value;
              } else {
                dataLabel += value;
              }
              return dataLabel;
            }
          }
        }
      }
    };

    class LineController extends DatasetController {
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      update(mode) {
        const me = this;
        const meta = me._cachedMeta;
        const {dataset: line, data: points = [], _dataset} = meta;
        const animationsDisabled = me.chart._animationsDisabled;
        let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
        me._drawStart = start;
        me._drawCount = count;
        if (scaleRangesChanged(meta)) {
          start = 0;
          count = points.length;
        }
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = me.resolveDatasetElementOptions(mode);
        if (!me.options.showLine) {
          options.borderWidth = 0;
        }
        options.segment = me.options.segment;
        me.updateElement(line, undefined, {
          animated: !animationsDisabled,
          options
        }, mode);
        me.updateElements(points, start, count, mode);
      }
      updateElements(points, start, count, mode) {
        const me = this;
        const reset = mode === 'reset';
        const {xScale, yScale, _stacked} = me._cachedMeta;
        const firstOpts = me.resolveDataElementOptions(start, mode);
        const sharedOptions = me.getSharedOptions(firstOpts);
        const includeOptions = me.includeOptions(mode, sharedOptions);
        const spanGaps = me.options.spanGaps;
        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = me.chart._animationsDisabled || reset || mode === 'none';
        let prevParsed = start > 0 && me.getParsed(start - 1);
        for (let i = start; i < start + count; ++i) {
          const point = points[i];
          const parsed = me.getParsed(i);
          const properties = directUpdate ? point : {};
          const nullData = isNullOrUndef(parsed.y);
          const x = properties.x = xScale.getPixelForValue(parsed.x, i);
          const y = properties.y = reset || nullData ? yScale.getBasePixel() : yScale.getPixelForValue(_stacked ? me.applyStack(yScale, parsed, _stacked) : parsed.y, i);
          properties.skip = isNaN(x) || isNaN(y) || nullData;
          properties.stop = i > 0 && (parsed.x - prevParsed.x) > maxGapLength;
          properties.parsed = parsed;
          if (includeOptions) {
            properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);
          }
          if (!directUpdate) {
            me.updateElement(point, i, properties, mode);
          }
          prevParsed = parsed;
        }
        me.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      getMaxOverflow() {
        const me = this;
        const meta = me._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) {
          return border;
        }
        const firstPoint = data[0].size(me.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
      }
      draw() {
        this._cachedMeta.dataset.updateControlPoints(this.chart.chartArea);
        super.draw();
      }
    }
    LineController.id = 'line';
    LineController.defaults = {
      datasetElementType: 'line',
      dataElementType: 'point',
      showLine: true,
      spanGaps: false,
    };
    LineController.overrides = {
      scales: {
        _index_: {
          type: 'category',
        },
        _value_: {
          type: 'linear',
        },
      }
    };
    function getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
      const pointCount = points.length;
      let start = 0;
      let count = pointCount;
      if (meta._sorted) {
        const {iScale, _parsed} = meta;
        const axis = iScale.axis;
        const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
        if (minDefined) {
          start = _limitValue(Math.min(
            _lookupByKey(_parsed, iScale.axis, min).lo,
            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),
          0, pointCount - 1);
        }
        if (maxDefined) {
          count = _limitValue(Math.max(
            _lookupByKey(_parsed, iScale.axis, max).hi + 1,
            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),
          start, pointCount) - start;
        } else {
          count = pointCount - start;
        }
      }
      return {start, count};
    }
    function scaleRangesChanged(meta) {
      const {xScale, yScale, _scaleRanges} = meta;
      const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
      };
      if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
      }
      const changed = _scaleRanges.xmin !== xScale.min
    		|| _scaleRanges.xmax !== xScale.max
    		|| _scaleRanges.ymin !== yScale.min
    		|| _scaleRanges.ymax !== yScale.max;
      Object.assign(_scaleRanges, newRanges);
      return changed;
    }

    class PolarAreaController extends DatasetController {
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
      }
      update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
      }
      _updateRadius() {
        const me = this;
        const chart = me.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        me.outerRadius = outerRadius - (radiusLength * me.index);
        me.innerRadius = me.outerRadius - radiusLength;
      }
      updateElements(arcs, start, count, mode) {
        const me = this;
        const reset = mode === 'reset';
        const chart = me.chart;
        const dataset = me.getDataset();
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = me._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / me.countVisibleElements();
        for (i = 0; i < start; ++i) {
          angle += me._computeAngle(i, mode, defaultAngle);
        }
        for (i = start; i < start + count; i++) {
          const arc = arcs[i];
          let startAngle = angle;
          let endAngle = angle + me._computeAngle(i, mode, defaultAngle);
          let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;
          angle = endAngle;
          if (reset) {
            if (animationOpts.animateScale) {
              outerRadius = 0;
            }
            if (animationOpts.animateRotate) {
              startAngle = endAngle = datasetStartAngle;
            }
          }
          const properties = {
            x: centerX,
            y: centerY,
            innerRadius: 0,
            outerRadius,
            startAngle,
            endAngle,
            options: me.resolveDataElementOptions(i, mode)
          };
          me.updateElement(arc, i, properties, mode);
        }
      }
      countVisibleElements() {
        const dataset = this.getDataset();
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index) => {
          if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {
            count++;
          }
        });
        return count;
      }
      _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index)
          ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)
          : 0;
      }
    }
    PolarAreaController.id = 'polarArea';
    PolarAreaController.defaults = {
      dataElementType: 'arc',
      animation: {
        animateRotate: true,
        animateScale: true
      },
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
        },
      },
      indexAxis: 'r',
      startAngle: 0,
    };
    PolarAreaController.overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(chart) {
              const data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map((label, i) => {
                  const meta = chart.getDatasetMeta(0);
                  const style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: !chart.getDataVisibility(i),
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick(e, legendItem, legend) {
            legend.chart.toggleDataVisibility(legendItem.index);
            legend.chart.update();
          }
        },
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(context) {
              return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;
            }
          }
        }
      },
      scales: {
        r: {
          type: 'radialLinear',
          angleLines: {
            display: false
          },
          beginAtZero: true,
          grid: {
            circular: true
          },
          pointLabels: {
            display: false
          },
          startAngle: 0
        }
      }
    };

    class PieController extends DoughnutController {
    }
    PieController.id = 'pie';
    PieController.defaults = {
      cutout: 0,
      rotation: 0,
      circumference: 360,
      radius: '100%'
    };

    class RadarController extends DatasetController {
      getLabelAndValue(index) {
        const me = this;
        const vScale = me._cachedMeta.vScale;
        const parsed = me.getParsed(index);
        return {
          label: vScale.getLabels()[index],
          value: '' + vScale.getLabelForValue(parsed[vScale.axis])
        };
      }
      update(mode) {
        const me = this;
        const meta = me._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== 'resize') {
          const options = me.resolveDatasetElementOptions(mode);
          if (!me.options.showLine) {
            options.borderWidth = 0;
          }
          const properties = {
            _loop: true,
            _fullLoop: labels.length === points.length,
            options
          };
          me.updateElement(line, undefined, properties, mode);
        }
        me.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const me = this;
        const dataset = me.getDataset();
        const scale = me._cachedMeta.rScale;
        const reset = mode === 'reset';
        for (let i = start; i < start + count; i++) {
          const point = points[i];
          const options = me.resolveDataElementOptions(i, mode);
          const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);
          const x = reset ? scale.xCenter : pointPosition.x;
          const y = reset ? scale.yCenter : pointPosition.y;
          const properties = {
            x,
            y,
            angle: pointPosition.angle,
            skip: isNaN(x) || isNaN(y),
            options
          };
          me.updateElement(point, i, properties, mode);
        }
      }
    }
    RadarController.id = 'radar';
    RadarController.defaults = {
      datasetElementType: 'line',
      dataElementType: 'point',
      indexAxis: 'r',
      showLine: true,
      elements: {
        line: {
          fill: 'start'
        }
      },
    };
    RadarController.overrides = {
      aspectRatio: 1,
      scales: {
        r: {
          type: 'radialLinear',
        }
      }
    };

    class ScatterController extends LineController {
    }
    ScatterController.id = 'scatter';
    ScatterController.defaults = {
      showLine: false,
      fill: false
    };
    ScatterController.overrides = {
      interaction: {
        mode: 'point'
      },
      plugins: {
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(item) {
              return '(' + item.label + ', ' + item.formattedValue + ')';
            }
          }
        }
      },
      scales: {
        x: {
          type: 'linear'
        },
        y: {
          type: 'linear'
        }
      }
    };

    var controllers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PolarAreaController: PolarAreaController,
    PieController: PieController,
    RadarController: RadarController,
    ScatterController: ScatterController
    });

    function abstract() {
      throw new Error('This method is not implemented: either no adapter can be found or an incomplete integration was provided.');
    }
    class DateAdapter {
      constructor(options) {
        this.options = options || {};
      }
      formats() {
        return abstract();
      }
      parse(value, format) {
        return abstract();
      }
      format(timestamp, format) {
        return abstract();
      }
      add(timestamp, amount, unit) {
        return abstract();
      }
      diff(a, b, unit) {
        return abstract();
      }
      startOf(timestamp, unit, weekday) {
        return abstract();
      }
      endOf(timestamp, unit) {
        return abstract();
      }
    }
    DateAdapter.override = function(members) {
      Object.assign(DateAdapter.prototype, members);
    };
    var adapters = {
      _date: DateAdapter
    };

    function getRelativePosition(e, chart) {
      if ('native' in e) {
        return {
          x: e.x,
          y: e.y
        };
      }
      return getRelativePosition$1(e, chart);
    }
    function evaluateAllVisibleItems(chart, handler) {
      const metasets = chart.getSortedVisibleDatasetMetas();
      let index, data, element;
      for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
        ({index, data} = metasets[i]);
        for (let j = 0, jlen = data.length; j < jlen; ++j) {
          element = data[j];
          if (!element.skip) {
            handler(element, index, j);
          }
        }
      }
    }
    function binarySearch(metaset, axis, value, intersect) {
      const {controller, data, _sorted} = metaset;
      const iScale = controller._cachedMeta.iScale;
      if (iScale && axis === iScale.axis && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
        if (!intersect) {
          return lookupMethod(data, axis, value);
        } else if (controller._sharedOptions) {
          const el = data[0];
          const range = typeof el.getRange === 'function' && el.getRange(axis);
          if (range) {
            const start = lookupMethod(data, axis, value - range);
            const end = lookupMethod(data, axis, value + range);
            return {lo: start.lo, hi: end.hi};
          }
        }
      }
      return {lo: 0, hi: data.length - 1};
    }
    function optimizedEvaluateItems(chart, axis, position, handler, intersect) {
      const metasets = chart.getSortedVisibleDatasetMetas();
      const value = position[axis];
      for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
        const {index, data} = metasets[i];
        const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);
        for (let j = lo; j <= hi; ++j) {
          const element = data[j];
          if (!element.skip) {
            handler(element, index, j);
          }
        }
      }
    }
    function getDistanceMetricForAxis(axis) {
      const useX = axis.indexOf('x') !== -1;
      const useY = axis.indexOf('y') !== -1;
      return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      };
    }
    function getIntersectItems(chart, position, axis, useFinalPosition) {
      const items = [];
      if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {
        return items;
      }
      const evaluationFunc = function(element, datasetIndex, index) {
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          items.push({element, datasetIndex, index});
        }
      };
      optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);
      return items;
    }
    function getNearestItems(chart, position, axis, intersect, useFinalPosition) {
      const distanceMetric = getDistanceMetricForAxis(axis);
      let minDistance = Number.POSITIVE_INFINITY;
      let items = [];
      if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {
        return items;
      }
      const evaluationFunc = function(element, datasetIndex, index) {
        if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {
          return;
        }
        const center = element.getCenterPoint(useFinalPosition);
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
          items = [{element, datasetIndex, index}];
          minDistance = distance;
        } else if (distance === minDistance) {
          items.push({element, datasetIndex, index});
        }
      };
      optimizedEvaluateItems(chart, axis, position, evaluationFunc);
      return items;
    }
    function getAxisItems(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const items = [];
      const axis = options.axis;
      const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
      let intersectsItem = false;
      evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {
        if (element[rangeMethod](position[axis], useFinalPosition)) {
          items.push({element, datasetIndex, index});
        }
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          intersectsItem = true;
        }
      });
      if (options.intersect && !intersectsItem) {
        return [];
      }
      return items;
    }
    var Interaction = {
      modes: {
        index(chart, e, options, useFinalPosition) {
          const position = getRelativePosition(e, chart);
          const axis = options.axis || 'x';
          const items = options.intersect
            ? getIntersectItems(chart, position, axis, useFinalPosition)
            : getNearestItems(chart, position, axis, false, useFinalPosition);
          const elements = [];
          if (!items.length) {
            return [];
          }
          chart.getSortedVisibleDatasetMetas().forEach((meta) => {
            const index = items[0].index;
            const element = meta.data[index];
            if (element && !element.skip) {
              elements.push({element, datasetIndex: meta.index, index});
            }
          });
          return elements;
        },
        dataset(chart, e, options, useFinalPosition) {
          const position = getRelativePosition(e, chart);
          const axis = options.axis || 'xy';
          let items = options.intersect
            ? getIntersectItems(chart, position, axis, useFinalPosition) :
            getNearestItems(chart, position, axis, false, useFinalPosition);
          if (items.length > 0) {
            const datasetIndex = items[0].datasetIndex;
            const data = chart.getDatasetMeta(datasetIndex).data;
            items = [];
            for (let i = 0; i < data.length; ++i) {
              items.push({element: data[i], datasetIndex, index: i});
            }
          }
          return items;
        },
        point(chart, e, options, useFinalPosition) {
          const position = getRelativePosition(e, chart);
          const axis = options.axis || 'xy';
          return getIntersectItems(chart, position, axis, useFinalPosition);
        },
        nearest(chart, e, options, useFinalPosition) {
          const position = getRelativePosition(e, chart);
          const axis = options.axis || 'xy';
          return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);
        },
        x(chart, e, options, useFinalPosition) {
          options.axis = 'x';
          return getAxisItems(chart, e, options, useFinalPosition);
        },
        y(chart, e, options, useFinalPosition) {
          options.axis = 'y';
          return getAxisItems(chart, e, options, useFinalPosition);
        }
      }
    };

    const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
    function filterByPosition(array, position) {
      return array.filter(v => v.pos === position);
    }
    function filterDynamicPositionByAxis(array, axis) {
      return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
    }
    function sortByWeight(array, reverse) {
      return array.sort((a, b) => {
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ?
          v0.index - v1.index :
          v0.weight - v1.weight;
      });
    }
    function wrapBoxes(boxes) {
      const layoutBoxes = [];
      let i, ilen, box;
      for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
        box = boxes[i];
        layoutBoxes.push({
          index: i,
          box,
          pos: box.position,
          horizontal: box.isHorizontal(),
          weight: box.weight
        });
      }
      return layoutBoxes;
    }
    function setLayoutDims(layouts, params) {
      let i, ilen, layout;
      for (i = 0, ilen = layouts.length; i < ilen; ++i) {
        layout = layouts[i];
        if (layout.horizontal) {
          layout.width = layout.box.fullSize && params.availableWidth;
          layout.height = params.hBoxMaxHeight;
        } else {
          layout.width = params.vBoxMaxWidth;
          layout.height = layout.box.fullSize && params.availableHeight;
        }
      }
    }
    function buildLayoutBoxes(boxes) {
      const layoutBoxes = wrapBoxes(boxes);
      const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);
      const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
      const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
      const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
      const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
      const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
      const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
      return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
      };
    }
    function getCombinedMax(maxPadding, chartArea, a, b) {
      return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }
    function updateMaxPadding(maxPadding, boxPadding) {
      maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
      maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
      maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
      maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    }
    function updateDims(chartArea, params, layout) {
      const box = layout.box;
      const maxPadding = chartArea.maxPadding;
      if (!isObject(layout.pos)) {
        if (layout.size) {
          chartArea[layout.pos] -= layout.size;
        }
        layout.size = layout.horizontal ? box.height : box.width;
        chartArea[layout.pos] += layout.size;
      }
      if (box.getPadding) {
        updateMaxPadding(maxPadding, box.getPadding());
      }
      const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
      const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
      const widthChanged = newWidth !== chartArea.w;
      const heightChanged = newHeight !== chartArea.h;
      chartArea.w = newWidth;
      chartArea.h = newHeight;
      return layout.horizontal
        ? {same: widthChanged, other: heightChanged}
        : {same: heightChanged, other: widthChanged};
    }
    function handleMaxPadding(chartArea) {
      const maxPadding = chartArea.maxPadding;
      function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
      }
      chartArea.y += updatePos('top');
      chartArea.x += updatePos('left');
      updatePos('right');
      updatePos('bottom');
    }
    function getMargins(horizontal, chartArea) {
      const maxPadding = chartArea.maxPadding;
      function marginForPositions(positions) {
        const margin = {left: 0, top: 0, right: 0, bottom: 0};
        positions.forEach((pos) => {
          margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
      }
      return horizontal
        ? marginForPositions(['left', 'right'])
        : marginForPositions(['top', 'bottom']);
    }
    function fitBoxes(boxes, chartArea, params) {
      const refitBoxes = [];
      let i, ilen, layout, box, refit, changed;
      for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
        layout = boxes[i];
        box = layout.box;
        box.update(
          layout.width || chartArea.w,
          layout.height || chartArea.h,
          getMargins(layout.horizontal, chartArea)
        );
        const {same, other} = updateDims(chartArea, params, layout);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) {
          refitBoxes.push(layout);
        }
      }
      return refit && fitBoxes(refitBoxes, chartArea, params) || changed;
    }
    function placeBoxes(boxes, chartArea, params) {
      const userPadding = params.padding;
      let x = chartArea.x;
      let y = chartArea.y;
      let i, ilen, layout, box;
      for (i = 0, ilen = boxes.length; i < ilen; ++i) {
        layout = boxes[i];
        box = layout.box;
        if (layout.horizontal) {
          box.left = box.fullSize ? userPadding.left : chartArea.left;
          box.right = box.fullSize ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
          box.top = y;
          box.bottom = y + box.height;
          box.width = box.right - box.left;
          y = box.bottom;
        } else {
          box.left = x;
          box.right = x + box.width;
          box.top = box.fullSize ? userPadding.top : chartArea.top;
          box.bottom = box.fullSize ? params.outerHeight - userPadding.right : chartArea.top + chartArea.h;
          box.height = box.bottom - box.top;
          x = box.right;
        }
      }
      chartArea.x = x;
      chartArea.y = y;
    }
    defaults.set('layout', {
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    });
    var layouts = {
      addBox(chart, item) {
        if (!chart.boxes) {
          chart.boxes = [];
        }
        item.fullSize = item.fullSize || false;
        item.position = item.position || 'top';
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
          return [{
            z: 0,
            draw(chartArea) {
              item.draw(chartArea);
            }
          }];
        };
        chart.boxes.push(item);
      },
      removeBox(chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) {
          chart.boxes.splice(index, 1);
        }
      },
      configure(chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
      },
      update(chart, width, height, minPadding) {
        if (!chart) {
          return;
        }
        const padding = toPadding(chart.options.layout.padding);
        const availableWidth = width - padding.width;
        const availableHeight = height - padding.height;
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        each(chart.boxes, box => {
          if (typeof box.beforeLayout === 'function') {
            box.beforeLayout();
          }
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>
          wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
          outerWidth: width,
          outerHeight: height,
          padding,
          availableWidth,
          availableHeight,
          vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
          hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, toPadding(minPadding));
        const chartArea = Object.assign({
          maxPadding,
          w: availableWidth,
          h: availableHeight,
          x: padding.left,
          y: padding.top
        }, padding);
        setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params);
        fitBoxes(verticalBoxes, chartArea, params);
        if (fitBoxes(horizontalBoxes, chartArea, params)) {
          fitBoxes(verticalBoxes, chartArea, params);
        }
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params);
        chart.chartArea = {
          left: chartArea.left,
          top: chartArea.top,
          right: chartArea.left + chartArea.w,
          bottom: chartArea.top + chartArea.h,
          height: chartArea.h,
          width: chartArea.w,
        };
        each(boxes.chartArea, (layout) => {
          const box = layout.box;
          Object.assign(box, chart.chartArea);
          box.update(chartArea.w, chartArea.h);
        });
      }
    };

    class BasePlatform {
      acquireContext(canvas, aspectRatio) {}
      releaseContext(context) {
        return false;
      }
      addEventListener(chart, type, listener) {}
      removeEventListener(chart, type, listener) {}
      getDevicePixelRatio() {
        return 1;
      }
      getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
          width,
          height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
      }
      isAttached(canvas) {
        return true;
      }
    }

    class BasicPlatform extends BasePlatform {
      acquireContext(item) {
        return item && item.getContext && item.getContext('2d') || null;
      }
    }

    const EXPANDO_KEY = '$chartjs';
    const EVENT_TYPES = {
      touchstart: 'mousedown',
      touchmove: 'mousemove',
      touchend: 'mouseup',
      pointerenter: 'mouseenter',
      pointerdown: 'mousedown',
      pointermove: 'mousemove',
      pointerup: 'mouseup',
      pointerleave: 'mouseout',
      pointerout: 'mouseout'
    };
    const isNullOrEmpty = value => value === null || value === '';
    function initCanvas(canvas, aspectRatio) {
      const style = canvas.style;
      const renderHeight = canvas.getAttribute('height');
      const renderWidth = canvas.getAttribute('width');
      canvas[EXPANDO_KEY] = {
        initial: {
          height: renderHeight,
          width: renderWidth,
          style: {
            display: style.display,
            height: style.height,
            width: style.width
          }
        }
      };
      style.display = style.display || 'block';
      style.boxSizing = style.boxSizing || 'border-box';
      if (isNullOrEmpty(renderWidth)) {
        const displayWidth = readUsedSize(canvas, 'width');
        if (displayWidth !== undefined) {
          canvas.width = displayWidth;
        }
      }
      if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === '') {
          canvas.height = canvas.width / (aspectRatio || 2);
        } else {
          const displayHeight = readUsedSize(canvas, 'height');
          if (displayHeight !== undefined) {
            canvas.height = displayHeight;
          }
        }
      }
      return canvas;
    }
    const eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;
    function addListener(node, type, listener) {
      node.addEventListener(type, listener, eventListenerOptions);
    }
    function removeListener(chart, type, listener) {
      chart.canvas.removeEventListener(type, listener, eventListenerOptions);
    }
    function fromNativeEvent(event, chart) {
      const type = EVENT_TYPES[event.type] || event.type;
      const {x, y} = getRelativePosition$1(event, chart);
      return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null,
      };
    }
    function createAttachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const container = canvas && _getParentNode(canvas);
      const element = container || canvas;
      const observer = new MutationObserver(entries => {
        const parent = _getParentNode(element);
        entries.forEach(entry => {
          for (let i = 0; i < entry.addedNodes.length; i++) {
            const added = entry.addedNodes[i];
            if (added === element || added === parent) {
              listener(entry.target);
            }
          }
        });
      });
      observer.observe(document, {childList: true, subtree: true});
      return observer;
    }
    function createDetachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const container = canvas && _getParentNode(canvas);
      if (!container) {
        return;
      }
      const observer = new MutationObserver(entries => {
        entries.forEach(entry => {
          for (let i = 0; i < entry.removedNodes.length; i++) {
            if (entry.removedNodes[i] === canvas) {
              listener();
              break;
            }
          }
        });
      });
      observer.observe(container, {childList: true});
      return observer;
    }
    const drpListeningCharts = new Map();
    let oldDevicePixelRatio = 0;
    function onWindowResize() {
      const dpr = window.devicePixelRatio;
      if (dpr === oldDevicePixelRatio) {
        return;
      }
      oldDevicePixelRatio = dpr;
      drpListeningCharts.forEach((resize, chart) => {
        if (chart.currentDevicePixelRatio !== dpr) {
          resize();
        }
      });
    }
    function listenDevicePixelRatioChanges(chart, resize) {
      if (!drpListeningCharts.size) {
        window.addEventListener('resize', onWindowResize);
      }
      drpListeningCharts.set(chart, resize);
    }
    function unlistenDevicePixelRatioChanges(chart) {
      drpListeningCharts.delete(chart);
      if (!drpListeningCharts.size) {
        window.removeEventListener('resize', onWindowResize);
      }
    }
    function createResizeObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const container = canvas && _getParentNode(canvas);
      if (!container) {
        return;
      }
      const resize = throttled((width, height) => {
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) {
          listener();
        }
      }, window);
      const observer = new ResizeObserver(entries => {
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) {
          return;
        }
        resize(width, height);
      });
      observer.observe(container);
      listenDevicePixelRatioChanges(chart, resize);
      return observer;
    }
    function releaseObserver(chart, type, observer) {
      if (observer) {
        observer.disconnect();
      }
      if (type === 'resize') {
        unlistenDevicePixelRatioChanges(chart);
      }
    }
    function createProxyAndListen(chart, type, listener) {
      const canvas = chart.canvas;
      const proxy = throttled((event) => {
        if (chart.ctx !== null) {
          listener(fromNativeEvent(event, chart));
        }
      }, chart, (args) => {
        const event = args[0];
        return [event, event.offsetX, event.offsetY];
      });
      addListener(canvas, type, proxy);
      return proxy;
    }
    class DomPlatform extends BasePlatform {
      acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext('2d');
        if (context && context.canvas === canvas) {
          initCanvas(canvas, aspectRatio);
          return context;
        }
        return null;
      }
      releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) {
          return false;
        }
        const initial = canvas[EXPANDO_KEY].initial;
        ['height', 'width'].forEach((prop) => {
          const value = initial[prop];
          if (isNullOrUndef(value)) {
            canvas.removeAttribute(prop);
          } else {
            canvas.setAttribute(prop, value);
          }
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key) => {
          canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
      }
      addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
          attach: createAttachObserver,
          detach: createDetachObserver,
          resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
      }
      removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) {
          return;
        }
        const handlers = {
          attach: releaseObserver,
          detach: releaseObserver,
          resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
      }
      getDevicePixelRatio() {
        return window.devicePixelRatio;
      }
      getMaximumSize(canvas, width, height, aspectRatio) {
        return getMaximumSize(canvas, width, height, aspectRatio);
      }
      isAttached(canvas) {
        const container = _getParentNode(canvas);
        return !!(container && _getParentNode(container));
      }
    }

    class Element {
      constructor() {
        this.x = undefined;
        this.y = undefined;
        this.active = false;
        this.options = undefined;
        this.$animations = undefined;
      }
      tooltipPosition(useFinalPosition) {
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return {x, y};
      }
      hasValue() {
        return isNumber(this.x) && isNumber(this.y);
      }
      getProps(props, final) {
        const me = this;
        const anims = this.$animations;
        if (!final || !anims) {
          return me;
        }
        const ret = {};
        props.forEach(prop => {
          ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];
        });
        return ret;
      }
    }
    Element.defaults = {};
    Element.defaultRoutes = undefined;

    const formatters$2 = {
      values(value) {
        return isArray(value) ? value : '' + value;
      },
      numeric(tickValue, index, ticks) {
        if (tickValue === 0) {
          return '0';
        }
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
          const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
          if (maxTick < 1e-4 || maxTick > 1e+15) {
            notation = 'scientific';
          }
          delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
      },
      logarithmic(tickValue, index, ticks) {
        if (tickValue === 0) {
          return '0';
        }
        const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));
        if (remain === 1 || remain === 2 || remain === 5) {
          return formatters$2.numeric.call(this, tickValue, index, ticks);
        }
        return '';
      }
    };
    function calculateDelta(tickValue, ticks) {
      let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
      if (Math.abs(delta) > 1 && tickValue !== Math.floor(tickValue)) {
        delta = tickValue - Math.floor(tickValue);
      }
      return delta;
    }
    var Ticks = {formatters: formatters$2};

    defaults.set('scale', {
      display: true,
      offset: false,
      reverse: false,
      beginAtZero: false,
      bounds: 'ticks',
      grace: 0,
      grid: {
        display: true,
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickLength: 8,
        tickWidth: (_ctx, options) => options.lineWidth,
        tickColor: (_ctx, options) => options.color,
        offset: false,
        borderDash: [],
        borderDashOffset: 0.0,
        borderWidth: 1
      },
      title: {
        display: false,
        text: '',
        padding: {
          top: 4,
          bottom: 4
        }
      },
      ticks: {
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        textStrokeWidth: 0,
        textStrokeColor: '',
        padding: 3,
        display: true,
        autoSkip: true,
        autoSkipPadding: 3,
        labelOffset: 0,
        callback: Ticks.formatters.values,
        minor: {},
        major: {},
        align: 'center',
        crossAlign: 'near',
        showLabelBackdrop: false,
        backdropColor: 'rgba(255, 255, 255, 0.75)',
        backdropPadding: 2,
      }
    });
    defaults.route('scale.ticks', 'color', '', 'color');
    defaults.route('scale.grid', 'color', '', 'borderColor');
    defaults.route('scale.grid', 'borderColor', '', 'borderColor');
    defaults.route('scale.title', 'color', '', 'color');
    defaults.describe('scale', {
      _fallback: false,
      _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
      _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',
    });
    defaults.describe('scales', {
      _fallback: 'scale',
    });

    function autoSkip(scale, ticks) {
      const tickOpts = scale.options.ticks;
      const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
      const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
      const numMajorIndices = majorIndices.length;
      const first = majorIndices[0];
      const last = majorIndices[numMajorIndices - 1];
      const newTicks = [];
      if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
      }
      const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
      if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
          skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        }
        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
      }
      skip(ticks, newTicks, spacing);
      return newTicks;
    }
    function determineMaxTicks(scale) {
      const offset = scale.options.offset;
      const tickLength = scale._tickSize();
      const maxScale = scale._length / tickLength + (offset ? 0 : 1);
      const maxChart = scale._maxLength / tickLength;
      return Math.floor(Math.min(maxScale, maxChart));
    }
    function calculateSpacing(majorIndices, ticks, ticksLimit) {
      const evenMajorSpacing = getEvenSpacing(majorIndices);
      const spacing = ticks.length / ticksLimit;
      if (!evenMajorSpacing) {
        return Math.max(spacing, 1);
      }
      const factors = _factorize(evenMajorSpacing);
      for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
        const factor = factors[i];
        if (factor > spacing) {
          return factor;
        }
      }
      return Math.max(spacing, 1);
    }
    function getMajorIndices(ticks) {
      const result = [];
      let i, ilen;
      for (i = 0, ilen = ticks.length; i < ilen; i++) {
        if (ticks[i].major) {
          result.push(i);
        }
      }
      return result;
    }
    function skipMajors(ticks, newTicks, majorIndices, spacing) {
      let count = 0;
      let next = majorIndices[0];
      let i;
      spacing = Math.ceil(spacing);
      for (i = 0; i < ticks.length; i++) {
        if (i === next) {
          newTicks.push(ticks[i]);
          count++;
          next = majorIndices[count * spacing];
        }
      }
    }
    function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
      const start = valueOrDefault(majorStart, 0);
      const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
      let count = 0;
      let length, i, next;
      spacing = Math.ceil(spacing);
      if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
      }
      next = start;
      while (next < 0) {
        count++;
        next = Math.round(start + count * spacing);
      }
      for (i = Math.max(start, 0); i < end; i++) {
        if (i === next) {
          newTicks.push(ticks[i]);
          count++;
          next = Math.round(start + count * spacing);
        }
      }
    }
    function getEvenSpacing(arr) {
      const len = arr.length;
      let i, diff;
      if (len < 2) {
        return false;
      }
      for (diff = arr[0], i = 1; i < len; ++i) {
        if (arr[i] - arr[i - 1] !== diff) {
          return false;
        }
      }
      return diff;
    }

    const reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;
    const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
    function sample(arr, numItems) {
      const result = [];
      const increment = arr.length / numItems;
      const len = arr.length;
      let i = 0;
      for (; i < len; i += increment) {
        result.push(arr[Math.floor(i)]);
      }
      return result;
    }
    function getPixelForGridLine(scale, index, offsetGridLines) {
      const length = scale.ticks.length;
      const validIndex = Math.min(index, length - 1);
      const start = scale._startPixel;
      const end = scale._endPixel;
      const epsilon = 1e-6;
      let lineValue = scale.getPixelForTick(validIndex);
      let offset;
      if (offsetGridLines) {
        if (length === 1) {
          offset = Math.max(lineValue - start, end - lineValue);
        } else if (index === 0) {
          offset = (scale.getPixelForTick(1) - lineValue) / 2;
        } else {
          offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        }
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) {
          return;
        }
      }
      return lineValue;
    }
    function garbageCollect(caches, length) {
      each(caches, (cache) => {
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
          for (i = 0; i < gcLen; ++i) {
            delete cache.data[gc[i]];
          }
          gc.splice(0, gcLen);
        }
      });
    }
    function getTickMarkLength(options) {
      return options.drawTicks ? options.tickLength : 0;
    }
    function getTitleHeight(options, fallback) {
      if (!options.display) {
        return 0;
      }
      const font = toFont(options.font, fallback);
      const padding = toPadding(options.padding);
      const lines = isArray(options.text) ? options.text.length : 1;
      return (lines * font.lineHeight) + padding.height;
    }
    function createScaleContext(parent, scale) {
      return Object.assign(Object.create(parent), {
        scale,
        type: 'scale'
      });
    }
    function createTickContext(parent, index, tick) {
      return Object.assign(Object.create(parent), {
        tick,
        index,
        type: 'tick'
      });
    }
    function titleAlign(align, position, reverse) {
      let ret = _toLeftRightCenter(align);
      if ((reverse && position !== 'right') || (!reverse && position === 'right')) {
        ret = reverseAlign(ret);
      }
      return ret;
    }
    function titleArgs(scale, offset, position, align) {
      const {top, left, bottom, right} = scale;
      let rotation = 0;
      let maxWidth, titleX, titleY;
      if (scale.isHorizontal()) {
        titleX = _alignStartEnd(align, left, right);
        titleY = offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
      } else {
        titleX = offsetFromEdge(scale, position, offset);
        titleY = _alignStartEnd(align, bottom, top);
        rotation = position === 'left' ? -HALF_PI : HALF_PI;
      }
      return {titleX, titleY, maxWidth, rotation};
    }
    class Scale extends Element {
      constructor(cfg) {
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
      }
      init(options) {
        const me = this;
        me.options = options.setContext(me.getContext());
        me.axis = options.axis;
        me._userMin = me.parse(options.min);
        me._userMax = me.parse(options.max);
        me._suggestedMin = me.parse(options.suggestedMin);
        me._suggestedMax = me.parse(options.suggestedMax);
      }
      parse(raw, index) {
        return raw;
      }
      getUserBounds() {
        let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;
        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
          min: finiteOrDefault(_userMin, _suggestedMin),
          max: finiteOrDefault(_userMax, _suggestedMax),
          minDefined: isNumberFinite(_userMin),
          maxDefined: isNumberFinite(_userMax)
        };
      }
      getMinMax(canStack) {
        const me = this;
        let {min, max, minDefined, maxDefined} = me.getUserBounds();
        let range;
        if (minDefined && maxDefined) {
          return {min, max};
        }
        const metas = me.getMatchingVisibleMetas();
        for (let i = 0, ilen = metas.length; i < ilen; ++i) {
          range = metas[i].controller.getMinMax(me, canStack);
          if (!minDefined) {
            min = Math.min(min, range.min);
          }
          if (!maxDefined) {
            max = Math.max(max, range.max);
          }
        }
        return {
          min: finiteOrDefault(min, finiteOrDefault(max, min)),
          max: finiteOrDefault(max, finiteOrDefault(min, max))
        };
      }
      getPadding() {
        const me = this;
        return {
          left: me.paddingLeft || 0,
          top: me.paddingTop || 0,
          right: me.paddingRight || 0,
          bottom: me.paddingBottom || 0
        };
      }
      getTicks() {
        return this.ticks;
      }
      getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
      }
      beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
      }
      beforeUpdate() {
        callback(this.options.beforeUpdate, [this]);
      }
      update(maxWidth, maxHeight, margins) {
        const me = this;
        const tickOpts = me.options.ticks;
        const sampleSize = tickOpts.sampleSize;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me._margins = margins = Object.assign({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, margins);
        me.ticks = null;
        me._labelSizes = null;
        me._gridLineItems = null;
        me._labelItems = null;
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me._maxLength = me.isHorizontal()
          ? me.width + margins.left + margins.right
          : me.height + margins.top + margins.bottom;
        if (!me._dataLimitsCached) {
          me.beforeDataLimits();
          me.determineDataLimits();
          me.afterDataLimits();
          me._range = _addGrace(me, me.options.grace);
          me._dataLimitsCached = true;
        }
        me.beforeBuildTicks();
        me.ticks = me.buildTicks() || [];
        me.afterBuildTicks();
        const samplingEnabled = sampleSize < me.ticks.length;
        me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);
        me.configure();
        me.beforeCalculateLabelRotation();
        me.calculateLabelRotation();
        me.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
          me.ticks = autoSkip(me, me.ticks);
          me._labelSizes = null;
        }
        if (samplingEnabled) {
          me._convertTicksToLabels(me.ticks);
        }
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
      }
      configure() {
        const me = this;
        let reversePixels = me.options.reverse;
        let startPixel, endPixel;
        if (me.isHorizontal()) {
          startPixel = me.left;
          endPixel = me.right;
        } else {
          startPixel = me.top;
          endPixel = me.bottom;
          reversePixels = !reversePixels;
        }
        me._startPixel = startPixel;
        me._endPixel = endPixel;
        me._reversePixels = reversePixels;
        me._length = endPixel - startPixel;
        me._alignToPixels = me.options.alignToPixels;
      }
      afterUpdate() {
        callback(this.options.afterUpdate, [this]);
      }
      beforeSetDimensions() {
        callback(this.options.beforeSetDimensions, [this]);
      }
      setDimensions() {
        const me = this;
        if (me.isHorizontal()) {
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight;
          me.top = 0;
          me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
      }
      afterSetDimensions() {
        callback(this.options.afterSetDimensions, [this]);
      }
      _callHooks(name) {
        const me = this;
        me.chart.notifyPlugins(name, me.getContext());
        callback(me.options[name], [me]);
      }
      beforeDataLimits() {
        this._callHooks('beforeDataLimits');
      }
      determineDataLimits() {}
      afterDataLimits() {
        this._callHooks('afterDataLimits');
      }
      beforeBuildTicks() {
        this._callHooks('beforeBuildTicks');
      }
      buildTicks() {
        return [];
      }
      afterBuildTicks() {
        this._callHooks('afterBuildTicks');
      }
      beforeTickToLabelConversion() {
        callback(this.options.beforeTickToLabelConversion, [this]);
      }
      generateTickLabels(ticks) {
        const me = this;
        const tickOpts = me.options.ticks;
        let i, ilen, tick;
        for (i = 0, ilen = ticks.length; i < ilen; i++) {
          tick = ticks[i];
          tick.label = callback(tickOpts.callback, [tick.value, i, ticks], me);
        }
        for (i = 0; i < ilen; i++) {
          if (isNullOrUndef(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
          }
        }
      }
      afterTickToLabelConversion() {
        callback(this.options.afterTickToLabelConversion, [this]);
      }
      beforeCalculateLabelRotation() {
        callback(this.options.beforeCalculateLabelRotation, [this]);
      }
      calculateLabelRotation() {
        const me = this;
        const options = me.options;
        const tickOpts = options.ticks;
        const numTicks = me.ticks.length;
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
          me.labelRotation = minRotation;
          return;
        }
        const labelSizes = me._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = _limitValue(me.chart.width - maxLabelWidth, 0, me.maxWidth);
        tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
          tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
          maxHeight = me.maxHeight - getTickMarkLength(options.grid)
    				- tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);
          maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
          labelRotation = toDegrees(Math.min(
            Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
            Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
          ));
          labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        me.labelRotation = labelRotation;
      }
      afterCalculateLabelRotation() {
        callback(this.options.afterCalculateLabelRotation, [this]);
      }
      beforeFit() {
        callback(this.options.beforeFit, [this]);
      }
      fit() {
        const me = this;
        const minSize = {
          width: 0,
          height: 0
        };
        const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = me;
        const display = me._isVisible();
        const isHorizontal = me.isHorizontal();
        if (display) {
          const titleHeight = getTitleHeight(titleOpts, chart.options.font);
          if (isHorizontal) {
            minSize.width = me.maxWidth;
            minSize.height = getTickMarkLength(gridOpts) + titleHeight;
          } else {
            minSize.height = me.maxHeight;
            minSize.width = getTickMarkLength(gridOpts) + titleHeight;
          }
          if (tickOpts.display && me.ticks.length) {
            const {first, last, widest, highest} = me._getLabelSizes();
            const tickPadding = tickOpts.padding * 2;
            const angleRadians = toRadians(me.labelRotation);
            const cos = Math.cos(angleRadians);
            const sin = Math.sin(angleRadians);
            if (isHorizontal) {
              const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
              minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
            } else {
              const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
              minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);
            }
            me._calculatePadding(first, last, sin, cos);
          }
        }
        me._handleMargins();
        if (isHorizontal) {
          me.width = me._length = chart.width - me._margins.left - me._margins.right;
          me.height = minSize.height;
        } else {
          me.width = minSize.width;
          me.height = me._length = chart.height - me._margins.top - me._margins.bottom;
        }
      }
      _calculatePadding(first, last, sin, cos) {
        const me = this;
        const {ticks: {align, padding}, position} = me.options;
        const isRotated = me.labelRotation !== 0;
        const labelsBelowTicks = position !== 'top' && me.axis === 'x';
        if (me.isHorizontal()) {
          const offsetLeft = me.getPixelForTick(0) - me.left;
          const offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);
          let paddingLeft = 0;
          let paddingRight = 0;
          if (isRotated) {
            if (labelsBelowTicks) {
              paddingLeft = cos * first.width;
              paddingRight = sin * last.height;
            } else {
              paddingLeft = sin * first.height;
              paddingRight = cos * last.width;
            }
          } else if (align === 'start') {
            paddingRight = last.width;
          } else if (align === 'end') {
            paddingLeft = first.width;
          } else {
            paddingLeft = first.width / 2;
            paddingRight = last.width / 2;
          }
          me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);
          me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);
        } else {
          let paddingTop = last.height / 2;
          let paddingBottom = first.height / 2;
          if (align === 'start') {
            paddingTop = 0;
            paddingBottom = first.height;
          } else if (align === 'end') {
            paddingTop = last.height;
            paddingBottom = 0;
          }
          me.paddingTop = paddingTop + padding;
          me.paddingBottom = paddingBottom + padding;
        }
      }
      _handleMargins() {
        const me = this;
        if (me._margins) {
          me._margins.left = Math.max(me.paddingLeft, me._margins.left);
          me._margins.top = Math.max(me.paddingTop, me._margins.top);
          me._margins.right = Math.max(me.paddingRight, me._margins.right);
          me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);
        }
      }
      afterFit() {
        callback(this.options.afterFit, [this]);
      }
      isHorizontal() {
        const {axis, position} = this.options;
        return position === 'top' || position === 'bottom' || axis === 'x';
      }
      isFullSize() {
        return this.options.fullSize;
      }
      _convertTicksToLabels(ticks) {
        const me = this;
        me.beforeTickToLabelConversion();
        me.generateTickLabels(ticks);
        me.afterTickToLabelConversion();
      }
      _getLabelSizes() {
        const me = this;
        let labelSizes = me._labelSizes;
        if (!labelSizes) {
          const sampleSize = me.options.ticks.sampleSize;
          let ticks = me.ticks;
          if (sampleSize < ticks.length) {
            ticks = sample(ticks, sampleSize);
          }
          me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);
        }
        return labelSizes;
      }
      _computeLabelSizes(ticks, length) {
        const {ctx, _longestTextCache: caches} = this;
        const widths = [];
        const heights = [];
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for (i = 0; i < length; ++i) {
          label = ticks[i].label;
          tickFont = this._resolveTickFontOptions(i);
          ctx.font = fontString = tickFont.string;
          cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
          lineHeight = tickFont.lineHeight;
          width = height = 0;
          if (!isNullOrUndef(label) && !isArray(label)) {
            width = _measureText(ctx, cache.data, cache.gc, width, label);
            height = lineHeight;
          } else if (isArray(label)) {
            for (j = 0, jlen = label.length; j < jlen; ++j) {
              nestedLabel = label[j];
              if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                height += lineHeight;
              }
            }
          }
          widths.push(width);
          heights.push(height);
          widestLabelSize = Math.max(width, widestLabelSize);
          highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});
        return {
          first: valueAt(0),
          last: valueAt(length - 1),
          widest: valueAt(widest),
          highest: valueAt(highest),
          widths,
          heights,
        };
      }
      getLabelForValue(value) {
        return value;
      }
      getPixelForValue(value, index) {
        return NaN;
      }
      getValueForPixel(pixel) {}
      getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) {
          return null;
        }
        return this.getPixelForValue(ticks[index].value);
      }
      getPixelForDecimal(decimal) {
        const me = this;
        if (me._reversePixels) {
          decimal = 1 - decimal;
        }
        const pixel = me._startPixel + decimal * me._length;
        return _int16Range(me._alignToPixels ? _alignPixel(me.chart, pixel, 0) : pixel);
      }
      getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
      }
      getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
      }
      getBaseValue() {
        const {min, max} = this;
        return min < 0 && max < 0 ? max :
          min > 0 && max > 0 ? min :
          0;
      }
      getContext(index) {
        const me = this;
        const ticks = me.ticks || [];
        if (index >= 0 && index < ticks.length) {
          const tick = ticks[index];
          return tick.$context ||
    				(tick.$context = createTickContext(me.getContext(), index, tick));
        }
        return me.$context ||
    			(me.$context = createScaleContext(me.chart.getContext(), me));
      }
      _tickSize() {
        const me = this;
        const optionTicks = me.options.ticks;
        const rot = toRadians(me.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = me._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return me.isHorizontal()
          ? h * cos > w * sin ? w / cos : h / sin
          : h * sin < w * cos ? h / cos : w / sin;
      }
      _isVisible() {
        const display = this.options.display;
        if (display !== 'auto') {
          return !!display;
        }
        return this.getMatchingVisibleMetas().length > 0;
      }
      _computeGridLineItems(chartArea) {
        const me = this;
        const axis = me.axis;
        const chart = me.chart;
        const options = me.options;
        const {grid, position} = options;
        const offset = grid.offset;
        const isHorizontal = me.isHorizontal();
        const ticks = me.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = grid.setContext(me.getContext());
        const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
          return _alignPixel(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === 'top') {
          borderValue = alignBorderValue(me.bottom);
          ty1 = me.bottom - tl;
          ty2 = borderValue - axisHalfWidth;
          y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
          y2 = chartArea.bottom;
        } else if (position === 'bottom') {
          borderValue = alignBorderValue(me.top);
          y1 = chartArea.top;
          y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
          ty1 = borderValue + axisHalfWidth;
          ty2 = me.top + tl;
        } else if (position === 'left') {
          borderValue = alignBorderValue(me.right);
          tx1 = me.right - tl;
          tx2 = borderValue - axisHalfWidth;
          x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
          x2 = chartArea.right;
        } else if (position === 'right') {
          borderValue = alignBorderValue(me.left);
          x1 = chartArea.left;
          x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
          tx1 = borderValue + axisHalfWidth;
          tx2 = me.left + tl;
        } else if (axis === 'x') {
          if (position === 'center') {
            borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
          }
          y1 = chartArea.top;
          y2 = chartArea.bottom;
          ty1 = borderValue + axisHalfWidth;
          ty2 = ty1 + tl;
        } else if (axis === 'y') {
          if (position === 'center') {
            borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
          }
          tx1 = borderValue - axisHalfWidth;
          tx2 = tx1 - tl;
          x1 = chartArea.left;
          x2 = chartArea.right;
        }
        for (i = 0; i < ticksLength; ++i) {
          const optsAtIndex = grid.setContext(me.getContext(i));
          const lineWidth = optsAtIndex.lineWidth;
          const lineColor = optsAtIndex.color;
          const borderDash = grid.borderDash || [];
          const borderDashOffset = optsAtIndex.borderDashOffset;
          const tickWidth = optsAtIndex.tickWidth;
          const tickColor = optsAtIndex.tickColor;
          const tickBorderDash = optsAtIndex.tickBorderDash || [];
          const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
          lineValue = getPixelForGridLine(me, i, offset);
          if (lineValue === undefined) {
            continue;
          }
          alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
          if (isHorizontal) {
            tx1 = tx2 = x1 = x2 = alignedLineValue;
          } else {
            ty1 = ty2 = y1 = y2 = alignedLineValue;
          }
          items.push({
            tx1,
            ty1,
            tx2,
            ty2,
            x1,
            y1,
            x2,
            y2,
            width: lineWidth,
            color: lineColor,
            borderDash,
            borderDashOffset,
            tickWidth,
            tickColor,
            tickBorderDash,
            tickBorderDashOffset,
          });
        }
        me._ticksLength = ticksLength;
        me._borderValue = borderValue;
        return items;
      }
      _computeLabelItems(chartArea) {
        const me = this;
        const axis = me.axis;
        const options = me.options;
        const {position, ticks: optionTicks} = options;
        const isHorizontal = me.isHorizontal();
        const ticks = me.ticks;
        const {align, crossAlign, padding, mirror} = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -toRadians(me.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = 'middle';
        if (position === 'top') {
          y = me.bottom - hTickAndPadding;
          textAlign = me._getXAxisLabelAlignment();
        } else if (position === 'bottom') {
          y = me.top + hTickAndPadding;
          textAlign = me._getXAxisLabelAlignment();
        } else if (position === 'left') {
          const ret = me._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x = ret.x;
        } else if (position === 'right') {
          const ret = me._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x = ret.x;
        } else if (axis === 'x') {
          if (position === 'center') {
            y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
          }
          textAlign = me._getXAxisLabelAlignment();
        } else if (axis === 'y') {
          if (position === 'center') {
            x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            x = me.chart.scales[positionAxisID].getPixelForValue(value);
          }
          textAlign = me._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === 'y') {
          if (align === 'start') {
            textBaseline = 'top';
          } else if (align === 'end') {
            textBaseline = 'bottom';
          }
        }
        const labelSizes = me._getLabelSizes();
        for (i = 0, ilen = ticks.length; i < ilen; ++i) {
          tick = ticks[i];
          label = tick.label;
          const optsAtIndex = optionTicks.setContext(me.getContext(i));
          pixel = me.getPixelForTick(i) + optionTicks.labelOffset;
          font = me._resolveTickFontOptions(i);
          lineHeight = font.lineHeight;
          lineCount = isArray(label) ? label.length : 1;
          const halfCount = lineCount / 2;
          const color = optsAtIndex.color;
          const strokeColor = optsAtIndex.textStrokeColor;
          const strokeWidth = optsAtIndex.textStrokeWidth;
          if (isHorizontal) {
            x = pixel;
            if (position === 'top') {
              if (crossAlign === 'near' || rotation !== 0) {
                textOffset = -lineCount * lineHeight + lineHeight / 2;
              } else if (crossAlign === 'center') {
                textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
              } else {
                textOffset = -labelSizes.highest.height + lineHeight / 2;
              }
            } else {
              if (crossAlign === 'near' || rotation !== 0) {
                textOffset = lineHeight / 2;
              } else if (crossAlign === 'center') {
                textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
              } else {
                textOffset = labelSizes.highest.height - lineCount * lineHeight;
              }
            }
            if (mirror) {
              textOffset *= -1;
            }
          } else {
            y = pixel;
            textOffset = (1 - lineCount) * lineHeight / 2;
          }
          let backdrop;
          if (optsAtIndex.showLabelBackdrop) {
            const labelPadding = toPadding(optsAtIndex.backdropPadding);
            const height = labelSizes.heights[i];
            const width = labelSizes.widths[i];
            let top = y + textOffset - labelPadding.top;
            let left = x - labelPadding.left;
            switch (textBaseline) {
            case 'middle':
              top -= height / 2;
              break;
            case 'bottom':
              top -= height;
              break;
            }
            switch (textAlign) {
            case 'center':
              left -= width / 2;
              break;
            case 'right':
              left -= width;
              break;
            }
            backdrop = {
              left,
              top,
              width: width + labelPadding.width,
              height: height + labelPadding.height,
              color: optsAtIndex.backdropColor,
            };
          }
          items.push({
            rotation,
            label,
            font,
            color,
            strokeColor,
            strokeWidth,
            textOffset,
            textAlign,
            textBaseline,
            translation: [x, y],
            backdrop,
          });
        }
        return items;
      }
      _getXAxisLabelAlignment() {
        const me = this;
        const {position, ticks} = me.options;
        const rotation = -toRadians(me.labelRotation);
        if (rotation) {
          return position === 'top' ? 'left' : 'right';
        }
        let align = 'center';
        if (ticks.align === 'start') {
          align = 'left';
        } else if (ticks.align === 'end') {
          align = 'right';
        }
        return align;
      }
      _getYAxisLabelAlignment(tl) {
        const me = this;
        const {position, ticks: {crossAlign, mirror, padding}} = me.options;
        const labelSizes = me._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === 'left') {
          if (mirror) {
            textAlign = 'left';
            x = me.right + padding;
          } else {
            x = me.right - tickAndPadding;
            if (crossAlign === 'near') {
              textAlign = 'right';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x -= (widest / 2);
            } else {
              textAlign = 'left';
              x = me.left;
            }
          }
        } else if (position === 'right') {
          if (mirror) {
            textAlign = 'right';
            x = me.left + padding;
          } else {
            x = me.left + tickAndPadding;
            if (crossAlign === 'near') {
              textAlign = 'left';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x += widest / 2;
            } else {
              textAlign = 'right';
              x = me.right;
            }
          }
        } else {
          textAlign = 'right';
        }
        return {textAlign, x};
      }
      _computeLabelArea() {
        const me = this;
        if (me.options.ticks.mirror) {
          return;
        }
        const chart = me.chart;
        const position = me.options.position;
        if (position === 'left' || position === 'right') {
          return {top: 0, left: me.left, bottom: chart.height, right: me.right};
        } if (position === 'top' || position === 'bottom') {
          return {top: me.top, left: 0, bottom: me.bottom, right: chart.width};
        }
      }
      drawBackground() {
        const {ctx, options: {backgroundColor}, left, top, width, height} = this;
        if (backgroundColor) {
          ctx.save();
          ctx.fillStyle = backgroundColor;
          ctx.fillRect(left, top, width, height);
          ctx.restore();
        }
      }
      getLineWidthForValue(value) {
        const me = this;
        const grid = me.options.grid;
        if (!me._isVisible() || !grid.display) {
          return 0;
        }
        const ticks = me.ticks;
        const index = ticks.findIndex(t => t.value === value);
        if (index >= 0) {
          const opts = grid.setContext(me.getContext(index));
          return opts.lineWidth;
        }
        return 0;
      }
      drawGrid(chartArea) {
        const me = this;
        const grid = me.options.grid;
        const ctx = me.ctx;
        const items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style) => {
          if (!style.width || !style.color) {
            return;
          }
          ctx.save();
          ctx.lineWidth = style.width;
          ctx.strokeStyle = style.color;
          ctx.setLineDash(style.borderDash || []);
          ctx.lineDashOffset = style.borderDashOffset;
          ctx.beginPath();
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.stroke();
          ctx.restore();
        };
        if (grid.display) {
          for (i = 0, ilen = items.length; i < ilen; ++i) {
            const item = items[i];
            if (grid.drawOnChartArea) {
              drawLine(
                {x: item.x1, y: item.y1},
                {x: item.x2, y: item.y2},
                item
              );
            }
            if (grid.drawTicks) {
              drawLine(
                {x: item.tx1, y: item.ty1},
                {x: item.tx2, y: item.ty2},
                {
                  color: item.tickColor,
                  width: item.tickWidth,
                  borderDash: item.tickBorderDash,
                  borderDashOffset: item.tickBorderDashOffset
                }
              );
            }
          }
        }
      }
      drawBorder() {
        const me = this;
        const {chart, ctx, options: {grid}} = me;
        const borderOpts = grid.setContext(me.getContext());
        const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
        if (!axisWidth) {
          return;
        }
        const lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;
        const borderValue = me._borderValue;
        let x1, x2, y1, y2;
        if (me.isHorizontal()) {
          x1 = _alignPixel(chart, me.left, axisWidth) - axisWidth / 2;
          x2 = _alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
          y1 = y2 = borderValue;
        } else {
          y1 = _alignPixel(chart, me.top, axisWidth) - axisWidth / 2;
          y2 = _alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
          x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.borderWidth;
        ctx.strokeStyle = borderOpts.borderColor;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
      }
      drawLabels(chartArea) {
        const me = this;
        const optionTicks = me.options.ticks;
        if (!optionTicks.display) {
          return;
        }
        const ctx = me.ctx;
        const area = me._computeLabelArea();
        if (area) {
          clipArea(ctx, area);
        }
        const items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));
        let i, ilen;
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          const item = items[i];
          const tickFont = item.font;
          const label = item.label;
          if (item.backdrop) {
            ctx.fillStyle = item.backdrop.color;
            ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
          }
          let y = item.textOffset;
          renderText(ctx, label, 0, y, tickFont, item);
        }
        if (area) {
          unclipArea(ctx);
        }
      }
      drawTitle() {
        const {ctx, options: {position, title, reverse}} = this;
        if (!title.display) {
          return;
        }
        const font = toFont(title.font);
        const padding = toPadding(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === 'bottom') {
          offset += padding.bottom;
          if (isArray(title.text)) {
            offset += font.lineHeight * (title.text.length - 1);
          }
        } else {
          offset += padding.top;
        }
        const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);
        renderText(ctx, title.text, 0, 0, font, {
          color: title.color,
          maxWidth,
          rotation,
          textAlign: titleAlign(align, position, reverse),
          textBaseline: 'middle',
          translation: [titleX, titleY],
        });
      }
      draw(chartArea) {
        const me = this;
        if (!me._isVisible()) {
          return;
        }
        me.drawBackground();
        me.drawGrid(chartArea);
        me.drawBorder();
        me.drawTitle();
        me.drawLabels(chartArea);
      }
      _layers() {
        const me = this;
        const opts = me.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = opts.grid && opts.grid.z || 0;
        if (!me._isVisible() || me.draw !== Scale.prototype.draw) {
          return [{
            z: tz,
            draw(chartArea) {
              me.draw(chartArea);
            }
          }];
        }
        return [{
          z: gz,
          draw(chartArea) {
            me.drawBackground();
            me.drawGrid(chartArea);
            me.drawTitle();
          }
        }, {
          z: gz + 1,
          draw() {
            me.drawBorder();
          }
        }, {
          z: tz,
          draw(chartArea) {
            me.drawLabels(chartArea);
          }
        }];
      }
      getMatchingVisibleMetas(type) {
        const me = this;
        const metas = me.chart.getSortedVisibleDatasetMetas();
        const axisID = me.axis + 'AxisID';
        const result = [];
        let i, ilen;
        for (i = 0, ilen = metas.length; i < ilen; ++i) {
          const meta = metas[i];
          if (meta[axisID] === me.id && (!type || meta.type === type)) {
            result.push(meta);
          }
        }
        return result;
      }
      _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return toFont(opts.font);
      }
    }

    class TypedRegistry {
      constructor(type, scope, override) {
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
      }
      isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
      }
      register(item) {
        const me = this;
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) {
          parentScope = me.register(proto);
        }
        const items = me.items;
        const id = item.id;
        const scope = me.scope + '.' + id;
        if (!id) {
          throw new Error('class does not have id: ' + item);
        }
        if (id in items) {
          return scope;
        }
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (me.override) {
          defaults.override(item.id, item.overrides);
        }
        return scope;
      }
      get(id) {
        return this.items[id];
      }
      unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) {
          delete items[id];
        }
        if (scope && id in defaults[scope]) {
          delete defaults[scope][id];
          if (this.override) {
            delete overrides[id];
          }
        }
      }
    }
    function registerDefaults(item, scope, parentScope) {
      const itemDefaults = merge(Object.create(null), [
        parentScope ? defaults.get(parentScope) : {},
        defaults.get(scope),
        item.defaults
      ]);
      defaults.set(scope, itemDefaults);
      if (item.defaultRoutes) {
        routeDefaults(scope, item.defaultRoutes);
      }
      if (item.descriptors) {
        defaults.describe(scope, item.descriptors);
      }
    }
    function routeDefaults(scope, routes) {
      Object.keys(routes).forEach(property => {
        const propertyParts = property.split('.');
        const sourceName = propertyParts.pop();
        const sourceScope = [scope].concat(propertyParts).join('.');
        const parts = routes[property].split('.');
        const targetName = parts.pop();
        const targetScope = parts.join('.');
        defaults.route(sourceScope, sourceName, targetScope, targetName);
      });
    }
    function isIChartComponent(proto) {
      return 'id' in proto && 'defaults' in proto;
    }

    class Registry {
      constructor() {
        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
        this.elements = new TypedRegistry(Element, 'elements');
        this.plugins = new TypedRegistry(Object, 'plugins');
        this.scales = new TypedRegistry(Scale, 'scales');
        this._typedRegistries = [this.controllers, this.scales, this.elements];
      }
      add(...args) {
        this._each('register', args);
      }
      remove(...args) {
        this._each('unregister', args);
      }
      addControllers(...args) {
        this._each('register', args, this.controllers);
      }
      addElements(...args) {
        this._each('register', args, this.elements);
      }
      addPlugins(...args) {
        this._each('register', args, this.plugins);
      }
      addScales(...args) {
        this._each('register', args, this.scales);
      }
      getController(id) {
        return this._get(id, this.controllers, 'controller');
      }
      getElement(id) {
        return this._get(id, this.elements, 'element');
      }
      getPlugin(id) {
        return this._get(id, this.plugins, 'plugin');
      }
      getScale(id) {
        return this._get(id, this.scales, 'scale');
      }
      removeControllers(...args) {
        this._each('unregister', args, this.controllers);
      }
      removeElements(...args) {
        this._each('unregister', args, this.elements);
      }
      removePlugins(...args) {
        this._each('unregister', args, this.plugins);
      }
      removeScales(...args) {
        this._each('unregister', args, this.scales);
      }
      _each(method, args, typedRegistry) {
        const me = this;
        [...args].forEach(arg => {
          const reg = typedRegistry || me._getRegistryForType(arg);
          if (typedRegistry || reg.isForType(arg) || (reg === me.plugins && arg.id)) {
            me._exec(method, reg, arg);
          } else {
            each(arg, item => {
              const itemReg = typedRegistry || me._getRegistryForType(item);
              me._exec(method, itemReg, item);
            });
          }
        });
      }
      _exec(method, registry, component) {
        const camelMethod = _capitalize(method);
        callback(component['before' + camelMethod], [], component);
        registry[method](component);
        callback(component['after' + camelMethod], [], component);
      }
      _getRegistryForType(type) {
        for (let i = 0; i < this._typedRegistries.length; i++) {
          const reg = this._typedRegistries[i];
          if (reg.isForType(type)) {
            return reg;
          }
        }
        return this.plugins;
      }
      _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) {
          throw new Error('"' + id + '" is not a registered ' + type + '.');
        }
        return item;
      }
    }
    var registry = new Registry();

    class PluginService {
      constructor() {
        this._init = [];
      }
      notify(chart, hook, args, filter) {
        const me = this;
        if (hook === 'beforeInit') {
          me._init = me._createDescriptors(chart, true);
          me._notify(me._init, chart, 'install');
        }
        const descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);
        const result = me._notify(descriptors, chart, hook, args);
        if (hook === 'destroy') {
          me._notify(descriptors, chart, 'stop');
          me._notify(me._init, chart, 'uninstall');
        }
        return result;
      }
      _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors) {
          const plugin = descriptor.plugin;
          const method = plugin[hook];
          const params = [chart, args, descriptor.options];
          if (callback(method, params, plugin) === false && args.cancelable) {
            return false;
          }
        }
        return true;
      }
      invalidate() {
        if (!isNullOrUndef(this._cache)) {
          this._oldCache = this._cache;
          this._cache = undefined;
        }
      }
      _descriptors(chart) {
        if (this._cache) {
          return this._cache;
        }
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
      }
      _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = valueOrDefault(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
      }
      _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
      }
    }
    function allPlugins(config) {
      const plugins = [];
      const keys = Object.keys(registry.plugins.items);
      for (let i = 0; i < keys.length; i++) {
        plugins.push(registry.getPlugin(keys[i]));
      }
      const local = config.plugins || [];
      for (let i = 0; i < local.length; i++) {
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
          plugins.push(plugin);
        }
      }
      return plugins;
    }
    function getOpts(options, all) {
      if (!all && options === false) {
        return null;
      }
      if (options === true) {
        return {};
      }
      return options;
    }
    function createDescriptors(chart, plugins, options, all) {
      const result = [];
      const context = chart.getContext();
      for (let i = 0; i < plugins.length; i++) {
        const plugin = plugins[i];
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) {
          continue;
        }
        result.push({
          plugin,
          options: pluginOpts(chart.config, plugin, opts, context)
        });
      }
      return result;
    }
    function pluginOpts(config, plugin, opts, context) {
      const keys = config.pluginScopeKeys(plugin);
      const scopes = config.getOptionScopes(opts, keys);
      return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});
    }

    function getIndexAxis(type, options) {
      const datasetDefaults = defaults.datasets[type] || {};
      const datasetOptions = (options.datasets || {})[type] || {};
      return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
    }
    function getAxisFromDefaultScaleID(id, indexAxis) {
      let axis = id;
      if (id === '_index_') {
        axis = indexAxis;
      } else if (id === '_value_') {
        axis = indexAxis === 'x' ? 'y' : 'x';
      }
      return axis;
    }
    function getDefaultScaleIDFromAxis(axis, indexAxis) {
      return axis === indexAxis ? '_index_' : '_value_';
    }
    function axisFromPosition(position) {
      if (position === 'top' || position === 'bottom') {
        return 'x';
      }
      if (position === 'left' || position === 'right') {
        return 'y';
      }
    }
    function determineAxis(id, scaleOptions) {
      if (id === 'x' || id === 'y') {
        return id;
      }
      return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
    }
    function mergeScaleConfig(config, options) {
      const chartDefaults = overrides[config.type] || {scales: {}};
      const configScales = options.scales || {};
      const chartIndexAxis = getIndexAxis(config.type, options);
      const firstIDs = Object.create(null);
      const scales = Object.create(null);
      Object.keys(configScales).forEach(id => {
        const scaleConf = configScales[id];
        const axis = determineAxis(id, scaleConf);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        firstIDs[axis] = firstIDs[axis] || id;
        scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
      });
      config.data.datasets.forEach(dataset => {
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = overrides[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach(defaultID => {
          const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
          const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;
          scales[id] = scales[id] || Object.create(null);
          mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);
        });
      });
      Object.keys(scales).forEach(key => {
        const scale = scales[key];
        mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);
      });
      return scales;
    }
    function initOptions(config) {
      const options = config.options || (config.options = {});
      options.plugins = valueOrDefault(options.plugins, {});
      options.scales = mergeScaleConfig(config, options);
    }
    function initData(data) {
      data = data || {};
      data.datasets = data.datasets || [];
      data.labels = data.labels || [];
      return data;
    }
    function initConfig(config) {
      config = config || {};
      config.data = initData(config.data);
      initOptions(config);
      return config;
    }
    const keyCache = new Map();
    const keysCached = new Set();
    function cachedKeys(cacheKey, generate) {
      let keys = keyCache.get(cacheKey);
      if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
      }
      return keys;
    }
    const addIfFound = (set, obj, key) => {
      const opts = resolveObjectKey(obj, key);
      if (opts !== undefined) {
        set.add(opts);
      }
    };
    class Config {
      constructor(config) {
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
      }
      get type() {
        return this._config.type;
      }
      set type(type) {
        this._config.type = type;
      }
      get data() {
        return this._config.data;
      }
      set data(data) {
        this._config.data = initData(data);
      }
      get options() {
        return this._config.options;
      }
      set options(options) {
        this._config.options = options;
      }
      get plugins() {
        return this._config.plugins;
      }
      update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
      }
      clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
      }
      datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType,
          () => [[
            `datasets.${datasetType}`,
            ''
          ]]);
      }
      datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`,
          () => [
            [
              `datasets.${datasetType}.transitions.${transition}`,
              `transitions.${transition}`,
            ],
            [
              `datasets.${datasetType}`,
              ''
            ]
          ]);
      }
      datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`,
          () => [[
            `datasets.${datasetType}.elements.${elementType}`,
            `datasets.${datasetType}`,
            `elements.${elementType}`,
            ''
          ]]);
      }
      pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`,
          () => [[
            `plugins.${id}`,
            ...plugin.additionalOptionScopes || [],
          ]]);
      }
      _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
          cache = new Map();
          _scopeCache.set(mainScope, cache);
        }
        return cache;
      }
      getOptionScopes(mainScope, keyLists, resetCache) {
        const {options, type} = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) {
          return cached;
        }
        const scopes = new Set();
        keyLists.forEach(keys => {
          if (mainScope) {
            scopes.add(mainScope);
            keys.forEach(key => addIfFound(scopes, mainScope, key));
          }
          keys.forEach(key => addIfFound(scopes, options, key));
          keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));
          keys.forEach(key => addIfFound(scopes, defaults, key));
          keys.forEach(key => addIfFound(scopes, descriptors, key));
        });
        const array = [...scopes];
        if (keysCached.has(keyLists)) {
          cache.set(keyLists, array);
        }
        return array;
      }
      chartOptionScopes() {
        const {options, type} = this;
        return [
          options,
          overrides[type] || {},
          defaults.datasets[type] || {},
          {type},
          defaults,
          descriptors
        ];
      }
      resolveNamedOptions(scopes, names, context, prefixes = ['']) {
        const result = {$shared: true};
        const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
          result.$shared = false;
          context = isFunction(context) ? context() : context;
          const subResolver = this.createResolver(scopes, context, subPrefixes);
          options = _attachContext(resolver, context, subResolver);
        }
        for (const prop of names) {
          result[prop] = options[prop];
        }
        return result;
      }
      createResolver(scopes, context, prefixes = [''], descriptorDefaults) {
        const {resolver} = getResolver(this._resolverCache, scopes, prefixes);
        return isObject(context)
          ? _attachContext(resolver, context, undefined, descriptorDefaults)
          : resolver;
      }
    }
    function getResolver(resolverCache, scopes, prefixes) {
      let cache = resolverCache.get(scopes);
      if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
      }
      const cacheKey = prefixes.join();
      let cached = cache.get(cacheKey);
      if (!cached) {
        const resolver = _createResolver(scopes, prefixes);
        cached = {
          resolver,
          subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))
        };
        cache.set(cacheKey, cached);
      }
      return cached;
    }
    function needContext(proxy, names) {
      const {isScriptable, isIndexable} = _descriptors(proxy);
      for (const prop of names) {
        if ((isScriptable(prop) && isFunction(proxy[prop]))
          || (isIndexable(prop) && isArray(proxy[prop]))) {
          return true;
        }
      }
      return false;
    }

    var version = "3.2.0";

    const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];
    function positionIsHorizontal(position, axis) {
      return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');
    }
    function compare2Level(l1, l2) {
      return function(a, b) {
        return a[l1] === b[l1]
          ? a[l2] - b[l2]
          : a[l1] - b[l1];
      };
    }
    function onAnimationsComplete(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      chart.notifyPlugins('afterRender');
      callback(animationOptions && animationOptions.onComplete, [context], chart);
    }
    function onAnimationProgress(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      callback(animationOptions && animationOptions.onProgress, [context], chart);
    }
    function isDomSupported() {
      return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    function getCanvas(item) {
      if (isDomSupported() && typeof item === 'string') {
        item = document.getElementById(item);
      } else if (item && item.length) {
        item = item[0];
      }
      if (item && item.canvas) {
        item = item.canvas;
      }
      return item;
    }
    const instances = {};
    const getChart = (key) => {
      const canvas = getCanvas(key);
      return Object.values(instances).filter((c) => c.canvas === canvas).pop();
    };
    class Chart {
      constructor(item, config) {
        const me = this;
        this.config = config = new Config(config);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) {
          throw new Error(
            'Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' +
    				' must be destroyed before the canvas can be reused.'
          );
        }
        const options = config.createResolver(config.chartOptionScopes(), me.getContext());
        this.platform = me._initializePlatform(initialCanvas, config);
        const context = me.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = uid();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._sortedMetasets = [];
        this.scales = {};
        this.scale = undefined;
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = debounce(() => this.update('resize'), options.resizeDelay || 0);
        instances[me.id] = me;
        if (!context || !canvas) {
          console.error("Failed to create chart: can't acquire context from the given item");
          return;
        }
        animator.listen(me, 'complete', onAnimationsComplete);
        animator.listen(me, 'progress', onAnimationProgress);
        me._initialize();
        if (me.attached) {
          me.update();
        }
      }
      get aspectRatio() {
        const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;
        if (!isNullOrUndef(aspectRatio)) {
          return aspectRatio;
        }
        if (maintainAspectRatio && _aspectRatio) {
          return _aspectRatio;
        }
        return height ? width / height : null;
      }
      get data() {
        return this.config.data;
      }
      set data(data) {
        this.config.data = data;
      }
      get options() {
        return this._options;
      }
      set options(options) {
        this.config.options = options;
      }
      _initialize() {
        const me = this;
        me.notifyPlugins('beforeInit');
        if (me.options.responsive) {
          me.resize();
        } else {
          retinaScale(me, me.options.devicePixelRatio);
        }
        me.bindEvents();
        me.notifyPlugins('afterInit');
        return me;
      }
      _initializePlatform(canvas, config) {
        if (config.platform) {
          return new config.platform();
        } else if (!isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {
          return new BasicPlatform();
        }
        return new DomPlatform();
      }
      clear() {
        clearCanvas(this.canvas, this.ctx);
        return this;
      }
      stop() {
        animator.stop(this);
        return this;
      }
      resize(width, height) {
        if (!animator.running(this)) {
          this._resize(width, height);
        } else {
          this._resizeBeforeDraw = {width, height};
        }
      }
      _resize(width, height) {
        const me = this;
        const options = me.options;
        const canvas = me.canvas;
        const aspectRatio = options.maintainAspectRatio && me.aspectRatio;
        const newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const oldRatio = me.currentDevicePixelRatio;
        const newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();
        if (me.width === newSize.width && me.height === newSize.height && oldRatio === newRatio) {
          return;
        }
        me.width = newSize.width;
        me.height = newSize.height;
        me._aspectRatio = me.aspectRatio;
        retinaScale(me, newRatio, true);
        me.notifyPlugins('resize', {size: newSize});
        callback(options.onResize, [me, newSize], me);
        if (me.attached) {
          if (me._doResize()) {
            me.render();
          }
        }
      }
      ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        each(scalesOptions, (axisOptions, axisID) => {
          axisOptions.id = axisID;
        });
      }
      buildOrUpdateScales() {
        const me = this;
        const options = me.options;
        const scaleOpts = options.scales;
        const scales = me.scales;
        const updated = Object.keys(scales).reduce((obj, id) => {
          obj[id] = false;
          return obj;
        }, {});
        let items = [];
        if (scaleOpts) {
          items = items.concat(
            Object.keys(scaleOpts).map((id) => {
              const scaleOptions = scaleOpts[id];
              const axis = determineAxis(id, scaleOptions);
              const isRadial = axis === 'r';
              const isHorizontal = axis === 'x';
              return {
                options: scaleOptions,
                dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
              };
            })
          );
        }
        each(items, (item) => {
          const scaleOptions = item.options;
          const id = scaleOptions.id;
          const axis = determineAxis(id, scaleOptions);
          const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
          if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
            scaleOptions.position = item.dposition;
          }
          updated[id] = true;
          let scale = null;
          if (id in scales && scales[id].type === scaleType) {
            scale = scales[id];
          } else {
            const scaleClass = registry.getScale(scaleType);
            scale = new scaleClass({
              id,
              type: scaleType,
              ctx: me.ctx,
              chart: me
            });
            scales[scale.id] = scale;
          }
          scale.init(scaleOptions, options);
        });
        each(updated, (hasUpdated, id) => {
          if (!hasUpdated) {
            delete scales[id];
          }
        });
        each(scales, (scale) => {
          layouts.configure(me, scale, scale.options);
          layouts.addBox(me, scale);
        });
      }
      _updateMetasetIndex(meta, index) {
        const metasets = this._metasets;
        const oldIndex = meta.index;
        if (oldIndex !== index) {
          metasets[oldIndex] = metasets[index];
          metasets[index] = meta;
          meta.index = index;
        }
      }
      _updateMetasets() {
        const me = this;
        const metasets = me._metasets;
        const numData = me.data.datasets.length;
        const numMeta = metasets.length;
        if (numMeta > numData) {
          for (let i = numData; i < numMeta; ++i) {
            me._destroyDatasetMeta(i);
          }
          metasets.splice(numData, numMeta - numData);
        }
        me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
      }
      _removeUnreferencedMetasets() {
        const me = this;
        const {_metasets: metasets, data: {datasets}} = me;
        if (metasets.length > datasets.length) {
          delete me._stacks;
        }
        metasets.forEach((meta, index) => {
          if (datasets.filter(x => x === meta._dataset).length === 0) {
            me._destroyDatasetMeta(index);
          }
        });
      }
      buildOrUpdateControllers() {
        const me = this;
        const newControllers = [];
        const datasets = me.data.datasets;
        let i, ilen;
        me._removeUnreferencedMetasets();
        for (i = 0, ilen = datasets.length; i < ilen; i++) {
          const dataset = datasets[i];
          let meta = me.getDatasetMeta(i);
          const type = dataset.type || me.config.type;
          if (meta.type && meta.type !== type) {
            me._destroyDatasetMeta(i);
            meta = me.getDatasetMeta(i);
          }
          meta.type = type;
          meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);
          meta.order = dataset.order || 0;
          me._updateMetasetIndex(meta, i);
          meta.label = '' + dataset.label;
          meta.visible = me.isDatasetVisible(i);
          if (meta.controller) {
            meta.controller.updateIndex(i);
            meta.controller.linkScales();
          } else {
            const ControllerClass = registry.getController(type);
            const {datasetElementType, dataElementType} = defaults.datasets[type];
            Object.assign(ControllerClass.prototype, {
              dataElementType: registry.getElement(dataElementType),
              datasetElementType: datasetElementType && registry.getElement(datasetElementType)
            });
            meta.controller = new ControllerClass(me, i);
            newControllers.push(meta.controller);
          }
        }
        me._updateMetasets();
        return newControllers;
      }
      _resetElements() {
        const me = this;
        each(me.data.datasets, (dataset, datasetIndex) => {
          me.getDatasetMeta(datasetIndex).controller.reset();
        }, me);
      }
      reset() {
        this._resetElements();
        this.notifyPlugins('reset');
      }
      update(mode) {
        const me = this;
        const config = me.config;
        config.update();
        me._options = config.createResolver(config.chartOptionScopes(), me.getContext());
        each(me.scales, (scale) => {
          layouts.removeBox(me, scale);
        });
        const animsDisabled = me._animationsDisabled = !me.options.animation;
        me.ensureScalesHaveIDs();
        me.buildOrUpdateScales();
        const existingEvents = new Set(Object.keys(me._listeners));
        const newEvents = new Set(me.options.events);
        if (!setsEqual(existingEvents, newEvents)) {
          me.unbindEvents();
          me.bindEvents();
        }
        me._plugins.invalidate();
        if (me.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {
          return;
        }
        const newControllers = me.buildOrUpdateControllers();
        me.notifyPlugins('beforeElementsUpdate');
        let minPadding = 0;
        for (let i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
          const {controller} = me.getDatasetMeta(i);
          const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
          controller.buildOrUpdateElements(reset);
          minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        me._minPadding = minPadding;
        me._updateLayout(minPadding);
        if (!animsDisabled) {
          each(newControllers, (controller) => {
            controller.reset();
          });
        }
        me._updateDatasets(mode);
        me.notifyPlugins('afterUpdate', {mode});
        me._layers.sort(compare2Level('z', '_idx'));
        if (me._lastEvent) {
          me._eventHandler(me._lastEvent, true);
        }
        me.render();
      }
      _updateLayout(minPadding) {
        const me = this;
        if (me.notifyPlugins('beforeLayout', {cancelable: true}) === false) {
          return;
        }
        layouts.update(me, me.width, me.height, minPadding);
        const area = me.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        me._layers = [];
        each(me.boxes, (box) => {
          if (noArea && box.position === 'chartArea') {
            return;
          }
          if (box.configure) {
            box.configure();
          }
          me._layers.push(...box._layers());
        }, me);
        me._layers.forEach((item, index) => {
          item._idx = index;
        });
        me.notifyPlugins('afterLayout');
      }
      _updateDatasets(mode) {
        const me = this;
        const isFunction = typeof mode === 'function';
        if (me.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {
          return;
        }
        for (let i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
          me._updateDataset(i, isFunction ? mode({datasetIndex: i}) : mode);
        }
        me.notifyPlugins('afterDatasetsUpdate', {mode});
      }
      _updateDataset(index, mode) {
        const me = this;
        const meta = me.getDatasetMeta(index);
        const args = {meta, index, mode, cancelable: true};
        if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {
          return;
        }
        meta.controller._update(mode);
        args.cancelable = false;
        me.notifyPlugins('afterDatasetUpdate', args);
      }
      render() {
        const me = this;
        if (me.notifyPlugins('beforeRender', {cancelable: true}) === false) {
          return;
        }
        if (animator.has(me)) {
          if (me.attached && !animator.running(me)) {
            animator.start(me);
          }
        } else {
          me.draw();
          onAnimationsComplete({chart: me});
        }
      }
      draw() {
        const me = this;
        let i;
        if (me._resizeBeforeDraw) {
          const {width, height} = me._resizeBeforeDraw;
          me._resize(width, height);
          me._resizeBeforeDraw = null;
        }
        me.clear();
        if (me.width <= 0 || me.height <= 0) {
          return;
        }
        if (me.notifyPlugins('beforeDraw', {cancelable: true}) === false) {
          return;
        }
        const layers = me._layers;
        for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
          layers[i].draw(me.chartArea);
        }
        me._drawDatasets();
        for (; i < layers.length; ++i) {
          layers[i].draw(me.chartArea);
        }
        me.notifyPlugins('afterDraw');
      }
      _getSortedDatasetMetas(filterVisible) {
        const me = this;
        const metasets = me._sortedMetasets;
        const result = [];
        let i, ilen;
        for (i = 0, ilen = metasets.length; i < ilen; ++i) {
          const meta = metasets[i];
          if (!filterVisible || meta.visible) {
            result.push(meta);
          }
        }
        return result;
      }
      getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
      }
      _drawDatasets() {
        const me = this;
        if (me.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {
          return;
        }
        const metasets = me.getSortedVisibleDatasetMetas();
        for (let i = metasets.length - 1; i >= 0; --i) {
          me._drawDataset(metasets[i]);
        }
        me.notifyPlugins('afterDatasetsDraw');
      }
      _drawDataset(meta) {
        const me = this;
        const ctx = me.ctx;
        const clip = meta._clip;
        const area = me.chartArea;
        const args = {
          meta,
          index: meta.index,
          cancelable: true
        };
        if (me.notifyPlugins('beforeDatasetDraw', args) === false) {
          return;
        }
        clipArea(ctx, {
          left: clip.left === false ? 0 : area.left - clip.left,
          right: clip.right === false ? me.width : area.right + clip.right,
          top: clip.top === false ? 0 : area.top - clip.top,
          bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom
        });
        meta.controller.draw();
        unclipArea(ctx);
        args.cancelable = false;
        me.notifyPlugins('afterDatasetDraw', args);
      }
      getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === 'function') {
          return method(this, e, options, useFinalPosition);
        }
        return [];
      }
      getDatasetMeta(datasetIndex) {
        const me = this;
        const dataset = me.data.datasets[datasetIndex];
        const metasets = me._metasets;
        let meta = metasets.filter(x => x && x._dataset === dataset).pop();
        if (!meta) {
          meta = metasets[datasetIndex] = {
            type: null,
            data: [],
            dataset: null,
            controller: null,
            hidden: null,
            xAxisID: null,
            yAxisID: null,
            order: dataset && dataset.order || 0,
            index: datasetIndex,
            _dataset: dataset,
            _parsed: [],
            _sorted: false
          };
        }
        return meta;
      }
      getContext() {
        return this.$context || (this.$context = {chart: this, type: 'chart'});
      }
      getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
      }
      isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) {
          return false;
        }
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
      }
      setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
      }
      toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
      }
      getDataVisibility(index) {
        return !this._hiddenIndices[index];
      }
      _updateDatasetVisibility(datasetIndex, visible) {
        const me = this;
        const mode = visible ? 'show' : 'hide';
        const meta = me.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        me.setDatasetVisibility(datasetIndex, visible);
        anims.update(meta, {visible});
        me.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);
      }
      hide(datasetIndex) {
        this._updateDatasetVisibility(datasetIndex, false);
      }
      show(datasetIndex) {
        this._updateDatasetVisibility(datasetIndex, true);
      }
      _destroyDatasetMeta(datasetIndex) {
        const me = this;
        const meta = me._metasets && me._metasets[datasetIndex];
        if (meta && meta.controller) {
          meta.controller._destroy();
          delete me._metasets[datasetIndex];
        }
      }
      destroy() {
        const me = this;
        const {canvas, ctx} = me;
        let i, ilen;
        me.stop();
        animator.remove(me);
        for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
          me._destroyDatasetMeta(i);
        }
        me.config.clearCache();
        if (canvas) {
          me.unbindEvents();
          clearCanvas(canvas, ctx);
          me.platform.releaseContext(ctx);
          me.canvas = null;
          me.ctx = null;
        }
        me.notifyPlugins('destroy');
        delete instances[me.id];
      }
      toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
      }
      bindEvents() {
        const me = this;
        const listeners = me._listeners;
        const platform = me.platform;
        const _add = (type, listener) => {
          platform.addEventListener(me, type, listener);
          listeners[type] = listener;
        };
        const _remove = (type, listener) => {
          if (listeners[type]) {
            platform.removeEventListener(me, type, listener);
            delete listeners[type];
          }
        };
        let listener = function(e, x, y) {
          e.offsetX = x;
          e.offsetY = y;
          me._eventHandler(e);
        };
        each(me.options.events, (type) => _add(type, listener));
        if (me.options.responsive) {
          listener = (width, height) => {
            if (me.canvas) {
              me.resize(width, height);
            }
          };
          let detached;
          const attached = () => {
            _remove('attach', attached);
            me.attached = true;
            me.resize();
            _add('resize', listener);
            _add('detach', detached);
          };
          detached = () => {
            me.attached = false;
            _remove('resize', listener);
            _add('attach', attached);
          };
          if (platform.isAttached(me.canvas)) {
            attached();
          } else {
            detached();
          }
        } else {
          me.attached = true;
        }
      }
      unbindEvents() {
        const me = this;
        const listeners = me._listeners;
        if (!listeners) {
          return;
        }
        me._listeners = {};
        each(listeners, (listener, type) => {
          me.platform.removeEventListener(me, type, listener);
        });
      }
      updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? 'set' : 'remove';
        let meta, item, i, ilen;
        if (mode === 'dataset') {
          meta = this.getDatasetMeta(items[0].datasetIndex);
          meta.controller['_' + prefix + 'DatasetHoverStyle']();
        }
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          item = items[i];
          const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
          if (controller) {
            controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
          }
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements) {
        const me = this;
        const lastActive = me._active || [];
        const active = activeElements.map(({datasetIndex, index}) => {
          const meta = me.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error('No dataset found at index ' + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index],
            index,
          };
        });
        const changed = !_elementsEqual(active, lastActive);
        if (changed) {
          me._active = active;
          me._updateHoverStyles(active, lastActive);
        }
      }
      notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
      }
      _updateHoverStyles(active, lastActive, replay) {
        const me = this;
        const hoverOptions = me.options.hover;
        const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) {
          me.updateHoverStyle(deactivated, hoverOptions.mode, false);
        }
        if (activated.length && hoverOptions.mode) {
          me.updateHoverStyle(activated, hoverOptions.mode, true);
        }
      }
      _eventHandler(e, replay) {
        const me = this;
        const args = {event: e, replay, cancelable: true};
        const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.type);
        if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {
          return;
        }
        const changed = me._handleEvent(e, replay);
        args.cancelable = false;
        me.notifyPlugins('afterEvent', args, eventFilter);
        if (changed || args.changed) {
          me.render();
        }
        return me;
      }
      _handleEvent(e, replay) {
        const me = this;
        const {_active: lastActive = [], options} = me;
        const hoverOptions = options.hover;
        const useFinalPosition = replay;
        let active = [];
        let changed = false;
        let lastEvent = null;
        if (e.type !== 'mouseout') {
          active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
          lastEvent = e.type === 'click' ? me._lastEvent : e;
        }
        me._lastEvent = null;
        if (_isPointInArea(e, me.chartArea, me._minPadding)) {
          callback(options.onHover, [e, active, me], me);
          if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {
            callback(options.onClick, [e, active, me], me);
          }
        }
        changed = !_elementsEqual(active, lastActive);
        if (changed || replay) {
          me._active = active;
          me._updateHoverStyles(active, lastActive, replay);
        }
        me._lastEvent = lastEvent;
        return changed;
      }
    }
    const invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());
    const enumerable = true;
    Object.defineProperties(Chart, {
      defaults: {
        enumerable,
        value: defaults
      },
      instances: {
        enumerable,
        value: instances
      },
      overrides: {
        enumerable,
        value: overrides
      },
      registry: {
        enumerable,
        value: registry
      },
      version: {
        enumerable,
        value: version
      },
      getChart: {
        enumerable,
        value: getChart
      },
      register: {
        enumerable,
        value: (...items) => {
          registry.add(...items);
          invalidatePlugins();
        }
      },
      unregister: {
        enumerable,
        value: (...items) => {
          registry.remove(...items);
          invalidatePlugins();
        }
      }
    });

    function clipArc(ctx, element) {
      const {startAngle, endAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;
      let angleMargin = pixelMargin / outerRadius;
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
      if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
      } else {
        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
      }
      ctx.closePath();
      ctx.clip();
    }
    function toRadiusCorners(value) {
      return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
    }
    function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
      const o = toRadiusCorners(arc.options.borderRadius);
      const halfThickness = (outerRadius - innerRadius) / 2;
      const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
      const computeOuterLimit = (val) => {
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
      };
      return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: _limitValue(o.innerStart, 0, innerLimit),
        innerEnd: _limitValue(o.innerEnd, 0, innerLimit),
      };
    }
    function rThetaToXY(r, theta, x, y) {
      return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta),
      };
    }
    function pathArc(ctx, element) {
      const {x, y, startAngle, endAngle, pixelMargin} = element;
      const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
      const innerRadius = element.innerRadius + pixelMargin;
      const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
      const outerStartAdjustedRadius = outerRadius - outerStart;
      const outerEndAdjustedRadius = outerRadius - outerEnd;
      const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
      const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
      const innerStartAdjustedRadius = innerRadius + innerStart;
      const innerEndAdjustedRadius = innerRadius + innerEnd;
      const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
      const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
      if (outerEnd > 0) {
        const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
      }
      const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
      ctx.lineTo(p4.x, p4.y);
      if (innerEnd > 0) {
        const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
      }
      ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);
      if (innerStart > 0) {
        const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
      }
      const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
      ctx.lineTo(p8.x, p8.y);
      if (outerStart > 0) {
        const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
      }
      ctx.closePath();
    }
    function drawArc(ctx, element) {
      if (element.fullCircles) {
        element.endAngle = element.startAngle + TAU;
        pathArc(ctx, element);
        for (let i = 0; i < element.fullCircles; ++i) {
          ctx.fill();
        }
      }
      if (!isNaN(element.circumference)) {
        element.endAngle = element.startAngle + element.circumference % TAU;
      }
      pathArc(ctx, element);
      ctx.fill();
    }
    function drawFullCircleBorders(ctx, element, inner) {
      const {x, y, startAngle, endAngle, pixelMargin} = element;
      const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
      const innerRadius = element.innerRadius + pixelMargin;
      let i;
      if (inner) {
        element.endAngle = element.startAngle + TAU;
        clipArc(ctx, element);
        element.endAngle = endAngle;
        if (element.endAngle === element.startAngle) {
          element.endAngle += TAU;
          element.fullCircles--;
        }
      }
      ctx.beginPath();
      ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);
      for (i = 0; i < element.fullCircles; ++i) {
        ctx.stroke();
      }
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);
      for (i = 0; i < element.fullCircles; ++i) {
        ctx.stroke();
      }
    }
    function drawBorder(ctx, element) {
      const {options} = element;
      const inner = options.borderAlign === 'inner';
      if (!options.borderWidth) {
        return;
      }
      if (inner) {
        ctx.lineWidth = options.borderWidth * 2;
        ctx.lineJoin = 'round';
      } else {
        ctx.lineWidth = options.borderWidth;
        ctx.lineJoin = 'bevel';
      }
      if (element.fullCircles) {
        drawFullCircleBorders(ctx, element, inner);
      }
      if (inner) {
        clipArc(ctx, element);
      }
      pathArc(ctx, element);
      ctx.stroke();
    }
    class ArcElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps(['x', 'y'], useFinalPosition);
        const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});
        const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([
          'startAngle',
          'endAngle',
          'innerRadius',
          'outerRadius',
          'circumference'
        ], useFinalPosition);
        const betweenAngles = circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
        const withinRadius = (distance >= innerRadius && distance <= outerRadius);
        return (betweenAngles && withinRadius);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([
          'x',
          'y',
          'startAngle',
          'endAngle',
          'innerRadius',
          'outerRadius'
        ], useFinalPosition);
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius) / 2;
        return {
          x: x + Math.cos(halfAngle) * halfRadius,
          y: y + Math.sin(halfAngle) * halfRadius
        };
      }
      tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
      }
      draw(ctx) {
        const me = this;
        const options = me.options;
        const offset = options.offset || 0;
        me.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;
        me.fullCircles = Math.floor(me.circumference / TAU);
        if (me.circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {
          return;
        }
        ctx.save();
        if (offset && me.circumference < TAU) {
          const halfAngle = (me.startAngle + me.endAngle) / 2;
          ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
        }
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        drawArc(ctx, me);
        drawBorder(ctx, me);
        ctx.restore();
      }
    }
    ArcElement.id = 'arc';
    ArcElement.defaults = {
      borderAlign: 'center',
      borderColor: '#fff',
      borderRadius: 0,
      borderWidth: 2,
      offset: 0,
      angle: undefined,
    };
    ArcElement.defaultRoutes = {
      backgroundColor: 'backgroundColor'
    };

    function setStyle(ctx, options, style = options) {
      ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
      ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
      ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
      ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
      ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
      ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
    }
    function lineTo(ctx, previous, target) {
      ctx.lineTo(target.x, target.y);
    }
    function getLineMethod(options) {
      if (options.stepped) {
        return _steppedLineTo;
      }
      if (options.tension) {
        return _bezierCurveTo;
      }
      return lineTo;
    }
    function pathVars(points, segment, params = {}) {
      const count = points.length;
      const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;
      const {start: segmentStart, end: segmentEnd} = segment;
      const start = Math.max(paramsStart, segmentStart);
      const end = Math.min(paramsEnd, segmentEnd);
      const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
      return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
      };
    }
    function pathSegment(ctx, line, segment, params) {
      const {points, options} = line;
      const {count, start, loop, ilen} = pathVars(points, segment, params);
      const lineMethod = getLineMethod(options);
      let {move = true, reverse} = params || {};
      let i, point, prev;
      for (i = 0; i <= ilen; ++i) {
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) {
          continue;
        } else if (move) {
          ctx.moveTo(point.x, point.y);
          move = false;
        } else {
          lineMethod(ctx, prev, point, reverse, options.stepped);
        }
        prev = point;
      }
      if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
      }
      return !!loop;
    }
    function fastPathSegment(ctx, line, segment, params) {
      const points = line.points;
      const {count, start, ilen} = pathVars(points, segment, params);
      const {move = true, reverse} = params || {};
      let avgX = 0;
      let countX = 0;
      let i, point, prevX, minY, maxY, lastY;
      const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;
      const drawX = () => {
        if (minY !== maxY) {
          ctx.lineTo(avgX, maxY);
          ctx.lineTo(avgX, minY);
          ctx.lineTo(avgX, lastY);
        }
      };
      if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
      }
      for (i = 0; i <= ilen; ++i) {
        point = points[pointIndex(i)];
        if (point.skip) {
          continue;
        }
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
          if (y < minY) {
            minY = y;
          } else if (y > maxY) {
            maxY = y;
          }
          avgX = (countX * avgX + x) / ++countX;
        } else {
          drawX();
          ctx.lineTo(x, y);
          prevX = truncX;
          countX = 0;
          minY = maxY = y;
        }
        lastY = y;
      }
      drawX();
    }
    function _getSegmentMethod(line) {
      const opts = line.options;
      const borderDash = opts.borderDash && opts.borderDash.length;
      const useFastPath = !line._decimated && !line._loop && !opts.tension && !opts.stepped && !borderDash;
      return useFastPath ? fastPathSegment : pathSegment;
    }
    function _getInterpolationMethod(options) {
      if (options.stepped) {
        return _steppedInterpolation;
      }
      if (options.tension) {
        return _bezierInterpolation;
      }
      return _pointInLine;
    }
    function strokePathWithCache(ctx, line, start, count) {
      let path = line._path;
      if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) {
          path.closePath();
        }
      }
      setStyle(ctx, line.options);
      ctx.stroke(path);
    }
    function strokePathDirect(ctx, line, start, count) {
      const {segments, options} = line;
      const segmentMethod = _getSegmentMethod(line);
      for (const segment of segments) {
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {
          ctx.closePath();
        }
        ctx.stroke();
      }
    }
    const usePath2D = typeof Path2D === 'function';
    function draw(ctx, line, start, count) {
      if (usePath2D && line.segments.length === 1) {
        strokePathWithCache(ctx, line, start, count);
      } else {
        strokePathDirect(ctx, line, start, count);
      }
    }
    class LineElement extends Element {
      constructor(cfg) {
        super();
        this.animated = true;
        this.options = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      updateControlPoints(chartArea) {
        const me = this;
        const options = me.options;
        if (options.tension && !options.stepped && !me._pointsUpdated) {
          const loop = options.spanGaps ? me._loop : me._fullLoop;
          _updateBezierControlPoints(me._points, options, chartArea, loop);
          me._pointsUpdated = true;
        }
      }
      set points(points) {
        const me = this;
        me._points = points;
        delete me._segments;
        delete me._path;
        me._pointsUpdated = false;
      }
      get points() {
        return this._points;
      }
      get segments() {
        return this._segments || (this._segments = _computeSegments(this, this.options.segment));
      }
      first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
      }
      last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
      }
      interpolate(point, property) {
        const me = this;
        const options = me.options;
        const value = point[property];
        const points = me.points;
        const segments = _boundSegments(me, {property, start: value, end: value});
        if (!segments.length) {
          return;
        }
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for (i = 0, ilen = segments.length; i < ilen; ++i) {
          const {start, end} = segments[i];
          const p1 = points[start];
          const p2 = points[end];
          if (p1 === p2) {
            result.push(p1);
            continue;
          }
          const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
          const interpolated = _interpolate(p1, p2, t, options.stepped);
          interpolated[property] = point[property];
          result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
      }
      pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
      }
      path(ctx, start, count) {
        const me = this;
        const segments = me.segments;
        const segmentMethod = _getSegmentMethod(me);
        let loop = me._loop;
        start = start || 0;
        count = count || (me.points.length - start);
        for (const segment of segments) {
          loop &= segmentMethod(ctx, me, segment, {start, end: start + count - 1});
        }
        return !!loop;
      }
      draw(ctx, chartArea, start, count) {
        const me = this;
        const options = me.options || {};
        const points = me.points || [];
        if (!points.length || !options.borderWidth) {
          return;
        }
        ctx.save();
        draw(ctx, me, start, count);
        ctx.restore();
        if (me.animated) {
          me._pointsUpdated = false;
          me._path = undefined;
        }
      }
    }
    LineElement.id = 'line';
    LineElement.defaults = {
      borderCapStyle: 'butt',
      borderDash: [],
      borderDashOffset: 0,
      borderJoinStyle: 'miter',
      borderWidth: 3,
      capBezierPoints: true,
      cubicInterpolationMode: 'default',
      fill: false,
      spanGaps: false,
      stepped: false,
      tension: 0,
    };
    LineElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };
    LineElement.descriptors = {
      _scriptable: true,
      _indexable: (name) => name !== 'borderDash' && name !== 'fill',
    };

    function inRange$1(el, pos, axis, useFinalPosition) {
      const options = el.options;
      const {[axis]: value} = el.getProps([axis], useFinalPosition);
      return (Math.abs(pos - value) < options.radius + options.hitRadius);
    }
    class PointElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, 'x', useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, 'y', useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return {x, y};
      }
      size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
      }
      draw(ctx) {
        const me = this;
        const options = me.options;
        if (me.skip || options.radius < 0.1) {
          return;
        }
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        drawPoint(ctx, options, me.x, me.y);
      }
      getRange() {
        const options = this.options || {};
        return options.radius + options.hitRadius;
      }
    }
    PointElement.id = 'point';
    PointElement.defaults = {
      borderWidth: 1,
      hitRadius: 1,
      hoverBorderWidth: 1,
      hoverRadius: 4,
      pointStyle: 'circle',
      radius: 3,
      rotation: 0
    };
    PointElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };

    function getBarBounds(bar, useFinalPosition) {
      const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);
      let left, right, top, bottom, half;
      if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
      } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
      }
      return {left, top, right, bottom};
    }
    function parseBorderSkipped(bar) {
      let edge = bar.options.borderSkipped;
      const res = {};
      if (!edge) {
        return res;
      }
      edge = bar.horizontal
        ? parseEdge(edge, 'left', 'right', bar.base > bar.x)
        : parseEdge(edge, 'bottom', 'top', bar.base < bar.y);
      res[edge] = true;
      return res;
    }
    function parseEdge(edge, a, b, reverse) {
      if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
      } else {
        edge = startEnd(edge, a, b);
      }
      return edge;
    }
    function swap(orig, v1, v2) {
      return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }
    function startEnd(v, start, end) {
      return v === 'start' ? start : v === 'end' ? end : v;
    }
    function skipOrLimit(skip, value, min, max) {
      return skip ? 0 : Math.max(Math.min(value, max), min);
    }
    function parseBorderWidth(bar, maxW, maxH) {
      const value = bar.options.borderWidth;
      const skip = parseBorderSkipped(bar);
      const o = toTRBL(value);
      return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
      };
    }
    function parseBorderRadius(bar, maxW, maxH) {
      const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);
      const value = bar.options.borderRadius;
      const o = toTRBLCorners(value);
      const maxR = Math.min(maxW, maxH);
      const skip = parseBorderSkipped(bar);
      const enableBorder = enableBorderRadius || isObject(value);
      return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
      };
    }
    function boundingRects(bar) {
      const bounds = getBarBounds(bar);
      const width = bounds.right - bounds.left;
      const height = bounds.bottom - bounds.top;
      const border = parseBorderWidth(bar, width / 2, height / 2);
      const radius = parseBorderRadius(bar, width / 2, height / 2);
      return {
        outer: {
          x: bounds.left,
          y: bounds.top,
          w: width,
          h: height,
          radius
        },
        inner: {
          x: bounds.left + border.l,
          y: bounds.top + border.t,
          w: width - border.l - border.r,
          h: height - border.t - border.b,
          radius: {
            topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
            topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
            bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
            bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),
          }
        }
      };
    }
    function inRange(bar, x, y, useFinalPosition) {
      const skipX = x === null;
      const skipY = y === null;
      const skipBoth = skipX && skipY;
      const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
      return bounds
    		&& (skipX || x >= bounds.left && x <= bounds.right)
    		&& (skipY || y >= bounds.top && y <= bounds.bottom);
    }
    function hasRadius(radius) {
      return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
    }
    function addNormalRectPath(ctx, rect) {
      ctx.rect(rect.x, rect.y, rect.w, rect.h);
    }
    class BarElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      draw(ctx) {
        const options = this.options;
        const {inner, outer} = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
          ctx.beginPath();
          addRectPath(ctx, outer);
          ctx.clip();
          addRectPath(ctx, inner);
          ctx.fillStyle = options.borderColor;
          ctx.fill('evenodd');
        }
        ctx.beginPath();
        addRectPath(ctx, inner);
        ctx.fillStyle = options.backgroundColor;
        ctx.fill();
        ctx.restore();
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);
        return {
          x: horizontal ? (x + base) / 2 : x,
          y: horizontal ? y : (y + base) / 2
        };
      }
      getRange(axis) {
        return axis === 'x' ? this.width / 2 : this.height / 2;
      }
    }
    BarElement.id = 'bar';
    BarElement.defaults = {
      borderSkipped: 'start',
      borderWidth: 0,
      borderRadius: 0,
      enableBorderRadius: true,
      pointStyle: undefined
    };
    BarElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };

    var elements = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    LineElement: LineElement,
    PointElement: PointElement,
    BarElement: BarElement
    });

    function lttbDecimation(data, start, count, availableWidth, options) {
      const samples = options.samples || availableWidth;
      if (samples >= count) {
        return data.slice(start, start + count);
      }
      const decimated = [];
      const bucketWidth = (count - 2) / (samples - 2);
      let sampledIndex = 0;
      const endIndex = start + count - 1;
      let a = start;
      let i, maxAreaPoint, maxArea, area, nextA;
      decimated[sampledIndex++] = data[a];
      for (i = 0; i < samples - 2; i++) {
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for (j = avgRangeStart; j < avgRangeEnd; j++) {
          avgX += data[j].x;
          avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const {x: pointAx, y: pointAy} = data[a];
        maxArea = area = -1;
        for (j = rangeOffs; j < rangeTo; j++) {
          area = 0.5 * Math.abs(
            (pointAx - avgX) * (data[j].y - pointAy) -
            (pointAx - data[j].x) * (avgY - pointAy)
          );
          if (area > maxArea) {
            maxArea = area;
            maxAreaPoint = data[j];
            nextA = j;
          }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
      }
      decimated[sampledIndex++] = data[endIndex];
      return decimated;
    }
    function minMaxDecimation(data, start, count, availableWidth) {
      let avgX = 0;
      let countX = 0;
      let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
      const decimated = [];
      const endIndex = start + count - 1;
      const xMin = data[start].x;
      const xMax = data[endIndex].x;
      const dx = xMax - xMin;
      for (i = start; i < start + count; ++i) {
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
          if (y < minY) {
            minY = y;
            minIndex = i;
          } else if (y > maxY) {
            maxY = y;
            maxIndex = i;
          }
          avgX = (countX * avgX + point.x) / ++countX;
        } else {
          const lastIndex = i - 1;
          if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
            const intermediateIndex1 = Math.min(minIndex, maxIndex);
            const intermediateIndex2 = Math.max(minIndex, maxIndex);
            if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
              decimated.push({
                ...data[intermediateIndex1],
                x: avgX,
              });
            }
            if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
              decimated.push({
                ...data[intermediateIndex2],
                x: avgX
              });
            }
          }
          if (i > 0 && lastIndex !== startIndex) {
            decimated.push(data[lastIndex]);
          }
          decimated.push(point);
          prevX = truncX;
          countX = 0;
          minY = maxY = y;
          minIndex = maxIndex = startIndex = i;
        }
      }
      return decimated;
    }
    function cleanDecimatedDataset(dataset) {
      if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, 'data', {value: data});
      }
    }
    function cleanDecimatedData(chart) {
      chart.data.datasets.forEach((dataset) => {
        cleanDecimatedDataset(dataset);
      });
    }
    function getStartAndCountOfVisiblePointsSimplified(meta, points) {
      const pointCount = points.length;
      let start = 0;
      let count;
      const {iScale} = meta;
      const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
      if (minDefined) {
        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
      }
      if (maxDefined) {
        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
      } else {
        count = pointCount - start;
      }
      return {start, count};
    }
    var plugin_decimation = {
      id: 'decimation',
      defaults: {
        algorithm: 'min-max',
        enabled: false,
      },
      beforeElementsUpdate: (chart, args, options) => {
        if (!options.enabled) {
          cleanDecimatedData(chart);
          return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex) => {
          const {_data, indexAxis} = dataset;
          const meta = chart.getDatasetMeta(datasetIndex);
          const data = _data || dataset.data;
          if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {
            return;
          }
          if (meta.type !== 'line') {
            return;
          }
          const xAxis = chart.scales[meta.xAxisID];
          if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
            return;
          }
          if (chart.options.parsing) {
            return;
          }
          let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);
          if (count <= 4 * availableWidth) {
            cleanDecimatedDataset(dataset);
            return;
          }
          if (isNullOrUndef(_data)) {
            dataset._data = data;
            delete dataset.data;
            Object.defineProperty(dataset, 'data', {
              configurable: true,
              enumerable: true,
              get: function() {
                return this._decimated;
              },
              set: function(d) {
                this._data = d;
              }
            });
          }
          let decimated;
          switch (options.algorithm) {
          case 'lttb':
            decimated = lttbDecimation(data, start, count, availableWidth, options);
            break;
          case 'min-max':
            decimated = minMaxDecimation(data, start, count, availableWidth);
            break;
          default:
            throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
          }
          dataset._decimated = decimated;
        });
      },
      destroy(chart) {
        cleanDecimatedData(chart);
      }
    };

    function getLineByIndex(chart, index) {
      const meta = chart.getDatasetMeta(index);
      const visible = meta && chart.isDatasetVisible(index);
      return visible ? meta.dataset : null;
    }
    function parseFillOption(line) {
      const options = line.options;
      const fillOption = options.fill;
      let fill = valueOrDefault(fillOption && fillOption.target, fillOption);
      if (fill === undefined) {
        fill = !!options.backgroundColor;
      }
      if (fill === false || fill === null) {
        return false;
      }
      if (fill === true) {
        return 'origin';
      }
      return fill;
    }
    function decodeFill(line, index, count) {
      const fill = parseFillOption(line);
      if (isObject(fill)) {
        return isNaN(fill.value) ? false : fill;
      }
      let target = parseFloat(fill);
      if (isNumberFinite(target) && Math.floor(target) === target) {
        if (fill[0] === '-' || fill[0] === '+') {
          target = index + target;
        }
        if (target === index || target < 0 || target >= count) {
          return false;
        }
        return target;
      }
      return ['origin', 'start', 'end', 'stack'].indexOf(fill) >= 0 && fill;
    }
    function computeLinearBoundary(source) {
      const {scale = {}, fill} = source;
      let target = null;
      let horizontal;
      if (fill === 'start') {
        target = scale.bottom;
      } else if (fill === 'end') {
        target = scale.top;
      } else if (isObject(fill)) {
        target = scale.getPixelForValue(fill.value);
      } else if (scale.getBasePixel) {
        target = scale.getBasePixel();
      }
      if (isNumberFinite(target)) {
        horizontal = scale.isHorizontal();
        return {
          x: horizontal ? target : null,
          y: horizontal ? null : target
        };
      }
      return null;
    }
    class simpleArc {
      constructor(opts) {
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
      }
      pathSegment(ctx, bounds, opts) {
        const {x, y, radius} = this;
        bounds = bounds || {start: 0, end: TAU};
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
      }
      interpolate(point) {
        const {x, y, radius} = this;
        const angle = point.angle;
        return {
          x: x + Math.cos(angle) * radius,
          y: y + Math.sin(angle) * radius,
          angle
        };
      }
    }
    function computeCircularBoundary(source) {
      const {scale, fill} = source;
      const options = scale.options;
      const length = scale.getLabels().length;
      const target = [];
      const start = options.reverse ? scale.max : scale.min;
      const end = options.reverse ? scale.min : scale.max;
      let i, center, value;
      if (fill === 'start') {
        value = start;
      } else if (fill === 'end') {
        value = end;
      } else if (isObject(fill)) {
        value = fill.value;
      } else {
        value = scale.getBaseValue();
      }
      if (options.grid.circular) {
        center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
          x: center.x,
          y: center.y,
          radius: scale.getDistanceFromCenterForValue(value)
        });
      }
      for (i = 0; i < length; ++i) {
        target.push(scale.getPointPositionForValue(i, value));
      }
      return target;
    }
    function computeBoundary(source) {
      const scale = source.scale || {};
      if (scale.getPointPositionForValue) {
        return computeCircularBoundary(source);
      }
      return computeLinearBoundary(source);
    }
    function pointsFromSegments(boundary, line) {
      const {x = null, y = null} = boundary || {};
      const linePoints = line.points;
      const points = [];
      line.segments.forEach((segment) => {
        const first = linePoints[segment.start];
        const last = linePoints[segment.end];
        if (y !== null) {
          points.push({x: first.x, y});
          points.push({x: last.x, y});
        } else if (x !== null) {
          points.push({x, y: first.y});
          points.push({x, y: last.y});
        }
      });
      return points;
    }
    function buildStackLine(source) {
      const {chart, scale, index, line} = source;
      const points = [];
      const segments = line.segments;
      const sourcePoints = line.points;
      const linesBelow = getLinesBelow(chart, index);
      linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        for (let j = segment.start; j <= segment.end; j++) {
          addPointsBelow(points, sourcePoints[j], linesBelow);
        }
      }
      return new LineElement({points, options: {}});
    }
    const isLineAndNotInHideAnimation = (meta) => meta.type === 'line' && !meta.hidden;
    function getLinesBelow(chart, index) {
      const below = [];
      const metas = chart.getSortedVisibleDatasetMetas();
      for (let i = 0; i < metas.length; i++) {
        const meta = metas[i];
        if (meta.index === index) {
          break;
        }
        if (isLineAndNotInHideAnimation(meta)) {
          below.unshift(meta.dataset);
        }
      }
      return below;
    }
    function addPointsBelow(points, sourcePoint, linesBelow) {
      const postponed = [];
      for (let j = 0; j < linesBelow.length; j++) {
        const line = linesBelow[j];
        const {first, last, point} = findPoint(line, sourcePoint, 'x');
        if (!point || (first && last)) {
          continue;
        }
        if (first) {
          postponed.unshift(point);
        } else {
          points.push(point);
          if (!last) {
            break;
          }
        }
      }
      points.push(...postponed);
    }
    function findPoint(line, sourcePoint, property) {
      const point = line.interpolate(sourcePoint, property);
      if (!point) {
        return {};
      }
      const pointValue = point[property];
      const segments = line.segments;
      const linePoints = line.points;
      let first = false;
      let last = false;
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if (pointValue >= firstValue && pointValue <= lastValue) {
          first = pointValue === firstValue;
          last = pointValue === lastValue;
          break;
        }
      }
      return {first, last, point};
    }
    function getTarget(source) {
      const {chart, fill, line} = source;
      if (isNumberFinite(fill)) {
        return getLineByIndex(chart, fill);
      }
      if (fill === 'stack') {
        return buildStackLine(source);
      }
      const boundary = computeBoundary(source);
      if (boundary instanceof simpleArc) {
        return boundary;
      }
      return createBoundaryLine(boundary, line);
    }
    function createBoundaryLine(boundary, line) {
      let points = [];
      let _loop = false;
      if (isArray(boundary)) {
        _loop = true;
        points = boundary;
      } else {
        points = pointsFromSegments(boundary, line);
      }
      return points.length ? new LineElement({
        points,
        options: {tension: 0},
        _loop,
        _fullLoop: _loop
      }) : null;
    }
    function resolveTarget(sources, index, propagate) {
      const source = sources[index];
      let fill = source.fill;
      const visited = [index];
      let target;
      if (!propagate) {
        return fill;
      }
      while (fill !== false && visited.indexOf(fill) === -1) {
        if (!isNumberFinite(fill)) {
          return fill;
        }
        target = sources[fill];
        if (!target) {
          return false;
        }
        if (target.visible) {
          return fill;
        }
        visited.push(fill);
        fill = target.fill;
      }
      return false;
    }
    function _clip(ctx, target, clipY) {
      ctx.beginPath();
      target.path(ctx);
      ctx.lineTo(target.last().x, clipY);
      ctx.lineTo(target.first().x, clipY);
      ctx.closePath();
      ctx.clip();
    }
    function getBounds(property, first, last, loop) {
      if (loop) {
        return;
      }
      let start = first[property];
      let end = last[property];
      if (property === 'angle') {
        start = _normalizeAngle(start);
        end = _normalizeAngle(end);
      }
      return {property, start, end};
    }
    function _getEdge(a, b, prop, fn) {
      if (a && b) {
        return fn(a[prop], b[prop]);
      }
      return a ? a[prop] : b ? b[prop] : 0;
    }
    function _segments(line, target, property) {
      const segments = line.segments;
      const points = line.points;
      const tpoints = target.points;
      const parts = [];
      for (const segment of segments) {
        const bounds = getBounds(property, points[segment.start], points[segment.end], segment.loop);
        if (!target.segments) {
          parts.push({
            source: segment,
            target: bounds,
            start: points[segment.start],
            end: points[segment.end]
          });
          continue;
        }
        const targetSegments = _boundSegments(target, bounds);
        for (const tgt of targetSegments) {
          const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
          const fillSources = _boundSegment(segment, points, subBounds);
          for (const fillSource of fillSources) {
            parts.push({
              source: fillSource,
              target: tgt,
              start: {
                [property]: _getEdge(bounds, subBounds, 'start', Math.max)
              },
              end: {
                [property]: _getEdge(bounds, subBounds, 'end', Math.min)
              }
            });
          }
        }
      }
      return parts;
    }
    function clipBounds(ctx, scale, bounds) {
      const {top, bottom} = scale.chart.chartArea;
      const {property, start, end} = bounds || {};
      if (property === 'x') {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
      }
    }
    function interpolatedLineTo(ctx, target, point, property) {
      const interpolatedPoint = target.interpolate(point, property);
      if (interpolatedPoint) {
        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
      }
    }
    function _fill(ctx, cfg) {
      const {line, target, property, color, scale} = cfg;
      const segments = _segments(line, target, property);
      for (const {source: src, target: tgt, start, end} of segments) {
        const {style: {backgroundColor = color} = {}} = src;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        if (lineLoop) {
          ctx.closePath();
        } else {
          interpolatedLineTo(ctx, target, end, property);
        }
        const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});
        const loop = lineLoop && targetLoop;
        if (!loop) {
          interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? 'evenodd' : 'nonzero');
        ctx.restore();
      }
    }
    function doFill(ctx, cfg) {
      const {line, target, above, below, area, scale} = cfg;
      const property = line._loop ? 'angle' : cfg.axis;
      ctx.save();
      if (property === 'x' && below !== above) {
        _clip(ctx, target, area.top);
        _fill(ctx, {line, target, color: above, scale, property});
        ctx.restore();
        ctx.save();
        _clip(ctx, target, area.bottom);
      }
      _fill(ctx, {line, target, color: below, scale, property});
      ctx.restore();
    }
    function drawfill(ctx, source, area) {
      const target = getTarget(source);
      const {line, scale, axis} = source;
      const lineOpts = line.options;
      const fillOption = lineOpts.fill;
      const color = lineOpts.backgroundColor;
      const {above = color, below = color} = fillOption || {};
      if (target && line.points.length) {
        clipArea(ctx, area);
        doFill(ctx, {line, target, above, below, area, scale, axis});
        unclipArea(ctx);
      }
    }
    var plugin_filler = {
      id: 'filler',
      afterDatasetsUpdate(chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for (i = 0; i < count; ++i) {
          meta = chart.getDatasetMeta(i);
          line = meta.dataset;
          source = null;
          if (line && line.options && line instanceof LineElement) {
            source = {
              visible: chart.isDatasetVisible(i),
              index: i,
              fill: decodeFill(line, i, count),
              chart,
              axis: meta.controller.options.indexAxis,
              scale: meta.vScale,
              line,
            };
          }
          meta.$filler = source;
          sources.push(source);
        }
        for (i = 0; i < count; ++i) {
          source = sources[i];
          if (!source || source.fill === false) {
            continue;
          }
          source.fill = resolveTarget(sources, i, options.propagate);
        }
      },
      beforeDraw(chart, _args, options) {
        const draw = options.drawTime === 'beforeDraw';
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for (let i = metasets.length - 1; i >= 0; --i) {
          const source = metasets[i].$filler;
          if (!source) {
            continue;
          }
          source.line.updateControlPoints(area);
          if (draw) {
            drawfill(chart.ctx, source, area);
          }
        }
      },
      beforeDatasetsDraw(chart, _args, options) {
        if (options.drawTime !== 'beforeDatasetsDraw') {
          return;
        }
        const metasets = chart.getSortedVisibleDatasetMetas();
        for (let i = metasets.length - 1; i >= 0; --i) {
          const source = metasets[i].$filler;
          if (source) {
            drawfill(chart.ctx, source, chart.chartArea);
          }
        }
      },
      beforeDatasetDraw(chart, args, options) {
        const source = args.meta.$filler;
        if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {
          return;
        }
        drawfill(chart.ctx, source, chart.chartArea);
      },
      defaults: {
        propagate: true,
        drawTime: 'beforeDatasetDraw'
      }
    };

    const getBoxSize = (labelOpts, fontSize) => {
      let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;
      if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = Math.min(boxWidth, fontSize);
      }
      return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
      };
    };
    const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
    class Legend extends Element {
      constructor(config) {
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(maxWidth, maxHeight, margins) {
        const me = this;
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me._margins = margins;
        me.setDimensions();
        me.buildLabels();
        me.fit();
      }
      setDimensions() {
        const me = this;
        if (me.isHorizontal()) {
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight;
          me.top = 0;
          me.bottom = me.height;
        }
      }
      buildLabels() {
        const me = this;
        const labelOpts = me.options.labels || {};
        let legendItems = callback(labelOpts.generateLabels, [me.chart], me) || [];
        if (labelOpts.filter) {
          legendItems = legendItems.filter((item) => labelOpts.filter(item, me.chart.data));
        }
        if (labelOpts.sort) {
          legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, me.chart.data));
        }
        if (me.options.reverse) {
          legendItems.reverse();
        }
        me.legendItems = legendItems;
      }
      fit() {
        const me = this;
        const {options, ctx} = me;
        if (!options.display) {
          me.width = me.height = 0;
          return;
        }
        const labelOpts = options.labels;
        const labelFont = toFont(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = me._computeTitleHeight();
        const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (me.isHorizontal()) {
          width = me.maxWidth;
          height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
          height = me.maxHeight;
          width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        }
        me.width = Math.min(width, options.maxWidth || me.maxWidth);
        me.height = Math.min(height, options.maxHeight || me.maxHeight);
      }
      _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const me = this;
        const {ctx, maxWidth, options: {labels: {padding}}} = me;
        const hitboxes = me.legendHitBoxes = [];
        const lineWidths = me.lineWidths = [0];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        let row = -1;
        let top = -lineHeight;
        me.legendItems.forEach((legendItem, i) => {
          const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
          if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
            totalHeight += lineHeight;
            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
            top += lineHeight;
            row++;
          }
          hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};
          lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
      }
      _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
        const me = this;
        const {ctx, maxHeight, options: {labels: {padding}}} = me;
        const hitboxes = me.legendHitBoxes = [];
        const columnSizes = me.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let top = 0;
        let col = 0;
        me.legendItems.forEach((legendItem, i) => {
          const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
          if (i > 0 && currentColHeight + fontSize + 2 * padding > heightLimit) {
            totalWidth += currentColWidth + padding;
            columnSizes.push({width: currentColWidth, height: currentColHeight});
            left += currentColWidth + padding;
            col++;
            top = 0;
            currentColWidth = currentColHeight = 0;
          }
          currentColWidth = Math.max(currentColWidth, itemWidth);
          currentColHeight += fontSize + padding;
          hitboxes[i] = {left, top, col, width: itemWidth, height: itemHeight};
          top += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({width: currentColWidth, height: currentColHeight});
        return totalWidth;
      }
      adjustHitBoxes() {
        const me = this;
        if (!me.options.display) {
          return;
        }
        const titleHeight = me._computeTitleHeight();
        const {legendHitBoxes: hitboxes, options: {align, labels: {padding}}} = me;
        if (this.isHorizontal()) {
          let row = 0;
          let left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);
          for (const hitbox of hitboxes) {
            if (row !== hitbox.row) {
              row = hitbox.row;
              left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);
            }
            hitbox.top += me.top + titleHeight + padding;
            hitbox.left = left;
            left += hitbox.width + padding;
          }
        } else {
          let col = 0;
          let top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);
          for (const hitbox of hitboxes) {
            if (hitbox.col !== col) {
              col = hitbox.col;
              top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);
            }
            hitbox.top = top;
            hitbox.left += me.left + padding;
            top += hitbox.height + padding;
          }
        }
      }
      isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
      }
      draw() {
        const me = this;
        if (me.options.display) {
          const ctx = me.ctx;
          clipArea(ctx, me);
          me._draw();
          unclipArea(ctx);
        }
      }
      _draw() {
        const me = this;
        const {options: opts, columnSizes, lineWidths, ctx} = me;
        const {align, labels: labelOpts} = opts;
        const defaultColor = defaults.color;
        const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);
        const labelFont = toFont(labelOpts.font);
        const {color: fontColor, padding} = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        me.drawTitle();
        ctx.textAlign = rtlHelper.textAlign('left');
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
          if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
            return;
          }
          ctx.save();
          const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
          ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
          ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
          ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
          ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
          ctx.lineWidth = lineWidth;
          ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
          ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
          if (labelOpts.usePointStyle) {
            const drawOptions = {
              radius: boxWidth * Math.SQRT2 / 2,
              pointStyle: legendItem.pointStyle,
              rotation: legendItem.rotation,
              borderWidth: lineWidth
            };
            const centerX = rtlHelper.xPlus(x, boxWidth / 2);
            const centerY = y + halfFontSize;
            drawPoint(ctx, drawOptions, centerX, centerY);
          } else {
            const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
            const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
            const borderRadius = toTRBLCorners(legendItem.borderRadius);
            ctx.beginPath();
            if (Object.values(borderRadius).some(v => v !== 0)) {
              addRoundedRectPath(ctx, {
                x: xBoxLeft,
                y: yBoxTop,
                w: boxWidth,
                h: boxHeight,
                radius: borderRadius,
              });
            } else {
              ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
            }
            ctx.fill();
            if (lineWidth !== 0) {
              ctx.stroke();
            }
          }
          ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
          renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {
            strikethrough: legendItem.hidden,
            textAlign: legendItem.textAlign
          });
        };
        const isHorizontal = me.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) {
          cursor = {
            x: _alignStartEnd(align, me.left + padding, me.right - lineWidths[0]),
            y: me.top + padding + titleHeight,
            line: 0
          };
        } else {
          cursor = {
            x: me.left + padding,
            y: _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),
            line: 0
          };
        }
        overrideTextDirection(me.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        me.legendItems.forEach((legendItem, i) => {
          ctx.strokeStyle = legendItem.fontColor || fontColor;
          ctx.fillStyle = legendItem.fontColor || fontColor;
          const textWidth = ctx.measureText(legendItem.text).width;
          const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
          const width = boxWidth + (fontSize / 2) + textWidth;
          let x = cursor.x;
          let y = cursor.y;
          rtlHelper.setWidth(me.width);
          if (isHorizontal) {
            if (i > 0 && x + width + padding > me.right) {
              y = cursor.y += lineHeight;
              cursor.line++;
              x = cursor.x = _alignStartEnd(align, me.left + padding, me.right - lineWidths[cursor.line]);
            }
          } else if (i > 0 && y + lineHeight > me.bottom) {
            x = cursor.x = x + columnSizes[cursor.line].width + padding;
            cursor.line++;
            y = cursor.y = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);
          }
          const realX = rtlHelper.x(x);
          drawLegendBox(realX, y, legendItem);
          x = _textX(textAlign, x + boxWidth + halfFontSize, me.right);
          fillText(rtlHelper.x(x), y, legendItem);
          if (isHorizontal) {
            cursor.x += width + padding;
          } else {
            cursor.y += lineHeight;
          }
        });
        restoreTextDirection(me.ctx, opts.textDirection);
      }
      drawTitle() {
        const me = this;
        const opts = me.options;
        const titleOpts = opts.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        if (!titleOpts.display) {
          return;
        }
        const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);
        const ctx = me.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = me.left;
        let maxWidth = me.width;
        if (this.isHorizontal()) {
          maxWidth = Math.max(...me.lineWidths);
          y = me.top + topPaddingPlusHalfFontSize;
          left = _alignStartEnd(opts.align, left, me.right - maxWidth);
        } else {
          const maxHeight = me.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
          y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());
        }
        const x = _alignStartEnd(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
        ctx.textBaseline = 'middle';
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        renderText(ctx, titleOpts.text, x, y, titleFont);
      }
      _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
      }
      _getLegendItemAt(x, y) {
        const me = this;
        let i, hitBox, lh;
        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
          lh = me.legendHitBoxes;
          for (i = 0; i < lh.length; ++i) {
            hitBox = lh[i];
            if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
              return me.legendItems[i];
            }
          }
        }
        return null;
      }
      handleEvent(e) {
        const me = this;
        const opts = me.options;
        if (!isListened(e.type, opts)) {
          return;
        }
        const hoveredItem = me._getLegendItemAt(e.x, e.y);
        if (e.type === 'mousemove') {
          const previous = me._hoveredItem;
          const sameItem = itemsEqual(previous, hoveredItem);
          if (previous && !sameItem) {
            callback(opts.onLeave, [e, previous, me], me);
          }
          me._hoveredItem = hoveredItem;
          if (hoveredItem && !sameItem) {
            callback(opts.onHover, [e, hoveredItem, me], me);
          }
        } else if (hoveredItem) {
          callback(opts.onClick, [e, hoveredItem, me], me);
        }
      }
    }
    function isListened(type, opts) {
      if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {
        return true;
      }
      if (opts.onClick && (type === 'click' || type === 'mouseup')) {
        return true;
      }
      return false;
    }
    var plugin_legend = {
      id: 'legend',
      _element: Legend,
      start(chart, _args, options) {
        const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
      },
      stop(chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
      },
      beforeUpdate(chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
      },
      afterUpdate(chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
      },
      afterEvent(chart, args) {
        if (!args.replay) {
          chart.legend.handleEvent(args.event);
        }
      },
      defaults: {
        display: true,
        position: 'top',
        align: 'center',
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick(e, legendItem, legend) {
          const index = legendItem.datasetIndex;
          const ci = legend.chart;
          if (ci.isDatasetVisible(index)) {
            ci.hide(index);
            legendItem.hidden = true;
          } else {
            ci.show(index);
            legendItem.hidden = false;
          }
        },
        onHover: null,
        onLeave: null,
        labels: {
          color: (ctx) => ctx.chart.options.color,
          boxWidth: 40,
          padding: 10,
          generateLabels(chart) {
            const datasets = chart.data.datasets;
            const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;
            return chart._getSortedDatasetMetas().map((meta) => {
              const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
              const borderWidth = toPadding(style.borderWidth);
              return {
                text: datasets[meta.index].label,
                fillStyle: style.backgroundColor,
                fontColor: color,
                hidden: !meta.visible,
                lineCap: style.borderCapStyle,
                lineDash: style.borderDash,
                lineDashOffset: style.borderDashOffset,
                lineJoin: style.borderJoinStyle,
                lineWidth: (borderWidth.width + borderWidth.height) / 4,
                strokeStyle: style.borderColor,
                pointStyle: pointStyle || style.pointStyle,
                rotation: style.rotation,
                textAlign: textAlign || style.textAlign,
                borderRadius: 0,
                datasetIndex: meta.index
              };
            }, this);
          }
        },
        title: {
          color: (ctx) => ctx.chart.options.color,
          display: false,
          position: 'center',
          text: '',
        }
      },
      descriptors: {
        _scriptable: (name) => !name.startsWith('on'),
        labels: {
          _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),
        }
      },
    };

    class Title extends Element {
      constructor(config) {
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(maxWidth, maxHeight) {
        const me = this;
        const opts = me.options;
        me.left = 0;
        me.top = 0;
        if (!opts.display) {
          me.width = me.height = me.right = me.bottom = 0;
          return;
        }
        me.width = me.right = maxWidth;
        me.height = me.bottom = maxHeight;
        const lineCount = isArray(opts.text) ? opts.text.length : 1;
        me._padding = toPadding(opts.padding);
        const textSize = lineCount * toFont(opts.font).lineHeight + me._padding.height;
        if (me.isHorizontal()) {
          me.height = textSize;
        } else {
          me.width = textSize;
        }
      }
      isHorizontal() {
        const pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
      }
      _drawArgs(offset) {
        const {top, left, bottom, right, options} = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
          titleX = _alignStartEnd(align, left, right);
          titleY = top + offset;
          maxWidth = right - left;
        } else {
          if (options.position === 'left') {
            titleX = left + offset;
            titleY = _alignStartEnd(align, bottom, top);
            rotation = PI * -0.5;
          } else {
            titleX = right - offset;
            titleY = _alignStartEnd(align, top, bottom);
            rotation = PI * 0.5;
          }
          maxWidth = bottom - top;
        }
        return {titleX, titleY, maxWidth, rotation};
      }
      draw() {
        const me = this;
        const ctx = me.ctx;
        const opts = me.options;
        if (!opts.display) {
          return;
        }
        const fontOpts = toFont(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + me._padding.top;
        const {titleX, titleY, maxWidth, rotation} = me._drawArgs(offset);
        renderText(ctx, opts.text, 0, 0, fontOpts, {
          color: opts.color,
          maxWidth,
          rotation,
          textAlign: _toLeftRightCenter(opts.align),
          textBaseline: 'middle',
          translation: [titleX, titleY],
        });
      }
    }
    function createTitle(chart, titleOpts) {
      const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
      });
      layouts.configure(chart, title, titleOpts);
      layouts.addBox(chart, title);
      chart.titleBlock = title;
    }
    var plugin_title = {
      id: 'title',
      _element: Title,
      start(chart, _args, options) {
        createTitle(chart, options);
      },
      stop(chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
      },
      beforeUpdate(chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
      },
      defaults: {
        align: 'center',
        display: false,
        font: {
          weight: 'bold',
        },
        fullSize: true,
        padding: 10,
        position: 'top',
        text: '',
        weight: 2000
      },
      defaultRoutes: {
        color: 'color'
      },
      descriptors: {
        _scriptable: true,
        _indexable: false,
      },
    };

    const positioners = {
      average(items) {
        if (!items.length) {
          return false;
        }
        let i, len;
        let x = 0;
        let y = 0;
        let count = 0;
        for (i = 0, len = items.length; i < len; ++i) {
          const el = items[i].element;
          if (el && el.hasValue()) {
            const pos = el.tooltipPosition();
            x += pos.x;
            y += pos.y;
            ++count;
          }
        }
        return {
          x: x / count,
          y: y / count
        };
      },
      nearest(items, eventPosition) {
        if (!items.length) {
          return false;
        }
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for (i = 0, len = items.length; i < len; ++i) {
          const el = items[i].element;
          if (el && el.hasValue()) {
            const center = el.getCenterPoint();
            const d = distanceBetweenPoints(eventPosition, center);
            if (d < minDistance) {
              minDistance = d;
              nearestElement = el;
            }
          }
        }
        if (nearestElement) {
          const tp = nearestElement.tooltipPosition();
          x = tp.x;
          y = tp.y;
        }
        return {
          x,
          y
        };
      }
    };
    function pushOrConcat(base, toPush) {
      if (toPush) {
        if (isArray(toPush)) {
          Array.prototype.push.apply(base, toPush);
        } else {
          base.push(toPush);
        }
      }
      return base;
    }
    function splitNewlines(str) {
      if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
        return str.split('\n');
      }
      return str;
    }
    function createTooltipItem(chart, item) {
      const {element, datasetIndex, index} = item;
      const controller = chart.getDatasetMeta(datasetIndex).controller;
      const {label, value} = controller.getLabelAndValue(index);
      return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
      };
    }
    function getTooltipSize(tooltip, options) {
      const ctx = tooltip._chart.ctx;
      const {body, footer, title} = tooltip;
      const {boxWidth, boxHeight} = options;
      const bodyFont = toFont(options.bodyFont);
      const titleFont = toFont(options.titleFont);
      const footerFont = toFont(options.footerFont);
      const titleLineCount = title.length;
      const footerLineCount = footer.length;
      const bodyLineItemCount = body.length;
      const padding = toPadding(options.padding);
      let height = padding.height;
      let width = 0;
      let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
      combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
      if (titleLineCount) {
        height += titleLineCount * titleFont.lineHeight
    			+ (titleLineCount - 1) * options.titleSpacing
    			+ options.titleMarginBottom;
      }
      if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight
    			+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight
    			+ (combinedBodyLength - 1) * options.bodySpacing;
      }
      if (footerLineCount) {
        height += options.footerMarginTop
    			+ footerLineCount * footerFont.lineHeight
    			+ (footerLineCount - 1) * options.footerSpacing;
      }
      let widthPadding = 0;
      const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
      };
      ctx.save();
      ctx.font = titleFont.string;
      each(tooltip.title, maxLineWidth);
      ctx.font = bodyFont.string;
      each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
      widthPadding = options.displayColors ? (boxWidth + 2) : 0;
      each(body, (bodyItem) => {
        each(bodyItem.before, maxLineWidth);
        each(bodyItem.lines, maxLineWidth);
        each(bodyItem.after, maxLineWidth);
      });
      widthPadding = 0;
      ctx.font = footerFont.string;
      each(tooltip.footer, maxLineWidth);
      ctx.restore();
      width += padding.width;
      return {width, height};
    }
    function determineYAlign(chart, size) {
      const {y, height} = size;
      if (y < height / 2) {
        return 'top';
      } else if (y > (chart.height - height / 2)) {
        return 'bottom';
      }
      return 'center';
    }
    function doesNotFitWithAlign(xAlign, chart, options, size) {
      const {x, width} = size;
      const caret = options.caretSize + options.caretPadding;
      if (xAlign === 'left' && x + width + caret > chart.width) {
        return true;
      }
      if (xAlign === 'right' && x - width - caret < 0) {
        return true;
      }
    }
    function determineXAlign(chart, options, size, yAlign) {
      const {x, width} = size;
      const {width: chartWidth, chartArea: {left, right}} = chart;
      let xAlign = 'center';
      if (yAlign === 'center') {
        xAlign = x <= (left + right) / 2 ? 'left' : 'right';
      } else if (x <= width / 2) {
        xAlign = 'left';
      } else if (x >= chartWidth - width / 2) {
        xAlign = 'right';
      }
      if (doesNotFitWithAlign(xAlign, chart, options, size)) {
        xAlign = 'center';
      }
      return xAlign;
    }
    function determineAlignment(chart, options, size) {
      const yAlign = options.yAlign || determineYAlign(chart, size);
      return {
        xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
      };
    }
    function alignX(size, xAlign) {
      let {x, width} = size;
      if (xAlign === 'right') {
        x -= width;
      } else if (xAlign === 'center') {
        x -= (width / 2);
      }
      return x;
    }
    function alignY(size, yAlign, paddingAndSize) {
      let {y, height} = size;
      if (yAlign === 'top') {
        y += paddingAndSize;
      } else if (yAlign === 'bottom') {
        y -= height + paddingAndSize;
      } else {
        y -= (height / 2);
      }
      return y;
    }
    function getBackgroundPoint(options, size, alignment, chart) {
      const {caretSize, caretPadding, cornerRadius} = options;
      const {xAlign, yAlign} = alignment;
      const paddingAndSize = caretSize + caretPadding;
      const radiusAndPadding = cornerRadius + caretPadding;
      let x = alignX(size, xAlign);
      const y = alignY(size, yAlign, paddingAndSize);
      if (yAlign === 'center') {
        if (xAlign === 'left') {
          x += paddingAndSize;
        } else if (xAlign === 'right') {
          x -= paddingAndSize;
        }
      } else if (xAlign === 'left') {
        x -= radiusAndPadding;
      } else if (xAlign === 'right') {
        x += radiusAndPadding;
      }
      return {
        x: _limitValue(x, 0, chart.width - size.width),
        y: _limitValue(y, 0, chart.height - size.height)
      };
    }
    function getAlignedX(tooltip, align, options) {
      const padding = toPadding(options.padding);
      return align === 'center'
        ? tooltip.x + tooltip.width / 2
        : align === 'right'
          ? tooltip.x + tooltip.width - padding.right
          : tooltip.x + padding.left;
    }
    function getBeforeAfterBodyLines(callback) {
      return pushOrConcat([], splitNewlines(callback));
    }
    function createTooltipContext(parent, tooltip, tooltipItems) {
      return Object.assign(Object.create(parent), {
        tooltip,
        tooltipItems,
        type: 'tooltip'
      });
    }
    function overrideCallbacks(callbacks, context) {
      const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
      return override ? callbacks.override(override) : callbacks;
    }
    class Tooltip extends Element {
      constructor(config) {
        super();
        this.opacity = 0;
        this._active = [];
        this._chart = config._chart;
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
      }
      initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
      }
      _resolveAnimations() {
        const me = this;
        const cached = me._cachedAnimations;
        if (cached) {
          return cached;
        }
        const chart = me._chart;
        const options = me.options.setContext(me.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(me._chart, opts);
        if (opts._cacheable) {
          me._cachedAnimations = Object.freeze(animations);
        }
        return animations;
      }
      getContext() {
        const me = this;
        return me.$context ||
    			(me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));
      }
      getTitle(context, options) {
        const me = this;
        const {callbacks} = options;
        const beforeTitle = callbacks.beforeTitle.apply(me, [context]);
        const title = callbacks.title.apply(me, [context]);
        const afterTitle = callbacks.afterTitle.apply(me, [context]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
      }
      getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
      }
      getBody(tooltipItems, options) {
        const me = this;
        const {callbacks} = options;
        const bodyItems = [];
        each(tooltipItems, (context) => {
          const bodyItem = {
            before: [],
            lines: [],
            after: []
          };
          const scoped = overrideCallbacks(callbacks, context);
          pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));
          pushOrConcat(bodyItem.lines, scoped.label.call(me, context));
          pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));
          bodyItems.push(bodyItem);
        });
        return bodyItems;
      }
      getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
      }
      getFooter(tooltipItems, options) {
        const me = this;
        const {callbacks} = options;
        const beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);
        const footer = callbacks.footer.apply(me, [tooltipItems]);
        const afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
      }
      _createItems(options) {
        const me = this;
        const active = me._active;
        const data = me._chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for (i = 0, len = active.length; i < len; ++i) {
          tooltipItems.push(createTooltipItem(me._chart, active[i]));
        }
        if (options.filter) {
          tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
        }
        if (options.itemSort) {
          tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
        }
        each(tooltipItems, (context) => {
          const scoped = overrideCallbacks(options.callbacks, context);
          labelColors.push(scoped.labelColor.call(me, context));
          labelPointStyles.push(scoped.labelPointStyle.call(me, context));
          labelTextColors.push(scoped.labelTextColor.call(me, context));
        });
        me.labelColors = labelColors;
        me.labelPointStyles = labelPointStyles;
        me.labelTextColors = labelTextColors;
        me.dataPoints = tooltipItems;
        return tooltipItems;
      }
      update(changed, replay) {
        const me = this;
        const options = me.options.setContext(me.getContext());
        const active = me._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
          if (me.opacity !== 0) {
            properties = {
              opacity: 0
            };
          }
        } else {
          const position = positioners[options.position].call(me, active, me._eventPosition);
          tooltipItems = me._createItems(options);
          me.title = me.getTitle(tooltipItems, options);
          me.beforeBody = me.getBeforeBody(tooltipItems, options);
          me.body = me.getBody(tooltipItems, options);
          me.afterBody = me.getAfterBody(tooltipItems, options);
          me.footer = me.getFooter(tooltipItems, options);
          const size = me._size = getTooltipSize(me, options);
          const positionAndSize = Object.assign({}, position, size);
          const alignment = determineAlignment(me._chart, options, positionAndSize);
          const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);
          me.xAlign = alignment.xAlign;
          me.yAlign = alignment.yAlign;
          properties = {
            opacity: 1,
            x: backgroundPoint.x,
            y: backgroundPoint.y,
            width: size.width,
            height: size.height,
            caretX: position.x,
            caretY: position.y
          };
        }
        me._tooltipItems = tooltipItems;
        me.$context = undefined;
        if (properties) {
          me._resolveAnimations().update(me, properties);
        }
        if (changed && options.external) {
          options.external.call(me, {chart: me._chart, tooltip: me, replay});
        }
      }
      drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
      }
      getCaretPosition(tooltipPoint, size, options) {
        const {xAlign, yAlign} = this;
        const {cornerRadius, caretSize} = options;
        const {x: ptX, y: ptY} = tooltipPoint;
        const {width, height} = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === 'center') {
          y2 = ptY + (height / 2);
          if (xAlign === 'left') {
            x1 = ptX;
            x2 = x1 - caretSize;
            y1 = y2 + caretSize;
            y3 = y2 - caretSize;
          } else {
            x1 = ptX + width;
            x2 = x1 + caretSize;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          }
          x3 = x1;
        } else {
          if (xAlign === 'left') {
            x2 = ptX + cornerRadius + (caretSize);
          } else if (xAlign === 'right') {
            x2 = ptX + width - cornerRadius - caretSize;
          } else {
            x2 = this.caretX;
          }
          if (yAlign === 'top') {
            y1 = ptY;
            y2 = y1 - caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else {
            y1 = ptY + height;
            y2 = y1 + caretSize;
            x1 = x2 + caretSize;
            x3 = x2 - caretSize;
          }
          y3 = y1;
        }
        return {x1, x2, x3, y1, y2, y3};
      }
      drawTitle(pt, ctx, options) {
        const me = this;
        const title = me.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
          const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);
          pt.x = getAlignedX(me, options.titleAlign, options);
          ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
          ctx.textBaseline = 'middle';
          titleFont = toFont(options.titleFont);
          titleSpacing = options.titleSpacing;
          ctx.fillStyle = options.titleColor;
          ctx.font = titleFont.string;
          for (i = 0; i < length; ++i) {
            ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
            pt.y += titleFont.lineHeight + titleSpacing;
            if (i + 1 === length) {
              pt.y += options.titleMarginBottom - titleSpacing;
            }
          }
        }
      }
      _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const me = this;
        const labelColors = me.labelColors[i];
        const labelPointStyle = me.labelPointStyles[i];
        const {boxHeight, boxWidth} = options;
        const bodyFont = toFont(options.bodyFont);
        const colorX = getAlignedX(me, 'left', options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
          const drawOptions = {
            radius: Math.min(boxWidth, boxHeight) / 2,
            pointStyle: labelPointStyle.pointStyle,
            rotation: labelPointStyle.rotation,
            borderWidth: 1
          };
          const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
          const centerY = colorY + boxHeight / 2;
          ctx.strokeStyle = options.multiKeyBackground;
          ctx.fillStyle = options.multiKeyBackground;
          drawPoint(ctx, drawOptions, centerX, centerY);
          ctx.strokeStyle = labelColors.borderColor;
          ctx.fillStyle = labelColors.backgroundColor;
          drawPoint(ctx, drawOptions, centerX, centerY);
        } else {
          ctx.lineWidth = labelColors.borderWidth || 1;
          ctx.strokeStyle = labelColors.borderColor;
          ctx.setLineDash(labelColors.borderDash || []);
          ctx.lineDashOffset = labelColors.borderDashOffset || 0;
          const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
          const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
          const borderRadius = toTRBLCorners(labelColors.borderRadius);
          if (Object.values(borderRadius).some(v => v !== 0)) {
            ctx.beginPath();
            ctx.fillStyle = options.multiKeyBackground;
            addRoundedRectPath(ctx, {
              x: outerX,
              y: colorY,
              w: boxWidth,
              h: boxHeight,
              radius: borderRadius,
            });
            ctx.fill();
            ctx.stroke();
            ctx.fillStyle = labelColors.backgroundColor;
            ctx.beginPath();
            addRoundedRectPath(ctx, {
              x: innerX,
              y: colorY + 1,
              w: boxWidth - 2,
              h: boxHeight - 2,
              radius: borderRadius,
            });
            ctx.fill();
          } else {
            ctx.fillStyle = options.multiKeyBackground;
            ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
            ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
            ctx.fillStyle = labelColors.backgroundColor;
            ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
          }
        }
        ctx.fillStyle = me.labelTextColors[i];
      }
      drawBody(pt, ctx, options) {
        const me = this;
        const {body} = me;
        const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth} = options;
        const bodyFont = toFont(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);
        const fillLineOfText = function(line) {
          ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
          pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = 'middle';
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(me, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        each(me.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== 'right'
          ? bodyAlign === 'center' ? (boxWidth / 2 + 1) : (boxWidth + 2)
          : 0;
        for (i = 0, ilen = body.length; i < ilen; ++i) {
          bodyItem = body[i];
          textColor = me.labelTextColors[i];
          ctx.fillStyle = textColor;
          each(bodyItem.before, fillLineOfText);
          lines = bodyItem.lines;
          if (displayColors && lines.length) {
            me._drawColorBox(ctx, pt, i, rtlHelper, options);
            bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
          }
          for (j = 0, jlen = lines.length; j < jlen; ++j) {
            fillLineOfText(lines[j]);
            bodyLineHeight = bodyFont.lineHeight;
          }
          each(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        each(me.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
      }
      drawFooter(pt, ctx, options) {
        const me = this;
        const footer = me.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
          const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);
          pt.x = getAlignedX(me, options.footerAlign, options);
          pt.y += options.footerMarginTop;
          ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
          ctx.textBaseline = 'middle';
          footerFont = toFont(options.footerFont);
          ctx.fillStyle = options.footerColor;
          ctx.font = footerFont.string;
          for (i = 0; i < length; ++i) {
            ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
            pt.y += footerFont.lineHeight + options.footerSpacing;
          }
        }
      }
      drawBackground(pt, ctx, tooltipSize, options) {
        const {xAlign, yAlign} = this;
        const {x, y} = pt;
        const {width, height} = tooltipSize;
        const radius = options.cornerRadius;
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        if (yAlign === 'top') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        if (yAlign === 'center' && xAlign === 'right') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        if (yAlign === 'bottom') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        if (yAlign === 'center' && xAlign === 'left') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) {
          ctx.stroke();
        }
      }
      _updateAnimationTarget(options) {
        const me = this;
        const chart = me._chart;
        const anims = me.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
          const position = positioners[options.position].call(me, me._active, me._eventPosition);
          if (!position) {
            return;
          }
          const size = me._size = getTooltipSize(me, options);
          const positionAndSize = Object.assign({}, position, me._size);
          const alignment = determineAlignment(chart, options, positionAndSize);
          const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
          if (animX._to !== point.x || animY._to !== point.y) {
            me.xAlign = alignment.xAlign;
            me.yAlign = alignment.yAlign;
            me.width = size.width;
            me.height = size.height;
            me.caretX = position.x;
            me.caretY = position.y;
            me._resolveAnimations().update(me, point);
          }
        }
      }
      draw(ctx) {
        const me = this;
        const options = me.options.setContext(me.getContext());
        let opacity = me.opacity;
        if (!opacity) {
          return;
        }
        me._updateAnimationTarget(options);
        const tooltipSize = {
          width: me.width,
          height: me.height
        };
        const pt = {
          x: me.x,
          y: me.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = toPadding(options.padding);
        const hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;
        if (options.enabled && hasTooltipContent) {
          ctx.save();
          ctx.globalAlpha = opacity;
          me.drawBackground(pt, ctx, tooltipSize, options);
          overrideTextDirection(ctx, options.textDirection);
          pt.y += padding.top;
          me.drawTitle(pt, ctx, options);
          me.drawBody(pt, ctx, options);
          me.drawFooter(pt, ctx, options);
          restoreTextDirection(ctx, options.textDirection);
          ctx.restore();
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements, eventPosition) {
        const me = this;
        const lastActive = me._active;
        const active = activeElements.map(({datasetIndex, index}) => {
          const meta = me._chart.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error('Cannot find a dataset at index ' + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index],
            index,
          };
        });
        const changed = !_elementsEqual(lastActive, active);
        const positionChanged = me._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
          me._active = active;
          me._eventPosition = eventPosition;
          me.update(true);
        }
      }
      handleEvent(e, replay) {
        const me = this;
        const options = me.options;
        const lastActive = me._active || [];
        let changed = false;
        let active = [];
        if (e.type !== 'mouseout') {
          active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);
          if (options.reverse) {
            active.reverse();
          }
        }
        const positionChanged = me._positionChanged(active, e);
        changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
        if (changed) {
          me._active = active;
          if (options.enabled || options.external) {
            me._eventPosition = {
              x: e.x,
              y: e.y
            };
            me.update(true, replay);
          }
        }
        return changed;
      }
      _positionChanged(active, e) {
        const {caretX, caretY, options} = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
      }
    }
    Tooltip.positioners = positioners;
    var plugin_tooltip = {
      id: 'tooltip',
      _element: Tooltip,
      positioners,
      afterInit(chart, _args, options) {
        if (options) {
          chart.tooltip = new Tooltip({_chart: chart, options});
        }
      },
      beforeUpdate(chart, _args, options) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options);
        }
      },
      reset(chart, _args, options) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options);
        }
      },
      afterDraw(chart) {
        const tooltip = chart.tooltip;
        const args = {
          tooltip
        };
        if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {
          return;
        }
        if (tooltip) {
          tooltip.draw(chart.ctx);
        }
        chart.notifyPlugins('afterTooltipDraw', args);
      },
      afterEvent(chart, args) {
        if (chart.tooltip) {
          const useFinalPosition = args.replay;
          if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {
            args.changed = true;
          }
        }
      },
      defaults: {
        enabled: true,
        external: null,
        position: 'average',
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        titleFont: {
          weight: 'bold',
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: 'left',
        bodyColor: '#fff',
        bodySpacing: 2,
        bodyFont: {
        },
        bodyAlign: 'left',
        footerColor: '#fff',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
          weight: 'bold',
        },
        footerAlign: 'left',
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts) => opts.bodyFont.size,
        boxWidth: (ctx, opts) => opts.bodyFont.size,
        multiKeyBackground: '#fff',
        displayColors: true,
        borderColor: 'rgba(0,0,0,0)',
        borderWidth: 0,
        animation: {
          duration: 400,
          easing: 'easeOutQuart',
        },
        animations: {
          numbers: {
            type: 'number',
            properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],
          },
          opacity: {
            easing: 'linear',
            duration: 200
          }
        },
        callbacks: {
          beforeTitle: noop$1,
          title(tooltipItems) {
            if (tooltipItems.length > 0) {
              const item = tooltipItems[0];
              const labels = item.chart.data.labels;
              const labelCount = labels ? labels.length : 0;
              if (this && this.options && this.options.mode === 'dataset') {
                return item.dataset.label || '';
              } else if (item.label) {
                return item.label;
              } else if (labelCount > 0 && item.dataIndex < labelCount) {
                return labels[item.dataIndex];
              }
            }
            return '';
          },
          afterTitle: noop$1,
          beforeBody: noop$1,
          beforeLabel: noop$1,
          label(tooltipItem) {
            if (this && this.options && this.options.mode === 'dataset') {
              return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
            }
            let label = tooltipItem.dataset.label || '';
            if (label) {
              label += ': ';
            }
            const value = tooltipItem.formattedValue;
            if (!isNullOrUndef(value)) {
              label += value;
            }
            return label;
          },
          labelColor(tooltipItem) {
            const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            const options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
              borderColor: options.borderColor,
              backgroundColor: options.backgroundColor,
              borderWidth: options.borderWidth,
              borderDash: options.borderDash,
              borderDashOffset: options.borderDashOffset,
              borderRadius: 0,
            };
          },
          labelTextColor() {
            return this.options.bodyColor;
          },
          labelPointStyle(tooltipItem) {
            const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            const options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
              pointStyle: options.pointStyle,
              rotation: options.rotation,
            };
          },
          afterLabel: noop$1,
          afterBody: noop$1,
          beforeFooter: noop$1,
          footer: noop$1,
          afterFooter: noop$1
        }
      },
      defaultRoutes: {
        bodyFont: 'font',
        footerFont: 'font',
        titleFont: 'font'
      },
      descriptors: {
        _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',
        _indexable: false,
        callbacks: {
          _scriptable: false,
          _indexable: false,
        },
        animation: {
          _fallback: false
        },
        animations: {
          _fallback: 'animation'
        }
      },
      additionalOptionScopes: ['interaction']
    };

    var plugins = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Decimation: plugin_decimation,
    Filler: plugin_filler,
    Legend: plugin_legend,
    Title: plugin_title,
    Tooltip: plugin_tooltip
    });

    const addIfString = (labels, raw, index) => typeof raw === 'string'
      ? labels.push(raw) - 1
      : isNaN(raw) ? null : index;
    function findOrAddLabel(labels, raw, index) {
      const first = labels.indexOf(raw);
      if (first === -1) {
        return addIfString(labels, raw, index);
      }
      const last = labels.lastIndexOf(raw);
      return first !== last ? index : first;
    }
    const validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);
    class CategoryScale extends Scale {
      constructor(cfg) {
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
      }
      parse(raw, index) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index
          : findOrAddLabel(labels, raw, valueOrDefault(index, raw));
        return validIndex(index, labels.length - 1);
      }
      determineDataLimits() {
        const me = this;
        const {minDefined, maxDefined} = me.getUserBounds();
        let {min, max} = me.getMinMax(true);
        if (me.options.bounds === 'ticks') {
          if (!minDefined) {
            min = 0;
          }
          if (!maxDefined) {
            max = me.getLabels().length - 1;
          }
        }
        me.min = min;
        me.max = max;
      }
      buildTicks() {
        const me = this;
        const min = me.min;
        const max = me.max;
        const offset = me.options.offset;
        const ticks = [];
        let labels = me.getLabels();
        labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);
        me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        me._startValue = me.min - (offset ? 0.5 : 0);
        for (let value = min; value <= max; value++) {
          ticks.push({value});
        }
        return ticks;
      }
      getLabelForValue(value) {
        const me = this;
        const labels = me.getLabels();
        if (value >= 0 && value < labels.length) {
          return labels[value];
        }
        return value;
      }
      configure() {
        const me = this;
        super.configure();
        if (!me.isHorizontal()) {
          me._reversePixels = !me._reversePixels;
        }
      }
      getPixelForValue(value) {
        const me = this;
        if (typeof value !== 'number') {
          value = me.parse(value);
        }
        return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);
      }
      getPixelForTick(index) {
        const me = this;
        const ticks = me.ticks;
        if (index < 0 || index > ticks.length - 1) {
          return null;
        }
        return me.getPixelForValue(ticks[index].value);
      }
      getValueForPixel(pixel) {
        const me = this;
        return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
      }
      getBasePixel() {
        return this.bottom;
      }
    }
    CategoryScale.id = 'category';
    CategoryScale.defaults = {
      ticks: {
        callback: CategoryScale.prototype.getLabelForValue
      }
    };

    function generateTicks$1(generationOptions, dataRange) {
      const ticks = [];
      const MIN_SPACING = 1e-14;
      const {step, min, max, precision, count, maxTicks} = generationOptions;
      const unit = step || 1;
      const maxSpaces = maxTicks - 1;
      const {min: rmin, max: rmax} = dataRange;
      const minDefined = !isNullOrUndef(min);
      const maxDefined = !isNullOrUndef(max);
      const countDefined = !isNullOrUndef(count);
      let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
      let factor, niceMin, niceMax, numSpaces;
      if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
        return [{value: rmin}, {value: rmax}];
      }
      numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
      if (numSpaces > maxSpaces) {
        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
      }
      if (!isNullOrUndef(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
      }
      niceMin = Math.floor(rmin / spacing) * spacing;
      niceMax = Math.ceil(rmax / spacing) * spacing;
      if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
        numSpaces = Math.min((max - min) / spacing, maxTicks);
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
      } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
      } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
          numSpaces = Math.round(numSpaces);
        } else {
          numSpaces = Math.ceil(numSpaces);
        }
      }
      factor = Math.pow(10, isNullOrUndef(precision) ? _decimalPlaces(spacing) : precision);
      niceMin = Math.round(niceMin * factor) / factor;
      niceMax = Math.round(niceMax * factor) / factor;
      let j = 0;
      if (minDefined) {
        ticks.push({value: min});
        if (niceMin <= min) {
          j++;
        }
        if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, spacing / 10)) {
          j++;
        }
      }
      for (; j < numSpaces; ++j) {
        ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});
      }
      if (maxDefined) {
        if (almostEquals(ticks[ticks.length - 1].value, max, spacing / 10)) {
          ticks[ticks.length - 1].value = max;
        } else {
          ticks.push({value: max});
        }
      } else {
        ticks.push({value: niceMax});
      }
      return ticks;
    }
    class LinearScaleBase extends Scale {
      constructor(cfg) {
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
      }
      parse(raw, index) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
          return null;
        }
        return +raw;
      }
      handleTickRangeOptions() {
        const me = this;
        const {beginAtZero, stacked} = me.options;
        const {minDefined, maxDefined} = me.getUserBounds();
        let {min, max} = me;
        const setMin = v => (min = minDefined ? min : v);
        const setMax = v => (max = maxDefined ? max : v);
        if (beginAtZero || stacked) {
          const minSign = sign(min);
          const maxSign = sign(max);
          if (minSign < 0 && maxSign < 0) {
            setMax(0);
          } else if (minSign > 0 && maxSign > 0) {
            setMin(0);
          }
        }
        if (min === max) {
          setMax(max + 1);
          if (!beginAtZero) {
            setMin(min - 1);
          }
        }
        me.min = min;
        me.max = max;
      }
      getTickLimit() {
        const me = this;
        const tickOpts = me.options.ticks;
        let {maxTicksLimit, stepSize} = tickOpts;
        let maxTicks;
        if (stepSize) {
          maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
        } else {
          maxTicks = me.computeTickLimit();
          maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) {
          maxTicks = Math.min(maxTicksLimit, maxTicks);
        }
        return maxTicks;
      }
      computeTickLimit() {
        return Number.POSITIVE_INFINITY;
      }
      buildTicks() {
        const me = this;
        const opts = me.options;
        const tickOpts = opts.ticks;
        let maxTicks = me.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
          maxTicks,
          min: opts.min,
          max: opts.max,
          precision: tickOpts.precision,
          step: tickOpts.stepSize,
          count: tickOpts.count,
        };
        const dataRange = me._range || me;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === 'ticks') {
          _setMinAndMaxByKey(ticks, me, 'value');
        }
        if (opts.reverse) {
          ticks.reverse();
          me.start = me.max;
          me.end = me.min;
        } else {
          me.start = me.min;
          me.end = me.max;
        }
        return ticks;
      }
      configure() {
        const me = this;
        const ticks = me.ticks;
        let start = me.min;
        let end = me.max;
        super.configure();
        if (me.options.offset && ticks.length) {
          const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
          start -= offset;
          end += offset;
        }
        me._startValue = start;
        me._endValue = end;
        me._valueRange = end - start;
      }
      getLabelForValue(value) {
        return formatNumber(value, this.chart.options.locale);
      }
    }

    class LinearScale extends LinearScaleBase {
      determineDataLimits() {
        const me = this;
        const {min, max} = me.getMinMax(true);
        me.min = isNumberFinite(min) ? min : 0;
        me.max = isNumberFinite(max) ? max : 1;
        me.handleTickRangeOptions();
      }
      computeTickLimit() {
        const me = this;
        if (me.isHorizontal()) {
          return Math.ceil(me.width / 40);
        }
        const tickFont = me._resolveTickFontOptions(0);
        return Math.ceil(me.height / tickFont.lineHeight);
      }
      getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
      }
    }
    LinearScale.id = 'linear';
    LinearScale.defaults = {
      ticks: {
        callback: Ticks.formatters.numeric
      }
    };

    function isMajor(tickVal) {
      const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));
      return remain === 1;
    }
    function generateTicks(generationOptions, dataRange) {
      const endExp = Math.floor(log10(dataRange.max));
      const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
      const ticks = [];
      let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
      let exp = Math.floor(log10(tickVal));
      let significand = Math.floor(tickVal / Math.pow(10, exp));
      let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
      do {
        ticks.push({value: tickVal, major: isMajor(tickVal)});
        ++significand;
        if (significand === 10) {
          significand = 1;
          ++exp;
          precision = exp >= 0 ? 1 : precision;
        }
        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
      } while (exp < endExp || (exp === endExp && significand < endSignificand));
      const lastTick = finiteOrDefault(generationOptions.max, tickVal);
      ticks.push({value: lastTick, major: isMajor(tickVal)});
      return ticks;
    }
    class LogarithmicScale extends Scale {
      constructor(cfg) {
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
      }
      parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
        if (value === 0) {
          this._zero = true;
          return undefined;
        }
        return isNumberFinite(value) && value > 0 ? value : null;
      }
      determineDataLimits() {
        const me = this;
        const {min, max} = me.getMinMax(true);
        me.min = isNumberFinite(min) ? Math.max(0, min) : null;
        me.max = isNumberFinite(max) ? Math.max(0, max) : null;
        if (me.options.beginAtZero) {
          me._zero = true;
        }
        me.handleTickRangeOptions();
      }
      handleTickRangeOptions() {
        const me = this;
        const {minDefined, maxDefined} = me.getUserBounds();
        let min = me.min;
        let max = me.max;
        const setMin = v => (min = minDefined ? min : v);
        const setMax = v => (max = maxDefined ? max : v);
        const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);
        if (min === max) {
          if (min <= 0) {
            setMin(1);
            setMax(10);
          } else {
            setMin(exp(min, -1));
            setMax(exp(max, +1));
          }
        }
        if (min <= 0) {
          setMin(exp(max, -1));
        }
        if (max <= 0) {
          setMax(exp(min, +1));
        }
        if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {
          setMin(exp(min, -1));
        }
        me.min = min;
        me.max = max;
      }
      buildTicks() {
        const me = this;
        const opts = me.options;
        const generationOptions = {
          min: me._userMin,
          max: me._userMax
        };
        const ticks = generateTicks(generationOptions, me);
        if (opts.bounds === 'ticks') {
          _setMinAndMaxByKey(ticks, me, 'value');
        }
        if (opts.reverse) {
          ticks.reverse();
          me.start = me.max;
          me.end = me.min;
        } else {
          me.start = me.min;
          me.end = me.max;
        }
        return ticks;
      }
      getLabelForValue(value) {
        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale);
      }
      configure() {
        const me = this;
        const start = me.min;
        super.configure();
        me._startValue = log10(start);
        me._valueRange = log10(me.max) - log10(start);
      }
      getPixelForValue(value) {
        const me = this;
        if (value === undefined || value === 0) {
          value = me.min;
        }
        if (value === null || isNaN(value)) {
          return NaN;
        }
        return me.getPixelForDecimal(value === me.min
          ? 0
          : (log10(value) - me._startValue) / me._valueRange);
      }
      getValueForPixel(pixel) {
        const me = this;
        const decimal = me.getDecimalForPixel(pixel);
        return Math.pow(10, me._startValue + decimal * me._valueRange);
      }
    }
    LogarithmicScale.id = 'logarithmic';
    LogarithmicScale.defaults = {
      ticks: {
        callback: Ticks.formatters.logarithmic,
        major: {
          enabled: true
        }
      }
    };

    function getTickBackdropHeight(opts) {
      const tickOpts = opts.ticks;
      if (tickOpts.display && opts.display) {
        const padding = toPadding(tickOpts.backdropPadding);
        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
      }
      return 0;
    }
    function measureLabelSize(ctx, lineHeight, label) {
      if (isArray(label)) {
        return {
          w: _longestText(ctx, ctx.font, label),
          h: label.length * lineHeight
        };
      }
      return {
        w: ctx.measureText(label).width,
        h: lineHeight
      };
    }
    function determineLimits(angle, pos, size, min, max) {
      if (angle === min || angle === max) {
        return {
          start: pos - (size / 2),
          end: pos + (size / 2)
        };
      } else if (angle < min || angle > max) {
        return {
          start: pos - size,
          end: pos
        };
      }
      return {
        start: pos,
        end: pos + size
      };
    }
    function fitWithPointLabels(scale) {
      const furthestLimits = {
        l: 0,
        r: scale.width,
        t: 0,
        b: scale.height - scale.paddingTop
      };
      const furthestAngles = {};
      let i, textSize, pointPosition;
      const labelSizes = [];
      const padding = [];
      const valueCount = scale.getLabels().length;
      for (i = 0; i < valueCount; i++) {
        const opts = scale.options.pointLabels.setContext(scale.getContext(i));
        padding[i] = opts.padding;
        pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);
        const plFont = toFont(opts.font);
        scale.ctx.font = plFont.string;
        textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = scale.getIndexAngle(i);
        const angle = toDegrees(angleRadians);
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        if (hLimits.start < furthestLimits.l) {
          furthestLimits.l = hLimits.start;
          furthestAngles.l = angleRadians;
        }
        if (hLimits.end > furthestLimits.r) {
          furthestLimits.r = hLimits.end;
          furthestAngles.r = angleRadians;
        }
        if (vLimits.start < furthestLimits.t) {
          furthestLimits.t = vLimits.start;
          furthestAngles.t = angleRadians;
        }
        if (vLimits.end > furthestLimits.b) {
          furthestLimits.b = vLimits.end;
          furthestAngles.b = angleRadians;
        }
      }
      scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);
      scale._pointLabelItems = [];
      const opts = scale.options;
      const tickBackdropHeight = getTickBackdropHeight(opts);
      const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
      for (i = 0; i < valueCount; i++) {
        const extra = (i === 0 ? tickBackdropHeight / 2 : 0);
        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);
        const angle = toDegrees(scale.getIndexAngle(i));
        const size = labelSizes[i];
        adjustPointPositionForLabelHeight(angle, size, pointLabelPosition);
        const textAlign = getTextAlignForAngle(angle);
        let left;
        if (textAlign === 'left') {
          left = pointLabelPosition.x;
        } else if (textAlign === 'center') {
          left = pointLabelPosition.x - (size.w / 2);
        } else {
          left = pointLabelPosition.x - size.w;
        }
        const right = left + size.w;
        scale._pointLabelItems[i] = {
          x: pointLabelPosition.x,
          y: pointLabelPosition.y,
          textAlign,
          left,
          top: pointLabelPosition.y,
          right,
          bottom: pointLabelPosition.y + size.h,
        };
      }
    }
    function getTextAlignForAngle(angle) {
      if (angle === 0 || angle === 180) {
        return 'center';
      } else if (angle < 180) {
        return 'left';
      }
      return 'right';
    }
    function adjustPointPositionForLabelHeight(angle, textSize, position) {
      if (angle === 90 || angle === 270) {
        position.y -= (textSize.h / 2);
      } else if (angle > 270 || angle < 90) {
        position.y -= textSize.h;
      }
    }
    function drawPointLabels(scale, labelCount) {
      const {ctx, options: {pointLabels}} = scale;
      for (let i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = pointLabels.setContext(scale.getContext(i));
        const plFont = toFont(optsAtIndex.font);
        const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];
        const {backdropColor} = optsAtIndex;
        if (!isNullOrUndef(backdropColor)) {
          const padding = toPadding(optsAtIndex.backdropPadding);
          ctx.fillStyle = backdropColor;
          ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);
        }
        renderText(
          ctx,
          scale._pointLabels[i],
          x,
          y + (plFont.lineHeight / 2),
          plFont,
          {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: 'middle'
          }
        );
      }
    }
    function pathRadiusLine(scale, radius, circular, labelCount) {
      const {ctx} = scale;
      if (circular) {
        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
      } else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for (let i = 1; i < labelCount; i++) {
          pointPosition = scale.getPointPosition(i, radius);
          ctx.lineTo(pointPosition.x, pointPosition.y);
        }
      }
    }
    function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
      const ctx = scale.ctx;
      const circular = gridLineOpts.circular;
      const {color, lineWidth} = gridLineOpts;
      if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {
        return;
      }
      ctx.save();
      ctx.strokeStyle = color;
      ctx.lineWidth = lineWidth;
      ctx.setLineDash(gridLineOpts.borderDash);
      ctx.lineDashOffset = gridLineOpts.borderDashOffset;
      ctx.beginPath();
      pathRadiusLine(scale, radius, circular, labelCount);
      ctx.closePath();
      ctx.stroke();
      ctx.restore();
    }
    function numberOrZero(param) {
      return isNumber(param) ? param : 0;
    }
    class RadialLinearScale extends LinearScaleBase {
      constructor(cfg) {
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
      }
      setDimensions() {
        const me = this;
        me.width = me.maxWidth;
        me.height = me.maxHeight;
        me.paddingTop = getTickBackdropHeight(me.options) / 2;
        me.xCenter = Math.floor(me.width / 2);
        me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
        me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
      }
      determineDataLimits() {
        const me = this;
        const {min, max} = me.getMinMax(false);
        me.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
        me.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
        me.handleTickRangeOptions();
      }
      computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
      }
      generateTickLabels(ticks) {
        const me = this;
        LinearScaleBase.prototype.generateTickLabels.call(me, ticks);
        me._pointLabels = me.getLabels().map((value, index) => {
          const label = callback(me.options.pointLabels.callback, [value, index], me);
          return label || label === 0 ? label : '';
        });
      }
      fit() {
        const me = this;
        const opts = me.options;
        if (opts.display && opts.pointLabels.display) {
          fitWithPointLabels(me);
        } else {
          me.setCenterPoint(0, 0, 0, 0);
        }
      }
      _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
        const me = this;
        let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
        let radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
        let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
        let radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
        radiusReductionLeft = numberOrZero(radiusReductionLeft);
        radiusReductionRight = numberOrZero(radiusReductionRight);
        radiusReductionTop = numberOrZero(radiusReductionTop);
        radiusReductionBottom = numberOrZero(radiusReductionBottom);
        me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(
          Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
          Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));
        me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
      }
      setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        const me = this;
        const maxRight = me.width - rightMovement - me.drawingArea;
        const maxLeft = leftMovement + me.drawingArea;
        const maxTop = topMovement + me.drawingArea;
        const maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;
        me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
        me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
      }
      getIndexAngle(index) {
        const angleMultiplier = TAU / this.getLabels().length;
        const startAngle = this.options.startAngle || 0;
        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
      }
      getDistanceFromCenterForValue(value) {
        const me = this;
        if (isNullOrUndef(value)) {
          return NaN;
        }
        const scalingFactor = me.drawingArea / (me.max - me.min);
        if (me.options.reverse) {
          return (me.max - value) * scalingFactor;
        }
        return (value - me.min) * scalingFactor;
      }
      getValueForDistanceFromCenter(distance) {
        if (isNullOrUndef(distance)) {
          return NaN;
        }
        const me = this;
        const scaledDistance = distance / (me.drawingArea / (me.max - me.min));
        return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;
      }
      getPointPosition(index, distanceFromCenter) {
        const me = this;
        const angle = me.getIndexAngle(index) - HALF_PI;
        return {
          x: Math.cos(angle) * distanceFromCenter + me.xCenter,
          y: Math.sin(angle) * distanceFromCenter + me.yCenter,
          angle
        };
      }
      getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
      }
      getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
      }
      getPointLabelPosition(index) {
        const {left, top, right, bottom} = this._pointLabelItems[index];
        return {
          left,
          top,
          right,
          bottom,
        };
      }
      drawBackground() {
        const me = this;
        const {backgroundColor, grid: {circular}} = me.options;
        if (backgroundColor) {
          const ctx = me.ctx;
          ctx.save();
          ctx.beginPath();
          pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);
          ctx.closePath();
          ctx.fillStyle = backgroundColor;
          ctx.fill();
          ctx.restore();
        }
      }
      drawGrid() {
        const me = this;
        const ctx = me.ctx;
        const opts = me.options;
        const {angleLines, grid} = opts;
        const labelCount = me.getLabels().length;
        let i, offset, position;
        if (opts.pointLabels.display) {
          drawPointLabels(me, labelCount);
        }
        if (grid.display) {
          me.ticks.forEach((tick, index) => {
            if (index !== 0) {
              offset = me.getDistanceFromCenterForValue(tick.value);
              const optsAtIndex = grid.setContext(me.getContext(index - 1));
              drawRadiusLine(me, optsAtIndex, offset, labelCount);
            }
          });
        }
        if (angleLines.display) {
          ctx.save();
          for (i = me.getLabels().length - 1; i >= 0; i--) {
            const optsAtIndex = angleLines.setContext(me.getContext(i));
            const {color, lineWidth} = optsAtIndex;
            if (!lineWidth || !color) {
              continue;
            }
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = color;
            ctx.setLineDash(optsAtIndex.borderDash);
            ctx.lineDashOffset = optsAtIndex.borderDashOffset;
            offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
            position = me.getPointPosition(i, offset);
            ctx.beginPath();
            ctx.moveTo(me.xCenter, me.yCenter);
            ctx.lineTo(position.x, position.y);
            ctx.stroke();
          }
          ctx.restore();
        }
      }
      drawBorder() {}
      drawLabels() {
        const me = this;
        const ctx = me.ctx;
        const opts = me.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) {
          return;
        }
        const startAngle = me.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(me.xCenter, me.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        me.ticks.forEach((tick, index) => {
          if (index === 0 && !opts.reverse) {
            return;
          }
          const optsAtIndex = tickOpts.setContext(me.getContext(index));
          const tickFont = toFont(optsAtIndex.font);
          offset = me.getDistanceFromCenterForValue(me.ticks[index].value);
          if (optsAtIndex.showLabelBackdrop) {
            width = ctx.measureText(tick.label).width;
            ctx.fillStyle = optsAtIndex.backdropColor;
            const padding = toPadding(optsAtIndex.backdropPadding);
            ctx.fillRect(
              -width / 2 - padding.left,
              -offset - tickFont.size / 2 - padding.top,
              width + padding.width,
              tickFont.size + padding.height
            );
          }
          renderText(ctx, tick.label, 0, -offset, tickFont, {
            color: optsAtIndex.color,
          });
        });
        ctx.restore();
      }
      drawTitle() {}
    }
    RadialLinearScale.id = 'radialLinear';
    RadialLinearScale.defaults = {
      display: true,
      animate: true,
      position: 'chartArea',
      angleLines: {
        display: true,
        lineWidth: 1,
        borderDash: [],
        borderDashOffset: 0.0
      },
      grid: {
        circular: false
      },
      startAngle: 0,
      ticks: {
        showLabelBackdrop: true,
        callback: Ticks.formatters.numeric
      },
      pointLabels: {
        backdropColor: undefined,
        backdropPadding: 2,
        display: true,
        font: {
          size: 10
        },
        callback(label) {
          return label;
        },
        padding: 5
      }
    };
    RadialLinearScale.defaultRoutes = {
      'angleLines.color': 'borderColor',
      'pointLabels.color': 'color',
      'ticks.color': 'color'
    };
    RadialLinearScale.descriptors = {
      angleLines: {
        _fallback: 'grid'
      }
    };

    const INTERVALS = {
      millisecond: {common: true, size: 1, steps: 1000},
      second: {common: true, size: 1000, steps: 60},
      minute: {common: true, size: 60000, steps: 60},
      hour: {common: true, size: 3600000, steps: 24},
      day: {common: true, size: 86400000, steps: 30},
      week: {common: false, size: 604800000, steps: 4},
      month: {common: true, size: 2.628e9, steps: 12},
      quarter: {common: false, size: 7.884e9, steps: 4},
      year: {common: true, size: 3.154e10}
    };
    const UNITS = (Object.keys(INTERVALS));
    function sorter(a, b) {
      return a - b;
    }
    function parse(scale, input) {
      if (isNullOrUndef(input)) {
        return null;
      }
      const adapter = scale._adapter;
      const {parser, round, isoWeekday} = scale._parseOpts;
      let value = input;
      if (typeof parser === 'function') {
        value = parser(value);
      }
      if (!isNumberFinite(value)) {
        value = typeof parser === 'string'
          ? adapter.parse(value, parser)
          : adapter.parse(value);
      }
      if (value === null) {
        return null;
      }
      if (round) {
        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)
          ? adapter.startOf(value, 'isoWeek', isoWeekday)
          : adapter.startOf(value, round);
      }
      return +value;
    }
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
      const ilen = UNITS.length;
      for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
          return UNITS[i];
        }
      }
      return UNITS[ilen - 1];
    }
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
      for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
          return unit;
        }
      }
      return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }
    function determineMajorUnit(unit) {
      for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
        if (INTERVALS[UNITS[i]].common) {
          return UNITS[i];
        }
      }
    }
    function addTick(ticks, time, timestamps) {
      if (!timestamps) {
        ticks[time] = true;
      } else if (timestamps.length) {
        const {lo, hi} = _lookup(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
      }
    }
    function setMajorTicks(scale, ticks, map, majorUnit) {
      const adapter = scale._adapter;
      const first = +adapter.startOf(ticks[0].value, majorUnit);
      const last = ticks[ticks.length - 1].value;
      let major, index;
      for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
        index = map[major];
        if (index >= 0) {
          ticks[index].major = true;
        }
      }
      return ticks;
    }
    function ticksFromTimestamps(scale, values, majorUnit) {
      const ticks = [];
      const map = {};
      const ilen = values.length;
      let i, value;
      for (i = 0; i < ilen; ++i) {
        value = values[i];
        map[value] = i;
        ticks.push({
          value,
          major: false
        });
      }
      return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }
    class TimeScale extends Scale {
      constructor(props) {
        super(props);
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
        this._unit = 'day';
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
      }
      init(scaleOpts, opts) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        mergeIf(time.displayFormats, adapter.formats());
        this._parseOpts = {
          parser: time.parser,
          round: time.round,
          isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
      }
      parse(raw, index) {
        if (raw === undefined) {
          return null;
        }
        return parse(this, raw);
      }
      beforeLayout() {
        super.beforeLayout();
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
      }
      determineDataLimits() {
        const me = this;
        const options = me.options;
        const adapter = me._adapter;
        const unit = options.time.unit || 'day';
        let {min, max, minDefined, maxDefined} = me.getUserBounds();
        function _applyBounds(bounds) {
          if (!minDefined && !isNaN(bounds.min)) {
            min = Math.min(min, bounds.min);
          }
          if (!maxDefined && !isNaN(bounds.max)) {
            max = Math.max(max, bounds.max);
          }
        }
        if (!minDefined || !maxDefined) {
          _applyBounds(me._getLabelBounds());
          if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
            _applyBounds(me.getMinMax(false));
          }
        }
        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        me.min = Math.min(min, max - 1);
        me.max = Math.max(min + 1, max);
      }
      _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
          min = arr[0];
          max = arr[arr.length - 1];
        }
        return {min, max};
      }
      buildTicks() {
        const me = this;
        const options = me.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();
        if (options.bounds === 'ticks' && timestamps.length) {
          me.min = me._userMin || timestamps[0];
          me.max = me._userMax || timestamps[timestamps.length - 1];
        }
        const min = me.min;
        const max = me.max;
        const ticks = _filterBetween(timestamps, min, max);
        me._unit = timeOpts.unit || (tickOpts.autoSkip
          ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min))
          : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
        me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
          : determineMajorUnit(me._unit);
        me.initOffsets(timestamps);
        if (options.reverse) {
          ticks.reverse();
        }
        return ticksFromTimestamps(me, ticks, me._majorUnit);
      }
      initOffsets(timestamps) {
        const me = this;
        let start = 0;
        let end = 0;
        let first, last;
        if (me.options.offset && timestamps.length) {
          first = me.getDecimalForValue(timestamps[0]);
          if (timestamps.length === 1) {
            start = 1 - first;
          } else {
            start = (me.getDecimalForValue(timestamps[1]) - first) / 2;
          }
          last = me.getDecimalForValue(timestamps[timestamps.length - 1]);
          if (timestamps.length === 1) {
            end = last;
          } else {
            end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
          }
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = _limitValue(start, 0, limit);
        end = _limitValue(end, 0, limit);
        me._offsets = {start, end, factor: 1 / (start + 1 + end)};
      }
      _generate() {
        const me = this;
        const adapter = me._adapter;
        const min = me.min;
        const max = me.max;
        const options = me.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));
        const stepSize = valueOrDefault(timeOpts.stepSize, 1);
        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
        const hasWeekday = isNumber(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) {
          first = +adapter.startOf(first, 'isoWeek', weekday);
        }
        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) {
          throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
        }
        const timestamps = options.ticks.source === 'data' && me.getDataTimestamps();
        for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
          addTick(ticks, time, timestamps);
        }
        if (time === max || options.bounds === 'ticks' || count === 1) {
          addTick(ticks, time, timestamps);
        }
        return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);
      }
      getLabelForValue(value) {
        const me = this;
        const adapter = me._adapter;
        const timeOpts = me.options.time;
        if (timeOpts.tooltipFormat) {
          return adapter.format(value, timeOpts.tooltipFormat);
        }
        return adapter.format(value, timeOpts.displayFormats.datetime);
      }
      _tickFormatFunction(time, index, ticks, format) {
        const me = this;
        const options = me.options;
        const formats = options.time.displayFormats;
        const unit = me._unit;
        const majorUnit = me._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        const label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));
        const formatter = options.ticks.callback;
        return formatter ? callback(formatter, [label, index, ticks], me) : label;
      }
      generateTickLabels(ticks) {
        let i, ilen, tick;
        for (i = 0, ilen = ticks.length; i < ilen; ++i) {
          tick = ticks[i];
          tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
      }
      getDecimalForValue(value) {
        const me = this;
        return value === null ? NaN : (value - me.min) / (me.max - me.min);
      }
      getPixelForValue(value) {
        const me = this;
        const offsets = me._offsets;
        const pos = me.getDecimalForValue(value);
        return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
      }
      getValueForPixel(pixel) {
        const me = this;
        const offsets = me._offsets;
        const pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return me.min + pos * (me.max - me.min);
      }
      _getLabelSize(label) {
        const me = this;
        const ticksOpts = me.options.ticks;
        const tickLabelWidth = me.ctx.measureText(label).width;
        const angle = toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = me._resolveTickFontOptions(0).size;
        return {
          w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
          h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
        };
      }
      _getLabelCapacity(exampleTime) {
        const me = this;
        const timeOpts = me.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
        const size = me._getLabelSize(exampleLabel);
        const capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
      }
      getDataTimestamps() {
        const me = this;
        let timestamps = me._cache.data || [];
        let i, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const metas = me.getMatchingVisibleMetas();
        if (me._normalized && metas.length) {
          return (me._cache.data = metas[0].controller.getAllParsedValues(me));
        }
        for (i = 0, ilen = metas.length; i < ilen; ++i) {
          timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));
        }
        return (me._cache.data = me.normalize(timestamps));
      }
      getLabelTimestamps() {
        const me = this;
        const timestamps = me._cache.labels || [];
        let i, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const labels = me.getLabels();
        for (i = 0, ilen = labels.length; i < ilen; ++i) {
          timestamps.push(parse(me, labels[i]));
        }
        return (me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps));
      }
      normalize(values) {
        return _arrayUnique(values.sort(sorter));
      }
    }
    TimeScale.id = 'time';
    TimeScale.defaults = {
      bounds: 'data',
      adapters: {},
      time: {
        parser: false,
        unit: false,
        round: false,
        isoWeekday: false,
        minUnit: 'millisecond',
        displayFormats: {}
      },
      ticks: {
        source: 'auto',
        major: {
          enabled: false
        }
      }
    };

    function interpolate(table, val, reverse) {
      let prevSource, nextSource, prevTarget, nextTarget;
      if (reverse) {
        prevSource = Math.floor(val);
        nextSource = Math.ceil(val);
        prevTarget = table[prevSource];
        nextTarget = table[nextSource];
      } else {
        const result = _lookup(table, val);
        prevTarget = result.lo;
        nextTarget = result.hi;
        prevSource = table[prevTarget];
        nextSource = table[nextTarget];
      }
      const span = nextSource - prevSource;
      return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
    }
    class TimeSeriesScale extends TimeScale {
      constructor(props) {
        super(props);
        this._table = [];
        this._maxIndex = undefined;
      }
      initOffsets() {
        const me = this;
        const timestamps = me._getTimestampsForTable();
        me._table = me.buildLookupTable(timestamps);
        me._maxIndex = me._table.length - 1;
        super.initOffsets(timestamps);
      }
      buildLookupTable(timestamps) {
        const me = this;
        const {min, max} = me;
        if (!timestamps.length) {
          return [
            {time: min, pos: 0},
            {time: max, pos: 1}
          ];
        }
        const items = [min];
        let i, ilen, curr;
        for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
          curr = timestamps[i];
          if (curr > min && curr < max) {
            items.push(curr);
          }
        }
        items.push(max);
        return items;
      }
      _getTimestampsForTable() {
        const me = this;
        let timestamps = me._cache.all || [];
        if (timestamps.length) {
          return timestamps;
        }
        const data = me.getDataTimestamps();
        const label = me.getLabelTimestamps();
        if (data.length && label.length) {
          timestamps = me.normalize(data.concat(label));
        } else {
          timestamps = data.length ? data : label;
        }
        timestamps = me._cache.all = timestamps;
        return timestamps;
      }
      getPixelForValue(value, index) {
        const me = this;
        const offsets = me._offsets;
        const pos = me._normalized && me._maxIndex > 0 && !isNullOrUndef(index)
          ? index / me._maxIndex : me.getDecimalForValue(value);
        return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
      }
      getDecimalForValue(value) {
        return interpolate(this._table, value) / this._maxIndex;
      }
      getValueForPixel(pixel) {
        const me = this;
        const offsets = me._offsets;
        const decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(me._table, decimal * this._maxIndex, true);
      }
    }
    TimeSeriesScale.id = 'timeseries';
    TimeSeriesScale.defaults = TimeScale.defaults;

    var scales = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
    });

    const registerables = [
      controllers,
      elements,
      plugins,
      scales,
    ];

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$1(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$2) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$2) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop$2;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$2;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$2;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function regexparam (str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules\svelte-spa-router\Router.svelte generated by Svelte v3.37.0 */

    const { Error: Error_1, Object: Object_1$1, console: console_1$2 } = globals;

    // (209:0) {:else}
    function create_else_block$3(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign$1(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(209:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (202:0) {#if componentParams}
    function create_if_block$6(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign$1(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(202:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$6, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn("Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading");

    	return wrap$1({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf("#/");

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: "/";

    	// Check if there's a querystring
    	const qsPosition = location.indexOf("?");

    	let querystring = "";

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener("hashchange", update, false);

    	return function stop() {
    		window.removeEventListener("hashchange", update, false);
    	};
    });

    const location$1 = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) {
    		throw Error("Invalid parameter location");
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			scrollX: window.scrollX,
    			scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == "#" ? "" : "#") + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) {
    		throw Error("Invalid parameter location");
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == "#" ? "" : "#") + location;

    	try {
    		window.history.replaceState(undefined, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn("Caught exception while replacing the current page. If you're running this in the Svelte REPL, please note that the `replace` method might not work in this environment.");
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event("hashchange"));
    }

    function link(node, hrefVar) {
    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != "a") {
    		throw Error("Action \"link\" can only be used with <a> tags");
    	}

    	updateLink(node, hrefVar || node.getAttribute("href"));

    	return {
    		update(updated) {
    			updateLink(node, updated);
    		}
    	};
    }

    // Internal function used by the link function
    function updateLink(node, href) {
    	// Destination must start with '/'
    	if (!href || href.length < 1 || href.charAt(0) != "/") {
    		throw Error("Invalid value for \"href\" attribute: " + href);
    	}

    	// Add # to the href attribute
    	node.setAttribute("href", "#" + href);

    	node.addEventListener("click", scrollstateHistoryHandler);
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {HTMLElementEventMap} event - an onclick event attached to an anchor tag
     */
    function scrollstateHistoryHandler(event) {
    	// Prevent default anchor onclick behaviour
    	event.preventDefault();

    	const href = event.currentTarget.getAttribute("href");

    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			scrollX: window.scrollX,
    			scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Router", slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = "" } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != "function" && (typeof component != "object" || component._sveltesparouter !== true)) {
    				throw Error("Invalid component object");
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == "string" && (path.length < 1 || path.charAt(0) != "/" && path.charAt(0) != "*") || typeof path == "object" && !(path instanceof RegExp)) {
    				throw Error("Invalid value for \"path\" argument - strings must start with / or *");
    			}

    			const { pattern, keys } = regexparam(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == "object" && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == "string") {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || "/";
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || "/";
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || "") || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {bool} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	if (restoreScrollState) {
    		window.addEventListener("popstate", event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && event.state.scrollY) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		});

    		afterUpdate(() => {
    			// If this exists, then this is a back navigation: restore the scroll position
    			if (previousScrollState) {
    				window.scrollTo(previousScrollState.scrollX, previousScrollState.scrollY);
    			} else {
    				// Otherwise this is a forward navigation: scroll to top
    				window.scrollTo(0, 0);
    			}
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick("conditionsFailed", detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick("routeLoading", Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick("routeLoaded", Object.assign({}, detail, { component, name: component.name }));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == "object" && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick("routeLoaded", Object.assign({}, detail, { component, name: component.name }));

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    	});

    	const writable_props = ["routes", "prefix", "restoreScrollState"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble($$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		derived,
    		tick,
    		_wrap: wrap$1,
    		wrap,
    		getLocation,
    		loc,
    		location: location$1,
    		querystring,
    		push,
    		pop,
    		replace,
    		link,
    		updateLink,
    		scrollstateHistoryHandler,
    		createEventDispatcher,
    		afterUpdate,
    		regexparam,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		lastLoc,
    		componentObj
    	});

    	$$self.$inject_state = $$props => {
    		if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ("component" in $$props) $$invalidate(0, component = $$props.component);
    		if ("componentParams" in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ("props" in $$props) $$invalidate(2, props = $$props.props);
    		if ("previousScrollState" in $$props) previousScrollState = $$props.previousScrollState;
    		if ("lastLoc" in $$props) lastLoc = $$props.lastLoc;
    		if ("componentObj" in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? "manual" : "auto";
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$w.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    let baseUrl = "http://energify.av.it.pt";
    async function request(endpoint, method, body) {
        try {
            const req = await fetch(`${baseUrl}${endpoint}`, {
                method: method,
                body: body ? JSON.stringify(body) : undefined,
                headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: "Bearer " + localStorage.getItem("token"),
                },
            });
            if (req.ok) {
                return { status: req.status, data: await req.json().catch(() => { }) };
            }
            return { status: req.status, error: await req.json().catch(() => { }) };
        }
        catch (e) {
            console.error(e);
        }
    }

    var Roles;
    (function (Roles) {
        Roles[Roles["Unverified"] = 0] = "Unverified";
        Roles[Roles["Consumer"] = 1] = "Consumer";
        Roles[Roles["Prosumer"] = 2] = "Prosumer";
        Roles[Roles["Admin"] = 3] = "Admin";
    })(Roles || (Roles = {}));

    class AuthService {
        constructor() {
            this.user = writable({});
        }
        async login(dto) {
            const { data } = await request("/users/login", "POST", dto);
            localStorage.setItem("token", data.accessToken);
        }
        logout() {
            localStorage.removeItem("token");
        }
        async register(dto) {
            return request("/users/register", "POST", dto);
        }
        async complete(dto) {
            return request("/users/complete", "PUT", dto);
        }
        async details() {
            return request("/users/details", "GET");
        }
        async isLoggedIn() {
            if (!localStorage.getItem("token")) {
                return false;
            }
            try {
                if (!get_store_value(this.user).email) {
                    const { data } = await this.details();
                    this.user.set(data);
                    hederaService.hederaAccountInfo.update((info) => (Object.assign(Object.assign({}, info), { accountId: data.hederaAccountId })));
                }
                return true;
            }
            catch (e) {
                return false;
            }
        }
        isAccountComplete() {
            return get_store_value(this.user).role !== Roles.Unverified;
        }
    }

    class Key {}

    /**
     * A list of Keys (`Key`) with an optional threshold.
     */
    class KeyList extends Key {
        /**
         * @param {?Key[]} [keys]
         * @param {?number} [threshold]
         */
        constructor(keys, threshold) {
            super();

            /**
             * @private
             * @type {Key[]}
             */
            this._keys = keys == null ? [] : keys;

            /**
             * @type {?number}
             */
            this._threshold = threshold == null ? null : threshold;
        }

        /**
         * @param {Key[]} keys
         * @returns {KeyList}
         */
        static of(...keys) {
            return new KeyList(keys, null);
        }

        /**
         * @template T
         * @param {ArrayLike<Key>} arrayLike
         * @param {((key: Key) => Key)} [mapFn]
         * @param {T} [thisArg]
         * @returns {KeyList}
         */
        static from(arrayLike, mapFn, thisArg) {
            if (mapFn == null) {
                return new KeyList(Array.from(arrayLike));
            }

            return new KeyList(Array.from(arrayLike, mapFn, thisArg));
        }

        /**
         * @returns {?number}
         */
        get threshold() {
            return this._threshold;
        }

        /**
         * @param {number} threshold
         * @returns {this}
         */
        setThreshold(threshold) {
            this._threshold = threshold;
            return this;
        }

        /**
         * @param {Key[]} keys
         * @returns {number}
         */
        push(...keys) {
            return this._keys.push(...keys);
        }

        /**
         * @param {number} start
         * @param {number} deleteCount
         * @param {Key[]} items
         * @returns {KeyList}
         */
        splice(start, deleteCount, ...items) {
            return new KeyList(
                this._keys.splice(start, deleteCount, ...items),
                this.threshold
            );
        }

        /**
         * @param {number=} start
         * @param {number=} end
         * @returns {KeyList}
         */
        slice(start, end) {
            return new KeyList(this._keys.slice(start, end), this.threshold);
        }

        /**
         * @returns {Iterator<Key>}
         */
        [Symbol.iterator]() {
            return this._keys[Symbol.iterator]();
        }

        /**
         * @returns {Key[]}
         */
        toArray() {
            return this._keys.slice();
        }

        /**
         * @returns {string}
         */
        toString() {
            return JSON.stringify({
                threshold: this._threshold,
                keys: this._keys.toString(),
            });
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var naclFast = createCommonjsModule(function (module) {
    (function(nacl) {

    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/

    var gf = function(init) {
      var i, r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };

    //  Pluggable, initialized in high-level API below.
    var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32); _9[0] = 9;

    var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

    function ts64(x, i, h, l) {
      x[i]   = (h >> 24) & 0xff;
      x[i+1] = (h >> 16) & 0xff;
      x[i+2] = (h >>  8) & 0xff;
      x[i+3] = h & 0xff;
      x[i+4] = (l >> 24)  & 0xff;
      x[i+5] = (l >> 16)  & 0xff;
      x[i+6] = (l >>  8)  & 0xff;
      x[i+7] = l & 0xff;
    }

    function vn(x, xi, y, yi, n) {
      var i,d = 0;
      for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }

    function crypto_verify_16(x, xi, y, yi) {
      return vn(x,xi,y,yi,16);
    }

    function crypto_verify_32(x, xi, y, yi) {
      return vn(x,xi,y,yi,32);
    }

    function core_salsa20(o, p, k, c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);

        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
       x0 =  x0 +  j0 | 0;
       x1 =  x1 +  j1 | 0;
       x2 =  x2 +  j2 | 0;
       x3 =  x3 +  j3 | 0;
       x4 =  x4 +  j4 | 0;
       x5 =  x5 +  j5 | 0;
       x6 =  x6 +  j6 | 0;
       x7 =  x7 +  j7 | 0;
       x8 =  x8 +  j8 | 0;
       x9 =  x9 +  j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;

      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;

      o[ 4] = x1 >>>  0 & 0xff;
      o[ 5] = x1 >>>  8 & 0xff;
      o[ 6] = x1 >>> 16 & 0xff;
      o[ 7] = x1 >>> 24 & 0xff;

      o[ 8] = x2 >>>  0 & 0xff;
      o[ 9] = x2 >>>  8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;

      o[12] = x3 >>>  0 & 0xff;
      o[13] = x3 >>>  8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;

      o[16] = x4 >>>  0 & 0xff;
      o[17] = x4 >>>  8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;

      o[20] = x5 >>>  0 & 0xff;
      o[21] = x5 >>>  8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;

      o[24] = x6 >>>  0 & 0xff;
      o[25] = x6 >>>  8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;

      o[28] = x7 >>>  0 & 0xff;
      o[29] = x7 >>>  8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;

      o[32] = x8 >>>  0 & 0xff;
      o[33] = x8 >>>  8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;

      o[36] = x9 >>>  0 & 0xff;
      o[37] = x9 >>>  8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;

      o[40] = x10 >>>  0 & 0xff;
      o[41] = x10 >>>  8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;

      o[44] = x11 >>>  0 & 0xff;
      o[45] = x11 >>>  8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;

      o[48] = x12 >>>  0 & 0xff;
      o[49] = x12 >>>  8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;

      o[52] = x13 >>>  0 & 0xff;
      o[53] = x13 >>>  8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;

      o[56] = x14 >>>  0 & 0xff;
      o[57] = x14 >>>  8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;

      o[60] = x15 >>>  0 & 0xff;
      o[61] = x15 >>>  8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }

    function core_hsalsa20(o,p,k,c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);

        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }

      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;

      o[ 4] = x5 >>>  0 & 0xff;
      o[ 5] = x5 >>>  8 & 0xff;
      o[ 6] = x5 >>> 16 & 0xff;
      o[ 7] = x5 >>> 24 & 0xff;

      o[ 8] = x10 >>>  0 & 0xff;
      o[ 9] = x10 >>>  8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;

      o[12] = x15 >>>  0 & 0xff;
      o[13] = x15 >>>  8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;

      o[16] = x6 >>>  0 & 0xff;
      o[17] = x6 >>>  8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;

      o[20] = x7 >>>  0 & 0xff;
      o[21] = x7 >>>  8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;

      o[24] = x8 >>>  0 & 0xff;
      o[25] = x8 >>>  8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;

      o[28] = x9 >>>  0 & 0xff;
      o[29] = x9 >>>  8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }

    function crypto_core_salsa20(out,inp,k,c) {
      core_salsa20(out,inp,k,c);
    }

    function crypto_core_hsalsa20(out,inp,k,c) {
      core_hsalsa20(out,inp,k,c);
    }

    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
                // "expand 32-byte k"

    function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
      }
      return 0;
    }

    function crypto_stream_salsa20(c,cpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = x[i];
      }
      return 0;
    }

    function crypto_stream(c,cpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20(c,cpos,d,sn,s);
    }

    function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
    }

    /*
    * Port of Andrew Moon's Poly1305-donna-16. Public domain.
    * https://github.com/floodyberry/poly1305-donna
    */

    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;

      var t0, t1, t2, t3, t4, t5, t6, t7;

      t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
      t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
      t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
      t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
      t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
      this.r[5] = ((t4 >>>  1)) & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
      this.r[9] = ((t7 >>>  5)) & 0x007f;

      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };

    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : (1 << 11);
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

      var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];

      var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];

      while (bytes >= 16) {
        t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
        t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
        t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
        t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
        t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
        h5 += ((t4 >>>  1)) & 0x1fff;
        t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
        t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
        t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
        h9 += ((t7 >>> 5)) | hibit;

        c = 0;

        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = (d0 >>> 13); d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += (d0 >>> 13); d0 &= 0x1fff;

        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = (d1 >>> 13); d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += (d1 >>> 13); d1 &= 0x1fff;

        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = (d2 >>> 13); d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += (d2 >>> 13); d2 &= 0x1fff;

        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = (d3 >>> 13); d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += (d3 >>> 13); d3 &= 0x1fff;

        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = (d4 >>> 13); d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += (d4 >>> 13); d4 &= 0x1fff;

        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = (d5 >>> 13); d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += (d5 >>> 13); d5 &= 0x1fff;

        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = (d6 >>> 13); d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += (d6 >>> 13); d6 &= 0x1fff;

        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = (d7 >>> 13); d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += (d7 >>> 13); d7 &= 0x1fff;

        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = (d8 >>> 13); d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += (d8 >>> 13); d8 &= 0x1fff;

        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = (d9 >>> 13); d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += (d9 >>> 13); d9 &= 0x1fff;

        c = (((c << 2) + c)) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = (c >>> 13);
        d1 += c;

        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;

        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };

    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;

      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }

      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += (c * 5);
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;

      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= (1 << 13);

      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

      this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
      this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
      this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
      this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
      this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
      this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }

      mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
    };

    poly1305.prototype.update = function(m, mpos, bytes) {
      var i, want;

      if (this.leftover) {
        want = (16 - this.leftover);
        if (want > bytes)
          want = bytes;
        for (i = 0; i < want; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }

      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }

      if (bytes) {
        for (i = 0; i < bytes; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        this.leftover += bytes;
      }
    };

    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }

    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x,0,m,mpos,n,k);
      return crypto_verify_16(h,hpos,x,0);
    }

    function crypto_secretbox(c,m,d,n,k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c,0,m,0,d,n,k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }

    function crypto_secretbox_open(m,c,d,n,k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x,0,32,n,k);
      if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
      crypto_stream_xor(m,0,c,0,d,n,k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }

    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i]|0;
    }

    function car25519(o) {
      var i, v, c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c-1 + 37 * (c-1);
    }

    function sel25519(p, q, b) {
      var t, c = ~(b-1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }

    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
          m[i-1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
        b = (m[15]>>16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1-b);
      }
      for (i = 0; i < 16; i++) {
        o[2*i] = t[i] & 0xff;
        o[2*i+1] = t[i]>>8;
      }
    }

    function neq25519(a, b) {
      var c = new Uint8Array(32), d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }

    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }

    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
      o[15] &= 0x7fff;
    }

    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }

    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }

    function M(o, a, b) {
      var v, c,
         t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
         t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];

      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;

      t0  += 38 * t16;
      t1  += 38 * t17;
      t2  += 38 * t18;
      t3  += 38 * t19;
      t4  += 38 * t20;
      t5  += 38 * t21;
      t6  += 38 * t22;
      t7  += 38 * t23;
      t8  += 38 * t24;
      t9  += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is

      // first car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);

      // second car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);

      o[ 0] = t0;
      o[ 1] = t1;
      o[ 2] = t2;
      o[ 3] = t3;
      o[ 4] = t4;
      o[ 5] = t5;
      o[ 6] = t6;
      o[ 7] = t7;
      o[ 8] = t8;
      o[ 9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }

    function S(o, a) {
      M(o, a, a);
    }

    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if(a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
          S(c, c);
          if(a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80), r, i;
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31]=(n[31]&127)|64;
      z[0]&=248;
      unpack25519(x,p);
      for (i = 0; i < 16; i++) {
        b[i]=x[i];
        d[i]=a[i]=c[i]=0;
      }
      a[0]=d[0]=1;
      for (i=254; i>=0; --i) {
        r=(z[i>>>3]>>>(i&7))&1;
        sel25519(a,b,r);
        sel25519(c,d,r);
        A(e,a,c);
        Z(a,a,c);
        A(c,b,d);
        Z(b,b,d);
        S(d,e);
        S(f,a);
        M(a,c,a);
        M(c,b,e);
        A(e,a,c);
        Z(a,a,c);
        S(b,a);
        Z(c,d,f);
        M(a,c,_121665);
        A(a,a,d);
        M(c,c,a);
        M(a,d,f);
        M(d,b,x);
        S(b,e);
        sel25519(a,b,r);
        sel25519(c,d,r);
      }
      for (i = 0; i < 16; i++) {
        x[i+16]=a[i];
        x[i+32]=c[i];
        x[i+48]=b[i];
        x[i+64]=d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32,x32);
      M(x16,x16,x32);
      pack25519(q,x16);
      return 0;
    }

    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }

    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }

    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }

    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;

    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }

    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }

    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16), wl = new Int32Array(16),
          bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
          bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
          th, tl, i, j, h, l, a, b, c, d;

      var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],

          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];

      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
          wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;

          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;

          // add
          h = ah7;
          l = al7;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          // Sigma1
          h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
          l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // Ch
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // K
          h = K[i*2];
          l = K[i*2+1];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // w
          h = wh[i%16];
          l = wl[i%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;

          // add
          h = th;
          l = tl;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          // Sigma0
          h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
          l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // Maj
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);

          // add
          h = bh3;
          l = bl3;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = th;
          l = tl;

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);

          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;

          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;

          if (i%16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];

              a = l & 0xffff; b = l >>> 16;
              c = h & 0xffff; d = h >>> 16;

              h = wh[(j+9)%16];
              l = wl[(j+9)%16];

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              // sigma0
              th = wh[(j+1)%16];
              tl = wl[(j+1)%16];
              h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              // sigma1
              th = wh[(j+14)%16];
              tl = wl[(j+14)%16];
              h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
              l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }

        // add
        h = ah0;
        l = al0;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[0];
        l = hl[0];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);

        h = ah1;
        l = al1;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[1];
        l = hl[1];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);

        h = ah2;
        l = al2;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[2];
        l = hl[2];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);

        h = ah3;
        l = al3;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[3];
        l = hl[3];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);

        h = ah4;
        l = al4;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[4];
        l = hl[4];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);

        h = ah5;
        l = al5;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[5];
        l = hl[5];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);

        h = ah6;
        l = al6;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[6];
        l = hl[6];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);

        h = ah7;
        l = al7;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[7];
        l = hl[7];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);

        pos += 128;
        n -= 128;
      }

      return n;
    }

    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i, b = n;

      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;

      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;

      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;

      for (i = 0; i < n; i++) x[i] = m[b-n+i];
      x[n] = 128;

      n = 256-128*(n<112?1:0);
      x[n-9] = 0;
      ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);

      for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

      return 0;
    }

    function add(p, q) {
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf(),
          g = gf(), h = gf(), t = gf();

      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);

      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }

    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }

    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }

    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i/8)|0] >> (i&7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }

    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }

    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;

      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      scalarbase(p, d);
      pack(pk, p);

      for (i = 0; i < 32; i++) sk[i+32] = pk[i];
      return 0;
    }

    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = Math.floor((x[j] + 128) / 256);
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i+1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }

    function reduce(r) {
      var x = new Float64Array(64), i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }

    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];

      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

      crypto_hash(r, sm.subarray(32), n+32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);

      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);

      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i+j] += h[i] * d[j];
        }
      }

      modL(sm.subarray(32), x);
      return smlen;
    }

    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(),
          den = gf(), den2 = gf(), den4 = gf(),
          den6 = gf();

      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);

      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);

      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;

      if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

      M(r[3], r[0], r[1]);
      return 0;
    }

    function crypto_sign_open(m, sm, n, pk) {
      var i;
      var t = new Uint8Array(32), h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];

      if (n < 64) return -1;

      if (unpackneg(q, pk)) return -1;

      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i+32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);

      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);

      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }

      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      return n;
    }

    var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;

    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,

      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES,

      gf: gf,
      D: D,
      L: L,
      pack25519: pack25519,
      unpack25519: unpack25519,
      M: M,
      A: A,
      S: S,
      Z: Z,
      pow2523: pow2523,
      add: add,
      set25519: set25519,
      modL: modL,
      scalarmult: scalarmult,
      scalarbase: scalarbase,
    };

    /* High-level API */

    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }

    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }

    function checkArrayTypes() {
      for (var i = 0; i < arguments.length; i++) {
        if (!(arguments[i] instanceof Uint8Array))
          throw new TypeError('unexpected type, use Uint8Array');
      }
    }

    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }

    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };

    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };

    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return null;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };

    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };

    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };

    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };

    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };

    nacl.box.after = nacl.secretbox;

    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };

    nacl.box.open.after = nacl.secretbox.open;

    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };

    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;

    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };

    nacl.sign.open = function(signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };

    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };

    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
      return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    };

    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };

    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;

    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };

    nacl.hash.hashLength = crypto_hash_BYTES;

    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    };

    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };

    (function() {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i, v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof commonjsRequire !== 'undefined') {
        // Node.js.
        crypto = require$$0;
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i, v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();

    })(module.exports ? module.exports : (self.nacl = self.nacl || {}));
    });

    /**
     * @param {Uint8Array} array1
     * @param {Uint8Array} array2
     * @returns {boolean}
     */
    function arrayEqual(array1, array2) {
        if (array1 === array2) {
            return true;
        }

        if (array1.byteLength !== array2.byteLength) {
            return false;
        }

        const view1 = new DataView(array1.buffer);
        const view2 = new DataView(array2.buffer);

        let i = array1.byteLength;

        while (i--) {
            if (view1.getUint8(i) !== view2.getUint8(i)) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param {Uint8Array} array
     * @param {Uint8Array} arrayPrefix
     * @returns {boolean}
     */
    function arrayStartsWith(array, arrayPrefix) {
        if (array.byteLength < arrayPrefix.byteLength) {
            return false;
        }

        let i = arrayPrefix.byteLength;

        while (i--) {
            if (array[i] !== arrayPrefix[i]) {
                return false;
            }
        }

        return true;
    }

    /**
     * Signals that a key could not be realized from the input.
     */
    class BadKeyError extends Error {
        /**
         * @param {Error | string} messageOrCause
         */
        constructor(messageOrCause) {
            super(
                messageOrCause instanceof Error
                    ? messageOrCause.message
                    : messageOrCause
            );

            this.name = "BadKeyError";

            if (messageOrCause instanceof Error) {
                /** @type {?Error} */
                this.cause = messageOrCause;
                this.stack = messageOrCause.stack;
            }
        }
    }

    /**
     * @type {string[]}
     */
    const byteToHex$1 = [];

    for (let n = 0; n <= 0xff; n += 1) {
        byteToHex$1.push(n.toString(16).padStart(2, "0"));
    }

    /**
     * @param {Uint8Array} data
     * @returns {string}
     */
    function encode$3(data) {
        let string = "";

        for (const byte of data) {
            string += byteToHex$1[byte];
        }

        return string;
    }

    /**
     * @param {string} text
     * @returns {Uint8Array}
     */
    function decode$5(text) {
        const str = text.startsWith("0x") ? text.substring(2) : text;
        const result = str.match(/.{1,2}/gu);

        return new Uint8Array(
            (result == null ? [] : result).map((byte) => parseInt(byte, 16))
        );
    }

    /**
     * @typedef {import("./PrivateKey.js").Transaction} Transaction
     */

    const derPrefix$1 = "302a300506032b6570032100";
    const derPrefixBytes$1 = decode$5(derPrefix$1);

    /**
     * An public key on the Hedera™ network.
     */
    class PublicKey extends Key {
        /**
         * @internal
         * @hideconstructor
         * @param {Uint8Array} keyData
         */
        constructor(keyData) {
            super();

            /**
             * @type {Uint8Array}
             * @private
             * @readonly
             */
            this._keyData = keyData;
        }

        /**
         * @param {Uint8Array} data
         * @returns {PublicKey}
         */
        static fromBytes(data) {
            switch (data.length) {
                case 32:
                    return new PublicKey(data);

                case 44:
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                    if (arrayStartsWith(data, derPrefixBytes$1)) {
                        return new PublicKey(data.subarray(12));
                    }

                    break;
            }

            throw new BadKeyError(
                `invalid public key length: ${data.length} bytes`
            );
        }

        /**
         * Parse a public key from a string of hexadecimal digits.
         *
         * The public key may optionally be prefixed with
         * the DER header.
         *
         * @param {string} text
         * @returns {PublicKey}
         */
        static fromString(text) {
            return PublicKey.fromBytes(decode$5(text));
        }

        /**
         * Verify a signature on a message with this public key.
         *
         * @param {Uint8Array} message
         * @param {Uint8Array} signature
         * @returns {boolean}
         */
        verify(message, signature) {
            return naclFast.sign.detached.verify(message, signature, this._keyData);
        }

        /**
         * @param {Transaction} transaction
         * @returns {boolean}
         */
        verifyTransaction(transaction) {
            transaction._requireFrozen();

            if (!transaction._isFrozen()) {
                transaction.freeze();
            }

            for (const signedTransaction of transaction._signedTransactions) {
                if (
                    signedTransaction.sigMap != null &&
                    signedTransaction.sigMap.sigPair != null
                ) {
                    let found = false;
                    for (const sigPair of signedTransaction.sigMap.sigPair) {
                        const pubKeyPrefix = /** @type {Uint8Array} */ (sigPair.pubKeyPrefix);
                        if (arrayEqual(pubKeyPrefix, this._keyData)) {
                            found = true;
                            const bodyBytes = /** @type {Uint8Array} */ (signedTransaction.bodyBytes);
                            const signature = /** @type {Uint8Array} */ (sigPair.ed25519);
                            if (
                                !naclFast.sign.detached.verify(
                                    bodyBytes,
                                    signature,
                                    this._keyData
                                )
                            ) {
                                return false;
                            }
                        }
                    }

                    if (!found) {
                        return false;
                    }
                }
            }

            return true;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return this._keyData.slice();
        }

        /**
         * @returns {string}
         */
        toString() {
            return derPrefix$1 + encode$3(this._keyData);
        }

        /**
         * @param {PublicKey} other
         * @returns {boolean}
         */
        equals(other) {
            return arrayEqual(this._keyData, other._keyData);
        }
    }

    /**
     * Possible statuses for {@link Mnemonic#validate()}.
     *
     * @readonly
     * @enum {string}
     */
    const BadMnemonicReason = Object.freeze({
        /**
         * The mnemonic did not have a supported number of words (12 or 24 for regular and 22 for legacy).
         */
        BadLength: "BadLength",

        /**
         * The mnemonic contained words which were not found in the word list.
         */
        UnknownWords: "UnknownWords",

        /**
         * The checksum encoded in the mnemonic did not match the checksum we just calculated for
         * that mnemonic.
         *
         * 24-word mnemonics have an 8-bit checksum that is appended to the 32 bytes of source entropy
         * after being calculated from it, before being encoded into words.
         *
         * This could happen if two or more of the words were entered out of the original order or
         * replaced with another from the standard word list (as this is only returned if all the words
         * exist in the word list).
         */
        ChecksumMismatch: "ChecksumMismatch",
    });

    /** @typedef {import("./Mnemonic.js").default} Mnemonic */

    class BadMnemonicError extends Error {
        /**
         * @param {Mnemonic} mnemonic
         * @param {string} reason
         * @param {number[]} unknownWordIndices
         * @hideconstructor
         */
        constructor(mnemonic, reason, unknownWordIndices) {
            let reasonMessage;

            switch (reason) {
                case BadMnemonicReason.BadLength:
                    reasonMessage = "mnemonic is of an unexpected number of words";
                    break;

                case BadMnemonicReason.ChecksumMismatch:
                    reasonMessage =
                        "checksum byte in mnemonic did not match the rest of the mnemonic";
                    break;

                case BadMnemonicReason.UnknownWords:
                    reasonMessage =
                        "mnemonic contained words that are not in the standard word list";
                    break;

                default:
                    throw new Error(
                        `unexpected value ${reason.toString()} for 'reason'`
                    );
            }

            super(`invalid mnemonic: ${reasonMessage}`);

            if (typeof Error.captureStackTrace !== "undefined") {
                Error.captureStackTrace(this, BadMnemonicError);
            }

            this.name = "BadMnemonicError";

            /** The reason for which the mnemonic failed validation. */
            this.reason = reason;

            /** The mnemonic that failed validation. */
            this.mnemonic = mnemonic;

            /**
             * The indices in the mnemonic that were not found in the BIP-39
             * standard English word list.
             */
            this.unknownWordIndices = unknownWordIndices;
        }
    }

    var legacyWords = [
        "aback",
        "abbey",
        "abbot",
        "abide",
        "ablaze",
        "able",
        "aboard",
        "abode",
        "abort",
        "abound",
        "about",
        "above",
        "abroad",
        "abrupt",
        "absent",
        "absorb",
        "absurd",
        "abuse",
        "accent",
        "accept",
        "access",
        "accord",
        "accuse",
        "ace",
        "ache",
        "aching",
        "acid",
        "acidic",
        "acorn",
        "acre",
        "across",
        "act",
        "action",
        "active",
        "actor",
        "actual",
        "acute",
        "adam",
        "adapt",
        "add",
        "added",
        "addict",
        "adept",
        "adhere",
        "adjust",
        "admire",
        "admit",
        "adobe",
        "adopt",
        "adrift",
        "adult",
        "adverb",
        "advice",
        "aerial",
        "afar",
        "affair",
        "affect",
        "afford",
        "afghan",
        "afield",
        "afloat",
        "afraid",
        "afresh",
        "after",
        "again",
        "age",
        "agency",
        "agenda",
        "agent",
        "aghast",
        "agile",
        "ago",
        "agony",
        "agree",
        "agreed",
        "ahead",
        "aid",
        "aide",
        "aim",
        "air",
        "airman",
        "airy",
        "akin",
        "alarm",
        "alaska",
        "albeit",
        "album",
        "ale",
        "alert",
        "alibi",
        "alice",
        "alien",
        "alight",
        "align",
        "alike",
        "alive",
        "alkali",
        "all",
        "alley",
        "allied",
        "allow",
        "alloy",
        "ally",
        "almond",
        "almost",
        "aloft",
        "alone",
        "along",
        "aloof",
        "aloud",
        "alpha",
        "alpine",
        "also",
        "altar",
        "alter",
        "always",
        "amaze",
        "amazon",
        "amber",
        "ambush",
        "amen",
        "amend",
        "amid",
        "amidst",
        "amiss",
        "among",
        "amount",
        "ample",
        "amuse",
        "anchor",
        "and",
        "andrew",
        "anew",
        "angel",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "annoy",
        "annual",
        "answer",
        "anthem",
        "any",
        "anyhow",
        "anyway",
        "apart",
        "apathy",
        "apex",
        "apiece",
        "appeal",
        "appear",
        "apple",
        "apply",
        "april",
        "apron",
        "arab",
        "arcade",
        "arcane",
        "arch",
        "arctic",
        "ardent",
        "are",
        "area",
        "argue",
        "arid",
        "arise",
        "ark",
        "arm",
        "armful",
        "army",
        "aroma",
        "around",
        "arouse",
        "array",
        "arrest",
        "arrive",
        "arrow",
        "arson",
        "art",
        "artery",
        "artful",
        "artist",
        "ascent",
        "ash",
        "ashen",
        "ashore",
        "aside",
        "ask",
        "asleep",
        "aspect",
        "assay",
        "assent",
        "assert",
        "assess",
        "asset",
        "assign",
        "assist",
        "assume",
        "assure",
        "asthma",
        "astute",
        "asylum",
        "ate",
        "athens",
        "atlas",
        "atom",
        "atomic",
        "attach",
        "attack",
        "attain",
        "attend",
        "attic",
        "auburn",
        "audio",
        "audit",
        "august",
        "aunt",
        "auntie",
        "aura",
        "austin",
        "author",
        "auto",
        "autumn",
        "avail",
        "avenge",
        "avenue",
        "avert",
        "avid",
        "avoid",
        "await",
        "awake",
        "awaken",
        "award",
        "aware",
        "awash",
        "away",
        "awful",
        "awhile",
        "axe",
        "axes",
        "axiom",
        "axis",
        "axle",
        "aye",
        "babe",
        "baby",
        "bach",
        "back",
        "backup",
        "bacon",
        "bad",
        "badge",
        "badly",
        "bag",
        "baggy",
        "bail",
        "bait",
        "bake",
        "baker",
        "bakery",
        "bald",
        "ball",
        "ballad",
        "ballet",
        "ballot",
        "baltic",
        "bamboo",
        "ban",
        "banal",
        "banana",
        "band",
        "bang",
        "bank",
        "bar",
        "barber",
        "bare",
        "barely",
        "barge",
        "bark",
        "barley",
        "barn",
        "baron",
        "barrel",
        "barren",
        "basalt",
        "base",
        "basic",
        "basil",
        "basin",
        "basis",
        "basket",
        "bass",
        "bat",
        "batch",
        "bath",
        "baton",
        "battle",
        "bay",
        "beach",
        "beacon",
        "beak",
        "beam",
        "bean",
        "bear",
        "beard",
        "beast",
        "beat",
        "beauty",
        "become",
        "bed",
        "beech",
        "beef",
        "beefy",
        "beep",
        "beer",
        "beet",
        "beetle",
        "before",
        "beg",
        "beggar",
        "begin",
        "behalf",
        "behave",
        "behind",
        "beige",
        "being",
        "belief",
        "bell",
        "belly",
        "belong",
        "below",
        "belt",
        "bench",
        "bend",
        "benign",
        "bent",
        "berlin",
        "berry",
        "berth",
        "beset",
        "beside",
        "best",
        "bestow",
        "bet",
        "beta",
        "betray",
        "better",
        "beware",
        "beyond",
        "bias",
        "biceps",
        "bicker",
        "bid",
        "big",
        "bigger",
        "bike",
        "bile",
        "bill",
        "bin",
        "binary",
        "bind",
        "biopsy",
        "birch",
        "bird",
        "birdie",
        "birth",
        "bishop",
        "bit",
        "bitch",
        "bite",
        "bitter",
        "black",
        "blade",
        "blame",
        "bland",
        "blast",
        "blaze",
        "bleak",
        "blend",
        "bless",
        "blew",
        "blind",
        "blink",
        "blip",
        "bliss",
        "blitz",
        "block",
        "blond",
        "blood",
        "bloody",
        "bloom",
        "blot",
        "blouse",
        "blow",
        "blue",
        "bluff",
        "blunt",
        "blur",
        "blush",
        "boar",
        "board",
        "boast",
        "boat",
        "bob",
        "bodily",
        "body",
        "bogus",
        "boil",
        "bold",
        "bolt",
        "bomb",
        "bombay",
        "bond",
        "bone",
        "bonn",
        "bonnet",
        "bonus",
        "bony",
        "book",
        "boom",
        "boost",
        "boot",
        "booth",
        "booze",
        "border",
        "bore",
        "borrow",
        "bosom",
        "boss",
        "boston",
        "both",
        "bother",
        "bottle",
        "bottom",
        "bought",
        "bounce",
        "bound",
        "bounty",
        "bout",
        "bovine",
        "bow",
        "bowel",
        "bowl",
        "box",
        "boy",
        "boyish",
        "brace",
        "brain",
        "brainy",
        "brake",
        "bran",
        "branch",
        "brand",
        "brandy",
        "brass",
        "brave",
        "bravo",
        "brazil",
        "breach",
        "bread",
        "break",
        "breast",
        "breath",
        "bred",
        "breed",
        "breeze",
        "brew",
        "bribe",
        "brick",
        "bride",
        "bridge",
        "brief",
        "bright",
        "brim",
        "brine",
        "bring",
        "brink",
        "brisk",
        "broad",
        "broke",
        "broken",
        "bronze",
        "brook",
        "broom",
        "brown",
        "bruise",
        "brush",
        "brutal",
        "brute",
        "bubble",
        "buck",
        "bucket",
        "buckle",
        "budget",
        "buffet",
        "buggy",
        "build",
        "bulb",
        "bulge",
        "bulk",
        "bulky",
        "bull",
        "bullet",
        "bully",
        "bump",
        "bumpy",
        "bunch",
        "bundle",
        "bunk",
        "bunny",
        "burden",
        "bureau",
        "burial",
        "buried",
        "burly",
        "burn",
        "burnt",
        "burrow",
        "burst",
        "bury",
        "bus",
        "bush",
        "bust",
        "bustle",
        "busy",
        "but",
        "butler",
        "butt",
        "butter",
        "button",
        "buy",
        "buyer",
        "buzz",
        "bye",
        "byte",
        "cab",
        "cabin",
        "cable",
        "cache",
        "cactus",
        "caesar",
        "cage",
        "cairo",
        "cajun",
        "cajole",
        "cake",
        "calf",
        "call",
        "caller",
        "calm",
        "calmly",
        "came",
        "camel",
        "camera",
        "camp",
        "campus",
        "can",
        "canada",
        "canal",
        "canary",
        "cancel",
        "cancer",
        "candid",
        "candle",
        "candy",
        "cane",
        "canine",
        "canoe",
        "canopy",
        "canvas",
        "canyon",
        "cap",
        "cape",
        "car",
        "carbon",
        "card",
        "care",
        "career",
        "caress",
        "cargo",
        "carl",
        "carnal",
        "carol",
        "carp",
        "carpet",
        "carrot",
        "carry",
        "cart",
        "cartel",
        "case",
        "cash",
        "cask",
        "cast",
        "castle",
        "casual",
        "cat",
        "catch",
        "cater",
        "cattle",
        "caught",
        "causal",
        "cause",
        "cave",
        "cease",
        "celery",
        "cell",
        "cellar",
        "celtic",
        "cement",
        "censor",
        "census",
        "cent",
        "cereal",
        "chain",
        "chair",
        "chalk",
        "chalky",
        "champ",
        "chance",
        "change",
        "chant",
        "chaos",
        "chap",
        "chapel",
        "charge",
        "charm",
        "chart",
        "chase",
        "chat",
        "cheap",
        "cheat",
        "check",
        "cheek",
        "cheeky",
        "cheer",
        "cheery",
        "cheese",
        "chef",
        "cheque",
        "cherry",
        "chess",
        "chest",
        "chew",
        "chic",
        "chick",
        "chief",
        "child",
        "chile",
        "chill",
        "chilly",
        "chin",
        "china",
        "chip",
        "choice",
        "choir",
        "choose",
        "chop",
        "choppy",
        "chord",
        "chorus",
        "chose",
        "chosen",
        "chris",
        "chrome",
        "chunk",
        "chunky",
        "church",
        "cider",
        "cigar",
        "cinema",
        "circa",
        "circle",
        "circus",
        "cite",
        "city",
        "civic",
        "civil",
        "clad",
        "claim",
        "clammy",
        "clan",
        "clap",
        "clash",
        "clasp",
        "class",
        "clause",
        "claw",
        "clay",
        "clean",
        "clear",
        "clergy",
        "clerk",
        "clever",
        "click",
        "client",
        "cliff",
        "climax",
        "climb",
        "clinch",
        "cling",
        "clinic",
        "clip",
        "cloak",
        "clock",
        "clone",
        "close",
        "closer",
        "closet",
        "cloth",
        "cloud",
        "cloudy",
        "clout",
        "clown",
        "club",
        "clue",
        "clumsy",
        "clung",
        "clutch",
        "coach",
        "coal",
        "coarse",
        "coast",
        "coat",
        "coax",
        "cobalt",
        "cobra",
        "coca",
        "cock",
        "cocoa",
        "code",
        "coffee",
        "coffin",
        "cohort",
        "coil",
        "coin",
        "coke",
        "cold",
        "collar",
        "colon",
        "colony",
        "colt",
        "column",
        "comb",
        "combat",
        "come",
        "comedy",
        "comic",
        "commit",
        "common",
        "compel",
        "comply",
        "concur",
        "cone",
        "confer",
        "congo",
        "consul",
        "convex",
        "convey",
        "convoy",
        "cook",
        "cool",
        "cope",
        "copper",
        "copy",
        "coral",
        "cord",
        "core",
        "cork",
        "corn",
        "corner",
        "corps",
        "corpse",
        "corpus",
        "cortex",
        "cosmic",
        "cosmos",
        "cost",
        "costly",
        "cotton",
        "couch",
        "cough",
        "could",
        "count",
        "county",
        "coup",
        "couple",
        "coupon",
        "course",
        "court",
        "cousin",
        "cove",
        "cover",
        "covert",
        "cow",
        "coward",
        "cowboy",
        "cozy",
        "crab",
        "crack",
        "cradle",
        "craft",
        "crafty",
        "crag",
        "crane",
        "crash",
        "crate",
        "crater",
        "crawl",
        "crazy",
        "creak",
        "cream",
        "creamy",
        "create",
        "credit",
        "creed",
        "creek",
        "creep",
        "creepy",
        "crept",
        "crest",
        "crew",
        "cried",
        "crime",
        "crisis",
        "crisp",
        "critic",
        "crook",
        "crop",
        "cross",
        "crow",
        "crowd",
        "crown",
        "crude",
        "cruel",
        "cruise",
        "crunch",
        "crush",
        "crust",
        "crux",
        "cry",
        "crypt",
        "cuba",
        "cube",
        "cubic",
        "cuckoo",
        "cuff",
        "cult",
        "cup",
        "curb",
        "cure",
        "curfew",
        "curl",
        "curry",
        "curse",
        "cursor",
        "curve",
        "cuss",
        "custom",
        "cut",
        "cute",
        "cycle",
        "cyclic",
        "cynic",
        "czech",
        "dad",
        "daddy",
        "dagger",
        "daily",
        "dairy",
        "daisy",
        "dale",
        "dam",
        "damage",
        "damp",
        "dampen",
        "dance",
        "danger",
        "danish",
        "dare",
        "dark",
        "darken",
        "darn",
        "dart",
        "dash",
        "data",
        "date",
        "david",
        "dawn",
        "day",
        "dead",
        "deadly",
        "deaf",
        "deal",
        "dealer",
        "dean",
        "dear",
        "death",
        "debate",
        "debit",
        "debris",
        "debt",
        "debtor",
        "decade",
        "decay",
        "decent",
        "decide",
        "deck",
        "decor",
        "decree",
        "deduce",
        "deed",
        "deep",
        "deeply",
        "deer",
        "defeat",
        "defect",
        "defend",
        "defer",
        "define",
        "defy",
        "degree",
        "deity",
        "delay",
        "delete",
        "delhi",
        "delta",
        "demand",
        "demise",
        "demo",
        "demure",
        "denial",
        "denote",
        "dense",
        "dental",
        "deny",
        "depart",
        "depend",
        "depict",
        "deploy",
        "depot",
        "depth",
        "deputy",
        "derive",
        "desert",
        "design",
        "desire",
        "desist",
        "desk",
        "detail",
        "detect",
        "deter",
        "detest",
        "detour",
        "device",
        "devise",
        "devoid",
        "devote",
        "devour",
        "dial",
        "diana",
        "diary",
        "dice",
        "dictum",
        "did",
        "die",
        "diesel",
        "diet",
        "differ",
        "dig",
        "digest",
        "digit",
        "dine",
        "dinghy",
        "dinner",
        "diode",
        "dip",
        "dire",
        "direct",
        "dirt",
        "dirty",
        "disc",
        "disco",
        "dish",
        "disk",
        "dismal",
        "dispel",
        "ditch",
        "dive",
        "divert",
        "divide",
        "divine",
        "dizzy",
        "docile",
        "dock",
        "doctor",
        "dog",
        "dogma",
        "dole",
        "doll",
        "dollar",
        "dolly",
        "domain",
        "dome",
        "domino",
        "donate",
        "done",
        "donkey",
        "donor",
        "doom",
        "door",
        "dorsal",
        "dose",
        "dot",
        "double",
        "doubt",
        "dough",
        "dour",
        "dove",
        "down",
        "dozen",
        "draft",
        "drag",
        "dragon",
        "drain",
        "drama",
        "drank",
        "draw",
        "drawer",
        "dread",
        "dream",
        "dreary",
        "dress",
        "drew",
        "dried",
        "drift",
        "drill",
        "drink",
        "drip",
        "drive",
        "driver",
        "drop",
        "drove",
        "drown",
        "drug",
        "drum",
        "drunk",
        "dry",
        "dual",
        "duck",
        "duct",
        "due",
        "duel",
        "duet",
        "duke",
        "dull",
        "duly",
        "dumb",
        "dummy",
        "dump",
        "dune",
        "dung",
        "duress",
        "during",
        "dusk",
        "dust",
        "dusty",
        "dutch",
        "duty",
        "dwarf",
        "dwell",
        "dyer",
        "dying",
        "dynamo",
        "each",
        "eager",
        "eagle",
        "ear",
        "earl",
        "early",
        "earn",
        "earth",
        "ease",
        "easel",
        "easily",
        "east",
        "easter",
        "easy",
        "eat",
        "eaten",
        "eater",
        "echo",
        "eddy",
        "eden",
        "edge",
        "edible",
        "edict",
        "edit",
        "editor",
        "eel",
        "eerie",
        "eerily",
        "effect",
        "effort",
        "egg",
        "ego",
        "eight",
        "eighth",
        "eighty",
        "either",
        "elbow",
        "elder",
        "eldest",
        "elect",
        "eleven",
        "elicit",
        "elite",
        "else",
        "elude",
        "elves",
        "embark",
        "emblem",
        "embryo",
        "emerge",
        "emit",
        "empire",
        "employ",
        "empty",
        "enable",
        "enamel",
        "end",
        "endure",
        "enemy",
        "energy",
        "engage",
        "engine",
        "enjoy",
        "enlist",
        "enough",
        "ensure",
        "entail",
        "enter",
        "entire",
        "entry",
        "envoy",
        "envy",
        "enzyme",
        "epic",
        "epoch",
        "equal",
        "equate",
        "equip",
        "equity",
        "era",
        "erect",
        "eric",
        "erode",
        "erotic",
        "errant",
        "error",
        "escape",
        "escort",
        "essay",
        "essex",
        "estate",
        "esteem",
        "ethic",
        "ethnic",
        "europe",
        "evade",
        "eve",
        "even",
        "event",
        "ever",
        "every",
        "evict",
        "evil",
        "evoke",
        "evolve",
        "exact",
        "exam",
        "exceed",
        "excel",
        "except",
        "excess",
        "excise",
        "excite",
        "excuse",
        "exempt",
        "exert",
        "exile",
        "exist",
        "exit",
        "exodus",
        "exotic",
        "expand",
        "expect",
        "expert",
        "expire",
        "export",
        "expose",
        "extend",
        "extra",
        "eye",
        "eyed",
        "fabric",
        "face",
        "facial",
        "fact",
        "factor",
        "fade",
        "fail",
        "faint",
        "fair",
        "fairly",
        "fairy",
        "faith",
        "fake",
        "falcon",
        "fall",
        "false",
        "falter",
        "fame",
        "family",
        "famine",
        "famous",
        "fan",
        "fancy",
        "far",
        "farce",
        "fare",
        "farm",
        "farmer",
        "fast",
        "fasten",
        "faster",
        "fat",
        "fatal",
        "fate",
        "father",
        "fatty",
        "fault",
        "faulty",
        "fauna",
        "fear",
        "feast",
        "feat",
        "fed",
        "fee",
        "feeble",
        "feed",
        "feel",
        "feet",
        "fell",
        "fellow",
        "felt",
        "female",
        "fence",
        "fend",
        "ferry",
        "fetal",
        "fetch",
        "feudal",
        "fever",
        "few",
        "fewer",
        "fiasco",
        "fiddle",
        "field",
        "fiend",
        "fierce",
        "fiery",
        "fifth",
        "fifty",
        "fig",
        "fight",
        "figure",
        "file",
        "fill",
        "filled",
        "filler",
        "film",
        "filter",
        "filth",
        "filthy",
        "final",
        "finale",
        "find",
        "fine",
        "finery",
        "finger",
        "finish",
        "finite",
        "fire",
        "firm",
        "firmly",
        "first",
        "fiscal",
        "fish",
        "fisher",
        "fist",
        "fit",
        "fitful",
        "five",
        "fix",
        "flag",
        "flair",
        "flak",
        "flame",
        "flank",
        "flap",
        "flare",
        "flash",
        "flask",
        "flat",
        "flavor",
        "flaw",
        "fled",
        "flee",
        "fleece",
        "fleet",
        "flesh",
        "fleshy",
        "flew",
        "flick",
        "flight",
        "flimsy",
        "flint",
        "flirt",
        "float",
        "flock",
        "flood",
        "floor",
        "floppy",
        "flora",
        "floral",
        "flour",
        "flow",
        "flower",
        "fluent",
        "fluffy",
        "fluid",
        "flung",
        "flurry",
        "flush",
        "flute",
        "flux",
        "fly",
        "flyer",
        "foal",
        "foam",
        "focal",
        "focus",
        "fog",
        "foil",
        "fold",
        "folk",
        "follow",
        "folly",
        "fond",
        "fondly",
        "font",
        "food",
        "fool",
        "foot",
        "for",
        "forbid",
        "force",
        "ford",
        "forest",
        "forge",
        "forget",
        "fork",
        "form",
        "formal",
        "format",
        "former",
        "fort",
        "forth",
        "forty",
        "forum",
        "fossil",
        "foster",
        "foul",
        "found",
        "four",
        "fourth",
        "fox",
        "foyer",
        "frail",
        "frame",
        "franc",
        "france",
        "frank",
        "fraud",
        "fred",
        "free",
        "freed",
        "freely",
        "freeze",
        "french",
        "frenzy",
        "fresh",
        "friar",
        "friday",
        "fridge",
        "fried",
        "friend",
        "fright",
        "fringe",
        "frock",
        "frog",
        "from",
        "front",
        "frost",
        "frosty",
        "frown",
        "frozen",
        "frugal",
        "fruit",
        "fry",
        "fudge",
        "fuel",
        "full",
        "fully",
        "fumes",
        "fun",
        "fund",
        "funny",
        "fur",
        "furry",
        "fury",
        "fuse",
        "fusion",
        "fuss",
        "fussy",
        "futile",
        "future",
        "fuzzy",
        "gadget",
        "gain",
        "gala",
        "galaxy",
        "gale",
        "gall",
        "galley",
        "gallon",
        "gallop",
        "gamble",
        "game",
        "gamma",
        "gandhi",
        "gang",
        "gap",
        "garage",
        "garden",
        "garlic",
        "gas",
        "gasp",
        "gate",
        "gather",
        "gauge",
        "gaunt",
        "gave",
        "gaze",
        "gear",
        "geese",
        "gem",
        "gemini",
        "gender",
        "gene",
        "geneva",
        "genial",
        "genius",
        "genre",
        "gentle",
        "gently",
        "gentry",
        "genus",
        "george",
        "germ",
        "get",
        "ghetto",
        "ghost",
        "giant",
        "gift",
        "giggle",
        "gill",
        "gilt",
        "ginger",
        "girl",
        "give",
        "given",
        "glad",
        "glade",
        "glance",
        "gland",
        "glare",
        "glass",
        "glassy",
        "gleam",
        "glee",
        "glide",
        "global",
        "globe",
        "gloom",
        "gloomy",
        "gloria",
        "glory",
        "gloss",
        "glossy",
        "glove",
        "glow",
        "glue",
        "gnat",
        "gnu",
        "goal",
        "goat",
        "gold",
        "golden",
        "golf",
        "gone",
        "gong",
        "goo",
        "good",
        "goose",
        "gore",
        "gorge",
        "gory",
        "gosh",
        "gospel",
        "gossip",
        "got",
        "gothic",
        "govern",
        "gown",
        "grab",
        "grace",
        "grade",
        "grail",
        "grain",
        "grand",
        "grant",
        "grape",
        "graph",
        "grasp",
        "grass",
        "grassy",
        "grate",
        "grave",
        "gravel",
        "gravy",
        "grease",
        "greasy",
        "great",
        "greece",
        "greed",
        "greedy",
        "greek",
        "green",
        "greet",
        "grew",
        "grey",
        "grid",
        "grief",
        "grill",
        "grim",
        "grin",
        "grind",
        "grip",
        "grit",
        "gritty",
        "groan",
        "groin",
        "groom",
        "groove",
        "gross",
        "ground",
        "group",
        "grove",
        "grow",
        "grown",
        "growth",
        "grudge",
        "grunt",
        "guard",
        "guess",
        "guest",
        "guide",
        "guild",
        "guilt",
        "guilty",
        "guise",
        "guitar",
        "gulf",
        "gully",
        "gun",
        "gunman",
        "guru",
        "gut",
        "guy",
        "gypsy",
        "habit",
        "hack",
        "had",
        "hail",
        "hair",
        "hairy",
        "haiti",
        "hale",
        "half",
        "hall",
        "halt",
        "hamlet",
        "hammer",
        "hand",
        "handle",
        "handy",
        "hang",
        "hangar",
        "hanoi",
        "happen",
        "happy",
        "harass",
        "harbor",
        "hard",
        "harder",
        "hardly",
        "hare",
        "harem",
        "harm",
        "harp",
        "harry",
        "harsh",
        "has",
        "hash",
        "hassle",
        "haste",
        "hasten",
        "hasty",
        "hat",
        "hatch",
        "hate",
        "haul",
        "haunt",
        "havana",
        "have",
        "haven",
        "havoc",
        "hawaii",
        "hawk",
        "hay",
        "hazard",
        "haze",
        "hazel",
        "hazy",
        "head",
        "heal",
        "health",
        "heap",
        "hear",
        "heard",
        "heart",
        "hearth",
        "hearty",
        "heat",
        "heater",
        "heaven",
        "heavy",
        "hebrew",
        "heck",
        "hectic",
        "hedge",
        "heel",
        "hefty",
        "height",
        "heir",
        "held",
        "helium",
        "helix",
        "hell",
        "hello",
        "helm",
        "helmet",
        "help",
        "hemp",
        "hence",
        "henry",
        "her",
        "herald",
        "herb",
        "herd",
        "here",
        "hereby",
        "hermes",
        "hernia",
        "hero",
        "heroic",
        "heroin",
        "hey",
        "heyday",
        "hick",
        "hidden",
        "hide",
        "high",
        "higher",
        "highly",
        "hill",
        "him",
        "hind",
        "hinder",
        "hint",
        "hippie",
        "hire",
        "his",
        "hiss",
        "hit",
        "hive",
        "hoard",
        "hoarse",
        "hobby",
        "hockey",
        "hold",
        "holder",
        "hole",
        "hollow",
        "holly",
        "holy",
        "home",
        "honest",
        "honey",
        "hood",
        "hook",
        "hope",
        "horn",
        "horrid",
        "horror",
        "horse",
        "hose",
        "host",
        "hot",
        "hotel",
        "hound",
        "hour",
        "house",
        "hover",
        "how",
        "huge",
        "hull",
        "human",
        "humane",
        "humble",
        "humid",
        "hung",
        "hunger",
        "hungry",
        "hunt",
        "hurdle",
        "hurl",
        "hurry",
        "hurt",
        "hush",
        "hut",
        "hybrid",
        "hymn",
        "hyphen",
        "ice",
        "icing",
        "icon",
        "idaho",
        "idea",
        "ideal",
        "idiom",
        "idiot",
        "idle",
        "idly",
        "idol",
        "ignite",
        "ignore",
        "ill",
        "image",
        "immune",
        "impact",
        "imply",
        "import",
        "impose",
        "inca",
        "incest",
        "inch",
        "income",
        "incur",
        "indeed",
        "index",
        "india",
        "indian",
        "indoor",
        "induce",
        "inept",
        "inert",
        "infant",
        "infect",
        "infer",
        "influx",
        "inform",
        "inject",
        "injure",
        "injury",
        "ink",
        "inlaid",
        "inland",
        "inlet",
        "inmate",
        "inn",
        "innate",
        "inner",
        "input",
        "insane",
        "insect",
        "insert",
        "inset",
        "inside",
        "insist",
        "insult",
        "insure",
        "intact",
        "intake",
        "intend",
        "inter",
        "into",
        "invade",
        "invent",
        "invest",
        "invite",
        "invoke",
        "inward",
        "iowa",
        "iran",
        "iraq",
        "irish",
        "iron",
        "ironic",
        "irony",
        "isaac",
        "isabel",
        "island",
        "isle",
        "israel",
        "issue",
        "italy",
        "itch",
        "item",
        "itself",
        "ivan",
        "ivory",
        "jack",
        "jacket",
        "jacob",
        "jade",
        "jaguar",
        "jail",
        "james",
        "jane",
        "japan",
        "jargon",
        "java",
        "jaw",
        "jazz",
        "jeep",
        "jelly",
        "jerky",
        "jest",
        "jet",
        "jewel",
        "jewish",
        "jim",
        "job",
        "jock",
        "jockey",
        "joe",
        "john",
        "join",
        "joint",
        "joke",
        "jolly",
        "jolt",
        "jordan",
        "joseph",
        "joy",
        "joyful",
        "joyous",
        "judge",
        "judy",
        "juice",
        "juicy",
        "july",
        "jumble",
        "jumbo",
        "jump",
        "june",
        "jungle",
        "junior",
        "junk",
        "junta",
        "jury",
        "just",
        "kansas",
        "karate",
        "karl",
        "keel",
        "keen",
        "keep",
        "keeper",
        "kenya",
        "kept",
        "kernel",
        "kettle",
        "key",
        "khaki",
        "kick",
        "kid",
        "kidnap",
        "kidney",
        "kill",
        "killer",
        "kin",
        "kind",
        "kindly",
        "king",
        "kiss",
        "kite",
        "kitten",
        "knack",
        "knee",
        "kneel",
        "knew",
        "knife",
        "knight",
        "knit",
        "knob",
        "knock",
        "knot",
        "know",
        "known",
        "koran",
        "korea",
        "kuwait",
        "label",
        "lace",
        "lack",
        "lad",
        "ladder",
        "laden",
        "lady",
        "lagoon",
        "laity",
        "lake",
        "lamb",
        "lame",
        "lamp",
        "lance",
        "land",
        "lane",
        "lap",
        "lapse",
        "large",
        "larval",
        "laser",
        "last",
        "latch",
        "late",
        "lately",
        "latent",
        "later",
        "latest",
        "latin",
        "latter",
        "laugh",
        "launch",
        "lava",
        "lavish",
        "law",
        "lawful",
        "lawn",
        "lawyer",
        "lay",
        "layer",
        "layman",
        "lazy",
        "lead",
        "leader",
        "leaf",
        "leafy",
        "league",
        "leak",
        "leaky",
        "lean",
        "leap",
        "learn",
        "lease",
        "leash",
        "least",
        "leave",
        "led",
        "ledge",
        "left",
        "leg",
        "legacy",
        "legal",
        "legend",
        "legion",
        "lemon",
        "lend",
        "length",
        "lens",
        "lent",
        "leo",
        "leper",
        "lesion",
        "less",
        "lessen",
        "lesser",
        "lesson",
        "lest",
        "let",
        "lethal",
        "letter",
        "level",
        "lever",
        "levy",
        "lewis",
        "liable",
        "liar",
        "libel",
        "libya",
        "lice",
        "lick",
        "lid",
        "lie",
        "lied",
        "lier",
        "life",
        "lift",
        "light",
        "like",
        "likely",
        "limb",
        "lime",
        "limit",
        "limp",
        "line",
        "linear",
        "linen",
        "linger",
        "link",
        "lint",
        "lion",
        "lip",
        "liquid",
        "liquor",
        "list",
        "listen",
        "lit",
        "live",
        "lively",
        "liver",
        "liz",
        "lizard",
        "load",
        "loaf",
        "loan",
        "lobby",
        "lobe",
        "local",
        "locate",
        "lock",
        "locus",
        "lodge",
        "loft",
        "lofty",
        "log",
        "logic",
        "logo",
        "london",
        "lone",
        "lonely",
        "long",
        "longer",
        "look",
        "loop",
        "loose",
        "loosen",
        "loot",
        "lord",
        "lorry",
        "lose",
        "loss",
        "lost",
        "lot",
        "lotion",
        "lotus",
        "loud",
        "loudly",
        "lounge",
        "lousy",
        "love",
        "lovely",
        "lover",
        "low",
        "lower",
        "lowest",
        "loyal",
        "lucid",
        "luck",
        "lucky",
        "lucy",
        "lull",
        "lump",
        "lumpy",
        "lunacy",
        "lunar",
        "lunch",
        "lung",
        "lure",
        "lurid",
        "lush",
        "lust",
        "lute",
        "luther",
        "luxury",
        "lying",
        "lymph",
        "lynch",
        "lyric",
        "macho",
        "macro",
        "mad",
        "madam",
        "made",
        "mafia",
        "magic",
        "magma",
        "magnet",
        "magnum",
        "magpie",
        "maid",
        "maiden",
        "mail",
        "main",
        "mainly",
        "major",
        "make",
        "maker",
        "male",
        "malice",
        "mall",
        "malt",
        "mammal",
        "manage",
        "mane",
        "mania",
        "manic",
        "manner",
        "manor",
        "mantle",
        "manual",
        "manure",
        "many",
        "map",
        "maple",
        "marble",
        "march",
        "mare",
        "margin",
        "maria",
        "marina",
        "mark",
        "market",
        "marry",
        "mars",
        "marsh",
        "martin",
        "martyr",
        "mary",
        "mask",
        "mason",
        "mass",
        "mast",
        "master",
        "mat",
        "match",
        "mate",
        "matrix",
        "matter",
        "mature",
        "maxim",
        "may",
        "maybe",
        "mayor",
        "maze",
        "mead",
        "meadow",
        "meal",
        "mean",
        "meant",
        "meat",
        "medal",
        "media",
        "median",
        "medic",
        "medium",
        "meet",
        "mellow",
        "melody",
        "melon",
        "melt",
        "member",
        "memo",
        "memory",
        "menace",
        "mend",
        "mental",
        "mentor",
        "menu",
        "mercy",
        "mere",
        "merely",
        "merge",
        "merger",
        "merit",
        "merry",
        "mesh",
        "mess",
        "messy",
        "met",
        "metal",
        "meter",
        "method",
        "methyl",
        "metric",
        "metro",
        "mexico",
        "miami",
        "mickey",
        "mid",
        "midday",
        "middle",
        "midst",
        "midway",
        "might",
        "mighty",
        "mild",
        "mildew",
        "mile",
        "milk",
        "milky",
        "mill",
        "mimic",
        "mince",
        "mind",
        "mine",
        "mini",
        "mink",
        "minor",
        "mint",
        "minus",
        "minute",
        "mire",
        "mirror",
        "mirth",
        "misery",
        "miss",
        "mist",
        "misty",
        "mite",
        "mix",
        "moan",
        "moat",
        "mob",
        "mobile",
        "mock",
        "mode",
        "model",
        "modem",
        "modern",
        "modest",
        "modify",
        "module",
        "moist",
        "molar",
        "mold",
        "mole",
        "molten",
        "moment",
        "monday",
        "money",
        "monk",
        "monkey",
        "month",
        "mood",
        "moody",
        "moon",
        "moor",
        "moral",
        "morale",
        "morbid",
        "more",
        "morgue",
        "mortal",
        "mortar",
        "mosaic",
        "moscow",
        "moses",
        "mosque",
        "moss",
        "most",
        "mostly",
        "moth",
        "mother",
        "motion",
        "motive",
        "motor",
        "mount",
        "mourn",
        "mouse",
        "mouth",
        "move",
        "movie",
        "mrs",
        "much",
        "muck",
        "mucus",
        "mud",
        "muddle",
        "muddy",
        "mule",
        "mummy",
        "munich",
        "murder",
        "murky",
        "murmur",
        "muscle",
        "museum",
        "music",
        "mussel",
        "must",
        "mutant",
        "mute",
        "mutiny",
        "mutter",
        "mutton",
        "mutual",
        "muzzle",
        "myopic",
        "myriad",
        "myself",
        "mystic",
        "myth",
        "nadir",
        "nail",
        "naked",
        "name",
        "namely",
        "nape",
        "napkin",
        "naples",
        "narrow",
        "nasal",
        "nasty",
        "nathan",
        "nation",
        "native",
        "nature",
        "nausea",
        "naval",
        "nave",
        "navy",
        "near",
        "nearer",
        "nearly",
        "neat",
        "neatly",
        "neck",
        "need",
        "needle",
        "needy",
        "negate",
        "neon",
        "nepal",
        "nephew",
        "nerve",
        "nest",
        "net",
        "neural",
        "never",
        "newly",
        "next",
        "nice",
        "nicely",
        "niche",
        "nickel",
        "niece",
        "night",
        "nile",
        "nimble",
        "nine",
        "ninety",
        "ninth",
        "nobel",
        "noble",
        "nobody",
        "node",
        "noise",
        "noisy",
        "none",
        "noon",
        "nor",
        "norm",
        "normal",
        "north",
        "norway",
        "nose",
        "nosy",
        "not",
        "note",
        "notice",
        "notify",
        "notion",
        "noun",
        "novel",
        "novice",
        "now",
        "nozzle",
        "null",
        "numb",
        "number",
        "nurse",
        "nut",
        "nylon",
        "nymph",
        "oak",
        "oar",
        "oasis",
        "oath",
        "obese",
        "obey",
        "object",
        "oblige",
        "oboe",
        "obtain",
        "obtuse",
        "occult",
        "occupy",
        "occur",
        "ocean",
        "octave",
        "odd",
        "off",
        "offend",
        "offer",
        "office",
        "offset",
        "often",
        "ohio",
        "oil",
        "oily",
        "okay",
        "old",
        "older",
        "oldest",
        "olive",
        "omega",
        "omen",
        "omit",
        "once",
        "one",
        "onion",
        "only",
        "onset",
        "onto",
        "onus",
        "onward",
        "opaque",
        "open",
        "openly",
        "opera",
        "opium",
        "oppose",
        "optic",
        "option",
        "oracle",
        "oral",
        "orange",
        "orbit",
        "orchid",
        "ordeal",
        "order",
        "organ",
        "orgasm",
        "orient",
        "origin",
        "ornate",
        "orphan",
        "oscar",
        "other",
        "otter",
        "ought",
        "ounce",
        "our",
        "out",
        "outer",
        "output",
        "outset",
        "oval",
        "oven",
        "over",
        "overt",
        "owe",
        "owing",
        "owl",
        "own",
        "owner",
        "oxford",
        "oxide",
        "oxygen",
        "oyster",
        "ozone",
        "pace",
        "pack",
        "packet",
        "pact",
        "pad",
        "paddle",
        "paddy",
        "pagan",
        "page",
        "paid",
        "pain",
        "paint",
        "pair",
        "palace",
        "pale",
        "palm",
        "pan",
        "panama",
        "panel",
        "panic",
        "papa",
        "papal",
        "paper",
        "parade",
        "parcel",
        "pardon",
        "parent",
        "paris",
        "parish",
        "park",
        "parody",
        "parrot",
        "part",
        "partly",
        "party",
        "pascal",
        "pass",
        "past",
        "paste",
        "pastel",
        "pastor",
        "pastry",
        "pat",
        "patch",
        "patent",
        "path",
        "patio",
        "patrol",
        "patron",
        "paul",
        "pause",
        "pave",
        "paw",
        "pawn",
        "pay",
        "peace",
        "peach",
        "peak",
        "pear",
        "pearl",
        "pedal",
        "peel",
        "peer",
        "peking",
        "pelvic",
        "pelvis",
        "pen",
        "penal",
        "pence",
        "pencil",
        "penny",
        "people",
        "pepper",
        "per",
        "perch",
        "peril",
        "period",
        "perish",
        "permit",
        "person",
        "peru",
        "pest",
        "pet",
        "peter",
        "petite",
        "petrol",
        "petty",
        "phase",
        "philip",
        "phone",
        "photo",
        "phrase",
        "piano",
        "pick",
        "picket",
        "picnic",
        "pie",
        "piece",
        "pier",
        "pierce",
        "piety",
        "pig",
        "pigeon",
        "piggy",
        "pike",
        "pile",
        "pill",
        "pillar",
        "pillow",
        "pilot",
        "pin",
        "pinch",
        "pine",
        "pink",
        "pint",
        "pious",
        "pipe",
        "pirate",
        "piss",
        "pistol",
        "piston",
        "pit",
        "pitch",
        "pity",
        "pivot",
        "pixel",
        "pizza",
        "place",
        "placid",
        "plague",
        "plain",
        "plan",
        "plane",
        "planet",
        "plank",
        "plant",
        "plasma",
        "plate",
        "play",
        "player",
        "plea",
        "plead",
        "please",
        "pledge",
        "plenty",
        "plight",
        "plot",
        "plough",
        "ploy",
        "plug",
        "plum",
        "plump",
        "plunge",
        "plural",
        "plus",
        "plush",
        "pocket",
        "poem",
        "poet",
        "poetic",
        "poetry",
        "point",
        "poison",
        "poland",
        "polar",
        "pole",
        "police",
        "policy",
        "polish",
        "polite",
        "poll",
        "pollen",
        "polo",
        "pond",
        "ponder",
        "pony",
        "pool",
        "poor",
        "poorly",
        "pop",
        "poppy",
        "pore",
        "pork",
        "port",
        "portal",
        "pose",
        "posh",
        "post",
        "postal",
        "pot",
        "potato",
        "potent",
        "pouch",
        "pound",
        "pour",
        "powder",
        "power",
        "praise",
        "pray",
        "prayer",
        "preach",
        "prefer",
        "prefix",
        "press",
        "pretty",
        "price",
        "pride",
        "priest",
        "primal",
        "prime",
        "prince",
        "print",
        "prior",
        "prism",
        "prison",
        "privy",
        "prize",
        "probe",
        "profit",
        "prompt",
        "prone",
        "proof",
        "propel",
        "proper",
        "prose",
        "proton",
        "proud",
        "prove",
        "proven",
        "proxy",
        "prune",
        "pry",
        "psalm",
        "pseudo",
        "psyche",
        "pub",
        "public",
        "puff",
        "pull",
        "pulp",
        "pulpit",
        "pulsar",
        "pulse",
        "pump",
        "punch",
        "punish",
        "punk",
        "pupil",
        "puppet",
        "puppy",
        "pure",
        "purely",
        "purge",
        "purify",
        "purple",
        "purse",
        "pursue",
        "push",
        "pushy",
        "put",
        "putt",
        "puzzle",
        "quaint",
        "quake",
        "quarry",
        "quart",
        "quartz",
        "quebec",
        "queen",
        "queer",
        "query",
        "quest",
        "queue",
        "quick",
        "quid",
        "quiet",
        "quilt",
        "quirk",
        "quit",
        "quite",
        "quiver",
        "quiz",
        "quota",
        "quote",
        "rabbit",
        "race",
        "racial",
        "racism",
        "rack",
        "racket",
        "radar",
        "radio",
        "radish",
        "radius",
        "raffle",
        "raft",
        "rage",
        "raid",
        "rail",
        "rain",
        "rainy",
        "raise",
        "rake",
        "rally",
        "ramp",
        "random",
        "range",
        "rank",
        "ransom",
        "rape",
        "rapid",
        "rare",
        "rarely",
        "rarity",
        "rash",
        "rat",
        "rate",
        "rather",
        "ratify",
        "ratio",
        "rattle",
        "rave",
        "raven",
        "raw",
        "ray",
        "razor",
        "reach",
        "react",
        "read",
        "reader",
        "ready",
        "real",
        "really",
        "realm",
        "reap",
        "rear",
        "reason",
        "rebel",
        "recall",
        "recent",
        "recess",
        "recipe",
        "reckon",
        "record",
        "recoup",
        "rector",
        "red",
        "redeem",
        "redo",
        "reduce",
        "reed",
        "reef",
        "reek",
        "refer",
        "reform",
        "refuge",
        "refuse",
        "regal",
        "regard",
        "regent",
        "regime",
        "region",
        "regret",
        "reign",
        "reject",
        "relate",
        "relax",
        "relay",
        "relic",
        "relief",
        "relish",
        "rely",
        "remain",
        "remark",
        "remedy",
        "remind",
        "remit",
        "remote",
        "remove",
        "renal",
        "render",
        "rent",
        "rental",
        "repair",
        "repeal",
        "repeat",
        "repent",
        "reply",
        "report",
        "rescue",
        "resent",
        "reside",
        "resign",
        "resin",
        "resist",
        "resort",
        "rest",
        "result",
        "resume",
        "retail",
        "retain",
        "retina",
        "retire",
        "return",
        "reveal",
        "review",
        "revise",
        "revive",
        "revolt",
        "reward",
        "rex",
        "rhine",
        "rhino",
        "rhyme",
        "rhythm",
        "ribbon",
        "rice",
        "rich",
        "rick",
        "rid",
        "ride",
        "rider",
        "ridge",
        "rife",
        "rifle",
        "rift",
        "right",
        "rigid",
        "rile",
        "rim",
        "ring",
        "rinse",
        "riot",
        "ripe",
        "ripen",
        "ripple",
        "rise",
        "risk",
        "risky",
        "rite",
        "ritual",
        "ritz",
        "rival",
        "river",
        "road",
        "roar",
        "roast",
        "rob",
        "robe",
        "robert",
        "robin",
        "robot",
        "robust",
        "rock",
        "rocket",
        "rocky",
        "rod",
        "rode",
        "rodent",
        "rogue",
        "role",
        "roll",
        "roman",
        "rome",
        "roof",
        "room",
        "root",
        "rope",
        "rose",
        "rosy",
        "rot",
        "rotate",
        "rotor",
        "rotten",
        "rouge",
        "rough",
        "round",
        "route",
        "rover",
        "row",
        "royal",
        "rub",
        "rubber",
        "rubble",
        "ruby",
        "rudder",
        "rude",
        "rug",
        "rugby",
        "ruin",
        "rule",
        "ruler",
        "rumble",
        "rump",
        "run",
        "rune",
        "rung",
        "runway",
        "rural",
        "rush",
        "russia",
        "rust",
        "rustic",
        "rusty",
        "sack",
        "sacred",
        "sad",
        "saddle",
        "sadism",
        "sadly",
        "safari",
        "safe",
        "safely",
        "safer",
        "safety",
        "saga",
        "sage",
        "sahara",
        "said",
        "sail",
        "sailor",
        "saint",
        "sake",
        "salad",
        "salary",
        "sale",
        "saline",
        "saliva",
        "salmon",
        "saloon",
        "salt",
        "salty",
        "salute",
        "sam",
        "same",
        "sample",
        "sand",
        "sandy",
        "sane",
        "sash",
        "satin",
        "satire",
        "saturn",
        "sauce",
        "saucer",
        "saudi",
        "sauna",
        "savage",
        "save",
        "saw",
        "say",
        "scale",
        "scalp",
        "scan",
        "scant",
        "scar",
        "scarce",
        "scare",
        "scarf",
        "scary",
        "scene",
        "scenic",
        "scent",
        "school",
        "scold",
        "scope",
        "score",
        "scorn",
        "scotch",
        "scott",
        "scout",
        "scrap",
        "scrape",
        "scream",
        "screen",
        "screw",
        "script",
        "scroll",
        "scrub",
        "scum",
        "sea",
        "seal",
        "seam",
        "seaman",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "sect",
        "sector",
        "secure",
        "see",
        "seed",
        "seeing",
        "seek",
        "seem",
        "seize",
        "seldom",
        "select",
        "self",
        "sell",
        "seller",
        "semi",
        "senate",
        "send",
        "senile",
        "senior",
        "sense",
        "sensor",
        "sent",
        "sentry",
        "seoul",
        "sequel",
        "serene",
        "serial",
        "series",
        "sermon",
        "serum",
        "serve",
        "server",
        "set",
        "settle",
        "seven",
        "severe",
        "sew",
        "sewage",
        "shabby",
        "shade",
        "shadow",
        "shady",
        "shaft",
        "shaggy",
        "shah",
        "shake",
        "shaky",
        "shall",
        "sham",
        "shame",
        "shape",
        "share",
        "shark",
        "sharp",
        "shawl",
        "she",
        "shear",
        "sheen",
        "sheep",
        "sheer",
        "sheet",
        "shelf",
        "shell",
        "sherry",
        "shield",
        "shift",
        "shine",
        "shiny",
        "ship",
        "shire",
        "shirk",
        "shirt",
        "shiver",
        "shock",
        "shoe",
        "shook",
        "shoot",
        "shop",
        "shore",
        "short",
        "shot",
        "should",
        "shout",
        "show",
        "shower",
        "shrank",
        "shrewd",
        "shrill",
        "shrimp",
        "shrine",
        "shrink",
        "shrub",
        "shrug",
        "shut",
        "shy",
        "shyly",
        "sick",
        "side",
        "siege",
        "sigh",
        "sight",
        "sigma",
        "sign",
        "signal",
        "silent",
        "silk",
        "silken",
        "silky",
        "sill",
        "silly",
        "silo",
        "silver",
        "simple",
        "simply",
        "since",
        "sinful",
        "sing",
        "singer",
        "single",
        "sink",
        "sir",
        "sire",
        "siren",
        "sister",
        "sit",
        "site",
        "sitter",
        "six",
        "sixth",
        "sixty",
        "size",
        "sketch",
        "skill",
        "skin",
        "skinny",
        "skip",
        "skirt",
        "skull",
        "sky",
        "slab",
        "slack",
        "slain",
        "slam",
        "slang",
        "slap",
        "slat",
        "slate",
        "slave",
        "sleek",
        "sleep",
        "sleepy",
        "sleeve",
        "slice",
        "slick",
        "slid",
        "slide",
        "slight",
        "slim",
        "slimy",
        "sling",
        "slip",
        "slit",
        "slogan",
        "slope",
        "sloppy",
        "slot",
        "slow",
        "slowly",
        "slug",
        "slum",
        "slump",
        "smack",
        "small",
        "smart",
        "smash",
        "smear",
        "smell",
        "smelly",
        "smelt",
        "smile",
        "smite",
        "smoke",
        "smoky",
        "smooth",
        "smug",
        "snack",
        "snail",
        "snake",
        "snap",
        "snatch",
        "sneak",
        "snow",
        "snowy",
        "snug",
        "soak",
        "soap",
        "sober",
        "soccer",
        "social",
        "sock",
        "socket",
        "socks",
        "soda",
        "sodden",
        "sodium",
        "sofa",
        "soft",
        "soften",
        "softly",
        "soggy",
        "soil",
        "solar",
        "sold",
        "sole",
        "solely",
        "solemn",
        "solid",
        "solo",
        "solve",
        "some",
        "son",
        "sonar",
        "sonata",
        "song",
        "sonic",
        "sony",
        "soon",
        "sooner",
        "soot",
        "soothe",
        "sordid",
        "sore",
        "sorrow",
        "sorry",
        "sort",
        "soul",
        "sound",
        "soup",
        "sour",
        "source",
        "soviet",
        "sow",
        "space",
        "spade",
        "spain",
        "span",
        "spare",
        "spark",
        "sparse",
        "spasm",
        "spat",
        "spate",
        "speak",
        "spear",
        "speech",
        "speed",
        "speedy",
        "spell",
        "spend",
        "sphere",
        "spice",
        "spicy",
        "spider",
        "spiky",
        "spill",
        "spin",
        "spinal",
        "spine",
        "spiral",
        "spirit",
        "spit",
        "spite",
        "splash",
        "split",
        "spoil",
        "spoke",
        "sponge",
        "spoon",
        "sport",
        "spot",
        "spouse",
        "spray",
        "spread",
        "spree",
        "spring",
        "sprint",
        "spur",
        "squad",
        "square",
        "squash",
        "squat",
        "squid",
        "stab",
        "stable",
        "stack",
        "staff",
        "stage",
        "stain",
        "stair",
        "stairs",
        "stake",
        "stale",
        "stall",
        "stamp",
        "stance",
        "stand",
        "staple",
        "star",
        "starch",
        "stare",
        "stark",
        "start",
        "starve",
        "state",
        "static",
        "statue",
        "status",
        "stay",
        "stead",
        "steady",
        "steak",
        "steal",
        "steam",
        "steel",
        "steep",
        "steer",
        "stem",
        "stench",
        "step",
        "stereo",
        "stern",
        "stew",
        "stick",
        "sticky",
        "stiff",
        "stifle",
        "stigma",
        "still",
        "sting",
        "stint",
        "stir",
        "stitch",
        "stock",
        "stocky",
        "stone",
        "stony",
        "stool",
        "stop",
        "store",
        "storm",
        "stormy",
        "story",
        "stout",
        "stove",
        "stow",
        "strain",
        "strait",
        "strand",
        "strap",
        "strata",
        "straw",
        "stray",
        "streak",
        "stream",
        "street",
        "stress",
        "strict",
        "stride",
        "strife",
        "strike",
        "string",
        "strip",
        "stripe",
        "strive",
        "stroke",
        "stroll",
        "strong",
        "stud",
        "studio",
        "study",
        "stuff",
        "stuffy",
        "stunt",
        "stupid",
        "sturdy",
        "style",
        "submit",
        "subtle",
        "subtly",
        "suburb",
        "such",
        "sudden",
        "sue",
        "suez",
        "suffer",
        "sugar",
        "suit",
        "suite",
        "suitor",
        "sullen",
        "sultan",
        "sum",
        "summer",
        "summit",
        "summon",
        "sun",
        "sunday",
        "sunny",
        "sunset",
        "super",
        "superb",
        "supper",
        "supple",
        "supply",
        "sure",
        "surely",
        "surf",
        "surge",
        "survey",
        "suture",
        "swamp",
        "swan",
        "swap",
        "swarm",
        "sway",
        "swear",
        "sweat",
        "sweaty",
        "sweden",
        "sweep",
        "sweet",
        "swell",
        "swift",
        "swim",
        "swine",
        "swing",
        "swirl",
        "swiss",
        "switch",
        "sword",
        "swore",
        "sydney",
        "symbol",
        "synod",
        "syntax",
        "syria",
        "syrup",
        "system",
        "table",
        "tablet",
        "taboo",
        "tacit",
        "tackle",
        "tact",
        "tactic",
        "tail",
        "tailor",
        "taiwan",
        "take",
        "tale",
        "talent",
        "talk",
        "tall",
        "tally",
        "tame",
        "tampa",
        "tan",
        "tandem",
        "tangle",
        "tank",
        "tap",
        "tape",
        "target",
        "tariff",
        "tarp",
        "tart",
        "tarzan",
        "task",
        "taste",
        "tasty",
        "tattoo",
        "taurus",
        "taut",
        "tavern",
        "tax",
        "taxi",
        "tea",
        "teach",
        "teak",
        "team",
        "tear",
        "tease",
        "tech",
        "teeth",
        "tell",
        "temper",
        "temple",
        "tempo",
        "tempt",
        "ten",
        "tenant",
        "tend",
        "tender",
        "tendon",
        "tennis",
        "tenor",
        "tense",
        "tent",
        "tenth",
        "tenure",
        "teresa",
        "term",
        "terror",
        "terse",
        "test",
        "texas",
        "text",
        "thank",
        "thaw",
        "them",
        "theme",
        "thence",
        "theory",
        "there",
        "these",
        "thesis",
        "they",
        "thick",
        "thief",
        "thigh",
        "thin",
        "thing",
        "think",
        "third",
        "thirst",
        "thirty",
        "this",
        "thomas",
        "thorn",
        "those",
        "though",
        "thread",
        "threat",
        "three",
        "thrill",
        "thrive",
        "throat",
        "throne",
        "throng",
        "throw",
        "thrust",
        "thud",
        "thug",
        "thumb",
        "thus",
        "thyme",
        "tibet",
        "tick",
        "ticket",
        "tidal",
        "tide",
        "tidy",
        "tie",
        "tier",
        "tiger",
        "tight",
        "tile",
        "till",
        "tilt",
        "timber",
        "time",
        "timid",
        "tin",
        "tiny",
        "tip",
        "tire",
        "tissue",
        "title",
        "toad",
        "toast",
        "today",
        "toe",
        "toilet",
        "token",
        "tokyo",
        "told",
        "toll",
        "tom",
        "tomato",
        "tomb",
        "tonal",
        "tone",
        "tongue",
        "tonic",
        "too",
        "took",
        "tool",
        "tooth",
        "top",
        "topaz",
        "topic",
        "torch",
        "torque",
        "torso",
        "tort",
        "toss",
        "total",
        "touch",
        "tough",
        "tour",
        "toward",
        "towel",
        "tower",
        "town",
        "toxic",
        "toxin",
        "toy",
        "trace",
        "track",
        "tract",
        "trade",
        "tragic",
        "trail",
        "train",
        "trait",
        "tram",
        "trance",
        "trap",
        "trauma",
        "travel",
        "tray",
        "tread",
        "treat",
        "treaty",
        "treble",
        "tree",
        "trek",
        "tremor",
        "trench",
        "trend",
        "trendy",
        "trial",
        "tribal",
        "tribe",
        "trick",
        "tricky",
        "tried",
        "trifle",
        "trim",
        "trio",
        "trip",
        "triple",
        "troop",
        "trophy",
        "trot",
        "trough",
        "trout",
        "truce",
        "truck",
        "true",
        "truly",
        "trunk",
        "trust",
        "truth",
        "try",
        "tube",
        "tumble",
        "tuna",
        "tundra",
        "tune",
        "tunic",
        "tunnel",
        "turban",
        "turf",
        "turk",
        "turkey",
        "turn",
        "turtle",
        "tutor",
        "tweed",
        "twelve",
        "twenty",
        "twice",
        "twin",
        "twist",
        "two",
        "tycoon",
        "tying",
        "type",
        "tyrant",
        "ugly",
        "ulcer",
        "ultra",
        "umpire",
        "unable",
        "uncle",
        "under",
        "uneasy",
        "unfair",
        "unify",
        "union",
        "unique",
        "unit",
        "unite",
        "unity",
        "unlike",
        "unrest",
        "unruly",
        "until",
        "update",
        "upheld",
        "uphill",
        "uphold",
        "upon",
        "upper",
        "uproar",
        "upset",
        "upshot",
        "uptake",
        "upturn",
        "upward",
        "urban",
        "urge",
        "urgent",
        "urging",
        "urine",
        "usable",
        "usage",
        "use",
        "useful",
        "user",
        "usual",
        "utmost",
        "utter",
        "vacant",
        "vacuum",
        "vague",
        "vain",
        "valet",
        "valid",
        "valley",
        "value",
        "valve",
        "van",
        "vanish",
        "vanity",
        "vary",
        "vase",
        "vast",
        "vat",
        "vault",
        "vector",
        "veil",
        "vein",
        "velvet",
        "vendor",
        "veneer",
        "venice",
        "venom",
        "vent",
        "venue",
        "venus",
        "verb",
        "verbal",
        "verge",
        "verify",
        "verity",
        "verse",
        "versus",
        "very",
        "vessel",
        "vest",
        "vet",
        "veto",
        "via",
        "viable",
        "vicar",
        "vice",
        "victim",
        "victor",
        "video",
        "vienna",
        "view",
        "vigil",
        "viking",
        "vile",
        "villa",
        "vine",
        "vinyl",
        "viola",
        "violet",
        "violin",
        "viral",
        "virgo",
        "virtue",
        "virus",
        "visa",
        "vision",
        "visit",
        "visual",
        "vital",
        "vivid",
        "vocal",
        "vodka",
        "vogue",
        "voice",
        "void",
        "volley",
        "volume",
        "vote",
        "vowel",
        "voyage",
        "vulgar",
        "wade",
        "wage",
        "waist",
        "wait",
        "waiter",
        "wake",
        "walk",
        "walker",
        "wall",
        "wallet",
        "walnut",
        "wander",
        "want",
        "war",
        "warden",
        "warm",
        "warmth",
        "warn",
        "warp",
        "warsaw",
        "wary",
        "was",
        "wash",
        "wasp",
        "waste",
        "watch",
        "water",
        "watery",
        "wave",
        "wax",
        "way",
        "weak",
        "weaken",
        "wealth",
        "weapon",
        "wear",
        "weary",
        "weave",
        "wedge",
        "wee",
        "weed",
        "week",
        "weekly",
        "weep",
        "weigh",
        "weight",
        "weird",
        "well",
        "were",
        "west",
        "wet",
        "whale",
        "wharf",
        "what",
        "wheat",
        "wheel",
        "when",
        "whence",
        "where",
        "which",
        "whiff",
        "while",
        "whim",
        "whip",
        "whisky",
        "white",
        "who",
        "whole",
        "wholly",
        "whom",
        "whose",
        "why",
        "wicked",
        "wide",
        "widely",
        "widen",
        "wider",
        "widow",
        "width",
        "wife",
        "wig",
        "wild",
        "wildly",
        "will",
        "willow",
        "wily",
        "win",
        "wind",
        "window",
        "windy",
        "wine",
        "wing",
        "wink",
        "winner",
        "winter",
        "wipe",
        "wire",
        "wisdom",
        "wise",
        "wish",
        "wit",
        "witch",
        "with",
        "within",
        "witty",
        "wizard",
        "woke",
        "wolf",
        "wolves",
        "woman",
        "womb",
        "won",
        "wonder",
        "wood",
        "wooden",
        "woods",
        "woody",
        "wool",
        "word",
        "work",
        "worker",
        "world",
        "worm",
        "worry",
        "worse",
        "worst",
        "worth",
        "worthy",
        "would",
        "wound",
        "wrap",
        "wrath",
        "wreath",
        "wreck",
        "wring",
        "wrist",
        "writ",
        "write",
        "writer",
        "wrong",
        "xerox",
        "yacht",
        "yale",
        "yard",
        "yarn",
        "yeah",
        "year",
        "yeard",
        "yeast",
        "yellow",
        "yet",
        "yield",
        "yogurt",
        "yolk",
        "you",
        "young",
        "your",
        "youth",
        "zaire",
        "zeal",
        "zebra",
        "zenith",
        "zero",
        "zeus",
        "zigzag",
        "zinc",
        "zombie",
        "zone",
    ];

    var bip39Words = [
        "abandon",
        "ability",
        "able",
        "about",
        "above",
        "absent",
        "absorb",
        "abstract",
        "absurd",
        "abuse",
        "access",
        "accident",
        "account",
        "accuse",
        "achieve",
        "acid",
        "acoustic",
        "acquire",
        "across",
        "act",
        "action",
        "actor",
        "actress",
        "actual",
        "adapt",
        "add",
        "addict",
        "address",
        "adjust",
        "admit",
        "adult",
        "advance",
        "advice",
        "aerobic",
        "affair",
        "afford",
        "afraid",
        "again",
        "age",
        "agent",
        "agree",
        "ahead",
        "aim",
        "air",
        "airport",
        "aisle",
        "alarm",
        "album",
        "alcohol",
        "alert",
        "alien",
        "all",
        "alley",
        "allow",
        "almost",
        "alone",
        "alpha",
        "already",
        "also",
        "alter",
        "always",
        "amateur",
        "amazing",
        "among",
        "amount",
        "amused",
        "analyst",
        "anchor",
        "ancient",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "announce",
        "annual",
        "another",
        "answer",
        "antenna",
        "antique",
        "anxiety",
        "any",
        "apart",
        "apology",
        "appear",
        "apple",
        "approve",
        "april",
        "arch",
        "arctic",
        "area",
        "arena",
        "argue",
        "arm",
        "armed",
        "armor",
        "army",
        "around",
        "arrange",
        "arrest",
        "arrive",
        "arrow",
        "art",
        "artefact",
        "artist",
        "artwork",
        "ask",
        "aspect",
        "assault",
        "asset",
        "assist",
        "assume",
        "asthma",
        "athlete",
        "atom",
        "attack",
        "attend",
        "attitude",
        "attract",
        "auction",
        "audit",
        "august",
        "aunt",
        "author",
        "auto",
        "autumn",
        "average",
        "avocado",
        "avoid",
        "awake",
        "aware",
        "away",
        "awesome",
        "awful",
        "awkward",
        "axis",
        "baby",
        "bachelor",
        "bacon",
        "badge",
        "bag",
        "balance",
        "balcony",
        "ball",
        "bamboo",
        "banana",
        "banner",
        "bar",
        "barely",
        "bargain",
        "barrel",
        "base",
        "basic",
        "basket",
        "battle",
        "beach",
        "bean",
        "beauty",
        "because",
        "become",
        "beef",
        "before",
        "begin",
        "behave",
        "behind",
        "believe",
        "below",
        "belt",
        "bench",
        "benefit",
        "best",
        "betray",
        "better",
        "between",
        "beyond",
        "bicycle",
        "bid",
        "bike",
        "bind",
        "biology",
        "bird",
        "birth",
        "bitter",
        "black",
        "blade",
        "blame",
        "blanket",
        "blast",
        "bleak",
        "bless",
        "blind",
        "blood",
        "blossom",
        "blouse",
        "blue",
        "blur",
        "blush",
        "board",
        "boat",
        "body",
        "boil",
        "bomb",
        "bone",
        "bonus",
        "book",
        "boost",
        "border",
        "boring",
        "borrow",
        "boss",
        "bottom",
        "bounce",
        "box",
        "boy",
        "bracket",
        "brain",
        "brand",
        "brass",
        "brave",
        "bread",
        "breeze",
        "brick",
        "bridge",
        "brief",
        "bright",
        "bring",
        "brisk",
        "broccoli",
        "broken",
        "bronze",
        "broom",
        "brother",
        "brown",
        "brush",
        "bubble",
        "buddy",
        "budget",
        "buffalo",
        "build",
        "bulb",
        "bulk",
        "bullet",
        "bundle",
        "bunker",
        "burden",
        "burger",
        "burst",
        "bus",
        "business",
        "busy",
        "butter",
        "buyer",
        "buzz",
        "cabbage",
        "cabin",
        "cable",
        "cactus",
        "cage",
        "cake",
        "call",
        "calm",
        "camera",
        "camp",
        "can",
        "canal",
        "cancel",
        "candy",
        "cannon",
        "canoe",
        "canvas",
        "canyon",
        "capable",
        "capital",
        "captain",
        "car",
        "carbon",
        "card",
        "cargo",
        "carpet",
        "carry",
        "cart",
        "case",
        "cash",
        "casino",
        "castle",
        "casual",
        "cat",
        "catalog",
        "catch",
        "category",
        "cattle",
        "caught",
        "cause",
        "caution",
        "cave",
        "ceiling",
        "celery",
        "cement",
        "census",
        "century",
        "cereal",
        "certain",
        "chair",
        "chalk",
        "champion",
        "change",
        "chaos",
        "chapter",
        "charge",
        "chase",
        "chat",
        "cheap",
        "check",
        "cheese",
        "chef",
        "cherry",
        "chest",
        "chicken",
        "chief",
        "child",
        "chimney",
        "choice",
        "choose",
        "chronic",
        "chuckle",
        "chunk",
        "churn",
        "cigar",
        "cinnamon",
        "circle",
        "citizen",
        "city",
        "civil",
        "claim",
        "clap",
        "clarify",
        "claw",
        "clay",
        "clean",
        "clerk",
        "clever",
        "click",
        "client",
        "cliff",
        "climb",
        "clinic",
        "clip",
        "clock",
        "clog",
        "close",
        "cloth",
        "cloud",
        "clown",
        "club",
        "clump",
        "cluster",
        "clutch",
        "coach",
        "coast",
        "coconut",
        "code",
        "coffee",
        "coil",
        "coin",
        "collect",
        "color",
        "column",
        "combine",
        "come",
        "comfort",
        "comic",
        "common",
        "company",
        "concert",
        "conduct",
        "confirm",
        "congress",
        "connect",
        "consider",
        "control",
        "convince",
        "cook",
        "cool",
        "copper",
        "copy",
        "coral",
        "core",
        "corn",
        "correct",
        "cost",
        "cotton",
        "couch",
        "country",
        "couple",
        "course",
        "cousin",
        "cover",
        "coyote",
        "crack",
        "cradle",
        "craft",
        "cram",
        "crane",
        "crash",
        "crater",
        "crawl",
        "crazy",
        "cream",
        "credit",
        "creek",
        "crew",
        "cricket",
        "crime",
        "crisp",
        "critic",
        "crop",
        "cross",
        "crouch",
        "crowd",
        "crucial",
        "cruel",
        "cruise",
        "crumble",
        "crunch",
        "crush",
        "cry",
        "crystal",
        "cube",
        "culture",
        "cup",
        "cupboard",
        "curious",
        "current",
        "curtain",
        "curve",
        "cushion",
        "custom",
        "cute",
        "cycle",
        "dad",
        "damage",
        "damp",
        "dance",
        "danger",
        "daring",
        "dash",
        "daughter",
        "dawn",
        "day",
        "deal",
        "debate",
        "debris",
        "decade",
        "december",
        "decide",
        "decline",
        "decorate",
        "decrease",
        "deer",
        "defense",
        "define",
        "defy",
        "degree",
        "delay",
        "deliver",
        "demand",
        "demise",
        "denial",
        "dentist",
        "deny",
        "depart",
        "depend",
        "deposit",
        "depth",
        "deputy",
        "derive",
        "describe",
        "desert",
        "design",
        "desk",
        "despair",
        "destroy",
        "detail",
        "detect",
        "develop",
        "device",
        "devote",
        "diagram",
        "dial",
        "diamond",
        "diary",
        "dice",
        "diesel",
        "diet",
        "differ",
        "digital",
        "dignity",
        "dilemma",
        "dinner",
        "dinosaur",
        "direct",
        "dirt",
        "disagree",
        "discover",
        "disease",
        "dish",
        "dismiss",
        "disorder",
        "display",
        "distance",
        "divert",
        "divide",
        "divorce",
        "dizzy",
        "doctor",
        "document",
        "dog",
        "doll",
        "dolphin",
        "domain",
        "donate",
        "donkey",
        "donor",
        "door",
        "dose",
        "double",
        "dove",
        "draft",
        "dragon",
        "drama",
        "drastic",
        "draw",
        "dream",
        "dress",
        "drift",
        "drill",
        "drink",
        "drip",
        "drive",
        "drop",
        "drum",
        "dry",
        "duck",
        "dumb",
        "dune",
        "during",
        "dust",
        "dutch",
        "duty",
        "dwarf",
        "dynamic",
        "eager",
        "eagle",
        "early",
        "earn",
        "earth",
        "easily",
        "east",
        "easy",
        "echo",
        "ecology",
        "economy",
        "edge",
        "edit",
        "educate",
        "effort",
        "egg",
        "eight",
        "either",
        "elbow",
        "elder",
        "electric",
        "elegant",
        "element",
        "elephant",
        "elevator",
        "elite",
        "else",
        "embark",
        "embody",
        "embrace",
        "emerge",
        "emotion",
        "employ",
        "empower",
        "empty",
        "enable",
        "enact",
        "end",
        "endless",
        "endorse",
        "enemy",
        "energy",
        "enforce",
        "engage",
        "engine",
        "enhance",
        "enjoy",
        "enlist",
        "enough",
        "enrich",
        "enroll",
        "ensure",
        "enter",
        "entire",
        "entry",
        "envelope",
        "episode",
        "equal",
        "equip",
        "era",
        "erase",
        "erode",
        "erosion",
        "error",
        "erupt",
        "escape",
        "essay",
        "essence",
        "estate",
        "eternal",
        "ethics",
        "evidence",
        "evil",
        "evoke",
        "evolve",
        "exact",
        "example",
        "excess",
        "exchange",
        "excite",
        "exclude",
        "excuse",
        "execute",
        "exercise",
        "exhaust",
        "exhibit",
        "exile",
        "exist",
        "exit",
        "exotic",
        "expand",
        "expect",
        "expire",
        "explain",
        "expose",
        "express",
        "extend",
        "extra",
        "eye",
        "eyebrow",
        "fabric",
        "face",
        "faculty",
        "fade",
        "faint",
        "faith",
        "fall",
        "false",
        "fame",
        "family",
        "famous",
        "fan",
        "fancy",
        "fantasy",
        "farm",
        "fashion",
        "fat",
        "fatal",
        "father",
        "fatigue",
        "fault",
        "favorite",
        "feature",
        "february",
        "federal",
        "fee",
        "feed",
        "feel",
        "female",
        "fence",
        "festival",
        "fetch",
        "fever",
        "few",
        "fiber",
        "fiction",
        "field",
        "figure",
        "file",
        "film",
        "filter",
        "final",
        "find",
        "fine",
        "finger",
        "finish",
        "fire",
        "firm",
        "first",
        "fiscal",
        "fish",
        "fit",
        "fitness",
        "fix",
        "flag",
        "flame",
        "flash",
        "flat",
        "flavor",
        "flee",
        "flight",
        "flip",
        "float",
        "flock",
        "floor",
        "flower",
        "fluid",
        "flush",
        "fly",
        "foam",
        "focus",
        "fog",
        "foil",
        "fold",
        "follow",
        "food",
        "foot",
        "force",
        "forest",
        "forget",
        "fork",
        "fortune",
        "forum",
        "forward",
        "fossil",
        "foster",
        "found",
        "fox",
        "fragile",
        "frame",
        "frequent",
        "fresh",
        "friend",
        "fringe",
        "frog",
        "front",
        "frost",
        "frown",
        "frozen",
        "fruit",
        "fuel",
        "fun",
        "funny",
        "furnace",
        "fury",
        "future",
        "gadget",
        "gain",
        "galaxy",
        "gallery",
        "game",
        "gap",
        "garage",
        "garbage",
        "garden",
        "garlic",
        "garment",
        "gas",
        "gasp",
        "gate",
        "gather",
        "gauge",
        "gaze",
        "general",
        "genius",
        "genre",
        "gentle",
        "genuine",
        "gesture",
        "ghost",
        "giant",
        "gift",
        "giggle",
        "ginger",
        "giraffe",
        "girl",
        "give",
        "glad",
        "glance",
        "glare",
        "glass",
        "glide",
        "glimpse",
        "globe",
        "gloom",
        "glory",
        "glove",
        "glow",
        "glue",
        "goat",
        "goddess",
        "gold",
        "good",
        "goose",
        "gorilla",
        "gospel",
        "gossip",
        "govern",
        "gown",
        "grab",
        "grace",
        "grain",
        "grant",
        "grape",
        "grass",
        "gravity",
        "great",
        "green",
        "grid",
        "grief",
        "grit",
        "grocery",
        "group",
        "grow",
        "grunt",
        "guard",
        "guess",
        "guide",
        "guilt",
        "guitar",
        "gun",
        "gym",
        "habit",
        "hair",
        "half",
        "hammer",
        "hamster",
        "hand",
        "happy",
        "harbor",
        "hard",
        "harsh",
        "harvest",
        "hat",
        "have",
        "hawk",
        "hazard",
        "head",
        "health",
        "heart",
        "heavy",
        "hedgehog",
        "height",
        "hello",
        "helmet",
        "help",
        "hen",
        "hero",
        "hidden",
        "high",
        "hill",
        "hint",
        "hip",
        "hire",
        "history",
        "hobby",
        "hockey",
        "hold",
        "hole",
        "holiday",
        "hollow",
        "home",
        "honey",
        "hood",
        "hope",
        "horn",
        "horror",
        "horse",
        "hospital",
        "host",
        "hotel",
        "hour",
        "hover",
        "hub",
        "huge",
        "human",
        "humble",
        "humor",
        "hundred",
        "hungry",
        "hunt",
        "hurdle",
        "hurry",
        "hurt",
        "husband",
        "hybrid",
        "ice",
        "icon",
        "idea",
        "identify",
        "idle",
        "ignore",
        "ill",
        "illegal",
        "illness",
        "image",
        "imitate",
        "immense",
        "immune",
        "impact",
        "impose",
        "improve",
        "impulse",
        "inch",
        "include",
        "income",
        "increase",
        "index",
        "indicate",
        "indoor",
        "industry",
        "infant",
        "inflict",
        "inform",
        "inhale",
        "inherit",
        "initial",
        "inject",
        "injury",
        "inmate",
        "inner",
        "innocent",
        "input",
        "inquiry",
        "insane",
        "insect",
        "inside",
        "inspire",
        "install",
        "intact",
        "interest",
        "into",
        "invest",
        "invite",
        "involve",
        "iron",
        "island",
        "isolate",
        "issue",
        "item",
        "ivory",
        "jacket",
        "jaguar",
        "jar",
        "jazz",
        "jealous",
        "jeans",
        "jelly",
        "jewel",
        "job",
        "join",
        "joke",
        "journey",
        "joy",
        "judge",
        "juice",
        "jump",
        "jungle",
        "junior",
        "junk",
        "just",
        "kangaroo",
        "keen",
        "keep",
        "ketchup",
        "key",
        "kick",
        "kid",
        "kidney",
        "kind",
        "kingdom",
        "kiss",
        "kit",
        "kitchen",
        "kite",
        "kitten",
        "kiwi",
        "knee",
        "knife",
        "knock",
        "know",
        "lab",
        "label",
        "labor",
        "ladder",
        "lady",
        "lake",
        "lamp",
        "language",
        "laptop",
        "large",
        "later",
        "latin",
        "laugh",
        "laundry",
        "lava",
        "law",
        "lawn",
        "lawsuit",
        "layer",
        "lazy",
        "leader",
        "leaf",
        "learn",
        "leave",
        "lecture",
        "left",
        "leg",
        "legal",
        "legend",
        "leisure",
        "lemon",
        "lend",
        "length",
        "lens",
        "leopard",
        "lesson",
        "letter",
        "level",
        "liar",
        "liberty",
        "library",
        "license",
        "life",
        "lift",
        "light",
        "like",
        "limb",
        "limit",
        "link",
        "lion",
        "liquid",
        "list",
        "little",
        "live",
        "lizard",
        "load",
        "loan",
        "lobster",
        "local",
        "lock",
        "logic",
        "lonely",
        "long",
        "loop",
        "lottery",
        "loud",
        "lounge",
        "love",
        "loyal",
        "lucky",
        "luggage",
        "lumber",
        "lunar",
        "lunch",
        "luxury",
        "lyrics",
        "machine",
        "mad",
        "magic",
        "magnet",
        "maid",
        "mail",
        "main",
        "major",
        "make",
        "mammal",
        "man",
        "manage",
        "mandate",
        "mango",
        "mansion",
        "manual",
        "maple",
        "marble",
        "march",
        "margin",
        "marine",
        "market",
        "marriage",
        "mask",
        "mass",
        "master",
        "match",
        "material",
        "math",
        "matrix",
        "matter",
        "maximum",
        "maze",
        "meadow",
        "mean",
        "measure",
        "meat",
        "mechanic",
        "medal",
        "media",
        "melody",
        "melt",
        "member",
        "memory",
        "mention",
        "menu",
        "mercy",
        "merge",
        "merit",
        "merry",
        "mesh",
        "message",
        "metal",
        "method",
        "middle",
        "midnight",
        "milk",
        "million",
        "mimic",
        "mind",
        "minimum",
        "minor",
        "minute",
        "miracle",
        "mirror",
        "misery",
        "miss",
        "mistake",
        "mix",
        "mixed",
        "mixture",
        "mobile",
        "model",
        "modify",
        "mom",
        "moment",
        "monitor",
        "monkey",
        "monster",
        "month",
        "moon",
        "moral",
        "more",
        "morning",
        "mosquito",
        "mother",
        "motion",
        "motor",
        "mountain",
        "mouse",
        "move",
        "movie",
        "much",
        "muffin",
        "mule",
        "multiply",
        "muscle",
        "museum",
        "mushroom",
        "music",
        "must",
        "mutual",
        "myself",
        "mystery",
        "myth",
        "naive",
        "name",
        "napkin",
        "narrow",
        "nasty",
        "nation",
        "nature",
        "near",
        "neck",
        "need",
        "negative",
        "neglect",
        "neither",
        "nephew",
        "nerve",
        "nest",
        "net",
        "network",
        "neutral",
        "never",
        "news",
        "next",
        "nice",
        "night",
        "noble",
        "noise",
        "nominee",
        "noodle",
        "normal",
        "north",
        "nose",
        "notable",
        "note",
        "nothing",
        "notice",
        "novel",
        "now",
        "nuclear",
        "number",
        "nurse",
        "nut",
        "oak",
        "obey",
        "object",
        "oblige",
        "obscure",
        "observe",
        "obtain",
        "obvious",
        "occur",
        "ocean",
        "october",
        "odor",
        "off",
        "offer",
        "office",
        "often",
        "oil",
        "okay",
        "old",
        "olive",
        "olympic",
        "omit",
        "once",
        "one",
        "onion",
        "online",
        "only",
        "open",
        "opera",
        "opinion",
        "oppose",
        "option",
        "orange",
        "orbit",
        "orchard",
        "order",
        "ordinary",
        "organ",
        "orient",
        "original",
        "orphan",
        "ostrich",
        "other",
        "outdoor",
        "outer",
        "output",
        "outside",
        "oval",
        "oven",
        "over",
        "own",
        "owner",
        "oxygen",
        "oyster",
        "ozone",
        "pact",
        "paddle",
        "page",
        "pair",
        "palace",
        "palm",
        "panda",
        "panel",
        "panic",
        "panther",
        "paper",
        "parade",
        "parent",
        "park",
        "parrot",
        "party",
        "pass",
        "patch",
        "path",
        "patient",
        "patrol",
        "pattern",
        "pause",
        "pave",
        "payment",
        "peace",
        "peanut",
        "pear",
        "peasant",
        "pelican",
        "pen",
        "penalty",
        "pencil",
        "people",
        "pepper",
        "perfect",
        "permit",
        "person",
        "pet",
        "phone",
        "photo",
        "phrase",
        "physical",
        "piano",
        "picnic",
        "picture",
        "piece",
        "pig",
        "pigeon",
        "pill",
        "pilot",
        "pink",
        "pioneer",
        "pipe",
        "pistol",
        "pitch",
        "pizza",
        "place",
        "planet",
        "plastic",
        "plate",
        "play",
        "please",
        "pledge",
        "pluck",
        "plug",
        "plunge",
        "poem",
        "poet",
        "point",
        "polar",
        "pole",
        "police",
        "pond",
        "pony",
        "pool",
        "popular",
        "portion",
        "position",
        "possible",
        "post",
        "potato",
        "pottery",
        "poverty",
        "powder",
        "power",
        "practice",
        "praise",
        "predict",
        "prefer",
        "prepare",
        "present",
        "pretty",
        "prevent",
        "price",
        "pride",
        "primary",
        "print",
        "priority",
        "prison",
        "private",
        "prize",
        "problem",
        "process",
        "produce",
        "profit",
        "program",
        "project",
        "promote",
        "proof",
        "property",
        "prosper",
        "protect",
        "proud",
        "provide",
        "public",
        "pudding",
        "pull",
        "pulp",
        "pulse",
        "pumpkin",
        "punch",
        "pupil",
        "puppy",
        "purchase",
        "purity",
        "purpose",
        "purse",
        "push",
        "put",
        "puzzle",
        "pyramid",
        "quality",
        "quantum",
        "quarter",
        "question",
        "quick",
        "quit",
        "quiz",
        "quote",
        "rabbit",
        "raccoon",
        "race",
        "rack",
        "radar",
        "radio",
        "rail",
        "rain",
        "raise",
        "rally",
        "ramp",
        "ranch",
        "random",
        "range",
        "rapid",
        "rare",
        "rate",
        "rather",
        "raven",
        "raw",
        "razor",
        "ready",
        "real",
        "reason",
        "rebel",
        "rebuild",
        "recall",
        "receive",
        "recipe",
        "record",
        "recycle",
        "reduce",
        "reflect",
        "reform",
        "refuse",
        "region",
        "regret",
        "regular",
        "reject",
        "relax",
        "release",
        "relief",
        "rely",
        "remain",
        "remember",
        "remind",
        "remove",
        "render",
        "renew",
        "rent",
        "reopen",
        "repair",
        "repeat",
        "replace",
        "report",
        "require",
        "rescue",
        "resemble",
        "resist",
        "resource",
        "response",
        "result",
        "retire",
        "retreat",
        "return",
        "reunion",
        "reveal",
        "review",
        "reward",
        "rhythm",
        "rib",
        "ribbon",
        "rice",
        "rich",
        "ride",
        "ridge",
        "rifle",
        "right",
        "rigid",
        "ring",
        "riot",
        "ripple",
        "risk",
        "ritual",
        "rival",
        "river",
        "road",
        "roast",
        "robot",
        "robust",
        "rocket",
        "romance",
        "roof",
        "rookie",
        "room",
        "rose",
        "rotate",
        "rough",
        "round",
        "route",
        "royal",
        "rubber",
        "rude",
        "rug",
        "rule",
        "run",
        "runway",
        "rural",
        "sad",
        "saddle",
        "sadness",
        "safe",
        "sail",
        "salad",
        "salmon",
        "salon",
        "salt",
        "salute",
        "same",
        "sample",
        "sand",
        "satisfy",
        "satoshi",
        "sauce",
        "sausage",
        "save",
        "say",
        "scale",
        "scan",
        "scare",
        "scatter",
        "scene",
        "scheme",
        "school",
        "science",
        "scissors",
        "scorpion",
        "scout",
        "scrap",
        "screen",
        "script",
        "scrub",
        "sea",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "section",
        "security",
        "seed",
        "seek",
        "segment",
        "select",
        "sell",
        "seminar",
        "senior",
        "sense",
        "sentence",
        "series",
        "service",
        "session",
        "settle",
        "setup",
        "seven",
        "shadow",
        "shaft",
        "shallow",
        "share",
        "shed",
        "shell",
        "sheriff",
        "shield",
        "shift",
        "shine",
        "ship",
        "shiver",
        "shock",
        "shoe",
        "shoot",
        "shop",
        "short",
        "shoulder",
        "shove",
        "shrimp",
        "shrug",
        "shuffle",
        "shy",
        "sibling",
        "sick",
        "side",
        "siege",
        "sight",
        "sign",
        "silent",
        "silk",
        "silly",
        "silver",
        "similar",
        "simple",
        "since",
        "sing",
        "siren",
        "sister",
        "situate",
        "six",
        "size",
        "skate",
        "sketch",
        "ski",
        "skill",
        "skin",
        "skirt",
        "skull",
        "slab",
        "slam",
        "sleep",
        "slender",
        "slice",
        "slide",
        "slight",
        "slim",
        "slogan",
        "slot",
        "slow",
        "slush",
        "small",
        "smart",
        "smile",
        "smoke",
        "smooth",
        "snack",
        "snake",
        "snap",
        "sniff",
        "snow",
        "soap",
        "soccer",
        "social",
        "sock",
        "soda",
        "soft",
        "solar",
        "soldier",
        "solid",
        "solution",
        "solve",
        "someone",
        "song",
        "soon",
        "sorry",
        "sort",
        "soul",
        "sound",
        "soup",
        "source",
        "south",
        "space",
        "spare",
        "spatial",
        "spawn",
        "speak",
        "special",
        "speed",
        "spell",
        "spend",
        "sphere",
        "spice",
        "spider",
        "spike",
        "spin",
        "spirit",
        "split",
        "spoil",
        "sponsor",
        "spoon",
        "sport",
        "spot",
        "spray",
        "spread",
        "spring",
        "spy",
        "square",
        "squeeze",
        "squirrel",
        "stable",
        "stadium",
        "staff",
        "stage",
        "stairs",
        "stamp",
        "stand",
        "start",
        "state",
        "stay",
        "steak",
        "steel",
        "stem",
        "step",
        "stereo",
        "stick",
        "still",
        "sting",
        "stock",
        "stomach",
        "stone",
        "stool",
        "story",
        "stove",
        "strategy",
        "street",
        "strike",
        "strong",
        "struggle",
        "student",
        "stuff",
        "stumble",
        "style",
        "subject",
        "submit",
        "subway",
        "success",
        "such",
        "sudden",
        "suffer",
        "sugar",
        "suggest",
        "suit",
        "summer",
        "sun",
        "sunny",
        "sunset",
        "super",
        "supply",
        "supreme",
        "sure",
        "surface",
        "surge",
        "surprise",
        "surround",
        "survey",
        "suspect",
        "sustain",
        "swallow",
        "swamp",
        "swap",
        "swarm",
        "swear",
        "sweet",
        "swift",
        "swim",
        "swing",
        "switch",
        "sword",
        "symbol",
        "symptom",
        "syrup",
        "system",
        "table",
        "tackle",
        "tag",
        "tail",
        "talent",
        "talk",
        "tank",
        "tape",
        "target",
        "task",
        "taste",
        "tattoo",
        "taxi",
        "teach",
        "team",
        "tell",
        "ten",
        "tenant",
        "tennis",
        "tent",
        "term",
        "test",
        "text",
        "thank",
        "that",
        "theme",
        "then",
        "theory",
        "there",
        "they",
        "thing",
        "this",
        "thought",
        "three",
        "thrive",
        "throw",
        "thumb",
        "thunder",
        "ticket",
        "tide",
        "tiger",
        "tilt",
        "timber",
        "time",
        "tiny",
        "tip",
        "tired",
        "tissue",
        "title",
        "toast",
        "tobacco",
        "today",
        "toddler",
        "toe",
        "together",
        "toilet",
        "token",
        "tomato",
        "tomorrow",
        "tone",
        "tongue",
        "tonight",
        "tool",
        "tooth",
        "top",
        "topic",
        "topple",
        "torch",
        "tornado",
        "tortoise",
        "toss",
        "total",
        "tourist",
        "toward",
        "tower",
        "town",
        "toy",
        "track",
        "trade",
        "traffic",
        "tragic",
        "train",
        "transfer",
        "trap",
        "trash",
        "travel",
        "tray",
        "treat",
        "tree",
        "trend",
        "trial",
        "tribe",
        "trick",
        "trigger",
        "trim",
        "trip",
        "trophy",
        "trouble",
        "truck",
        "true",
        "truly",
        "trumpet",
        "trust",
        "truth",
        "try",
        "tube",
        "tuition",
        "tumble",
        "tuna",
        "tunnel",
        "turkey",
        "turn",
        "turtle",
        "twelve",
        "twenty",
        "twice",
        "twin",
        "twist",
        "two",
        "type",
        "typical",
        "ugly",
        "umbrella",
        "unable",
        "unaware",
        "uncle",
        "uncover",
        "under",
        "undo",
        "unfair",
        "unfold",
        "unhappy",
        "uniform",
        "unique",
        "unit",
        "universe",
        "unknown",
        "unlock",
        "until",
        "unusual",
        "unveil",
        "update",
        "upgrade",
        "uphold",
        "upon",
        "upper",
        "upset",
        "urban",
        "urge",
        "usage",
        "use",
        "used",
        "useful",
        "useless",
        "usual",
        "utility",
        "vacant",
        "vacuum",
        "vague",
        "valid",
        "valley",
        "valve",
        "van",
        "vanish",
        "vapor",
        "various",
        "vast",
        "vault",
        "vehicle",
        "velvet",
        "vendor",
        "venture",
        "venue",
        "verb",
        "verify",
        "version",
        "very",
        "vessel",
        "veteran",
        "viable",
        "vibrant",
        "vicious",
        "victory",
        "video",
        "view",
        "village",
        "vintage",
        "violin",
        "virtual",
        "virus",
        "visa",
        "visit",
        "visual",
        "vital",
        "vivid",
        "vocal",
        "voice",
        "void",
        "volcano",
        "volume",
        "vote",
        "voyage",
        "wage",
        "wagon",
        "wait",
        "walk",
        "wall",
        "walnut",
        "want",
        "warfare",
        "warm",
        "warrior",
        "wash",
        "wasp",
        "waste",
        "water",
        "wave",
        "way",
        "wealth",
        "weapon",
        "wear",
        "weasel",
        "weather",
        "web",
        "wedding",
        "weekend",
        "weird",
        "welcome",
        "west",
        "wet",
        "whale",
        "what",
        "wheat",
        "wheel",
        "when",
        "where",
        "whip",
        "whisper",
        "wide",
        "width",
        "wife",
        "wild",
        "will",
        "win",
        "window",
        "wine",
        "wing",
        "wink",
        "winner",
        "winter",
        "wire",
        "wisdom",
        "wise",
        "wish",
        "witness",
        "wolf",
        "woman",
        "wonder",
        "wood",
        "wool",
        "word",
        "work",
        "world",
        "worry",
        "worth",
        "wrap",
        "wreck",
        "wrestle",
        "wrist",
        "write",
        "wrong",
        "yard",
        "year",
        "yellow",
        "you",
        "young",
        "youth",
        "zebra",
        "zero",
        "zone",
        "zoo",
    ];

    /**
     * @param {Uint8Array} data
     * @returns {Promise<Uint8Array>}
     */
    async function digest$1(data) {
        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest
        return new Uint8Array(await crypto.subtle.digest("SHA-256", data));
    }

    /**
     * @param {Uint8Array} data
     * @returns {string}
     */
    function decode$4(data) {
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        return new TextDecoder().decode(data);
    }

    /**
     * @param {string} text
     * @returns {Uint8Array}
     */
    function encode$2(text) {
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        return new TextEncoder().encode(text);
    }

    /**
     * @typedef {import("./hmac.js").HashAlgorithm} HashAlgorithm
     */

    /**
     * @param {HashAlgorithm} algorithm
     * @param {Uint8Array | string} password
     * @param {Uint8Array | string} salt
     * @param {number} iterations
     * @param {number} length
     * @returns {Promise<Uint8Array>}
     */
    async function deriveKey(algorithm, password, salt, iterations, length) {
        const pass =
            typeof password === "string"
                ? // Valid ASCII is also valid UTF-8 so encoding the password as UTF-8
                  // should be fine if only valid ASCII characters are used in the password
                  encode$2(password)
                : password;

        const nacl = typeof salt === "string" ? encode$2(salt) : salt;

        try {
            const key = await window.crypto.subtle.importKey(
                "raw",
                pass,
                {
                    name: "PBKDF2",
                    hash: algorithm,
                },
                false,
                ["deriveBits"]
            );

            return new Uint8Array(
                await window.crypto.subtle.deriveBits(
                    {
                        name: "PBKDF2",
                        hash: algorithm,
                        salt: nacl,
                        iterations,
                    },
                    key,
                    length << 3
                )
            );
        } catch {
            throw new Error("(BUG) Non-Exhaustive switch statement for algorithms");
        }
    }

    /**
     * @enum {string}
     */
    const HashAlgorithm = {
        Sha256: "SHA-256",
        Sha384: "SHA-384",
        Sha512: "SHA-512",
    };

    /**
     * @param {HashAlgorithm} algorithm
     * @param {Uint8Array | string} secretKey
     * @param {Uint8Array | string} data
     * @returns {Promise<Uint8Array>}
     */
    async function hash(algorithm, secretKey, data) {
        const key =
            typeof secretKey === "string" ? encode$2(secretKey) : secretKey;
        const value = typeof data === "string" ? encode$2(data) : data;

        try {
            const key_ = await window.crypto.subtle.importKey(
                "raw",
                key,
                {
                    name: "HMAC",
                    hash: algorithm,
                },
                false,
                ["sign"]
            );

            return new Uint8Array(
                await window.crypto.subtle.sign("HMAC", key_, value)
            );
        } catch {
            throw new Error("Fallback if SubtleCrypto fails is not implemented");
        }
    }

    /**
     * @param {Uint8Array} parentKey
     * @param {Uint8Array} chainCode
     * @param {number} index
     * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}
     */
    async function derive(parentKey, chainCode, index) {
        const input = new Uint8Array(37);

        // 0x00 + parentKey + index(BE)
        input[0] = 0;
        input.set(parentKey, 1);
        new DataView(input.buffer).setUint32(33, index, false);

        // set the index to hardened
        input[33] |= 128;

        const digest = await hash(HashAlgorithm.Sha512, chainCode, input);

        return { keyData: digest.subarray(0, 32), chainCode: digest.subarray(32) };
    }

    var bignumber = createCommonjsModule(function (module) {
    (function (globalObject) {

    /*
     *      bignumber.js v9.0.1
     *      A JavaScript library for arbitrary-precision arithmetic.
     *      https://github.com/MikeMcl/bignumber.js
     *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
     *      MIT Licensed.
     *
     *      BigNumber.prototype methods     |  BigNumber methods
     *                                      |
     *      absoluteValue            abs    |  clone
     *      comparedTo                      |  config               set
     *      decimalPlaces            dp     |      DECIMAL_PLACES
     *      dividedBy                div    |      ROUNDING_MODE
     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
     *      exponentiatedBy          pow    |      RANGE
     *      integerValue                    |      CRYPTO
     *      isEqualTo                eq     |      MODULO_MODE
     *      isFinite                        |      POW_PRECISION
     *      isGreaterThan            gt     |      FORMAT
     *      isGreaterThanOrEqualTo   gte    |      ALPHABET
     *      isInteger                       |  isBigNumber
     *      isLessThan               lt     |  maximum              max
     *      isLessThanOrEqualTo      lte    |  minimum              min
     *      isNaN                           |  random
     *      isNegative                      |  sum
     *      isPositive                      |
     *      isZero                          |
     *      minus                           |
     *      modulo                   mod    |
     *      multipliedBy             times  |
     *      negated                         |
     *      plus                            |
     *      precision                sd     |
     *      shiftedBy                       |
     *      squareRoot               sqrt   |
     *      toExponential                   |
     *      toFixed                         |
     *      toFormat                        |
     *      toFraction                      |
     *      toJSON                          |
     *      toNumber                        |
     *      toPrecision                     |
     *      toString                        |
     *      valueOf                         |
     *
     */


      var BigNumber,
        isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,

        bignumberError = '[BigNumber Error] ',
        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,

        // EDITABLE
        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
        // the arguments to toExponential, toFixed, toFormat, and toPrecision.
        MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function clone(configObject) {
        var div, convertBase, parseNumeric,
          P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
          ONE = new BigNumber(1),


          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


          // The default values below must be integers within the inclusive ranges stated.
          // The values can also be changed at run-time using BigNumber.set.

          // The maximum number of decimal places for operations involving division.
          DECIMAL_PLACES = 20,                     // 0 to MAX

          // The rounding mode used when rounding to the above decimal places, and when using
          // toExponential, toFixed, toFormat and toPrecision, and round (default value).
          // UP         0 Away from zero.
          // DOWN       1 Towards zero.
          // CEIL       2 Towards +Infinity.
          // FLOOR      3 Towards -Infinity.
          // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          ROUNDING_MODE = 4,                       // 0 to 8

          // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

          // The exponent value at and beneath which toString returns exponential notation.
          // Number type: -7
          TO_EXP_NEG = -7,                         // 0 to -MAX

          // The exponent value at and above which toString returns exponential notation.
          // Number type: 21
          TO_EXP_POS = 21,                         // 0 to MAX

          // RANGE : [MIN_EXP, MAX_EXP]

          // The minimum exponent value, beneath which underflow to zero occurs.
          // Number type: -324  (5e-324)
          MIN_EXP = -1e7,                          // -1 to -MAX

          // The maximum exponent value, above which overflow to Infinity occurs.
          // Number type:  308  (1.7976931348623157e+308)
          // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
          MAX_EXP = 1e7,                           // 1 to MAX

          // Whether to use cryptographically-secure random number generation, if available.
          CRYPTO = false,                          // true or false

          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP        0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN      1 The remainder has the same sign as the dividend.
          //             This modulo mode is commonly known as 'truncated division' and is
          //             equivalent to (a % n) in JavaScript.
          // FLOOR     3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
          // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
          //             The remainder is always positive.
          //
          // The truncated division, floored division, Euclidian division and IEEE 754 remainder
          // modes are commonly used for the modulus operation.
          // Although the other rounding modes can also be used, they may not give useful results.
          MODULO_MODE = 1,                         // 0 to 9

          // The maximum number of significant digits of the result of the exponentiatedBy operation.
          // If POW_PRECISION is 0, there will be unlimited significant digits.
          POW_PRECISION = 0,                    // 0 to MAX

          // The format specification used by the BigNumber.prototype.toFormat method.
          FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0',      // non-breaking space
            suffix: ''
          },

          // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
          // '-', '.', whitespace, or repeated character.
          // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


        //------------------------------------------------------------------------------------------


        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * v {number|string|BigNumber} A numeric value.
         * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
         */
        function BigNumber(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str,
            x = this;

          // Enable constructor call without `new`.
          if (!(x instanceof BigNumber)) return new BigNumber(v, b);

          if (b == null) {

            if (v && v._isBigNumber === true) {
              x.s = v.s;

              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }

              return;
            }

            if ((isNum = typeof v == 'number') && v * 0 == 0) {

              // Use `1 / n` to handle minus zero also.
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;

              // Fast path for integers, where n < 2147483648 (2**31).
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++);

                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }

                return;
              }

              str = String(v);
            } else {

              if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {

              // Determine exponent.
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {

              // Integer.
              e = str.length;
            }

          } else {

            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
            intCheck(b, 2, ALPHABET.length, 'Base');

            // Allow exponential notation to be used with base 10 argument, while
            // also rounding to DECIMAL_PLACES as with other bases.
            if (b == 10) {
              x = new BigNumber(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }

            str = String(v);

            if (isNum = typeof v == 'number') {

              // Avoid potential interpretation of Infinity and NaN as base 44+ values.
              if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

              // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
              if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                throw Error
                 (tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }

            alphabet = ALPHABET.slice(0, b);
            e = i = 0;

            // Check that str is a valid base b number.
            // Don't use RegExp, so alphabet can contain special characters.
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == '.') {

                  // If '.' is not the first character and it has not be found before.
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {

                  // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                      str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }

                return parseNumeric(x, String(v), isNum, b);
              }
            }

            // Prevent later check for length on converted number.
            isNum = false;
            str = convertBase(str, b, 10, x.s);

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
            else e = str.length;
          }

          // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++);

          // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;);

          if (str = str.slice(i, ++len)) {
            len -= i;

            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
            if (isNum && BigNumber.DEBUG &&
              len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                throw Error
                 (tooManyDigits + (x.s * v));
            }

             // Overflow?
            if ((e = e - i - 1) > MAX_EXP) {

              // Infinity.
              x.c = x.e = null;

            // Underflow?
            } else if (e < MIN_EXP) {

              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];

              // Transform base

              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;  // i < 1

              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));

                for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }

                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }

              for (; i--; str += '0');
              x.c.push(+str);
            }
          } else {

            // Zero.
            x.c = [x.e = 0];
          }
        }


        // CONSTRUCTOR PROPERTIES


        BigNumber.clone = clone;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;


        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object with the following optional properties (if the value of a property is
         * a number, it must be an integer within the inclusive range stated):
         *
         *   DECIMAL_PLACES   {number}           0 to MAX
         *   ROUNDING_MODE    {number}           0 to 8
         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
         *   CRYPTO           {boolean}          true or false
         *   MODULO_MODE      {number}           0 to 9
         *   POW_PRECISION       {number}           0 to MAX
         *   ALPHABET         {string}           A string of two or more unique characters which does
         *                                       not contain '.'.
         *   FORMAT           {object}           An object with some of the following properties:
         *     prefix                 {string}
         *     groupSize              {number}
         *     secondaryGroupSize     {number}
         *     groupSeparator         {string}
         *     decimalSeparator       {string}
         *     fractionGroupSize      {number}
         *     fractionGroupSeparator {string}
         *     suffix                 {string}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined, except for ALPHABET.
         *
         * Return an object with the properties current values.
         */
        BigNumber.config = BigNumber.set = function (obj) {
          var p, v;

          if (obj != null) {

            if (typeof obj == 'object') {

              // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }

              // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
              // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }

              // EXPONENTIAL_AT {number|number[]}
              // Integer, -MAX to MAX inclusive or
              // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
              // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }

              // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
              // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
              // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
              if (obj.hasOwnProperty(p = 'RANGE')) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error
                     (bignumberError + p + ' cannot be zero: ' + v);
                  }
                }
              }

              // CRYPTO {boolean} true or false.
              // '[BigNumber Error] CRYPTO not true or false: {v}'
              // '[BigNumber Error] crypto unavailable'
              if (obj.hasOwnProperty(p = 'CRYPTO')) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != 'undefined' && crypto &&
                     (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error
                       (bignumberError + 'crypto unavailable');
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error
                   (bignumberError + p + ' not true or false: ' + v);
                }
              }

              // MODULO_MODE {number} Integer, 0 to 9 inclusive.
              // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }

              // POW_PRECISION {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }

              // FORMAT {object}
              // '[BigNumber Error] FORMAT not an object: {v}'
              if (obj.hasOwnProperty(p = 'FORMAT')) {
                v = obj[p];
                if (typeof v == 'object') FORMAT = v;
                else throw Error
                 (bignumberError + p + ' not an object: ' + v);
              }

              // ALPHABET {string}
              // '[BigNumber Error] ALPHABET invalid: {v}'
              if (obj.hasOwnProperty(p = 'ALPHABET')) {
                v = obj[p];

                // Disallow if less than two characters,
                // or if it contains '+', '-', '.', whitespace, or a repeated character.
                if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  ALPHABET = v;
                } else {
                  throw Error
                   (bignumberError + p + ' invalid: ' + v);
                }
              }

            } else {

              // '[BigNumber Error] Object expected: {v}'
              throw Error
               (bignumberError + 'Object expected: ' + obj);
            }
          }

          return {
            DECIMAL_PLACES: DECIMAL_PLACES,
            ROUNDING_MODE: ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO: CRYPTO,
            MODULO_MODE: MODULO_MODE,
            POW_PRECISION: POW_PRECISION,
            FORMAT: FORMAT,
            ALPHABET: ALPHABET
          };
        };


        /*
         * Return true if v is a BigNumber instance, otherwise return false.
         *
         * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
         *
         * v {any}
         *
         * '[BigNumber Error] Invalid BigNumber: {v}'
         */
        BigNumber.isBigNumber = function (v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber.DEBUG) return true;

          var i, n,
            c = v.c,
            e = v.e,
            s = v.s;

          out: if ({}.toString.call(c) == '[object Array]') {

            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

              // If the first element is zero, the BigNumber value must be zero.
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }

              // Calculate number of digits that c[0] should have, based on the exponent.
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;

              // Calculate number of digits of c[0].
              //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
              if (String(c[0]).length == i) {

                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }

                // Last element cannot be zero, unless it is the only element.
                if (n !== 0) return true;
              }
            }

          // Infinity/NaN
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }

          throw Error
            (bignumberError + 'Invalid BigNumber: ' + v);
        };


        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.maximum = BigNumber.max = function () {
          return maxOrMin(arguments, P.lt);
        };


        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.minimum = BigNumber.min = function () {
          return maxOrMin(arguments, P.gt);
        };


        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
         * '[BigNumber Error] crypto unavailable'
         */
        BigNumber.random = (function () {
          var pow2_53 = 0x20000000000000;

          // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
           ? function () { return mathfloor(Math.random() * pow2_53); }
           : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
             (Math.random() * 0x800000 | 0); };

          return function (dp) {
            var a, b, e, k, v,
              i = 0,
              c = [],
              rand = new BigNumber(ONE);

            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);

            k = mathceil(dp / LOG_BASE);

            if (CRYPTO) {

              // Browsers supporting crypto.getRandomValues.
              if (crypto.getRandomValues) {

                a = crypto.getRandomValues(new Uint32Array(k *= 2));

                for (; i < k;) {

                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                  // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {

                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;

              // Node.js supporting crypto.randomBytes.
              } else if (crypto.randomBytes) {

                // buffer
                a = crypto.randomBytes(k *= 7);

                for (; i < k;) {

                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                     (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                     (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {

                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            }

            // Use Math.random.
            if (!CRYPTO) {

              for (; i < k;) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }

            k = c[--i];
            dp %= LOG_BASE;

            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }

            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);

            // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {

              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

              // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

              // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }

            rand.e = e;
            rand.c = c;
            return rand;
          };
        })();


        /*
         * Return a BigNumber whose value is the sum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.sum = function () {
          var i = 1,
            args = arguments,
            sum = new BigNumber(args[0]);
          for (; i < args.length;) sum = sum.plus(args[i++]);
          return sum;
        };


        // PRIVATE FUNCTIONS


        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = (function () {
          var decimal = '0123456789';

          /*
           * Convert string of baseIn to an array of numbers of baseOut.
           * Eg. toBaseOut('255', 10, 16) returns [15, 15].
           * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
           */
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;

            for (; i < len;) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

              arr[0] += alphabet.indexOf(str.charAt(i++));

              for (j = 0; j < arr.length; j++) {

                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }

            return arr.reverse();
          }

          // Convert a numeric string of baseIn to a numeric string of baseOut.
          // If the caller is toString, we are converting from base 10 to baseOut.
          // If the caller is BigNumber, we are converting from baseIn to base 10.
          return function (str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;

            // Non-integer.
            if (i >= 0) {
              k = POW_PRECISION;

              // Unlimited precision.
              POW_PRECISION = 0;
              str = str.replace('.', '');
              y = new BigNumber(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;

              // Convert str as if an integer, then restore the fraction part by dividing the
              // result by its base raised to a power.

              y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
               10, baseOut, decimal);
              y.e = y.c.length;
            }

            // Convert the number as integer.

            xc = toBaseOut(str, baseIn, baseOut, callerIsToString
             ? (alphabet = ALPHABET, decimal)
             : (alphabet = decimal, ALPHABET));

            // xc now represents str as an integer and converted to baseOut. e is the exponent.
            e = k = xc.length;

            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop());

            // Zero?
            if (!xc[0]) return alphabet.charAt(0);

            // Does str represent an integer? If so, no need for the division.
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;

              // The sign is needed for correct rounding.
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }

            // xc now represents str converted to baseOut.

            // THe index of the rounding digit.
            d = e + dp + 1;

            // The rounding digit: the digit to the right of the digit that may be rounded up.
            i = xc[d];

            // Look at the rounding digits and mode to determine whether to round up.

            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                   rm == (x.s < 0 ? 8 : 7));

            // If the index of the rounding digit is not greater than zero, or xc represents
            // zero, then the result of the base conversion is zero or, if rounding up, a value
            // such as 0.00001.
            if (d < 1 || !xc[0]) {

              // 1^-dp or 0
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {

              // Truncate xc to the required number of decimal places.
              xc.length = d;

              // Round up?
              if (r) {

                // Rounding up may mean the previous digit has to be rounded up and so on.
                for (--baseOut; ++xc[--d] > baseOut;) {
                  xc[d] = 0;

                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }

              // Determine trailing zeros.
              for (k = xc.length; !xc[--k];);

              // E.g. [4, 11, 15] becomes 4bf.
              for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

              // Add leading zeros, decimal point and trailing zeros as required.
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }

            // The caller will add the sign.
            return str;
          };
        })();


        // Perform division in the specified base. Called by div and convertBase.
        div = (function () {

          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m, temp, xlo, xhi,
              carry = 0,
              i = x.length,
              klo = k % SQRT_BASE,
              khi = k / SQRT_BASE | 0;

            for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }

            if (carry) x = [carry].concat(x);

            return x;
          }

          function compare(a, b, aL, bL) {
            var i, cmp;

            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {

              for (i = cmp = 0; i < aL; i++) {

                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }

            return cmp;
          }

          function subtract(a, b, aL, base) {
            var i = 0;

            // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }

            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.splice(0, 1));
          }

          // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
              yL, yz,
              s = x.s == y.s ? 1 : -1,
              xc = x.c,
              yc = y.c;

            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {

              return new BigNumber(

               // Return NaN if either NaN, or both Infinity or 0.
               !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0
             );
            }

            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;

            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }

            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);

            if (yc[i] > (xc[i] || 0)) e--;

            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;

              // Normalise xc and yc so highest order digit of yc is >= base / 2.

              n = mathfloor(base / (yc[0] + 1));

              // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
              // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }

              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0);
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

              do {
                n = 0;

                // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, n.

                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0);

                  //  Algorithm:
                  //  product = divisor multiplied by trial digit (n).
                  //  Compare product and remainder.
                  //  If product is greater than remainder:
                  //    Subtract divisor from product, decrement trial digit.
                  //  Subtract product from remainder.
                  //  If product was less than remainder at the last compare:
                  //    Compare new remainder and divisor.
                  //    If remainder is greater than divisor:
                  //      Subtract divisor from remainder, increment trial digit.

                  if (n > 1) {

                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1;

                    // product = divisor * trial digit.
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    // If product > remainder then trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {

                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {

                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    }

                    // product = divisor
                    prod = yc.slice();
                    prodL = prod.length;
                  }

                  if (prodL < remL) prod = [0].concat(prod);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);
                  remL = rem.length;

                   // If product was < remainder.
                  if (cmp == -1) {

                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                } // else cmp === 1 and n will be 0

                // Add the next digit, n, to the result array.
                qc[i++] = n;

                // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);

              more = rem[0] != null;

              // Leading zero?
              if (!qc[0]) qc.splice(0, 1);
            }

            if (base == BASE) {

              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

            // Caller is convertBase.
            } else {
              q.e = e;
              q.r = +more;
            }

            return q;
          };
        })();


        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n: a BigNumber.
         * i: the index of the last digit required (i.e. the digit that may be rounded up).
         * rm: the rounding mode.
         * id: 1 (toExponential) or 2 (toPrecision).
         */
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;

          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);

          if (!n.c) return n.toString();

          c0 = n.c[0];
          ne = n.e;

          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
             ? toExponential(str, ne)
             : toFixedPoint(str, ne, '0');
          } else {
            n = round(new BigNumber(n), i, rm);

            // n.e may have changed if the value was rounded up.
            e = n.e;

            str = coeffToString(n.c);
            len = str.length;

            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.

            // Exponential notation.
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

              // Append zeros?
              for (; len < i; str += '0', len++);
              str = toExponential(str, e);

            // Fixed-point notation.
            } else {
              i -= ne;
              str = toFixedPoint(str, e, '0');

              // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0');
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += '.';
                  for (; i--; str += '0');
                }
              }
            }
          }

          return n.s < 0 && c0 ? '-' + str : str;
        }


        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var n,
            i = 1,
            m = new BigNumber(args[0]);

          for (; i < args.length; i++) {
            n = new BigNumber(args[i]);

            // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }

          return m;
        }


        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
          var i = 1,
            j = c.length;

           // Remove trailing zeros.
          for (; !c[--j]; c.pop());

          // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++);

          // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

            // Infinity.
            n.c = n.e = null;

          // Underflow?
          } else if (e < MIN_EXP) {

            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }

          return n;
        }


        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

          return function (x, str, isNum, b) {
            var base,
              s = isNum ? str : str.replace(whitespaceOrPlus, '');

            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {

                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });

                if (b) {
                  base = b;

                  // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }

                if (str != s) return new BigNumber(s, base);
              }

              // '[BigNumber Error] Not a number: {n}'
              // '[BigNumber Error] Not a base {b} number: {n}'
              if (BigNumber.DEBUG) {
                throw Error
                  (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
              }

              // NaN
              x.s = null;
            }

            x.c = x.e = null;
          }
        })();


        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd,
            xc = x.c,
            pows10 = POWS_TEN;

          // if x is not Infinity or NaN...
          if (xc) {

            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {

              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
              i = sd - d;

              // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];

                // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);

                if (ni >= xc.length) {

                  if (r) {

                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0));
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];

                  // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++);

                  // Get the index of rd within n.
                  i %= LOG_BASE;

                  // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d;

                  // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }

              r = r || sd < 0 ||

              // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
               xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

              r = rm < 4
               ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
               : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                // Check whether the digit to the left of the rounding digit is odd.
                ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                 rm == (x.s < 0 ? 8 : 7));

              if (sd < 1 || !xc[0]) {
                xc.length = 0;

                if (r) {

                  // Convert sd to decimal places.
                  sd -= x.e + 1;

                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {

                  // Zero.
                  xc[0] = x.e = 0;
                }

                return x;
              }

              // Remove excess digits.
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];

                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }

              // Round up?
              if (r) {

                for (; ;) {

                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {

                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++);

                    // if i != k the length has increased.
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }

                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }

              // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop());
            }

            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null;

            // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }

          return x;
        }


        function valueOf(n) {
          var str,
            e = n.e;

          if (e === null) return n.toString();

          str = coeffToString(n.c);

          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
            ? toExponential(str, e)
            : toFixedPoint(str, e, '0');

          return n.s < 0 ? '-' + str : str;
        }


        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);
          if (x.s < 0) x.s = 1;
          return x;
        };


        /*
         * Return
         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         *   0 if they have the same value,
         *   or null if the value of either is NaN.
         */
        P.comparedTo = function (y, b) {
          return compare(this, new BigNumber(y, b));
        };


        /*
         * If dp is undefined or null or true or false, return the number of decimal places of the
         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         *
         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.decimalPlaces = P.dp = function (dp, rm) {
          var c, n, v,
            x = this;

          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), dp + x.e + 1, rm);
          }

          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
          if (n < 0) n = 0;

          return n;
        };


        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
          return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };


        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.idiv = function (y, b) {
          return div(this, new BigNumber(y, b), 0, 1);
        };


        /*
         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
         *
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are integers, otherwise it
         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
         *
         * n {number|string|BigNumber} The exponent. An integer.
         * [m] {number|string|BigNumber} The modulus.
         *
         * '[BigNumber Error] Exponent not an integer: {n}'
         */
        P.exponentiatedBy = P.pow = function (n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
            x = this;

          n = new BigNumber(n);

          // Allow NaN and ±Infinity, but not other non-integers.
          if (n.c && !n.isInteger()) {
            throw Error
              (bignumberError + 'Exponent not an integer: ' + valueOf(n));
          }

          if (m != null) m = new BigNumber(m);

          // Exponent of MAX_SAFE_INTEGER is 15.
          nIsBig = n.e > 14;

          // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

            // The sign of the result of pow when x is negative depends on the evenness of n.
            // If +n overflows to ±Infinity, the evenness of n would be not be known.
            y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }

          nIsNeg = n.s < 0;

          if (m) {

            // x % m returns NaN if abs(m) is zero, or m is NaN.
            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

            isModExp = !nIsNeg && x.isInteger() && m.isInteger();

            if (isModExp) x = x.mod(m);

          // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
            // [1, 240000000]
            ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
            // [80000000000000]  [99999750000000]
            : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

            // If x is negative and n is odd, k = -0, else k = 0.
            k = x.s < 0 && isOdd(n) ? -0 : 0;

            // If x >= 1, k = ±Infinity.
            if (x.e > -1) k = 1 / k;

            // If n is negative return ±0, else return ±Infinity.
            return new BigNumber(nIsNeg ? 1 / k : k);

          } else if (POW_PRECISION) {

            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }

          if (nIsBig) {
            half = new BigNumber(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }

          y = new BigNumber(ONE);

          // Performs 54 loop iterations for n of 9007199254740991.
          for (; ;) {

            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;

              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
              }
            }

            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);

              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }

            x = x.times(x);

            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
          }

          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);

          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
         */
        P.integerValue = function (rm) {
          var n = new BigNumber(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };


        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isEqualTo = P.eq = function (y, b) {
          return compare(this, new BigNumber(y, b)) === 0;
        };


        /*
         * Return true if the value of this BigNumber is a finite number, otherwise return false.
         */
        P.isFinite = function () {
          return !!this.c;
        };


        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isGreaterThan = P.gt = function (y, b) {
          return compare(this, new BigNumber(y, b)) > 0;
        };


        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

        };


        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };


        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isLessThan = P.lt = function (y, b) {
          return compare(this, new BigNumber(y, b)) < 0;
        };


        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isLessThanOrEqualTo = P.lte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };


        /*
         * Return true if the value of this BigNumber is NaN, otherwise return false.
         */
        P.isNaN = function () {
          return !this.s;
        };


        /*
         * Return true if the value of this BigNumber is negative, otherwise return false.
         */
        P.isNegative = function () {
          return this.s < 0;
        };


        /*
         * Return true if the value of this BigNumber is positive, otherwise return false.
         */
        P.isPositive = function () {
          return this.s > 0;
        };


        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
         */
        P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        };


        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = function (y, b) {
          var i, j, t, xLTy,
            x = this,
            a = x.s;

          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

            // Either zero?
            if (!xc[0] || !yc[0]) {

              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

               // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
               ROUNDING_MODE == 3 ? -0 : 0);
            }
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Determine which is the bigger number.
          if (a = xe - ye) {

            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }

            t.reverse();

            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
          } else {

            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

            for (a = b = 0; b < j; b++) {

              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }

          // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

          b = (j = yc.length) - (i = xc.length);

          // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0);
          b = BASE - 1;

          // Subtract yc from xc.
          for (; j > a;) {

            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b);
              --xc[i];
              xc[j] += BASE;
            }

            xc[j] -= yc[j];
          }

          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.splice(0, 1), --ye);

          // Zero?
          if (!xc[0]) {

            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }

          // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        };


        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
          var q, s,
            x = this;

          y = new BigNumber(y, b);

          // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN);

          // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }

          if (MODULO_MODE == 9) {

            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }

          y = x.minus(q.times(y));

          // To match JavaScript %, ensure sign of zero is sign of dividend.
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

          return y;
        };


        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
         * of BigNumber(y, b).
         */
        P.multipliedBy = P.times = function (y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
            base, sqrtBase,
            x = this,
            xc = x.c,
            yc = (y = new BigNumber(y, b)).c;

          // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {

            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;

              // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null;

              // Return ±0 if either is ±0.
              } else {
                y.c = [0];
                y.e = 0;
              }
            }

            return y;
          }

          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;

          // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

          // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0));

          base = BASE;
          sqrtBase = SQRT_BASE;

          for (i = ycL; --i >= 0;) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;

            for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }

            zc[j] = c;
          }

          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }

          return normalise(y, zc, e);
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = function () {
          var x = new BigNumber(this);
          x.s = -x.s || null;
          return x;
        };


        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = function (y, b) {
          var t,
            x = this,
            a = x.s;

          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
           if (a != b) {
            y.s = -b;
            return x.minus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);

            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }

            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
          }

          a = xc.length;
          b = yc.length;

          // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

          // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }

          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        };


        /*
         * If sd is undefined or null or true or false, return the number of significant digits of
         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         * If sd is true include integer-part trailing zeros in the count.
         *
         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
         *                     boolean: whether to count integer-part trailing zeros: true or false.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.precision = P.sd = function (sd, rm) {
          var c, n, v,
            x = this;

          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), sd, rm);
          }

          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;

          if (v = c[v]) {

            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);

            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
          }

          if (sd && x.e + 1 > n) n = x.e + 1;

          return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
         */
        P.shiftedBy = function (k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times('1e' + k);
        };


        /*
         *  sqrt(-n) =  N
         *  sqrt(N) =  N
         *  sqrt(-I) =  N
         *  sqrt(I) =  I
         *  sqrt(0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
          var m, n, r, rep, t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');

          // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }

          // Initial estimate.
          s = Math.sqrt(+valueOf(x));

          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

            if (s == 1 / 0) {
              n = '5e' + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf('e') + 1) + e;
            }

            r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          }

          // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;

            // Newton-Raphson iteration.
            for (; ;) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));

              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);

                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {

                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);

                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }

                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {

                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }

                  break;
                }
              }
            }
          }

          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };


        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toExponential = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toFixed = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the format or FORMAT object (see BigNumber.set).
         *
         * The formatting object may contain some or all of the properties shown below.
         *
         * FORMAT = {
         *   prefix: '',
         *   groupSize: 3,
         *   secondaryGroupSize: 0,
         *   groupSeparator: ',',
         *   decimalSeparator: '.',
         *   fractionGroupSize: 0,
         *   fractionGroupSeparator: '\xA0',      // non-breaking space
         *   suffix: ''
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         * [format] {object} Formatting options. See FORMAT pbject above.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         * '[BigNumber Error] Argument not an object: {format}'
         */
        P.toFormat = function (dp, rm, format) {
          var str,
            x = this;

          if (format == null) {
            if (dp != null && rm && typeof rm == 'object') {
              format = rm;
              rm = null;
            } else if (dp && typeof dp == 'object') {
              format = dp;
              dp = rm = null;
            } else {
              format = FORMAT;
            }
          } else if (typeof format != 'object') {
            throw Error
              (bignumberError + 'Argument not an object: ' + format);
          }

          str = x.toFixed(dp, rm);

          if (x.c) {
            var i,
              arr = str.split('.'),
              g1 = +format.groupSize,
              g2 = +format.secondaryGroupSize,
              groupSeparator = format.groupSeparator || '',
              intPart = arr[0],
              fractionPart = arr[1],
              isNeg = x.s < 0,
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;

            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = '-' + intPart;
            }

            str = fractionPart
             ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
              ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
               '$&' + (format.fractionGroupSeparator || ''))
              : fractionPart)
             : intPart;
          }

          return (format.prefix || '') + str + (format.suffix || '');
        };


        /*
         * Return an array of two BigNumbers representing the value of this BigNumber as a simple
         * fraction with an integer numerator and an integer denominator.
         * The denominator will be a positive non-zero value less than or equal to the specified
         * maximum denominator. If a maximum denominator is not specified, the denominator will be
         * the lowest value necessary to represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
         *
         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
         */
        P.toFraction = function (md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
            x = this,
            xc = x.c;

          if (md != null) {
            n = new BigNumber(md);

            // Throw if md is less than one or is not an integer, unless it is Infinity.
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error
                (bignumberError + 'Argument ' +
                  (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
            }
          }

          if (!xc) return new BigNumber(x);

          d = new BigNumber(ONE);
          n1 = d0 = new BigNumber(ONE);
          d1 = n0 = new BigNumber(ONE);
          s = coeffToString(xc);

          // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber(s);

          // n0 = d1 = 0
          n0.c[0] = 0;

          for (; ;)  {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }

          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;

          // Determine which fraction is closer to x, n0/d0 or n1/d1
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
              div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

          MAX_EXP = exp;

          return r;
        };


        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
          return +valueOf(this);
        };


        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.toPrecision = function (sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };


        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to ALPHABET.length inclusive.
         *
         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
         */
        P.toString = function (b) {
          var str,
            n = this,
            s = n.s,
            e = n.e;

          // Infinity or NaN?
          if (e === null) {
            if (s) {
              str = 'Infinity';
              if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
               ? toExponential(coeffToString(n.c), e)
               : toFixedPoint(coeffToString(n.c), e, '0');
            } else if (b === 10) {
              n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, '0');
            } else {
              intCheck(b, 2, ALPHABET.length, 'Base');
              str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
            }

            if (s < 0 && n.c[0]) str = '-' + str;
          }

          return str;
        };


        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
          return valueOf(this);
        };


        P._isBigNumber = true;

        if (configObject != null) BigNumber.set(configObject);

        return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS

      // These functions don't need access to variables,
      // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s, z,
          i = 1,
          j = a.length,
          r = a[0] + '';

        for (; i < j;) {
          s = a[i++] + '';
          z = LOG_BASE - s.length;
          for (; z--; s = '0' + s);
          r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;);

        return r.slice(0, j + 1 || 1);
      }


      // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a, b,
          xc = x.c,
          yc = y.c,
          i = x.s,
          j = y.s,
          k = x.e,
          l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Check that n is a primitive number, an integer, and in range, otherwise throw.
       */
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error
           (bignumberError + (name || 'Argument') + (typeof n == 'number'
             ? n < min || n > max ? ' out of range: ' : ' not an integer: '
             : ' not a primitive number: ') + String(n));
        }
      }


      // Assumes finite n.
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }


      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
         (e < 0 ? 'e' : 'e+') + e;
      }


      function toFixedPoint(str, e, z) {
        var len, zs;

        // Negative exponent?
        if (e < 0) {

          // Prepend zeros.
          for (zs = z + '.'; ++e; zs += z);
          str = zs + str;

        // Positive exponent
        } else {
          len = str.length;

          // Append zeros.
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z);
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        return str;
      }


      // EXPORT


      BigNumber = clone();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;

      // AMD.
      if (module.exports) {
        module.exports = BigNumber;

      // Browser.
      } else {
        if (!globalObject) {
          globalObject = typeof self != 'undefined' && self ? self : window;
        }

        globalObject.BigNumber = BigNumber;
      }
    })(commonjsGlobal);
    });

    /**
     * @param {string[]} words
     * @param {string[]} wordlist
     * @returns {[Uint8Array, number]}
     */
    function legacy1(words, wordlist) {
        const indicies = words.map((word) => wordlist.indexOf(word.toLowerCase()));

        const data = convertRadix(indicies, wordlist.length, 256, 33);
        const checksum = data[data.length - 1];
        const result = new Uint8Array(data.length - 1);

        for (let i = 0; i < data.length - 1; i += 1) {
            result[i] = data[i] ^ checksum;
        }

        return [result, checksum];
    }

    /**
     * @param {string[]} words
     * @param {string[]} wordlist
     * @returns {Promise<Uint8Array>}
     */
    async function legacy2(words, wordlist) {
        const concatBitsLen = words.length * 11;
        /** @type {boolean[]} */
        const concatBits = [];
        concatBits.fill(false, 0, concatBitsLen);

        for (const [wordIndex, word] of words.entries()) {
            const index = wordlist.indexOf(word.toLowerCase());

            if (index < 0) {
                throw new Error(`Word not found in wordlist: ${word}`);
            }

            for (let i = 0; i < 11; i += 1) {
                concatBits[wordIndex * 11 + i] = (index & (1 << (10 - i))) !== 0;
            }
        }

        const checksumBitsLen = concatBitsLen / 33;
        const entropyBitsLen = concatBitsLen - checksumBitsLen;
        const entropy = new Uint8Array(entropyBitsLen / 8);

        for (let i = 0; i < entropy.length; i += 1) {
            for (let j = 0; j < 8; j += 1) {
                if (concatBits[i * 8 + j]) {
                    entropy[i] |= 1 << (7 - j);
                }
            }
        }

        // Checksum validation
        const hash = await digest$1(entropy);
        const hashBits = bytesToBits(hash);

        for (let i = 0; i < checksumBitsLen; i += 1) {
            if (concatBits[entropyBitsLen + i] !== hashBits[i]) {
                throw new Error("Checksum mismatch");
            }
        }

        return entropy;
    }

    /**
     * @param {Uint8Array} data
     * @returns {number}
     */
    function crc8(data) {
        let crc = 0xff;

        for (let i = 0; i < data.length - 1; i += 1) {
            crc ^= data[i];
            for (let j = 0; j < 8; j += 1) {
                crc = (crc >>> 1) ^ ((crc & 1) === 0 ? 0 : 0xb2);
            }
        }

        return crc ^ 0xff;
    }

    /**
     * @param {number[]} nums
     * @param {number} fromRadix
     * @param {number} toRadix
     * @param {number} toLength
     * @returns {Uint8Array}
     */
    function convertRadix(nums, fromRadix, toRadix, toLength) {
        let num = new bignumber(0);

        for (const element of nums) {
            num = num.times(fromRadix);
            num = num.plus(element);
        }

        const result = new Uint8Array(toLength);

        for (let i = toLength - 1; i >= 0; i -= 1) {
            const tem = num.dividedToIntegerBy(toRadix);
            const rem = num.modulo(toRadix);
            num = tem;
            result[i] = rem.toNumber();
        }

        return result;
    }

    /**
     * @param {Uint8Array} data
     * @returns {boolean[]}
     */
    function bytesToBits(data) {
        /** @type {boolean[]} */
        const bits = [];
        bits.fill(false, 0, data.length * 8);

        for (let i = 0; i < data.length; i += 1) {
            for (let j = 0; j < 8; j += 1) {
                bits[i * 8 + j] = (data[i] & (1 << (7 - j))) !== 0;
            }
        }

        return bits;
    }

    /**
     * @param {Uint8Array} seed
     * @param {number} index
     * @returns {Promise<Uint8Array>}
     */
    function legacy(seed, index) {
        const password = new Uint8Array(seed.length + 8);
        password.set(seed, 0);

        const view = new DataView(
            password.buffer,
            password.byteOffset + seed.length,
            8
        );
        view.setInt32(0, index);
        view.setInt32(4, index);

        const salt = Uint8Array.from([0xff]);
        return deriveKey(
            HashAlgorithm.Sha512,
            password,
            salt,
            2048,
            32
        );
    }

    /**
     * @param {number} count
     * @returns {Uint8Array}
     */
    function bytes(count) {
        return naclFast.randomBytes(count);
    }

    /**
     * @param {number} count
     * @returns {Promise<Uint8Array>}
     */
    function bytesAsync(count) {
        return Promise.resolve(naclFast.randomBytes(count));
    }

    /**
     * Multi-word mnemonic phrase (BIP-39).
     *
     * Compatible with the official Hedera mobile
     * wallets (24-words or 22-words) and BRD (12-words).
     */
    class Mnemonic {
        /**
         * @param {Object} props
         * @param {string[]} props.words
         * @param {boolean} props.legacy
         * @throws {BadMnemonicError}
         * @hideconstructor
         * @private
         */
        constructor({ words, legacy }) {
            this.words = words;
            this._isLegacy = legacy;
        }

        /**
         * Returns a new random 24-word mnemonic from the BIP-39
         * standard English word list.
         *
         * @returns {Promise<Mnemonic>}
         */
        static generate() {
            return Mnemonic._generate(24);
        }

        /**
         * Returns a new random 12-word mnemonic from the BIP-39
         * standard English word list.
         *
         * @returns {Promise<Mnemonic>}
         */
        static generate12() {
            return Mnemonic._generate(12);
        }

        /**
         * @param {number} length
         * @returns {Promise<Mnemonic>}
         */
        static async _generate(length) {
            // only 12-word or 24-word lengths are supported
            let neededEntropy;

            if (length === 12) neededEntropy = 16;
            else if (length === 24) neededEntropy = 32;
            else {
                throw new Error(
                    `unsupported phrase length ${length}, only 12 or 24 are supported`
                );
            }

            // inlined from (ISC) with heavy alternations for modern crypto
            // https://github.com/bitcoinjs/bip39/blob/8461e83677a1d2c685d0d5a9ba2a76bd228f74c6/ts_src/index.ts#L125
            const seed = await bytesAsync(neededEntropy);
            const entropyBits = bytesToBinary(Array.from(seed));
            const checksumBits = await deriveChecksumBits(seed);
            const bits = entropyBits + checksumBits;
            const chunks = bits.match(/(.{1,11})/g);

            const words = (chunks != null ? chunks : []).map(
                (binary) => bip39Words[binaryToByte(binary)]
            );

            return new Mnemonic({ words, legacy: false });
        }

        /**
         * Construct a mnemonic from a list of words. Handles 12, 22 (legacy), and 24 words.
         *
         * An exception of BadMnemonicError will be thrown if the mnemonic
         * contains unknown words or fails the checksum. An invalid mnemonic
         * can still be used to create private keys, the exception will
         * contain the failing mnemonic in case you wish to ignore the
         * validation error and continue.
         *
         * @param {string[]} words
         * @throws {BadMnemonicError}
         * @returns {Promise<Mnemonic>}
         */
        static async fromWords(words) {
            return await new Mnemonic({
                words,
                legacy: words.length === 22,
            })._validate();
        }

        /**
         * Recover a private key from this mnemonic phrase, with an
         * optional passphrase.
         *
         * @param {string} [passphrase]
         * @returns {Promise<PrivateKey>}
         */
        async toPrivateKey(passphrase = "") {
            if (this._isLegacy) {
                if (passphrase.length > 0) {
                    throw new Error(
                        "legacy 22-word mnemonics do not support passphrases"
                    );
                }

                return this.toLegacyPrivateKey();
            }

            return await this._toPrivateKey(passphrase);
        }

        /**
         * Recover a mnemonic phrase from a string, splitting on spaces. Handles 12, 22 (legacy), and 24 words.
         *
         * @param {string} mnemonic
         * @returns {Promise<Mnemonic>}
         */
        static async fromString(mnemonic) {
            return Mnemonic.fromWords(mnemonic.split(/\s|,/));
        }

        /**
         * @returns {Promise<Mnemonic>}
         * @private
         */
        async _validate() {
            // Validate that this is a valid BIP-39 mnemonic
            // as generated by BIP-39's rules.

            // Technically, invalid mnemonics can still be used to generate valid private keys,
            // but if they became invalid due to user error then it will be difficult for the user
            // to tell the difference unless they compare the generated keys.

            // During validation, the following conditions are checked in order

            //  1)) 24 or 12 words

            //  2) All strings in {@link this.words} exist in the BIP-39
            //     standard English word list (no normalization is done)

            //  3) The calculated checksum for the mnemonic equals the
            //     checksum encoded in the mnemonic

            if (this._isLegacy) {
                if (this.words.length !== 22) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.BadLength,
                        []
                    );
                }

                const unknownWordIndices = this.words.reduce(
                    (/** @type {number[]} */ unknowns, word, index) =>
                        legacyWords.includes(word.toLowerCase())
                            ? unknowns
                            : [...unknowns, index],
                    []
                );

                if (unknownWordIndices.length > 0) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.UnknownWords,
                        unknownWordIndices
                    );
                }

                const [seed, checksum] = legacy1(this.words, legacyWords);
                const newChecksum = crc8(seed);

                if (checksum !== newChecksum) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.ChecksumMismatch,
                        []
                    );
                }
            } else {
                if (!(this.words.length === 12 || this.words.length === 24)) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.BadLength,
                        []
                    );
                }

                const unknownWordIndices = this.words.reduce(
                    (/** @type {number[]} */ unknowns, word, index) =>
                        bip39Words.includes(word) ? unknowns : [...unknowns, index],
                    []
                );

                if (unknownWordIndices.length > 0) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.UnknownWords,
                        unknownWordIndices
                    );
                }

                // FIXME: calculate checksum and compare
                // https://github.com/bitcoinjs/bip39/blob/master/ts_src/index.ts#L112

                const bits = this.words
                    .map((word) => {
                        return bip39Words
                            .indexOf(word)
                            .toString(2)
                            .padStart(11, "0");
                    })
                    .join("");

                const dividerIndex = Math.floor(bits.length / 33) * 32;
                const entropyBits = bits.slice(0, dividerIndex);
                const checksumBits = bits.slice(dividerIndex);
                const entropyBitsRegex = entropyBits.match(/(.{1,8})/g);
                const entropyBytes = /** @type {RegExpMatchArray} */ (entropyBitsRegex).map(
                    binaryToByte
                );

                const newChecksum = await deriveChecksumBits(
                    Uint8Array.from(entropyBytes)
                );

                if (newChecksum !== checksumBits) {
                    throw new BadMnemonicError(
                        this,
                        BadMnemonicReason.ChecksumMismatch,
                        []
                    );
                }
            }

            return this;
        }

        /**
         * @private
         * @param {string} passphrase
         * @returns {Promise<PrivateKey>}
         */
        async _toPrivateKey(passphrase = "") {
            const input = this.words.join(" ");
            const salt = `mnemonic${passphrase}`;

            const seed = await deriveKey(
                HashAlgorithm.Sha512,
                input,
                salt,
                2048,
                64
            );

            const digest = await hash(
                HashAlgorithm.Sha512,
                "ed25519 seed",
                seed
            );

            let keyData = digest.subarray(0, 32);
            let chainCode = digest.subarray(32);

            for (const index of [44, 3030, 0, 0]) {
                ({ keyData, chainCode } = await derive(
                    keyData,
                    chainCode,
                    index
                ));
            }

            const keyPair = naclFast.sign.keyPair.fromSeed(keyData);

            return new PrivateKey(keyPair, chainCode);
        }

        /**
         * @returns {Promise<PrivateKey>}
         */
        async toLegacyPrivateKey() {
            const index = this._isLegacy ? -1 : 0;

            let seed;
            if (this._isLegacy) {
                [seed] = legacy1(this.words, legacyWords);
            } else {
                seed = await legacy2(this.words, bip39Words);
            }

            const keyData = await legacy(seed, index);

            return PrivateKey.fromBytes(keyData);
        }

        /**
         * @returns {string}
         */
        toString() {
            return this.words.join(" ");
        }
    }

    /**
     * @param {string} bin
     * @returns {number}
     */
    function binaryToByte(bin) {
        return parseInt(bin, 2);
    }

    /**
     * @param {number[]} bytes
     * @returns {string}
     */
    function bytesToBinary(bytes) {
        return bytes.map((x) => x.toString(2).padStart(8, "0")).join("");
    }

    /**
     * @param {Uint8Array} entropyBuffer
     * @returns {Promise<string>}
     */
    async function deriveChecksumBits(entropyBuffer) {
        const ENT = entropyBuffer.length * 8;
        const CS = ENT / 32;
        const hash = await digest$1(entropyBuffer);

        return bytesToBinary(Array.from(hash)).slice(0, CS);
    }

    const CipherAlgorithm = {
        Aes128Ctr: "AES-128-CTR",
        Aes128Cbc: "AES-128-CBC",
    };

    /**
     * @param {string} algorithm
     * @param {Uint8Array} key
     * @param {Uint8Array} iv
     * @param {Uint8Array} data
     * @returns {Promise<Uint8Array>}
     */
    async function createCipheriv(algorithm, key, iv, data) {
        let algorithm_;

        switch (algorithm) {
            case CipherAlgorithm.Aes128Ctr:
                algorithm_ = {
                    name: "AES-CTR",
                    counter: iv,
                    length: 128,
                };
                break;
            case CipherAlgorithm.Aes128Cbc:
                algorithm_ = {
                    name: "AES-CBC",
                    length: 128,
                };
                break;
            default:
                throw new Error(
                    "(BUG) non-exhaustive switch statement for CipherAlgorithm"
                );
        }

        const key_ = await window.crypto.subtle.importKey(
            "raw",
            key,
            algorithm_.name,
            false,
            ["encrypt"]
        );

        return new Uint8Array(
            await window.crypto.subtle.encrypt(algorithm_, key_, data)
        );
    }

    /**
     * @param {string} algorithm
     * @param {Uint8Array} key
     * @param {Uint8Array} iv
     * @param {Uint8Array} data
     * @returns {Promise<Uint8Array>}
     */
    async function createDecipheriv(algorithm, key, iv, data) {
        let algorithm_;

        switch (algorithm) {
            case CipherAlgorithm.Aes128Ctr:
                algorithm_ = {
                    name: "AES-CTR",
                    counter: iv,
                    length: 128,
                };
                break;
            case CipherAlgorithm.Aes128Cbc:
                algorithm_ = {
                    name: "AES-CBC",
                    iv,
                };
                break;
            default:
                throw new Error(
                    "(BUG) non-exhaustive switch statement for CipherAlgorithm"
                );
        }

        const key_ = await window.crypto.subtle.importKey(
            "raw",
            key,
            algorithm_.name,
            false,
            ["decrypt"]
        );

        return new Uint8Array(
            await window.crypto.subtle.decrypt(algorithm_, key_, data)
        );
    }

    const HMAC_SHA256 = "hmac-sha256";

    /**
     * @typedef {Object} KeystoreKdfParams
     * @property {number} dkLen
     * @property {string} salt
     * @property {number} c
     * @property {string} prf
     */

    /**
     * @typedef {Object} KeystoreCipherParams
     * @property {string} iv
     */

    /**
     * @typedef {Object} KeystoreCrypto
     * @property {string} ciphertext
     * @property {KeystoreCipherParams} cipherparams
     * @property {string} cipher
     * @property {string} kdf
     * @property {KeystoreKdfParams} kdfparams
     * @property {string} mac
     */

    /**
     * @typedef {Object} Keystore
     * @property {number} version
     * @property {KeystoreCrypto} crypto
     */

    /**
     * @param {Uint8Array} privateKey
     * @param {string} passphrase
     * @returns {Promise<Uint8Array>}
     */
    async function createKeystore(privateKey, passphrase) {
        // all values taken from https://github.com/ethereumjs/ethereumjs-wallet/blob/de3a92e752673ada1d78f95cf80bc56ae1f59775/src/index.ts#L25
        const dkLen = 32;
        const c = 262144;
        const saltLen = 32;
        const salt = await bytesAsync(saltLen);

        const key = await deriveKey(
            HashAlgorithm.Sha256,
            passphrase,
            salt,
            c,
            dkLen
        );

        const iv = await bytesAsync(16);

        // AES-128-CTR with the first half of the derived key and a random IV
        const cipherText = await createCipheriv(
            CipherAlgorithm.Aes128Ctr,
            key.slice(0, 16),
            iv,
            privateKey
        );

        const mac = await hash(
            HashAlgorithm.Sha384,
            key.slice(16),
            cipherText
        );

        /**
         * @type {Keystore}
         */
        const keystore = {
            version: 1,
            crypto: {
                ciphertext: encode$3(cipherText),
                cipherparams: { iv: encode$3(iv) },
                cipher: CipherAlgorithm.Aes128Ctr,
                kdf: "pbkdf2",
                kdfparams: {
                    dkLen,
                    salt: encode$3(salt),
                    c,
                    prf: HMAC_SHA256,
                },
                mac: encode$3(mac),
            },
        };

        return encode$2(JSON.stringify(keystore));
    }

    /**
     * @param {Uint8Array} keystoreBytes
     * @param {string} passphrase
     * @returns {Promise<nacl.SignKeyPair>}
     */
    async function loadKeystore(keystoreBytes, passphrase) {
        /**
         * @type {Keystore}
         */
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const keystore = JSON.parse(decode$4(keystoreBytes));

        if (keystore.version !== 1) {
            throw new BadKeyError(
                `unsupported keystore version: ${keystore.version}`
            );
        }

        const {
            ciphertext,
            cipherparams: { iv },
            cipher,
            kdf,
            kdfparams: { dkLen, salt, c, prf },
            mac,
        } = keystore.crypto;

        if (kdf !== "pbkdf2") {
            throw new BadKeyError(`unsupported key derivation function:" + ${kdf}`);
        }

        if (prf !== HMAC_SHA256) {
            throw new BadKeyError(
                `unsupported key derivation hash function: ${prf}`
            );
        }

        const saltBytes = decode$5(salt);
        const ivBytes = decode$5(iv);
        const cipherBytes = decode$5(ciphertext);

        const key = await deriveKey(
            HashAlgorithm.Sha256,
            passphrase,
            saltBytes,
            c,
            dkLen
        );

        const macHex = decode$5(mac);
        const verifyHmac = await hash(
            HashAlgorithm.Sha384,
            key.slice(16),
            cipherBytes
        );

        // compare that these two Uint8Arrays are equivalent
        if (!macHex.every((b, i) => b === verifyHmac[i])) {
            throw new BadKeyError("HMAC mismatch; passphrase is incorrect");
        }

        const bytes = await createDecipheriv(
            cipher,
            key.slice(0, 16),
            ivBytes,
            cipherBytes
        );

        return naclFast.sign.keyPair.fromSeed(Uint8Array.from(bytes));
    }

    /**
     * @typedef {Object} AsnSeq
     * @property {AsnType[]} seq
     */

    /**
     * @typedef {Object} AsnInt
     * @property {number} int
     */

    /**
     * @typedef {Object} AsnBytes
     * @property {Uint8Array} bytes
     */

    /**
     * @typedef {Object} AsnIdent
     * @property {string} ident
     */

    /**
     * @typedef {{}} AsnNull
     */

    /**
     * @typedef {AsnSeq | AsnInt | AsnBytes | AsnIdent | AsnNull} AsnType
     */

    /**
     * Note: may throw weird errors on malformed input. Catch and rethrow with, e.g. `BadKeyError`.
     *
     *@param {Uint8Array} data
     *@returns {AsnType}
     */
    function decode$3(data) {
        return decodeIncremental(data)[0];
    }

    /**
     * @param {Uint8Array} bytes
     * @returns {[AsnType, Uint8Array]}
     */
    function decodeIncremental(bytes) {
        // slice off the initial tag byte, `decodeLength` returns a slice of the remaining data
        const [len, rem] = decodeLength(bytes.subarray(1));
        const data = rem.subarray(0, len);
        const tail = rem.subarray(len);

        switch (bytes[0]) {
            case 2:
                return [{ int: decodeInt(data) }, tail];
            case 4: // must always be primitive form in DER; for OCTET STRING this is literal bytes
                return [{ bytes: data }, tail];
            case 5: // empty
                return [{}, tail];
            case 6:
                return [{ ident: decodeObjectIdent(data) }, tail];
            case 48:
                return [{ seq: decodeSeq(data) }, tail];
            default:
                throw new Error(`unsupported DER type tag: ${bytes[0]}`);
        }
    }

    /**
     * @param {Uint8Array} seqBytes
     * @returns {AsnType[]}
     */
    function decodeSeq(seqBytes) {
        let data = seqBytes;

        const seq = [];

        while (data.length !== 0) {
            const [decoded, remaining] = decodeIncremental(data);
            seq.push(decoded);
            data = remaining;
        }

        return seq;
    }

    /**
     * @param {Uint8Array} idBytes
     * @returns {string}
     */
    function decodeObjectIdent(idBytes) {
        const id = [
            // first octet is 40 * value1 + value2
            Math.floor(idBytes[0] / 40),
            idBytes[0] % 40,
        ];

        // each following ID component is big-endian base128 where the MSB is set if another byte
        // follows for the same value
        let val = 0;

        for (const byte of idBytes.subarray(1)) {
            // shift the entire value left by 7 bits
            val *= 128;

            if (byte < 128) {
                // no more octets follow for this value, finish it off
                val += byte;
                id.push(val);
                val = 0;
            } else {
                // zero the MSB
                val += byte & 127;
            }
        }

        return id.join(".");
    }

    /**
     * @param {Uint8Array} lenBytes
     * @returns {[number, Uint8Array]}
     */
    function decodeLength(lenBytes) {
        if (lenBytes[0] < 128) {
            // definite, short form
            return [lenBytes[0], lenBytes.subarray(1)];
        }

        const numBytes = lenBytes[0] - 128;

        const intBytes = lenBytes.subarray(1, numBytes + 1);
        const rem = lenBytes.subarray(numBytes + 1);

        return [decodeInt(intBytes), rem];
    }

    /**
     * @param {Uint8Array} intBytes
     * @returns {number}
     */
    function decodeInt(intBytes) {
        const len = intBytes.length;
        if (len === 1) {
            return intBytes[0];
        }

        let view = new DataView(
            intBytes.buffer,
            intBytes.byteOffset,
            intBytes.byteLength
        );

        if (len === 2) return view.getUint16(0, false);

        if (len === 3) {
            // prefix a zero byte and we'll treat it as a 32-bit int
            const data = Uint8Array.of(0, ...intBytes);
            view = new DataView(data.buffer);
        }

        if (len > 4) {
            // this probably means a bug in the decoding as this would mean a >4GB structure
            throw new Error(`unsupported DER integer length of ${len} bytes`);
        }

        return view.getUint32(0, false);
    }

    class AlgorithmIdentifier {
        /**
         * @param {import("../encoding/der.js").AsnType} asn
         */
        constructor(asn) {
            if ("seq" in asn && asn.seq.length >= 1 && "ident" in asn.seq[0]) {
                /**
                 * @type {string}
                 */
                this.algIdent = asn.seq[0].ident;

                /**
                 * @type {import("../encoding/der.js").AsnType | undefined}
                 */
                this.parameters = asn.seq[1];
            } else {
                throw new Error(
                    `error parsing AlgorithmIdentifier from ${JSON.stringify(asn)}`
                );
            }
        }

        /**
         * @returns {string}
         */
        toString() {
            return JSON.stringify(this);
        }
    }

    class PBES2Params {
        /**
         * @param {import("../encoding/der.js").AsnType} asn
         */
        constructor(asn) {
            if ("seq" in asn && asn.seq.length === 2) {
                /**
                 * @type {AlgorithmIdentifier}
                 */
                this.kdf = new AlgorithmIdentifier(asn.seq[0]);

                /**
                 * @type {AlgorithmIdentifier}
                 */
                this.encScheme = new AlgorithmIdentifier(asn.seq[1]);
            } else {
                throw new Error(
                    `error parsing PBES2Params from ${JSON.stringify(asn)}`
                );
            }
        }
    }

    class PBKDF2Params {
        /**
         * @param {import("../encoding/der.js").AsnType} asn
         */
        constructor(asn) {
            if (
                "seq" in asn &&
                asn.seq.length >= 2 &&
                "bytes" in asn.seq[0] &&
                "int" in asn.seq[1]
            ) {
                /**
                 * @type {Uint8Array}
                 */
                this.salt = asn.seq[0].bytes;

                /**
                 * @type {number}
                 */
                this.iterCount = asn.seq[1]["int"];

                if (asn.seq.length > 2) {
                    if ("seq" in asn.seq[2]) {
                        this.prf = new AlgorithmIdentifier(asn.seq[2]);
                        return;
                    } else if ("int" in asn.seq[2]) {
                        /**
                         * @type {number | undefined}
                         */
                        this.keyLength = asn.seq[2]["int"];
                    }

                    if (asn.seq.length === 4) {
                        /**
                         * @type {AlgorithmIdentifier | undefined}
                         */
                        this.prf = new AlgorithmIdentifier(asn.seq[3]);
                    }

                    return;
                }
            }

            throw new Error(
                `error parsing PBKDF2Params from ${JSON.stringify(asn)}`
            );
        }
    }

    class PrivateKeyInfo {
        /**
         * @param {import("../encoding/der.js").AsnType} asn
         */
        constructor(asn) {
            if ("seq" in asn && asn.seq.length === 3) {
                if ("int" in asn.seq[0] && asn.seq[0]["int"] === 0) {
                    /**
                     * @type {number}
                     */
                    this.version = 0;
                } else {
                    throw new Error(
                        `expected version = 0, got ${JSON.stringify(asn.seq[0])}`
                    );
                }

                /**
                 * @type {AlgorithmIdentifier}
                 */
                this.algId = new AlgorithmIdentifier(asn.seq[1]);

                if ("bytes" in asn.seq[2]) {
                    /**
                     * @type {Uint8Array}
                     */
                    this.privateKey = asn.seq[2].bytes;
                } else {
                    throw new Error(
                        `expected octet string as 3rd element, got ${JSON.stringify(
                        asn.seq[3]
                    )}`
                    );
                }

                return;
            }

            throw new Error(
                `error parsing PrivateKeyInfo from ${JSON.stringify(asn)}`
            );
        }

        /**
         * @param {Uint8Array} encoded
         * @returns {PrivateKeyInfo}
         */
        static parse(encoded) {
            return new PrivateKeyInfo(decode$3(encoded));
        }
    }

    class EncryptedPrivateKeyInfo {
        /**
         * @param {import("../encoding/der.js").AsnType} asn
         */
        constructor(asn) {
            if ("seq" in asn && asn.seq.length === 2 && "bytes" in asn.seq[1]) {
                /**
                 * @type {AlgorithmIdentifier}
                 */
                this.algId = new AlgorithmIdentifier(asn.seq[0]);

                /**
                 * @type {Uint8Array}
                 */
                this.data = asn.seq[1].bytes;
                return;
            }

            throw new Error(
                `error parsing EncryptedPrivateKeyInfo from ${JSON.stringify(asn)}`
            );
        }

        /**
         * @param {Uint8Array} encoded
         * @returns {EncryptedPrivateKeyInfo}
         */
        static parse(encoded) {
            return new EncryptedPrivateKeyInfo(decode$3(encoded));
        }

        /**
         * @param {string} passphrase
         * @returns {Promise<PrivateKeyInfo>}
         */
        async decrypt(passphrase) {
            if (
                this.algId.algIdent !== "1.2.840.113549.1.5.13" ||
                !this.algId.parameters
            ) {
                // PBES2
                throw new Error(
                    `unsupported key encryption algorithm: ${this.algId.toString()}`
                );
            }

            const pbes2Params = new PBES2Params(this.algId.parameters);

            if (
                pbes2Params.kdf.algIdent !== "1.2.840.113549.1.5.12" ||
                !pbes2Params.kdf.parameters
            ) {
                // PBKDF2
                throw new Error(
                    `unsupported key derivation function: ${pbes2Params.kdf.toString()}`
                );
            }

            const pbkdf2Params = new PBKDF2Params(pbes2Params.kdf.parameters);

            if (!pbkdf2Params.prf) {
                throw new Error("unsupported PRF HMAC-SHA-1");
            } else if (pbkdf2Params.prf.algIdent !== "1.2.840.113549.2.9") {
                // HMAC-SHA-256
                throw new Error(`unsupported PRF ${pbkdf2Params.prf.toString()}`);
            }

            if (pbes2Params.encScheme.algIdent !== "2.16.840.1.101.3.4.1.2") {
                // AES-128-CBC
                throw new Error(
                    `unsupported encryption scheme: ${pbes2Params.encScheme.toString()}`
                );
            }

            if (
                !pbes2Params.encScheme.parameters ||
                !("bytes" in pbes2Params.encScheme.parameters)
            ) {
                throw new Error(
                    "expected IV as bytes for AES-128-CBC, " +
                        `got: ${JSON.stringify(pbes2Params.encScheme.parameters)}`
                );
            }

            const keyLen = pbkdf2Params.keyLength || 16;
            const iv = pbes2Params.encScheme.parameters.bytes;

            const key = await deriveKey(
                HashAlgorithm.Sha256,
                passphrase,
                pbkdf2Params.salt,
                pbkdf2Params.iterCount,
                keyLen
            );

            const decrypted = await createDecipheriv(
                CipherAlgorithm.Aes128Cbc,
                key,
                iv,
                this.data
            );

            return PrivateKeyInfo.parse(decrypted);
        }
    }

    /**
     * @param {string} text
     * @returns {Uint8Array}
     */
    function decode$2(text) {
        // note: assumes <atob> is available in the global scope if <Buffer> is not
        return Uint8Array.from(atob(text), (c) => c.charCodeAt(0));
    }

    const BEGIN_PRIVATEKEY = "-----BEGIN PRIVATE KEY-----\n";
    const END_PRIVATEKEY = "-----END PRIVATE KEY-----\n";

    const BEGIN_ENCRYPTED_PRIVATEKEY = "-----BEGIN ENCRYPTED PRIVATE KEY-----\n";
    const END_ENCRYPTED_PRIVATEKEY = "-----END ENCRYPTED PRIVATE KEY-----\n";

    /**
     * @param {string} pem
     * @param {string} [passphrase]
     * @returns {Promise<nacl.SignKeyPair>}
     */
    async function read(pem, passphrase) {
        const beginTag = passphrase ? BEGIN_ENCRYPTED_PRIVATEKEY : BEGIN_PRIVATEKEY;

        const endTag = passphrase ? END_ENCRYPTED_PRIVATEKEY : END_PRIVATEKEY;

        const beginIndex = pem.indexOf(beginTag);
        const endIndex = pem.indexOf(endTag);

        if (beginIndex === -1 || endIndex === -1) {
            throw new BadKeyError("failed to find a private key in the PEM file");
        }

        const keyEncoded = pem.slice(beginIndex + beginTag.length, endIndex);

        const key = decode$2(keyEncoded);

        if (passphrase) {
            let encrypted;

            try {
                encrypted = EncryptedPrivateKeyInfo.parse(key);
            } catch (error) {
                throw new BadKeyError(
                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/explicit-module-boundary-types
                    `failed to parse encrypted private key: ${error.message}`
                );
            }

            const decrypted = await encrypted.decrypt(passphrase);

            if (decrypted.algId.algIdent !== "1.3.101.112") {
                throw new BadKeyError(
                    `unknown private key algorithm ${decrypted.algId.toString()}`
                );
            }

            const keyData = decode$3(decrypted.privateKey);

            if ("bytes" in keyData) {
                return naclFast.sign.keyPair.fromSeed(keyData.bytes);
            }

            throw new BadKeyError(
                `expected ASN bytes, got ${JSON.stringify(keyData)}`
            );
        }

        return naclFast.sign.keyPair.fromSeed(key.subarray(16));
    }

    const derPrefix = "302e020100300506032b657004220420";
    const derPrefixBytes = decode$5(derPrefix);

    /**
     * @typedef {object} ProtoSignaturePair
     * @property {(Uint8Array | null)=} pubKeyPrefix
     * @property {(Uint8Array | null)=} ed25519
     */

    /**
     * @typedef {object} ProtoSigMap
     * @property {(ProtoSignaturePair[] | null)=} sigPair
     */

    /**
     * @typedef {object} ProtoSignedTransaction
     * @property {(Uint8Array | null)=} bodyBytes
     * @property {(ProtoSigMap | null)=} sigMap
     */

    /**
     * @typedef {object} Transaction
     * @property {() => boolean} _isFrozen
     * @property {ProtoSignedTransaction[]} _signedTransactions
     * @property {Set<string>} _signerPublicKeys
     * @property {(publicKey: PublicKey, signature: Uint8Array) => Transaction} addSignature
     * @property {() => void} _requireFrozen
     * @property {() => Transaction} freeze
     */

    /**
     * A private key on the Hedera™ network.
     */
    class PrivateKey extends Key {
        /**
         * @hideconstructor
         * @internal
         * @param {nacl.SignKeyPair} keyPair
         * @param {?Uint8Array} chainCode
         */
        constructor(keyPair, chainCode) {
            super();

            /**
             * @type {nacl.SignKeyPair}
             * @readonly
             * @private
             */
            this._keyPair = keyPair;

            /**
             * @type {?Uint8Array}
             * @readonly
             * @private
             */
            this._chainCode = chainCode;
        }

        /**
         * Generate a random Ed25519 private key.
         *
         * @returns {PrivateKey}
         */
        static generate() {
            // 32 bytes for the secret key
            // 32 bytes for the chain code (to support derivation)
            const entropy = bytes(64);

            return new PrivateKey(
                naclFast.sign.keyPair.fromSeed(entropy.subarray(0, 32)),
                entropy.subarray(32)
            );
        }

        /**
         * Generate a random Ed25519 private key.
         *
         * @returns {Promise<PrivateKey>}
         */
        static async generateAsync() {
            // 32 bytes for the secret key
            // 32 bytes for the chain code (to support derivation)
            const entropy = await bytesAsync(64);

            return new PrivateKey(
                naclFast.sign.keyPair.fromSeed(entropy.subarray(0, 32)),
                entropy.subarray(32)
            );
        }

        /**
         * Construct a private key from bytes.
         *
         * @param {Uint8Array} data
         * @returns {PrivateKey}
         */
        static fromBytes(data) {
            switch (data.length) {
                case 48:
                    if (arrayStartsWith(data, derPrefixBytes)) {
                        const keyPair = naclFast.sign.keyPair.fromSeed(
                            data.subarray(16)
                        );

                        return new PrivateKey(keyPair, null);
                    }

                    break;

                case 32:
                    return new PrivateKey(naclFast.sign.keyPair.fromSeed(data), null);

                case 64:
                    // priv + pub key
                    return new PrivateKey(
                        naclFast.sign.keyPair.fromSecretKey(data),
                        null
                    );
            }

            throw new BadKeyError(
                `invalid private key length: ${data.length} bytes`
            );
        }

        /**
         * Construct a private key from a hex-encoded string.
         *
         * @param {string} text
         * @returns {PrivateKey}
         */
        static fromString(text) {
            return PrivateKey.fromBytes(decode$5(text));
        }

        /**
         * Recover a private key from a mnemonic phrase (and optionally a password).
         *
         * @param {Mnemonic | string} mnemonic
         * @param {string} [passphrase]
         * @returns {Promise<PrivateKey>}
         */
        static async fromMnemonic(mnemonic, passphrase = "") {
            return (typeof mnemonic === "string"
                ? await Mnemonic.fromString(mnemonic)
                : mnemonic
            ).toPrivateKey(passphrase);
        }

        /**
         * Recover a private key from a keystore, previously created by `.toKeystore()`.
         *
         * This key will _not_ support child key derivation.
         *
         * @param {Uint8Array} data
         * @param {string} [passphrase]
         * @returns {Promise<PrivateKey>}
         * @throws {BadKeyError} If the passphrase is incorrect or the hash fails to validate.
         */
        static async fromKeystore(data, passphrase = "") {
            return new PrivateKey(await loadKeystore(data, passphrase), null);
        }

        /**
         * Recover a private key from a pem string; the private key may be encrypted.
         *
         * This method assumes the .pem file has been converted to a string already.
         *
         * If `passphrase` is not null or empty, this looks for the first `ENCRYPTED PRIVATE KEY`
         * section and uses `passphrase` to decrypt it; otherwise, it looks for the first `PRIVATE KEY`
         * section and decodes that as a DER-encoded  private key.
         *
         * @param {string} data
         * @param {string} [passphrase]
         * @returns {Promise<PrivateKey>}
         */
        static async fromPem(data, passphrase = "") {
            return new PrivateKey(await read(data, passphrase), null);
        }

        /**
         * Derive a new private key at the given wallet index.
         *
         * Only currently supported for keys created with `fromMnemonic()`; other keys will throw
         * an error.
         *
         * You can check if a key supports derivation with `.supportsDerivation()`
         *
         * @param {number} index
         * @returns {Promise<PrivateKey>}
         * @throws If this key does not support derivation.
         */
        async derive(index) {
            if (this._chainCode == null) {
                throw new Error("this private key does not support key derivation");
            }

            const { keyData, chainCode } = await derive(
                this.toBytes(),
                this._chainCode,
                index
            );

            const keyPair = naclFast.sign.keyPair.fromSeed(keyData);

            return new PrivateKey(keyPair, chainCode);
        }

        /**
         * Get the public key associated with this private key.
         *
         * The public key can be freely given and used by other parties to verify
         * the signatures generated by this private key.
         *
         * @returns {PublicKey}
         */
        get publicKey() {
            return new PublicKey(this._keyPair.publicKey);
        }

        /**
         * Sign a message with this private key.
         *
         * @param {Uint8Array} bytes
         * @returns {Uint8Array} - The signature bytes without the message
         */
        sign(bytes) {
            return naclFast.sign.detached(bytes, this._keyPair.secretKey);
        }

        /**
         * @param {Transaction} transaction
         * @returns {Uint8Array}
         */
        signTransaction(transaction) {
            transaction._requireFrozen();

            if (!transaction._isFrozen()) {
                transaction.freeze();
            }

            if (transaction._signedTransactions.length != 1) {
                throw new Error(
                    "`PrivateKey.signTransaction()` requires `Transaction` to have a single node `AccountId` set"
                );
            }

            const tx = /** @type {ProtoSignedTransaction} */ (transaction
                ._signedTransactions[0]);

            const publicKeyHex = encode$3(this.publicKey.toBytes());

            if (tx.sigMap == null) {
                tx.sigMap = {};
            }

            if (tx.sigMap.sigPair == null) {
                tx.sigMap.sigPair = [];
            }

            for (const sigPair of tx.sigMap.sigPair) {
                if (
                    sigPair.pubKeyPrefix != null &&
                    encode$3(sigPair.pubKeyPrefix) === publicKeyHex
                ) {
                    return /** @type {Uint8Array} */ (sigPair.ed25519);
                }
            }

            const siganture = this.sign(
                tx.bodyBytes != null ? tx.bodyBytes : new Uint8Array()
            );

            tx.sigMap.sigPair.push({
                pubKeyPrefix: this.publicKey.toBytes(),
                ed25519: siganture,
            });

            transaction._signerPublicKeys.add(publicKeyHex);

            return siganture;
        }

        /**
         * Check if `derive` can be called on this private key.
         *
         * This is only the case if the key was created from a mnemonic.
         *
         * @returns {boolean}
         */
        isDerivable() {
            return this._chainCode != null;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            // copy the bytes so they can't be modified accidentally
            return this._keyPair.secretKey.slice(0, 32);
        }

        /**
         * @returns {string}
         */
        toString() {
            return derPrefix + encode$3(this.toBytes());
        }

        /**
         * Create a keystore with a given passphrase.
         *
         * The key can be recovered later with `fromKeystore()`.
         *
         * Note that this will not retain the ancillary data used for
         * deriving child keys, thus `.derive()` on the restored key will
         * throw even if this instance supports derivation.
         *
         * @param {string} [passphrase]
         * @returns {Promise<Uint8Array>}
         */
        toKeystore(passphrase = "") {
            return createKeystore(this.toBytes(), passphrase);
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
     */

    class Status {
        /**
         * @hideconstructor
         * @internal
         * @param {number} code
         */
        constructor(code) {
            /** @readonly */
            this._code = code;

            Object.freeze(this);
        }

        /**
         * @returns {string}
         */
        toString() {
            switch (this) {
                case Status.Ok:
                    return "OK";
                case Status.InvalidTransaction:
                    return "INVALID_TRANSACTION";
                case Status.PayerAccountNotFound:
                    return "PAYER_ACCOUNT_NOT_FOUND";
                case Status.InvalidNodeAccount:
                    return "INVALID_NODE_ACCOUNT";
                case Status.TransactionExpired:
                    return "TRANSACTION_EXPIRED";
                case Status.InvalidTransactionStart:
                    return "INVALID_TRANSACTION_START";
                case Status.InvalidTransactionDuration:
                    return "INVALID_TRANSACTION_DURATION";
                case Status.InvalidSignature:
                    return "INVALID_SIGNATURE";
                case Status.MemoTooLong:
                    return "MEMO_TOO_LONG";
                case Status.InsufficientTxFee:
                    return "INSUFFICIENT_TX_FEE";
                case Status.InsufficientPayerBalance:
                    return "INSUFFICIENT_PAYER_BALANCE";
                case Status.DuplicateTransaction:
                    return "DUPLICATE_TRANSACTION";
                case Status.Busy:
                    return "BUSY";
                case Status.NotSupported:
                    return "NOT_SUPPORTED";
                case Status.InvalidFileId:
                    return "INVALID_FILE_ID";
                case Status.InvalidAccountId:
                    return "INVALID_ACCOUNT_ID";
                case Status.InvalidContractId:
                    return "INVALID_CONTRACT_ID";
                case Status.InvalidTransactionId:
                    return "INVALID_TRANSACTION_ID";
                case Status.ReceiptNotFound:
                    return "RECEIPT_NOT_FOUND";
                case Status.RecordNotFound:
                    return "RECORD_NOT_FOUND";
                case Status.InvalidSolidityId:
                    return "INVALID_SOLIDITY_ID";
                case Status.Unknown:
                    return "UNKNOWN";
                case Status.Success:
                    return "SUCCESS";
                case Status.FailInvalid:
                    return "FAIL_INVALID";
                case Status.FailFee:
                    return "FAIL_FEE";
                case Status.FailBalance:
                    return "FAIL_BALANCE";
                case Status.KeyRequired:
                    return "KEY_REQUIRED";
                case Status.BadEncoding:
                    return "BAD_ENCODING";
                case Status.InsufficientAccountBalance:
                    return "INSUFFICIENT_ACCOUNT_BALANCE";
                case Status.InvalidSolidityAddress:
                    return "INVALID_SOLIDITY_ADDRESS";
                case Status.InsufficientGas:
                    return "INSUFFICIENT_GAS";
                case Status.ContractSizeLimitExceeded:
                    return "CONTRACT_SIZE_LIMIT_EXCEEDED";
                case Status.LocalCallModificationException:
                    return "LOCAL_CALL_MODIFICATION_EXCEPTION";
                case Status.ContractRevertExecuted:
                    return "CONTRACT_REVERT_EXECUTED";
                case Status.ContractExecutionException:
                    return "CONTRACT_EXECUTION_EXCEPTION";
                case Status.InvalidReceivingNodeAccount:
                    return "INVALID_RECEIVING_NODE_ACCOUNT";
                case Status.AccountUpdateFailed:
                    return "ACCOUNT_UPDATE_FAILED";
                case Status.InvalidKeyEncoding:
                    return "INVALID_KEY_ENCODING";
                case Status.NullSolidityAddress:
                    return "NULL_SOLIDITY_ADDRESS";
                case Status.ContractUpdateFailed:
                    return "CONTRACT_UPDATE_FAILED";
                case Status.InvalidQueryHeader:
                    return "INVALID_QUERY_HEADER";
                case Status.InvalidFeeSubmitted:
                    return "INVALID_FEE_SUBMITTED";
                case Status.InvalidPayerSignature:
                    return "INVALID_PAYER_SIGNATURE";
                case Status.KeyNotProvided:
                    return "KEY_NOT_PROVIDED";
                case Status.InvalidExpirationTime:
                    return "INVALID_EXPIRATION_TIME";
                case Status.NoWaclKey:
                    return "NO_WACL_KEY";
                case Status.FileContentEmpty:
                    return "FILE_CONTENT_EMPTY";
                case Status.InvalidAccountAmounts:
                    return "INVALID_ACCOUNT_AMOUNTS";
                case Status.EmptyTransactionBody:
                    return "EMPTY_TRANSACTION_BODY";
                case Status.InvalidTransactionBody:
                    return "INVALID_TRANSACTION_BODY";
                case Status.InvalidSignatureTypeMismatchingKey:
                    return "INVALID_SIGNATURE_TYPE_MISMATCHING_KEY";
                case Status.InvalidSignatureCountMismatchingKey:
                    return "INVALID_SIGNATURE_COUNT_MISMATCHING_KEY";
                case Status.EmptyLiveHashBody:
                    return "EMPTY_LIVE_HASH_BODY";
                case Status.EmptyLiveHash:
                    return "EMPTY_LIVE_HASH";
                case Status.EmptyLiveHashKeys:
                    return "EMPTY_LIVE_HASH_KEYS";
                case Status.InvalidLiveHashSize:
                    return "INVALID_LIVE_HASH_SIZE";
                case Status.EmptyQueryBody:
                    return "EMPTY_QUERY_BODY";
                case Status.EmptyLiveHashQuery:
                    return "EMPTY_LIVE_HASH_QUERY";
                case Status.LiveHashNotFound:
                    return "LIVE_HASH_NOT_FOUND";
                case Status.AccountIdDoesNotExist:
                    return "ACCOUNT_ID_DOES_NOT_EXIST";
                case Status.LiveHashAlreadyExists:
                    return "LIVE_HASH_ALREADY_EXISTS";
                case Status.InvalidFileWacl:
                    return "INVALID_FILE_WACL";
                case Status.SerializationFailed:
                    return "SERIALIZATION_FAILED";
                case Status.TransactionOversize:
                    return "TRANSACTION_OVERSIZE";
                case Status.TransactionTooManyLayers:
                    return "TRANSACTION_TOO_MANY_LAYERS";
                case Status.ContractDeleted:
                    return "CONTRACT_DELETED";
                case Status.PlatformNotActive:
                    return "PLATFORM_NOT_ACTIVE";
                case Status.KeyPrefixMismatch:
                    return "KEY_PREFIX_MISMATCH";
                case Status.PlatformTransactionNotCreated:
                    return "PLATFORM_TRANSACTION_NOT_CREATED";
                case Status.InvalidRenewalPeriod:
                    return "INVALID_RENEWAL_PERIOD";
                case Status.InvalidPayerAccountId:
                    return "INVALID_PAYER_ACCOUNT_ID";
                case Status.AccountDeleted:
                    return "ACCOUNT_DELETED";
                case Status.FileDeleted:
                    return "FILE_DELETED";
                case Status.AccountRepeatedInAccountAmounts:
                    return "ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS";
                case Status.SettingNegativeAccountBalance:
                    return "SETTING_NEGATIVE_ACCOUNT_BALANCE";
                case Status.ObtainerRequired:
                    return "OBTAINER_REQUIRED";
                case Status.ObtainerSameContractId:
                    return "OBTAINER_SAME_CONTRACT_ID";
                case Status.ObtainerDoesNotExist:
                    return "OBTAINER_DOES_NOT_EXIST";
                case Status.ModifyingImmutableContract:
                    return "MODIFYING_IMMUTABLE_CONTRACT";
                case Status.FileSystemException:
                    return "FILE_SYSTEM_EXCEPTION";
                case Status.AutorenewDurationNotInRange:
                    return "AUTORENEW_DURATION_NOT_IN_RANGE";
                case Status.ErrorDecodingBytestring:
                    return "ERROR_DECODING_BYTESTRING";
                case Status.ContractFileEmpty:
                    return "CONTRACT_FILE_EMPTY";
                case Status.ContractBytecodeEmpty:
                    return "CONTRACT_BYTECODE_EMPTY";
                case Status.InvalidInitialBalance:
                    return "INVALID_INITIAL_BALANCE";
                case Status.InvalidReceiveRecordThreshold:
                    return "INVALID_RECEIVE_RECORD_THRESHOLD";
                case Status.InvalidSendRecordThreshold:
                    return "INVALID_SEND_RECORD_THRESHOLD";
                case Status.AccountIsNotGenesisAccount:
                    return "ACCOUNT_IS_NOT_GENESIS_ACCOUNT";
                case Status.PayerAccountUnauthorized:
                    return "PAYER_ACCOUNT_UNAUTHORIZED";
                case Status.InvalidFreezeTransactionBody:
                    return "INVALID_FREEZE_TRANSACTION_BODY";
                case Status.FreezeTransactionBodyNotFound:
                    return "FREEZE_TRANSACTION_BODY_NOT_FOUND";
                case Status.TransferListSizeLimitExceeded:
                    return "TRANSFER_LIST_SIZE_LIMIT_EXCEEDED";
                case Status.ResultSizeLimitExceeded:
                    return "RESULT_SIZE_LIMIT_EXCEEDED";
                case Status.NotSpecialAccount:
                    return "NOT_SPECIAL_ACCOUNT";
                case Status.ContractNegativeGas:
                    return "CONTRACT_NEGATIVE_GAS";
                case Status.ContractNegativeValue:
                    return "CONTRACT_NEGATIVE_VALUE";
                case Status.InvalidFeeFile:
                    return "INVALID_FEE_FILE";
                case Status.InvalidExchangeRateFile:
                    return "INVALID_EXCHANGE_RATE_FILE";
                case Status.InsufficientLocalCallGas:
                    return "INSUFFICIENT_LOCAL_CALL_GAS";
                case Status.EntityNotAllowedToDelete:
                    return "ENTITY_NOT_ALLOWED_TO_DELETE";
                case Status.AuthorizationFailed:
                    return "AUTHORIZATION_FAILED";
                case Status.FileUploadedProtoInvalid:
                    return "FILE_UPLOADED_PROTO_INVALID";
                case Status.FileUploadedProtoNotSavedToDisk:
                    return "FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK";
                case Status.FeeScheduleFilePartUploaded:
                    return "FEE_SCHEDULE_FILE_PART_UPLOADED";
                case Status.ExchangeRateChangeLimitExceeded:
                    return "EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED";
                case Status.MaxContractStorageExceeded:
                    return "MAX_CONTRACT_STORAGE_EXCEEDED";
                case Status.TransferAccountSameAsDeleteAccount:
                    return "TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT";
                case Status.TotalLedgerBalanceInvalid:
                    return "TOTAL_LEDGER_BALANCE_INVALID";
                case Status.ExpirationReductionNotAllowed:
                    return "EXPIRATION_REDUCTION_NOT_ALLOWED";
                case Status.MaxGasLimitExceeded:
                    return "MAX_GAS_LIMIT_EXCEEDED";
                case Status.MaxFileSizeExceeded:
                    return "MAX_FILE_SIZE_EXCEEDED";
                case Status.InvalidTopicId:
                    return "INVALID_TOPIC_ID";
                case Status.InvalidAdminKey:
                    return "INVALID_ADMIN_KEY";
                case Status.InvalidSubmitKey:
                    return "INVALID_SUBMIT_KEY";
                case Status.Unauthorized:
                    return "UNAUTHORIZED";
                case Status.InvalidTopicMessage:
                    return "INVALID_TOPIC_MESSAGE";
                case Status.InvalidAutorenewAccount:
                    return "INVALID_AUTORENEW_ACCOUNT";
                case Status.AutorenewAccountNotAllowed:
                    return "AUTORENEW_ACCOUNT_NOT_ALLOWED";
                case Status.TopicExpired:
                    return "TOPIC_EXPIRED";
                case Status.InvalidChunkNumber:
                    return "INVALID_CHUNK_NUMBER";
                case Status.InvalidChunkTransactionId:
                    return "INVALID_CHUNK_TRANSACTION_ID";
                case Status.AccountFrozenForToken:
                    return "ACCOUNT_FROZEN_FOR_TOKEN";
                case Status.TokensPerAccountLimitExceeded:
                    return "TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED";
                case Status.InvalidTokenId:
                    return "INVALID_TOKEN_ID";
                case Status.InvalidTokenDecimals:
                    return "INVALID_TOKEN_DECIMALS";
                case Status.InvalidTokenInitialSupply:
                    return "INVALID_TOKEN_INITIAL_SUPPLY";
                case Status.InvalidTreasuryAccountForToken:
                    return "INVALID_TREASURY_ACCOUNT_FOR_TOKEN";
                case Status.InvalidTokenSymbol:
                    return "INVALID_TOKEN_SYMBOL";
                case Status.TokenHasNoFreezeKey:
                    return "TOKEN_HAS_NO_FREEZE_KEY";
                case Status.TransfersNotZeroSumForToken:
                    return "TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN";
                case Status.MissingTokenSymbol:
                    return "MISSING_TOKEN_SYMBOL";
                case Status.TokenSymbolTooLong:
                    return "TOKEN_SYMBOL_TOO_LONG";
                case Status.AccountKycNotGrantedForToken:
                    return "ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN";
                case Status.TokenHasNoKycKey:
                    return "TOKEN_HAS_NO_KYC_KEY";
                case Status.InsufficientTokenBalance:
                    return "INSUFFICIENT_TOKEN_BALANCE";
                case Status.TokenWasDeleted:
                    return "TOKEN_WAS_DELETED";
                case Status.TokenHasNoSupplyKey:
                    return "TOKEN_HAS_NO_SUPPLY_KEY";
                case Status.TokenHasNoWipeKey:
                    return "TOKEN_HAS_NO_WIPE_KEY";
                case Status.InvalidTokenMintAmount:
                    return "INVALID_TOKEN_MINT_AMOUNT";
                case Status.InvalidTokenBurnAmount:
                    return "INVALID_TOKEN_BURN_AMOUNT";
                case Status.TokenNotAssociatedToAccount:
                    return "TOKEN_NOT_ASSOCIATED_TO_ACCOUNT";
                case Status.CannotWipeTokenTreasuryAccount:
                    return "CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT";
                case Status.InvalidKycKey:
                    return "INVALID_KYC_KEY";
                case Status.InvalidWipeKey:
                    return "INVALID_WIPE_KEY";
                case Status.InvalidFreezeKey:
                    return "INVALID_FREEZE_KEY";
                case Status.InvalidSupplyKey:
                    return "INVALID_SUPPLY_KEY";
                case Status.MissingTokenName:
                    return "MISSING_TOKEN_NAME";
                case Status.TokenNameTooLong:
                    return "TOKEN_NAME_TOO_LONG";
                case Status.InvalidWipingAmount:
                    return "INVALID_WIPING_AMOUNT";
                case Status.TokenIsImmutable:
                    return "TOKEN_IS_IMMUTABLE";
                case Status.TokenAlreadyAssociatedToAccount:
                    return "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT";
                case Status.TransactionRequiresZeroTokenBalances:
                    return "TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES";
                case Status.AccountIsTreasury:
                    return "ACCOUNT_IS_TREASURY";
                case Status.TokenIdRepeatedInTokenList:
                    return "TOKEN_ID_REPEATED_IN_TOKEN_LIST";
                case Status.TokenTransferListSizeLimitExceeded:
                    return "TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED";
                case Status.EmptyTokenTransferBody:
                    return "EMPTY_TOKEN_TRANSFER_BODY";
                case Status.EmptyTokenTransferAccountAmounts:
                    return "EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS";
                case Status.InvalidScheduleId:
                    return "INVALID_SCHEDULE_ID";
                case Status.ScheduleIsImmutable:
                    return "SCHEDULE_IS_IMMUTABLE";
                case Status.InvalidSchedulePayerId:
                    return "INVALID_SCHEDULE_PAYER_ID";
                case Status.InvalidScheduleAccountId:
                    return "INVALID_SCHEDULE_ACCOUNT_ID";
                case Status.NoNewValidSignatures:
                    return "NO_NEW_VALID_SIGNATURES";
                case Status.UnresolvableRequiredSigners:
                    return "UNRESOLVABLE_REQUIRED_SIGNERS";
                case Status.UnparseableScheduledTransaction:
                    return "UNPARSEABLE_SCHEDULED_TRANSACTION";
                case Status.UnschedulableTransaction:
                    return "UNSCHEDULABLE_TRANSACTION";
                case Status.SomeSignaturesWereInvalid:
                    return "SOME_SIGNATURES_WERE_INVALID";
                case Status.TransactionIdFieldNotAllowed:
                    return "TRANSACTION_ID_FIELD_NOT_ALLOWED";
                default:
                    return `UNKNOWN (${this._code})`;
            }
        }

        /**
         * @internal
         * @param {number} code
         * @returns {Status}
         */
        static _fromCode(code) {
            switch (code) {
                case 0:
                    return Status.Ok;
                case 1:
                    return Status.InvalidTransaction;
                case 2:
                    return Status.PayerAccountNotFound;
                case 3:
                    return Status.InvalidNodeAccount;
                case 4:
                    return Status.TransactionExpired;
                case 5:
                    return Status.InvalidTransactionStart;
                case 6:
                    return Status.InvalidTransactionDuration;
                case 7:
                    return Status.InvalidSignature;
                case 8:
                    return Status.MemoTooLong;
                case 9:
                    return Status.InsufficientTxFee;
                case 10:
                    return Status.InsufficientPayerBalance;
                case 11:
                    return Status.DuplicateTransaction;
                case 12:
                    return Status.Busy;
                case 13:
                    return Status.NotSupported;
                case 14:
                    return Status.InvalidFileId;
                case 15:
                    return Status.InvalidAccountId;
                case 16:
                    return Status.InvalidContractId;
                case 17:
                    return Status.InvalidTransactionId;
                case 18:
                    return Status.ReceiptNotFound;
                case 19:
                    return Status.RecordNotFound;
                case 20:
                    return Status.InvalidSolidityId;
                case 21:
                    return Status.Unknown;
                case 22:
                    return Status.Success;
                case 23:
                    return Status.FailInvalid;
                case 24:
                    return Status.FailFee;
                case 25:
                    return Status.FailBalance;
                case 26:
                    return Status.KeyRequired;
                case 27:
                    return Status.BadEncoding;
                case 28:
                    return Status.InsufficientAccountBalance;
                case 29:
                    return Status.InvalidSolidityAddress;
                case 30:
                    return Status.InsufficientGas;
                case 31:
                    return Status.ContractSizeLimitExceeded;
                case 32:
                    return Status.LocalCallModificationException;
                case 33:
                    return Status.ContractRevertExecuted;
                case 34:
                    return Status.ContractExecutionException;
                case 35:
                    return Status.InvalidReceivingNodeAccount;
                case 37:
                    return Status.AccountUpdateFailed;
                case 38:
                    return Status.InvalidKeyEncoding;
                case 39:
                    return Status.NullSolidityAddress;
                case 40:
                    return Status.ContractUpdateFailed;
                case 41:
                    return Status.InvalidQueryHeader;
                case 42:
                    return Status.InvalidFeeSubmitted;
                case 43:
                    return Status.InvalidPayerSignature;
                case 44:
                    return Status.KeyNotProvided;
                case 45:
                    return Status.InvalidExpirationTime;
                case 46:
                    return Status.NoWaclKey;
                case 47:
                    return Status.FileContentEmpty;
                case 48:
                    return Status.InvalidAccountAmounts;
                case 49:
                    return Status.EmptyTransactionBody;
                case 50:
                    return Status.InvalidTransactionBody;
                case 51:
                    return Status.InvalidSignatureTypeMismatchingKey;
                case 52:
                    return Status.InvalidSignatureCountMismatchingKey;
                case 53:
                    return Status.EmptyLiveHashBody;
                case 54:
                    return Status.EmptyLiveHash;
                case 55:
                    return Status.EmptyLiveHashKeys;
                case 56:
                    return Status.InvalidLiveHashSize;
                case 57:
                    return Status.EmptyQueryBody;
                case 58:
                    return Status.EmptyLiveHashQuery;
                case 59:
                    return Status.LiveHashNotFound;
                case 60:
                    return Status.AccountIdDoesNotExist;
                case 61:
                    return Status.LiveHashAlreadyExists;
                case 62:
                    return Status.InvalidFileWacl;
                case 63:
                    return Status.SerializationFailed;
                case 64:
                    return Status.TransactionOversize;
                case 65:
                    return Status.TransactionTooManyLayers;
                case 66:
                    return Status.ContractDeleted;
                case 67:
                    return Status.PlatformNotActive;
                case 68:
                    return Status.KeyPrefixMismatch;
                case 69:
                    return Status.PlatformTransactionNotCreated;
                case 70:
                    return Status.InvalidRenewalPeriod;
                case 71:
                    return Status.InvalidPayerAccountId;
                case 72:
                    return Status.AccountDeleted;
                case 73:
                    return Status.FileDeleted;
                case 74:
                    return Status.AccountRepeatedInAccountAmounts;
                case 75:
                    return Status.SettingNegativeAccountBalance;
                case 76:
                    return Status.ObtainerRequired;
                case 77:
                    return Status.ObtainerSameContractId;
                case 78:
                    return Status.ObtainerDoesNotExist;
                case 79:
                    return Status.ModifyingImmutableContract;
                case 80:
                    return Status.FileSystemException;
                case 81:
                    return Status.AutorenewDurationNotInRange;
                case 82:
                    return Status.ErrorDecodingBytestring;
                case 83:
                    return Status.ContractFileEmpty;
                case 84:
                    return Status.ContractBytecodeEmpty;
                case 85:
                    return Status.InvalidInitialBalance;
                case 86:
                    return Status.InvalidReceiveRecordThreshold;
                case 87:
                    return Status.InvalidSendRecordThreshold;
                case 88:
                    return Status.AccountIsNotGenesisAccount;
                case 89:
                    return Status.PayerAccountUnauthorized;
                case 90:
                    return Status.InvalidFreezeTransactionBody;
                case 91:
                    return Status.FreezeTransactionBodyNotFound;
                case 92:
                    return Status.TransferListSizeLimitExceeded;
                case 93:
                    return Status.ResultSizeLimitExceeded;
                case 94:
                    return Status.NotSpecialAccount;
                case 95:
                    return Status.ContractNegativeGas;
                case 96:
                    return Status.ContractNegativeValue;
                case 97:
                    return Status.InvalidFeeFile;
                case 98:
                    return Status.InvalidExchangeRateFile;
                case 99:
                    return Status.InsufficientLocalCallGas;
                case 100:
                    return Status.EntityNotAllowedToDelete;
                case 101:
                    return Status.AuthorizationFailed;
                case 102:
                    return Status.FileUploadedProtoInvalid;
                case 103:
                    return Status.FileUploadedProtoNotSavedToDisk;
                case 104:
                    return Status.FeeScheduleFilePartUploaded;
                case 105:
                    return Status.ExchangeRateChangeLimitExceeded;
                case 106:
                    return Status.MaxContractStorageExceeded;
                case 107:
                    return Status.TransferAccountSameAsDeleteAccount;
                case 108:
                    return Status.TotalLedgerBalanceInvalid;
                case 110:
                    return Status.ExpirationReductionNotAllowed;
                case 111:
                    return Status.MaxGasLimitExceeded;
                case 112:
                    return Status.MaxFileSizeExceeded;
                case 150:
                    return Status.InvalidTopicId;
                case 155:
                    return Status.InvalidAdminKey;
                case 156:
                    return Status.InvalidSubmitKey;
                case 157:
                    return Status.Unauthorized;
                case 158:
                    return Status.InvalidTopicMessage;
                case 159:
                    return Status.InvalidAutorenewAccount;
                case 160:
                    return Status.AutorenewAccountNotAllowed;
                case 162:
                    return Status.TopicExpired;
                case 163:
                    return Status.InvalidChunkNumber;
                case 164:
                    return Status.InvalidChunkTransactionId;
                case 165:
                    return Status.AccountFrozenForToken;
                case 166:
                    return Status.TokensPerAccountLimitExceeded;
                case 167:
                    return Status.InvalidTokenId;
                case 168:
                    return Status.InvalidTokenDecimals;
                case 169:
                    return Status.InvalidTokenInitialSupply;
                case 170:
                    return Status.InvalidTreasuryAccountForToken;
                case 171:
                    return Status.InvalidTokenSymbol;
                case 172:
                    return Status.TokenHasNoFreezeKey;
                case 173:
                    return Status.TransfersNotZeroSumForToken;
                case 174:
                    return Status.MissingTokenSymbol;
                case 175:
                    return Status.TokenSymbolTooLong;
                case 176:
                    return Status.AccountKycNotGrantedForToken;
                case 177:
                    return Status.TokenHasNoKycKey;
                case 178:
                    return Status.InsufficientTokenBalance;
                case 179:
                    return Status.TokenWasDeleted;
                case 180:
                    return Status.TokenHasNoSupplyKey;
                case 181:
                    return Status.TokenHasNoWipeKey;
                case 182:
                    return Status.InvalidTokenMintAmount;
                case 183:
                    return Status.InvalidTokenBurnAmount;
                case 184:
                    return Status.TokenNotAssociatedToAccount;
                case 185:
                    return Status.CannotWipeTokenTreasuryAccount;
                case 186:
                    return Status.InvalidKycKey;
                case 187:
                    return Status.InvalidWipeKey;
                case 188:
                    return Status.InvalidFreezeKey;
                case 189:
                    return Status.InvalidSupplyKey;
                case 190:
                    return Status.MissingTokenName;
                case 191:
                    return Status.TokenNameTooLong;
                case 192:
                    return Status.InvalidWipingAmount;
                case 193:
                    return Status.TokenIsImmutable;
                case 194:
                    return Status.TokenAlreadyAssociatedToAccount;
                case 195:
                    return Status.TransactionRequiresZeroTokenBalances;
                case 196:
                    return Status.AccountIsTreasury;
                case 197:
                    return Status.TokenIdRepeatedInTokenList;
                case 198:
                    return Status.TokenTransferListSizeLimitExceeded;
                case 199:
                    return Status.EmptyTokenTransferBody;
                case 200:
                    return Status.EmptyTokenTransferAccountAmounts;
                case 201:
                    return Status.InvalidScheduleId;
                case 202:
                    return Status.ScheduleIsImmutable;
                case 203:
                    return Status.InvalidSchedulePayerId;
                case 204:
                    return Status.InvalidScheduleAccountId;
                case 205:
                    return Status.NoNewValidSignatures;
                case 206:
                    return Status.UnresolvableRequiredSigners;
                case 207:
                    return Status.UnparseableScheduledTransaction;
                case 208:
                    return Status.UnschedulableTransaction;
                case 209:
                    return Status.SomeSignaturesWereInvalid;
                case 210:
                    return Status.TransactionIdFieldNotAllowed;
            }

            throw new Error(
                `(BUG) Status.fromCode() does not handle code: ${code}`
            );
        }

        /**
         * @returns {proto.ResponseCodeEnum}
         */
        valueOf() {
            return this._code;
        }
    }

    /*
     * The transaction passed the precheck validations.
     */
    Status.Ok = new Status(0);

    /*
     * For any error not handled by specific error codes listed below.
     */
    Status.InvalidTransaction = new Status(1);

    /*
     * Payer account does not exist.
     */
    Status.PayerAccountNotFound = new Status(2);

    /*
     * Node Account provided does not match the node account of the node the
     * transaction was submitted to.
     */
    Status.InvalidNodeAccount = new Status(3);

    /*
     * Pre-Check error when TransactionValidStart + transactionValidDuration is
     * less than current consensus time.
     */
    Status.TransactionExpired = new Status(4);

    /*
     * Transaction start time is greater than current consensus time
     */
    Status.InvalidTransactionStart = new Status(5);

    /*
     * Valid transaction duration is a positive non zero number that does not
     * exceed 120 seconds
     */
    Status.InvalidTransactionDuration = new Status(6);

    /*
     * The transaction signature is not valid
     */
    Status.InvalidSignature = new Status(7);

    /*
     * Transaction memo size exceeded 100 bytes
     */
    Status.MemoTooLong = new Status(8);

    /*
     * The fee provided in the transaction is insufficient for this
     * type of transaction
     */
    Status.InsufficientTxFee = new Status(9);

    /*
     * The payer account has insufficient cryptocurrency to pay the
     * transaction fee
     */
    Status.InsufficientPayerBalance = new Status(10);

    /*
     * This transaction ID is a duplicate of one that was submitted to this node
     * Or reached consensus in the last 180 seconds (receipt period)
     */
    Status.DuplicateTransaction = new Status(11);

    /*
     * If API is throttled out
     */
    Status.Busy = new Status(12);

    /*
     * The API is not currently supported
     */
    Status.NotSupported = new Status(13);

    /*
     * The file id is invalid or does not exist
     */
    Status.InvalidFileId = new Status(14);

    /*
     * The account id is invalid or does not exist
     */
    Status.InvalidAccountId = new Status(15);

    /*
     * The contract id is invalid or does not exist
     */
    Status.InvalidContractId = new Status(16);

    /*
     * Transaction id is not valid
     */
    Status.InvalidTransactionId = new Status(17);

    /*
     * Receipt for given transaction id does not exist
     */
    Status.ReceiptNotFound = new Status(18);

    /*
     * Record for given transaction id does not exist
     */
    Status.RecordNotFound = new Status(19);

    /*
     * The solidity id is invalid or entity with this solidity id does not exist
     */
    Status.InvalidSolidityId = new Status(20);

    /*
     * The responding node has submitted the transaction to the network.
     * its final status is still unknown.
     */
    Status.Unknown = new Status(21);

    /*
     * The transaction succeeded
     */
    Status.Success = new Status(22);

    /*
     * There was a system error and the transaction failed because of invalid
     * request parameters.
     */
    Status.FailInvalid = new Status(23);

    /*
     * There was a system error while performing fee calculation,
     * reserved for future.
     */
    Status.FailFee = new Status(24);

    /*
     * There was a system error while performing balance checks,
     * reserved for future.
     */
    Status.FailBalance = new Status(25);

    /*
     * Key not provided in the transaction body
     */
    Status.KeyRequired = new Status(26);

    /*
     * Unsupported algorithm/encoding used for keys in the transaction
     */
    Status.BadEncoding = new Status(27);

    /*
     * When the account balance is not sufficient for the transfer
     */
    Status.InsufficientAccountBalance = new Status(28);

    /*
     * During an update transaction when the system is not able to find the
     * users Solidity address
     */
    Status.InvalidSolidityAddress = new Status(29);

    /*
     * Not enough gas was supplied to execute transaction
     */
    Status.InsufficientGas = new Status(30);

    /*
     * Contract byte code size is over the limit
     */
    Status.ContractSizeLimitExceeded = new Status(31);

    /*
     * Local execution (query) is requested for a function which changes state
     */
    Status.LocalCallModificationException = new Status(32);

    /*
     * Contract REVERT OPCODE executed
     */
    Status.ContractRevertExecuted = new Status(33);

    /*
     * For any contract execution related error not handled by specific error
     * Codes listed above.
     */
    Status.ContractExecutionException = new Status(34);

    /*
     * In Query validation, account with +ve(amount) value should be receiving
     * node account, the receiver account should be only one account in the list
     */
    Status.InvalidReceivingNodeAccount = new Status(35);

    /*
     * Header is missing in Query request
     */
    Status.MissingQueryHeader = new Status(36);

    /*
     * The update of the account failed
     */
    Status.AccountUpdateFailed = new Status(37);

    /*
     * Provided key encoding was not supported by the system
     */
    Status.InvalidKeyEncoding = new Status(38);

    /*
     * Null solidity address
     */
    Status.NullSolidityAddress = new Status(39);

    /*
     * Update of the contract failed
     */
    Status.ContractUpdateFailed = new Status(40);

    /*
     * The query header is invalid
     */
    Status.InvalidQueryHeader = new Status(41);

    /*
     * Invalid fee submitted
     */
    Status.InvalidFeeSubmitted = new Status(42);

    /*
     * Payer signature is invalid
     */
    Status.InvalidPayerSignature = new Status(43);

    /*
     * The keys were not provided in the request.
     */
    Status.KeyNotProvided = new Status(44);

    /*
     * Expiration time provided in the transaction was invalid.
     */
    Status.InvalidExpirationTime = new Status(45);

    /*
     * WriteAccess Control Keys are not provided for the file
     */
    Status.NoWaclKey = new Status(46);

    /*
     * The contents of file are provided as empty.
     */
    Status.FileContentEmpty = new Status(47);

    /*
     * The crypto transfer credit and debit do not sum equal to 0
     */
    Status.InvalidAccountAmounts = new Status(48);

    /*
     * Transaction body provided is empty
     */
    Status.EmptyTransactionBody = new Status(49);

    /*
     * Invalid transaction body provided
     */
    Status.InvalidTransactionBody = new Status(50);

    /*
     * The type of key (base ed25519 key, KeyList, or ThresholdKey) does not
     * match the type of signature (base ed25519 signature, SignatureList, or
     * ThresholdKeySignature)
     */
    Status.InvalidSignatureTypeMismatchingKey = new Status(51);

    /*
     * The number of key (KeyList, or ThresholdKey) does not match that of
     * signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList
     * has 3 base keys, then the corresponding signatureList should also have 3
     * base signatures.
     */
    Status.InvalidSignatureCountMismatchingKey = new Status(52);

    /*
     * The livehash body is empty
     */
    Status.EmptyLiveHashBody = new Status(53);

    /*
     * The livehash data is missing
     */
    Status.EmptyLiveHash = new Status(54);

    /*
     * The keys for a livehash are missing
     */
    Status.EmptyLiveHashKeys = new Status(55);

    /*
     * The livehash data is not the output of a SHA-384 digest
     */
    Status.InvalidLiveHashSize = new Status(56);

    /*
     * The query body is empty
     */
    Status.EmptyQueryBody = new Status(57);

    /*
     * The crypto livehash query is empty
     */
    Status.EmptyLiveHashQuery = new Status(58);

    /*
     * The livehash is not present
     */
    Status.LiveHashNotFound = new Status(59);

    /*
     * The account id passed has not yet been created.
     */
    Status.AccountIdDoesNotExist = new Status(60);

    /*
     * The livehash already exists for a given account
     */
    Status.LiveHashAlreadyExists = new Status(61);

    /*
     * File WACL keys are invalid
     */
    Status.InvalidFileWacl = new Status(62);

    /*
     * Serialization failure
     */
    Status.SerializationFailed = new Status(63);

    /*
     * The size of the Transaction is greater than transactionMaxBytes
     */
    Status.TransactionOversize = new Status(64);

    /*
     * The Transaction has more than 50 levels
     */
    Status.TransactionTooManyLayers = new Status(65);

    /*
     * Contract is marked as deleted
     */
    Status.ContractDeleted = new Status(66);

    /*
     * The platform node is either disconnected or lagging behind.
     */
    Status.PlatformNotActive = new Status(67);

    /*
     * One public key matches more than one prefixes on the signature map
     */
    Status.KeyPrefixMismatch = new Status(68);

    /*
     * Transaction not created by platform due to large backlog
     */
    Status.PlatformTransactionNotCreated = new Status(69);

    /*
     * Auto renewal period is not a positive number of seconds
     */
    Status.InvalidRenewalPeriod = new Status(70);

    /*
     * The response code when a smart contract id is passed for a
     * crypto API request
     */
    Status.InvalidPayerAccountId = new Status(71);

    /*
     * The account has been marked as deleted
     */
    Status.AccountDeleted = new Status(72);

    /*
     * The file has been marked as deleted
     */
    Status.FileDeleted = new Status(73);

    /*
     * Same accounts repeated in the transfer account list
     */
    Status.AccountRepeatedInAccountAmounts = new Status(74);

    /*
     * Attempting to set negative balance value for crypto account
     */
    Status.SettingNegativeAccountBalance = new Status(75);

    /*
     * When deleting smart contract that has crypto balance either transfer
     * account or transfer smart contract is required
     */
    Status.ObtainerRequired = new Status(76);

    /*
     * When deleting smart contract that has crypto balance you can not use the
     * same contract id as transferContractId as the one being deleted
     */
    Status.ObtainerSameContractId = new Status(77);

    /*
     * TransferAccountId or transferContractId specified for contract delete
     * does not exist
     */
    Status.ObtainerDoesNotExist = new Status(78);

    /*
     * Attempting to modify (update or delete a immutable smart contract, i.e.
     * one created without a admin key)
     */
    Status.ModifyingImmutableContract = new Status(79);

    /*
     * Unexpected exception thrown by file system functions
     */
    Status.FileSystemException = new Status(80);

    /*
     * The duration is not a subset of
     * [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]
     */
    Status.AutorenewDurationNotInRange = new Status(81);

    /*
     * Decoding the smart contract binary to a byte array failed.
     * Check that the input is a valid hex string.
     */
    Status.ErrorDecodingBytestring = new Status(82);

    /*
     * File to create a smart contract was of length zero
     */
    Status.ContractFileEmpty = new Status(83);

    /*
     * Bytecode for smart contract is of length zero
     */
    Status.ContractBytecodeEmpty = new Status(84);

    /*
     * Attempt to set negative initial balance
     */
    Status.InvalidInitialBalance = new Status(85);

    /*
     * [Deprecated]. attempt to set negative receive record threshold
     */
    Status.InvalidReceiveRecordThreshold = new Status(86);

    /*
     * [Deprecated]. attempt to set negative send record threshold
     */
    Status.InvalidSendRecordThreshold = new Status(87);

    /*
     * Special Account Operations should be performed by only Genesis account,
     * return this code if it is not Genesis Account
     */
    Status.AccountIsNotGenesisAccount = new Status(88);

    /*
     * The fee payer account doesn't have permission to submit such Transaction
     */
    Status.PayerAccountUnauthorized = new Status(89);

    /*
     * FreezeTransactionBody is invalid
     */
    Status.InvalidFreezeTransactionBody = new Status(90);

    /*
     * FreezeTransactionBody does not exist
     */
    Status.FreezeTransactionBodyNotFound = new Status(91);

    /*
     * Exceeded the number of accounts (both from and to) allowed for
     * crypto transfer list
     */
    Status.TransferListSizeLimitExceeded = new Status(92);

    /*
     * Smart contract result size greater than specified maxResultSize
     */
    Status.ResultSizeLimitExceeded = new Status(93);

    /*
     * The payer account is not a special account(account 0.0.55)
     */
    Status.NotSpecialAccount = new Status(94);

    /*
     * Negative gas was offered in smart contract call
     */
    Status.ContractNegativeGas = new Status(95);

    /*
     * Negative value / initial balance was specified in a
     * smart contract call / create
     */
    Status.ContractNegativeValue = new Status(96);

    /*
     * Failed to update fee file
     */
    Status.InvalidFeeFile = new Status(97);

    /*
     * Failed to update exchange rate file
     */
    Status.InvalidExchangeRateFile = new Status(98);

    /*
     * Payment tendered for contract local call cannot cover both the
     * fee and the gas
     */
    Status.InsufficientLocalCallGas = new Status(99);

    /*
     * Entities with Entity ID below 1000 are not allowed to be deleted
     */
    Status.EntityNotAllowedToDelete = new Status(100);

    /*
     * Violating one of these rules:
     * 1) treasury account can update all entities below 0.0.1000,
     * 2) account 0.0.50 can update all entities from 0.0.51 - 0.0.80,
     * 3) Network Function Master Account A/c 0.0.50
     *    - Update all Network Function accounts & perform all the Network
     *      Functions listed below,
     * 4) Network Function Accounts:
     *   i) A/c 0.0.55
     *     - Update Address Book files (0.0.101/102),
     *   ii) A/c 0.0.56
     *     - Update Fee schedule (0.0.111),
     *   iii) A/c 0.0.57
     *     - Update Exchange Rate (0.0.112).
     */
    Status.AuthorizationFailed = new Status(101);

    /*
     * Fee Schedule Proto uploaded but not valid (append or update is required)
     */
    Status.FileUploadedProtoInvalid = new Status(102);

    /*
     * Fee Schedule Proto uploaded but not valid (append or update is required)
     */
    Status.FileUploadedProtoNotSavedToDisk = new Status(103);

    /*
     * Fee Schedule Proto File Part uploaded
     */
    Status.FeeScheduleFilePartUploaded = new Status(104);

    /*
     * The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage
     */
    Status.ExchangeRateChangeLimitExceeded = new Status(105);

    /*
     * Contract permanent storage exceeded the currently allowable limit
     */
    Status.MaxContractStorageExceeded = new Status(106);

    /*
     * Transfer Account should not be same as Account to be deleted
     */
    Status.TransferAccountSameAsDeleteAccount = new Status(107);

    Status.TotalLedgerBalanceInvalid = new Status(108);

    /*
     * The expiration date/time on a smart contract may not be reduced
     */
    Status.ExpirationReductionNotAllowed = new Status(110);

    /*
     * Gas exceeded currently allowable gas limit per transaction
     */
    Status.MaxGasLimitExceeded = new Status(111);

    /*
     * File size exceeded the currently allowable limit
     */
    Status.MaxFileSizeExceeded = new Status(112);

    /*
     * The Topic ID specified is not in the system.
     */
    Status.InvalidTopicId = new Status(150);

    /*
     * A provided admin key was invalid.
     */
    Status.InvalidAdminKey = new Status(155);

    /*
     * A provided submit key was invalid.
     */
    Status.InvalidSubmitKey = new Status(156);

    /*
     * An attempted operation was not authorized (ie - a deleteTopic for a topic
     * with no adminKey).
     */
    Status.Unauthorized = new Status(157);

    /*
     * A ConsensusService message is empty.
     */
    Status.InvalidTopicMessage = new Status(158);

    /*
     * The autoRenewAccount specified is not a valid, active account.
     */
    Status.InvalidAutorenewAccount = new Status(159);

    /*
     * An adminKey was not specified on the topic, so there must not be an
     * autoRenewAccount.
     */
    Status.AutorenewAccountNotAllowed = new Status(160);

    /*
     * The topic has expired, was not automatically renewed, and is in a 7 day
     * grace period before the topic will be Deleted unrecoverably. This error
     * response code will not be returned until autoRenew functionality is
     * supported By HAPI.
     */
    Status.TopicExpired = new Status(162);

    /*
     * Chunk number must be from 1 to total (chunks) inclusive.
     */
    Status.InvalidChunkNumber = new Status(163);

    /*
     * For every chunk, the payer account that is part of initialTransactionID
     * must match the Payer Account of this transaction. The entire
     * initialTransactionID should match the transactionID of the first chunk,
     * but this is not checked or enforced by Hedera except when the chunk
     * number is 1.
     */
    Status.InvalidChunkTransactionId = new Status(164);

    /*
     * Account is frozen and cannot transact with the token
     */
    Status.AccountFrozenForToken = new Status(165);

    /*
     * An involved account already has more than <tt>tokens.maxPerAccount</tt>
     * associations with non-deleted tokens.
     */
    Status.TokensPerAccountLimitExceeded = new Status(166);

    /*
     * The token is invalid or does not exist
     */
    Status.InvalidTokenId = new Status(167);

    /*
     * Invalid token decimals
     */
    Status.InvalidTokenDecimals = new Status(168);

    /*
     * Invalid token initial supply
     */
    Status.InvalidTokenInitialSupply = new Status(169);

    /*
     * Treasury Account does not exist or is deleted
     */
    Status.InvalidTreasuryAccountForToken = new Status(170);

    /*
     * Token Symbol is not UTF-8 capitalized alphabetical string
     */
    Status.InvalidTokenSymbol = new Status(171);

    /*
     * Freeze key is not set on token
     */
    Status.TokenHasNoFreezeKey = new Status(172);

    /*
     * Amounts in transfer list are not net zero
     */
    Status.TransfersNotZeroSumForToken = new Status(173);

    /*
     * A token symbol was not provided
     */
    Status.MissingTokenSymbol = new Status(174);

    /*
     * The provided token symbol was too long
     */
    Status.TokenSymbolTooLong = new Status(175);

    /*
     * KYC must be granted and account does not have KYC granted
     */
    Status.AccountKycNotGrantedForToken = new Status(176);

    /*
     * KYC key is not set on token
     */
    Status.TokenHasNoKycKey = new Status(177);

    /*
     * Token balance is not sufficient for the transaction
     */
    Status.InsufficientTokenBalance = new Status(178);

    /*
     * Token transactions cannot be executed on deleted token
     */
    Status.TokenWasDeleted = new Status(179);

    /*
     * Supply key is not set on token
     */
    Status.TokenHasNoSupplyKey = new Status(180);

    /*
     * Wipe key is not set on token
     */
    Status.TokenHasNoWipeKey = new Status(181);

    /*
     * The requested token mint amount would cause an invalid total supply
     */
    Status.InvalidTokenMintAmount = new Status(182);

    /*
     * The requested token burn amount would cause an invalid total supply
     */
    Status.InvalidTokenBurnAmount = new Status(183);

    /*
     * A required token-account relationship is missing
     */
    Status.TokenNotAssociatedToAccount = new Status(184);

    /*
     * The target of a wipe operation was the token treasury account
     */
    Status.CannotWipeTokenTreasuryAccount = new Status(185);

    /*
     * The provided KYC key was invalid.
     */
    Status.InvalidKycKey = new Status(186);

    /*
     * The provided wipe key was invalid.
     */
    Status.InvalidWipeKey = new Status(187);

    /*
     * The provided freeze key was invalid.
     */
    Status.InvalidFreezeKey = new Status(188);

    /*
     * The provided supply key was invalid.
     */
    Status.InvalidSupplyKey = new Status(189);

    /*
     * Token Name is not provided
     */
    Status.MissingTokenName = new Status(190);

    /*
     * Token Name is too long
     */
    Status.TokenNameTooLong = new Status(191);

    /*
     * The provided wipe amount must not be negative, zero or bigger than the
     * token holder balance
     */
    Status.InvalidWipingAmount = new Status(192);

    /*
     * Token does not have Admin key set, thus update/delete transactions cannot
     * be performed
     */
    Status.TokenIsImmutable = new Status(193);

    /*
     * An <tt>associateToken</tt> operation specified a token already associated
     * to the account
     */
    Status.TokenAlreadyAssociatedToAccount = new Status(194);

    /*
     * An attempted operation is invalid until all token balances for the target
     * account are zero
     */
    Status.TransactionRequiresZeroTokenBalances = new Status(195);

    /*
     * An attempted operation is invalid because the account is a treasury
     */
    Status.AccountIsTreasury = new Status(196);

    /*
     * Same TokenIDs present in the token list
     */
    Status.TokenIdRepeatedInTokenList = new Status(197);

    /*
     * Exceeded the number of token transfers (both from and to) allowed for
     * token transfer list
     */
    Status.TokenTransferListSizeLimitExceeded = new Status(198);

    /*
     * TokenTransfersTransactionBody has no TokenTransferList
     */
    Status.EmptyTokenTransferBody = new Status(199);

    /*
     * TokenTransfersTransactionBody has a TokenTransferList with
     * no AccountAmounts
     */
    Status.EmptyTokenTransferAccountAmounts = new Status(200);

    /*
     * The Scheduled entity does not exist; or has now expired, been deleted, or
     * been executed
     */
    Status.InvalidScheduleId = new Status(201);

    /*
     * The Scheduled entity cannot be modified. Admin key not set
     */
    Status.ScheduleIsImmutable = new Status(202);

    /*
     * The provided Scheduled Payer does not exist
     */
    Status.InvalidSchedulePayerId = new Status(203);

    /*
     * The Schedule Create Transaction TransactionID account does not exist
     */
    Status.InvalidScheduleAccountId = new Status(204);

    /*
     * The provided sig map did not contain any new valid signatures from
     * required signers of the scheduled transaction
     */
    Status.NoNewValidSignatures = new Status(205);

    /*
     * The required signers for a scheduled transaction cannot be resolved, for
     * example because they do not exist or have been deleted
     */
    Status.UnresolvableRequiredSigners = new Status(206);

    /*
     * The bytes allegedly representing a transaction to be scheduled could not
     * be parsed
     */
    Status.UnparseableScheduledTransaction = new Status(207);

    /*
     * ScheduleCreate and ScheduleSign transactions cannot be scheduled
     */
    Status.UnschedulableTransaction = new Status(208);

    /*
     * At least one of the signatures in the provided sig map did not represent
     * a valid signature for any required signer
     */
    Status.SomeSignaturesWereInvalid = new Status(209);

    /*
     * The <tt>scheduled</tt> and <tt>nonce</tt> fields in the
     * <tt>TransactionID</tt> may not be set in a top-level transaction
     */
    Status.TransactionIdFieldNotAllowed = new Status(210);

    var long = Long;

    /**
     * wasm optimizations, to do native i64 multiplication and divide
     */
    var wasm = null;

    try {
      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
      ])), {}).exports;
    } catch (e) {
      // no wasm support :(
    }

    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @constructor
     */
    function Long(low, high, unsigned) {

        /**
         * The low 32 bits as a signed value.
         * @type {number}
         */
        this.low = low | 0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         */
        this.high = high | 0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         */
        this.unsigned = !!unsigned;
    }

    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */
    Long.prototype.__isLong__;

    Object.defineProperty(Long.prototype, "__isLong__", { value: true });

    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */
    function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }

    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */
    Long.isLong = isLong;

    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */
    var UINT_CACHE = {};

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = (0 <= value && value < 256)) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = (-128 <= value && value < 128)) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    }

    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromInt = fromInt;

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromNumber(value, unsigned) {
        if (isNaN(value))
            return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0)
                return UZERO;
            if (value >= TWO_PWR_64_DBL)
                return MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -TWO_PWR_63_DBL)
                return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return MAX_VALUE;
        }
        if (value < 0)
            return fromNumber(-value, unsigned).neg();
        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    }

    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromNumber = fromNumber;

    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    }

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromBits = fromBits;

    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */
    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */
    function fromString$1(str, unsigned, radix) {
        if (str.length === 0)
            throw Error('empty string');
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return ZERO;
        if (typeof unsigned === 'number') {
            // For goog.math.long compatibility
            radix = unsigned,
            unsigned = false;
        } else {
            unsigned = !! unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');

        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return fromString$1(str.substring(1), unsigned, radix).neg();
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 8));

        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i),
                value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */
    Long.fromString = fromString$1;

    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromValue(val, unsigned) {
        if (typeof val === 'number')
            return fromNumber(val, unsigned);
        if (typeof val === 'string')
            return fromString$1(val, unsigned);
        // Throws for non-objects, converts non-instanceof Long:
        return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    }

    /**
     * Converts the specified value to a Long using the appropriate from* function for its type.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long}
     */
    Long.fromValue = fromValue;

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     * @const
     * @inner
     */
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

    /**
     * @type {!Long}
     * @inner
     */
    var ZERO = fromInt(0);

    /**
     * Signed zero.
     * @type {!Long}
     */
    Long.ZERO = ZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var UZERO = fromInt(0, true);

    /**
     * Unsigned zero.
     * @type {!Long}
     */
    Long.UZERO = UZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var ONE = fromInt(1);

    /**
     * Signed one.
     * @type {!Long}
     */
    Long.ONE = ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var UONE = fromInt(1, true);

    /**
     * Unsigned one.
     * @type {!Long}
     */
    Long.UONE = UONE;

    /**
     * @type {!Long}
     * @inner
     */
    var NEG_ONE = fromInt(-1);

    /**
     * Signed negative one.
     * @type {!Long}
     */
    Long.NEG_ONE = NEG_ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

    /**
     * Maximum signed value.
     * @type {!Long}
     */
    Long.MAX_VALUE = MAX_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

    /**
     * Maximum unsigned value.
     * @type {!Long}
     */
    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MIN_VALUE = fromBits(0, 0x80000000|0, false);

    /**
     * Minimum signed value.
     * @type {!Long}
     */
    Long.MIN_VALUE = MIN_VALUE;

    /**
     * @alias Long.prototype
     * @inner
     */
    var LongPrototype = Long.prototype;

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */
    LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */
    LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */
    LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        if (this.isZero())
            return '0';
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.eq(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix),
                    div = this.div(radixLong),
                    rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else
                return '-' + this.neg().toString(radix);
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
            rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower),
                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
                return digits + result;
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };

    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */
    LongPrototype.getHighBits = function getHighBits() {
        return this.high;
    };

    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };

    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */
    LongPrototype.getLowBits = function getLowBits() {
        return this.low;
    };

    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };

    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) // Unsigned Longs are never negative
            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) != 0)
                break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };

    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */
    LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };

    /**
     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
     * @returns {boolean}
     */
    LongPrototype.eqz = LongPrototype.isZero;

    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */
    LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */
    LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };

    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */
    LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };

    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */
    LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };

    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.equals = function equals(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };

    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.eq = LongPrototype.equals;

    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(/* validates */ other);
    };

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.neq = LongPrototype.notEquals;

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ne = LongPrototype.notEquals;

    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThan = function lessThan(other) {
        return this.comp(/* validates */ other) < 0;
    };

    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lt = LongPrototype.lessThan;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(/* validates */ other) <= 0;
    };

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lte = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.le = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(/* validates */ other) > 0;
    };

    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gt = LongPrototype.greaterThan;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(/* validates */ other) >= 0;
    };

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ge = LongPrototype.greaterThanOrEqual;

    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.compare = function compare(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.eq(other))
            return 0;
        var thisNeg = this.isNegative(),
            otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
    };

    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.comp = LongPrototype.compare;

    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */
    LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
            return MIN_VALUE;
        return this.not().add(ONE);
    };

    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */
    LongPrototype.neg = LongPrototype.negate;

    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */
    LongPrototype.add = function add(addend) {
        if (!isLong(addend))
            addend = fromValue(addend);

        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
            subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };

    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.sub = LongPrototype.subtract;

    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
            return ZERO;
        if (!isLong(multiplier))
            multiplier = fromValue(multiplier);

        // use wasm support if present
        if (wasm) {
            var low = wasm.mul(this.low,
                               this.high,
                               multiplier.low,
                               multiplier.high);
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (multiplier.isZero())
            return ZERO;
        if (this.eq(MIN_VALUE))
            return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
            return this.isOdd() ? MIN_VALUE : ZERO;

        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.neg().mul(multiplier.neg());
            else
                return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();

        // If both longs are small, use float multiplication
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.mul = LongPrototype.multiply;

    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);
        if (divisor.isZero())
            throw Error('division by zero');

        // use wasm support if present
        if (wasm) {
            // guard against signed division overflow: the largest
            // negative number / -1 would be 1 larger than the largest
            // positive number, due to two's complement.
            if (!this.unsigned &&
                this.high === -0x80000000 &&
                divisor.low === -1 && divisor.high === -1) {
                // be consistent with non-wasm code path
                return this;
            }
            var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (this.isZero())
            return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(MIN_VALUE)) {
                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(MIN_VALUE))
                    return ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) {
                        return divisor.isNegative() ? ONE : NEG_ONE;
                    } else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(MIN_VALUE))
                return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative())
                    return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
                return this.div(divisor.neg()).neg();
            res = ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned)
                divisor = divisor.toUnsigned();
            if (divisor.gt(this))
                return UZERO;
            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                return UONE;
            res = UZERO;
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while (rem.gte(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
                approxRes = fromNumber(approx),
                approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
                approx -= delta;
                approxRes = fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = ONE;

            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.div = LongPrototype.divide;

    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);

        // use wasm support if present
        if (wasm) {
            var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        return this.sub(this.div(divisor).mul(divisor));
    };

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.mod = LongPrototype.modulo;

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.rem = LongPrototype.modulo;

    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */
    LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.and = function and(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.or = function or(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.xor = function xor(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return fromBits(0, this.low << (numBits - 32), this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shl = LongPrototype.shiftLeft;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr = LongPrototype.shiftRight;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits === 32)
                return fromBits(high, 0, this.unsigned);
            else
                return fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */
    LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
            return this;
        return fromBits(this.low, this.high, false);
    };

    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */
    LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
            return this;
        return fromBits(this.low, this.high, true);
    };

    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */
    LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };

    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */
    LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high,
            lo = this.low;
        return [
            lo        & 0xff,
            lo >>>  8 & 0xff,
            lo >>> 16 & 0xff,
            lo >>> 24       ,
            hi        & 0xff,
            hi >>>  8 & 0xff,
            hi >>> 16 & 0xff,
            hi >>> 24
        ];
    };

    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */
    LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high,
            lo = this.low;
        return [
            hi >>> 24       ,
            hi >>> 16 & 0xff,
            hi >>>  8 & 0xff,
            hi        & 0xff,
            lo >>> 24       ,
            lo >>> 16 & 0xff,
            lo >>>  8 & 0xff,
            lo        & 0xff
        ];
    };

    /**
     * Creates a Long from its byte representation.
     * @param {!Array.<number>} bytes Byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
    };

    /**
     * Creates a Long from its little endian byte representation.
     * @param {!Array.<number>} bytes Little endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long(
            bytes[0]       |
            bytes[1] <<  8 |
            bytes[2] << 16 |
            bytes[3] << 24,
            bytes[4]       |
            bytes[5] <<  8 |
            bytes[6] << 16 |
            bytes[7] << 24,
            unsigned
        );
    };

    /**
     * Creates a Long from its big endian byte representation.
     * @param {!Array.<number>} bytes Big endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long(
            bytes[4] << 24 |
            bytes[5] << 16 |
            bytes[6] <<  8 |
            bytes[7],
            bytes[0] << 24 |
            bytes[1] << 16 |
            bytes[2] <<  8 |
            bytes[3],
            unsigned
        );
    };

    /**
     * @type {string[]}
     */
    const byteToHex = [];

    for (let n = 0; n <= 0xff; n += 1) {
        byteToHex.push(n.toString(16).padStart(2, "0"));
    }

    /**
     * @param {Uint8Array} data
     * @returns {string}
     */
    function encode$1(data) {
        let string = "";

        for (const byte of data) {
            string += byteToHex[byte];
        }

        return string;
    }

    /**
     * @param {string} text
     * @returns {Uint8Array}
     */
    function decode$1(text) {
        const str = text.startsWith("0x") ? text.substring(2) : text;
        const result = str.match(/.{1,2}/gu);

        return new Uint8Array(
            (result == null ? [] : result).map((byte) => parseInt(byte, 16))
        );
    }

    /**
     * @typedef {object} IEntityId
     * @property {number | Long} num
     * @property {(number | Long)=} shard
     * @property {(number | Long)=} realm
     */

    /**
     * @param {number | Long | IEntityId} props
     * @param {(number | null | Long)=} realm
     * @param {(number | null | Long)=} num
     * @returns {[Long, Long, Long]}
     */
    function constructor(props, realm, num) {
        let shard_ = long.ZERO;
        let realm_ = long.ZERO;
        let num_ = long.ZERO;

        if (typeof props === "number" || props instanceof long) {
            if (realm == null) {
                num_ = long.fromValue(props);
            } else {
                shard_ = long.fromValue(props);
                realm_ = long.fromValue(realm);
                num_ = num != null ? long.fromValue(num) : long.ZERO;
            }
        } else {
            shard_ = long.fromValue(props.shard != null ? props.shard : 0);
            realm_ = long.fromValue(props.realm != null ? props.realm : 0);
            num_ = long.fromValue(props.num != null ? props.num : 0);
        }

        if (shard_.isNegative() || realm_.isNegative() || num_.isNegative()) {
            throw new Error("negative numbers are not allowed in IDs");
        }

        return [shard_, realm_, num_];
    }

    /**
     * @param {string} text
     * @returns {[Long, Long, Long]}
     */
    function fromString(text) {
        const strings = text.split(".");

        for (const string of strings) {
            if (string === "") {
                throw new Error("invalid format for entity ID");
            }
        }

        const components = strings.map(Number);

        for (const component of components) {
            if (Number.isNaN(component)) {
                throw new Error("invalid format for entity ID");
            }
        }

        let shard = long.ZERO;
        let realm = long.ZERO;
        let num;

        if (components.length === 1) {
            num = long.fromNumber(components[0]);
        } else if (components.length === 3) {
            shard = long.fromNumber(components[0]);
            realm = long.fromNumber(components[1]);
            num = long.fromNumber(components[2]);
        } else {
            throw new Error("invalid format for entity ID");
        }

        return [shard, realm, num];
    }

    /**
     * @param {string} address
     * @returns {[Long, Long, Long]}
     */
    function fromSolidityAddress(address) {
        const addr = address.startsWith("0x")
            ? decode$1(address.slice(2))
            : decode$1(address);

        if (addr.length !== 20) {
            throw new Error(`Invalid hex encoded solidity address length:
                expected length 40, got length ${address.length}`);
        }

        const shard = long.fromBytesBE(Array.from(addr.slice(0, 4)));
        const realm = long.fromBytesBE(Array.from(addr.slice(4, 12)));
        const num = long.fromBytesBE(Array.from(addr.slice(12, 20)));

        return [shard, realm, num];
    }

    var aspromise = asPromise;

    /**
     * Callback as used by {@link util.asPromise}.
     * @typedef asPromiseCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {...*} params Additional arguments
     * @returns {undefined}
     */

    /**
     * Returns a promise from a node-style callback function.
     * @memberof util
     * @param {asPromiseCallback} fn Function to call
     * @param {*} ctx Function context
     * @param {...*} params Function arguments
     * @returns {Promise<*>} Promisified function
     */
    function asPromise(fn, ctx/*, varargs */) {
        var params  = new Array(arguments.length - 1),
            offset  = 0,
            index   = 2,
            pending = true;
        while (index < arguments.length)
            params[offset++] = arguments[index++];
        return new Promise(function executor(resolve, reject) {
            params[offset] = function callback(err/*, varargs */) {
                if (pending) {
                    pending = false;
                    if (err)
                        reject(err);
                    else {
                        var params = new Array(arguments.length - 1),
                            offset = 0;
                        while (offset < params.length)
                            params[offset++] = arguments[offset];
                        resolve.apply(null, params);
                    }
                }
            };
            try {
                fn.apply(ctx || null, params);
            } catch (err) {
                if (pending) {
                    pending = false;
                    reject(err);
                }
            }
        });
    }

    var base64_1 = createCommonjsModule(function (module, exports) {

    /**
     * A minimal base64 implementation for number arrays.
     * @memberof util
     * @namespace
     */
    var base64 = exports;

    /**
     * Calculates the byte length of a base64 encoded string.
     * @param {string} string Base64 encoded string
     * @returns {number} Byte length
     */
    base64.length = function length(string) {
        var p = string.length;
        if (!p)
            return 0;
        var n = 0;
        while (--p % 4 > 1 && string.charAt(p) === "=")
            ++n;
        return Math.ceil(string.length * 3) / 4 - n;
    };

    // Base64 encoding table
    var b64 = new Array(64);

    // Base64 decoding table
    var s64 = new Array(123);

    // 65..90, 97..122, 48..57, 43, 47
    for (var i = 0; i < 64;)
        s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

    /**
     * Encodes a buffer to a base64 encoded string.
     * @param {Uint8Array} buffer Source buffer
     * @param {number} start Source start
     * @param {number} end Source end
     * @returns {string} Base64 encoded string
     */
    base64.encode = function encode(buffer, start, end) {
        var parts = null,
            chunk = [];
        var i = 0, // output index
            j = 0, // goto index
            t;     // temporary
        while (start < end) {
            var b = buffer[start++];
            switch (j) {
                case 0:
                    chunk[i++] = b64[b >> 2];
                    t = (b & 3) << 4;
                    j = 1;
                    break;
                case 1:
                    chunk[i++] = b64[t | b >> 4];
                    t = (b & 15) << 2;
                    j = 2;
                    break;
                case 2:
                    chunk[i++] = b64[t | b >> 6];
                    chunk[i++] = b64[b & 63];
                    j = 0;
                    break;
            }
            if (i > 8191) {
                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                i = 0;
            }
        }
        if (j) {
            chunk[i++] = b64[t];
            chunk[i++] = 61;
            if (j === 1)
                chunk[i++] = 61;
        }
        if (parts) {
            if (i)
                parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
            return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i));
    };

    var invalidEncoding = "invalid encoding";

    /**
     * Decodes a base64 encoded string to a buffer.
     * @param {string} string Source string
     * @param {Uint8Array} buffer Destination buffer
     * @param {number} offset Destination offset
     * @returns {number} Number of bytes written
     * @throws {Error} If encoding is invalid
     */
    base64.decode = function decode(string, buffer, offset) {
        var start = offset;
        var j = 0, // goto index
            t;     // temporary
        for (var i = 0; i < string.length;) {
            var c = string.charCodeAt(i++);
            if (c === 61 && j > 1)
                break;
            if ((c = s64[c]) === undefined)
                throw Error(invalidEncoding);
            switch (j) {
                case 0:
                    t = c;
                    j = 1;
                    break;
                case 1:
                    buffer[offset++] = t << 2 | (c & 48) >> 4;
                    t = c;
                    j = 2;
                    break;
                case 2:
                    buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                    t = c;
                    j = 3;
                    break;
                case 3:
                    buffer[offset++] = (t & 3) << 6 | c;
                    j = 0;
                    break;
            }
        }
        if (j === 1)
            throw Error(invalidEncoding);
        return offset - start;
    };

    /**
     * Tests if the specified string appears to be base64 encoded.
     * @param {string} string String to test
     * @returns {boolean} `true` if probably base64 encoded, otherwise false
     */
    base64.test = function test(string) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
    });

    var eventemitter = EventEmitter;

    /**
     * Constructs a new event emitter instance.
     * @classdesc A minimal event emitter.
     * @memberof util
     * @constructor
     */
    function EventEmitter() {

        /**
         * Registered listeners.
         * @type {Object.<string,*>}
         * @private
         */
        this._listeners = {};
    }

    /**
     * Registers an event listener.
     * @param {string} evt Event name
     * @param {function} fn Listener
     * @param {*} [ctx] Listener context
     * @returns {util.EventEmitter} `this`
     */
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
            fn  : fn,
            ctx : ctx || this
        });
        return this;
    };

    /**
     * Removes an event listener or any matching listeners if arguments are omitted.
     * @param {string} [evt] Event name. Removes all listeners if omitted.
     * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
     * @returns {util.EventEmitter} `this`
     */
    EventEmitter.prototype.off = function off(evt, fn) {
        if (evt === undefined)
            this._listeners = {};
        else {
            if (fn === undefined)
                this._listeners[evt] = [];
            else {
                var listeners = this._listeners[evt];
                for (var i = 0; i < listeners.length;)
                    if (listeners[i].fn === fn)
                        listeners.splice(i, 1);
                    else
                        ++i;
            }
        }
        return this;
    };

    /**
     * Emits an event by calling its listeners with the specified arguments.
     * @param {string} evt Event name
     * @param {...*} args Arguments
     * @returns {util.EventEmitter} `this`
     */
    EventEmitter.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];
        if (listeners) {
            var args = [],
                i = 1;
            for (; i < arguments.length;)
                args.push(arguments[i++]);
            for (i = 0; i < listeners.length;)
                listeners[i].fn.apply(listeners[i++].ctx, args);
        }
        return this;
    };

    var float = factory(factory);

    /**
     * Reads / writes floats / doubles from / to buffers.
     * @name util.float
     * @namespace
     */

    /**
     * Writes a 32 bit float to a buffer using little endian byte order.
     * @name util.float.writeFloatLE
     * @function
     * @param {number} val Value to write
     * @param {Uint8Array} buf Target buffer
     * @param {number} pos Target buffer offset
     * @returns {undefined}
     */

    /**
     * Writes a 32 bit float to a buffer using big endian byte order.
     * @name util.float.writeFloatBE
     * @function
     * @param {number} val Value to write
     * @param {Uint8Array} buf Target buffer
     * @param {number} pos Target buffer offset
     * @returns {undefined}
     */

    /**
     * Reads a 32 bit float from a buffer using little endian byte order.
     * @name util.float.readFloatLE
     * @function
     * @param {Uint8Array} buf Source buffer
     * @param {number} pos Source buffer offset
     * @returns {number} Value read
     */

    /**
     * Reads a 32 bit float from a buffer using big endian byte order.
     * @name util.float.readFloatBE
     * @function
     * @param {Uint8Array} buf Source buffer
     * @param {number} pos Source buffer offset
     * @returns {number} Value read
     */

    /**
     * Writes a 64 bit double to a buffer using little endian byte order.
     * @name util.float.writeDoubleLE
     * @function
     * @param {number} val Value to write
     * @param {Uint8Array} buf Target buffer
     * @param {number} pos Target buffer offset
     * @returns {undefined}
     */

    /**
     * Writes a 64 bit double to a buffer using big endian byte order.
     * @name util.float.writeDoubleBE
     * @function
     * @param {number} val Value to write
     * @param {Uint8Array} buf Target buffer
     * @param {number} pos Target buffer offset
     * @returns {undefined}
     */

    /**
     * Reads a 64 bit double from a buffer using little endian byte order.
     * @name util.float.readDoubleLE
     * @function
     * @param {Uint8Array} buf Source buffer
     * @param {number} pos Source buffer offset
     * @returns {number} Value read
     */

    /**
     * Reads a 64 bit double from a buffer using big endian byte order.
     * @name util.float.readDoubleBE
     * @function
     * @param {Uint8Array} buf Source buffer
     * @param {number} pos Source buffer offset
     * @returns {number} Value read
     */

    // Factory function for the purpose of node-based testing in modified global environments
    function factory(exports) {

        // float: typed array
        if (typeof Float32Array !== "undefined") (function() {

            var f32 = new Float32Array([ -0 ]),
                f8b = new Uint8Array(f32.buffer),
                le  = f8b[3] === 128;

            function writeFloat_f32_cpy(val, buf, pos) {
                f32[0] = val;
                buf[pos    ] = f8b[0];
                buf[pos + 1] = f8b[1];
                buf[pos + 2] = f8b[2];
                buf[pos + 3] = f8b[3];
            }

            function writeFloat_f32_rev(val, buf, pos) {
                f32[0] = val;
                buf[pos    ] = f8b[3];
                buf[pos + 1] = f8b[2];
                buf[pos + 2] = f8b[1];
                buf[pos + 3] = f8b[0];
            }

            /* istanbul ignore next */
            exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
            /* istanbul ignore next */
            exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

            function readFloat_f32_cpy(buf, pos) {
                f8b[0] = buf[pos    ];
                f8b[1] = buf[pos + 1];
                f8b[2] = buf[pos + 2];
                f8b[3] = buf[pos + 3];
                return f32[0];
            }

            function readFloat_f32_rev(buf, pos) {
                f8b[3] = buf[pos    ];
                f8b[2] = buf[pos + 1];
                f8b[1] = buf[pos + 2];
                f8b[0] = buf[pos + 3];
                return f32[0];
            }

            /* istanbul ignore next */
            exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
            /* istanbul ignore next */
            exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

        // float: ieee754
        })(); else (function() {

            function writeFloat_ieee754(writeUint, val, buf, pos) {
                var sign = val < 0 ? 1 : 0;
                if (sign)
                    val = -val;
                if (val === 0)
                    writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
                else if (isNaN(val))
                    writeUint(2143289344, buf, pos);
                else if (val > 3.4028234663852886e+38) // +-Infinity
                    writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
                else if (val < 1.1754943508222875e-38) // denormal
                    writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
                else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2),
                        mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                    writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
                }
            }

            exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
            exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

            function readFloat_ieee754(readUint, buf, pos) {
                var uint = readUint(buf, pos),
                    sign = (uint >> 31) * 2 + 1,
                    exponent = uint >>> 23 & 255,
                    mantissa = uint & 8388607;
                return exponent === 255
                    ? mantissa
                    ? NaN
                    : sign * Infinity
                    : exponent === 0 // denormal
                    ? sign * 1.401298464324817e-45 * mantissa
                    : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
            }

            exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
            exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

        })();

        // double: typed array
        if (typeof Float64Array !== "undefined") (function() {

            var f64 = new Float64Array([-0]),
                f8b = new Uint8Array(f64.buffer),
                le  = f8b[7] === 128;

            function writeDouble_f64_cpy(val, buf, pos) {
                f64[0] = val;
                buf[pos    ] = f8b[0];
                buf[pos + 1] = f8b[1];
                buf[pos + 2] = f8b[2];
                buf[pos + 3] = f8b[3];
                buf[pos + 4] = f8b[4];
                buf[pos + 5] = f8b[5];
                buf[pos + 6] = f8b[6];
                buf[pos + 7] = f8b[7];
            }

            function writeDouble_f64_rev(val, buf, pos) {
                f64[0] = val;
                buf[pos    ] = f8b[7];
                buf[pos + 1] = f8b[6];
                buf[pos + 2] = f8b[5];
                buf[pos + 3] = f8b[4];
                buf[pos + 4] = f8b[3];
                buf[pos + 5] = f8b[2];
                buf[pos + 6] = f8b[1];
                buf[pos + 7] = f8b[0];
            }

            /* istanbul ignore next */
            exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
            /* istanbul ignore next */
            exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

            function readDouble_f64_cpy(buf, pos) {
                f8b[0] = buf[pos    ];
                f8b[1] = buf[pos + 1];
                f8b[2] = buf[pos + 2];
                f8b[3] = buf[pos + 3];
                f8b[4] = buf[pos + 4];
                f8b[5] = buf[pos + 5];
                f8b[6] = buf[pos + 6];
                f8b[7] = buf[pos + 7];
                return f64[0];
            }

            function readDouble_f64_rev(buf, pos) {
                f8b[7] = buf[pos    ];
                f8b[6] = buf[pos + 1];
                f8b[5] = buf[pos + 2];
                f8b[4] = buf[pos + 3];
                f8b[3] = buf[pos + 4];
                f8b[2] = buf[pos + 5];
                f8b[1] = buf[pos + 6];
                f8b[0] = buf[pos + 7];
                return f64[0];
            }

            /* istanbul ignore next */
            exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
            /* istanbul ignore next */
            exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

        // double: ieee754
        })(); else (function() {

            function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
                var sign = val < 0 ? 1 : 0;
                if (sign)
                    val = -val;
                if (val === 0) {
                    writeUint(0, buf, pos + off0);
                    writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
                } else if (isNaN(val)) {
                    writeUint(0, buf, pos + off0);
                    writeUint(2146959360, buf, pos + off1);
                } else if (val > 1.7976931348623157e+308) { // +-Infinity
                    writeUint(0, buf, pos + off0);
                    writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
                } else {
                    var mantissa;
                    if (val < 2.2250738585072014e-308) { // denormal
                        mantissa = val / 5e-324;
                        writeUint(mantissa >>> 0, buf, pos + off0);
                        writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                    } else {
                        var exponent = Math.floor(Math.log(val) / Math.LN2);
                        if (exponent === 1024)
                            exponent = 1023;
                        mantissa = val * Math.pow(2, -exponent);
                        writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                        writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                    }
                }
            }

            exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
            exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

            function readDouble_ieee754(readUint, off0, off1, buf, pos) {
                var lo = readUint(buf, pos + off0),
                    hi = readUint(buf, pos + off1);
                var sign = (hi >> 31) * 2 + 1,
                    exponent = hi >>> 20 & 2047,
                    mantissa = 4294967296 * (hi & 1048575) + lo;
                return exponent === 2047
                    ? mantissa
                    ? NaN
                    : sign * Infinity
                    : exponent === 0 // denormal
                    ? sign * 5e-324 * mantissa
                    : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
            }

            exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
            exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

        })();

        return exports;
    }

    // uint helpers

    function writeUintLE(val, buf, pos) {
        buf[pos    ] =  val        & 255;
        buf[pos + 1] =  val >>> 8  & 255;
        buf[pos + 2] =  val >>> 16 & 255;
        buf[pos + 3] =  val >>> 24;
    }

    function writeUintBE(val, buf, pos) {
        buf[pos    ] =  val >>> 24;
        buf[pos + 1] =  val >>> 16 & 255;
        buf[pos + 2] =  val >>> 8  & 255;
        buf[pos + 3] =  val        & 255;
    }

    function readUintLE(buf, pos) {
        return (buf[pos    ]
              | buf[pos + 1] << 8
              | buf[pos + 2] << 16
              | buf[pos + 3] << 24) >>> 0;
    }

    function readUintBE(buf, pos) {
        return (buf[pos    ] << 24
              | buf[pos + 1] << 16
              | buf[pos + 2] << 8
              | buf[pos + 3]) >>> 0;
    }

    var utf8_1 = createCommonjsModule(function (module, exports) {

    /**
     * A minimal UTF8 implementation for number arrays.
     * @memberof util
     * @namespace
     */
    var utf8 = exports;

    /**
     * Calculates the UTF8 byte length of a string.
     * @param {string} string String
     * @returns {number} Byte length
     */
    utf8.length = function utf8_length(string) {
        var len = 0,
            c = 0;
        for (var i = 0; i < string.length; ++i) {
            c = string.charCodeAt(i);
            if (c < 128)
                len += 1;
            else if (c < 2048)
                len += 2;
            else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
                ++i;
                len += 4;
            } else
                len += 3;
        }
        return len;
    };

    /**
     * Reads UTF8 bytes as a string.
     * @param {Uint8Array} buffer Source buffer
     * @param {number} start Source start
     * @param {number} end Source end
     * @returns {string} String read
     */
    utf8.read = function utf8_read(buffer, start, end) {
        var len = end - start;
        if (len < 1)
            return "";
        var parts = null,
            chunk = [],
            i = 0, // char offset
            t;     // temporary
        while (start < end) {
            t = buffer[start++];
            if (t < 128)
                chunk[i++] = t;
            else if (t > 191 && t < 224)
                chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
            else if (t > 239 && t < 365) {
                t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
                chunk[i++] = 0xD800 + (t >> 10);
                chunk[i++] = 0xDC00 + (t & 1023);
            } else
                chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
            if (i > 8191) {
                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                i = 0;
            }
        }
        if (parts) {
            if (i)
                parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
            return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i));
    };

    /**
     * Writes a string as UTF8 bytes.
     * @param {string} string Source string
     * @param {Uint8Array} buffer Destination buffer
     * @param {number} offset Destination offset
     * @returns {number} Bytes written
     */
    utf8.write = function utf8_write(string, buffer, offset) {
        var start = offset,
            c1, // character 1
            c2; // character 2
        for (var i = 0; i < string.length; ++i) {
            c1 = string.charCodeAt(i);
            if (c1 < 128) {
                buffer[offset++] = c1;
            } else if (c1 < 2048) {
                buffer[offset++] = c1 >> 6       | 192;
                buffer[offset++] = c1       & 63 | 128;
            } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
                c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
                ++i;
                buffer[offset++] = c1 >> 18      | 240;
                buffer[offset++] = c1 >> 12 & 63 | 128;
                buffer[offset++] = c1 >> 6  & 63 | 128;
                buffer[offset++] = c1       & 63 | 128;
            } else {
                buffer[offset++] = c1 >> 12      | 224;
                buffer[offset++] = c1 >> 6  & 63 | 128;
                buffer[offset++] = c1       & 63 | 128;
            }
        }
        return offset - start;
    };
    });

    var pool_1 = pool;

    /**
     * An allocator as used by {@link util.pool}.
     * @typedef PoolAllocator
     * @type {function}
     * @param {number} size Buffer size
     * @returns {Uint8Array} Buffer
     */

    /**
     * A slicer as used by {@link util.pool}.
     * @typedef PoolSlicer
     * @type {function}
     * @param {number} start Start offset
     * @param {number} end End offset
     * @returns {Uint8Array} Buffer slice
     * @this {Uint8Array}
     */

    /**
     * A general purpose buffer pool.
     * @memberof util
     * @function
     * @param {PoolAllocator} alloc Allocator
     * @param {PoolSlicer} slice Slicer
     * @param {number} [size=8192] Slab size
     * @returns {PoolAllocator} Pooled allocator
     */
    function pool(alloc, slice, size) {
        var SIZE   = size || 8192;
        var MAX    = SIZE >>> 1;
        var slab   = null;
        var offset = SIZE;
        return function pool_alloc(size) {
            if (size < 1 || size > MAX)
                return alloc(size);
            if (offset + size > SIZE) {
                slab = alloc(SIZE);
                offset = 0;
            }
            var buf = slice.call(slab, offset, offset += size);
            if (offset & 7) // align to 32 bit
                offset = (offset | 7) + 1;
            return buf;
        };
    }

    var longbits = LongBits$2;



    /**
     * Constructs new long bits.
     * @classdesc Helper class for working with the low and high bits of a 64 bit value.
     * @memberof util
     * @constructor
     * @param {number} lo Low 32 bits, unsigned
     * @param {number} hi High 32 bits, unsigned
     */
    function LongBits$2(lo, hi) {

        // note that the casts below are theoretically unnecessary as of today, but older statically
        // generated converter code might still call the ctor with signed 32bits. kept for compat.

        /**
         * Low bits.
         * @type {number}
         */
        this.lo = lo >>> 0;

        /**
         * High bits.
         * @type {number}
         */
        this.hi = hi >>> 0;
    }

    /**
     * Zero bits.
     * @memberof util.LongBits
     * @type {util.LongBits}
     */
    var zero = LongBits$2.zero = new LongBits$2(0, 0);

    zero.toNumber = function() { return 0; };
    zero.zzEncode = zero.zzDecode = function() { return this; };
    zero.length = function() { return 1; };

    /**
     * Zero hash.
     * @memberof util.LongBits
     * @type {string}
     */
    var zeroHash = LongBits$2.zeroHash = "\0\0\0\0\0\0\0\0";

    /**
     * Constructs new long bits from the specified number.
     * @param {number} value Value
     * @returns {util.LongBits} Instance
     */
    LongBits$2.fromNumber = function fromNumber(value) {
        if (value === 0)
            return zero;
        var sign = value < 0;
        if (sign)
            value = -value;
        var lo = value >>> 0,
            hi = (value - lo) / 4294967296 >>> 0;
        if (sign) {
            hi = ~hi >>> 0;
            lo = ~lo >>> 0;
            if (++lo > 4294967295) {
                lo = 0;
                if (++hi > 4294967295)
                    hi = 0;
            }
        }
        return new LongBits$2(lo, hi);
    };

    /**
     * Constructs new long bits from a number, long or string.
     * @param {Long|number|string} value Value
     * @returns {util.LongBits} Instance
     */
    LongBits$2.from = function from(value) {
        if (typeof value === "number")
            return LongBits$2.fromNumber(value);
        if (minimal$1.isString(value)) {
            /* istanbul ignore else */
            if (minimal$1.Long)
                value = minimal$1.Long.fromString(value);
            else
                return LongBits$2.fromNumber(parseInt(value, 10));
        }
        return value.low || value.high ? new LongBits$2(value.low >>> 0, value.high >>> 0) : zero;
    };

    /**
     * Converts this long bits to a possibly unsafe JavaScript number.
     * @param {boolean} [unsigned=false] Whether unsigned or not
     * @returns {number} Possibly unsafe number
     */
    LongBits$2.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
            var lo = ~this.lo + 1 >>> 0,
                hi = ~this.hi     >>> 0;
            if (!lo)
                hi = hi + 1 >>> 0;
            return -(lo + hi * 4294967296);
        }
        return this.lo + this.hi * 4294967296;
    };

    /**
     * Converts this long bits to a long.
     * @param {boolean} [unsigned=false] Whether unsigned or not
     * @returns {Long} Long
     */
    LongBits$2.prototype.toLong = function toLong(unsigned) {
        return minimal$1.Long
            ? new minimal$1.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
            /* istanbul ignore next */
            : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };

    var charCodeAt = String.prototype.charCodeAt;

    /**
     * Constructs new long bits from the specified 8 characters long hash.
     * @param {string} hash Hash
     * @returns {util.LongBits} Bits
     */
    LongBits$2.fromHash = function fromHash(hash) {
        if (hash === zeroHash)
            return zero;
        return new LongBits$2(
            ( charCodeAt.call(hash, 0)
            | charCodeAt.call(hash, 1) << 8
            | charCodeAt.call(hash, 2) << 16
            | charCodeAt.call(hash, 3) << 24) >>> 0
        ,
            ( charCodeAt.call(hash, 4)
            | charCodeAt.call(hash, 5) << 8
            | charCodeAt.call(hash, 6) << 16
            | charCodeAt.call(hash, 7) << 24) >>> 0
        );
    };

    /**
     * Converts this long bits to a 8 characters long hash.
     * @returns {string} Hash
     */
    LongBits$2.prototype.toHash = function toHash() {
        return String.fromCharCode(
            this.lo        & 255,
            this.lo >>> 8  & 255,
            this.lo >>> 16 & 255,
            this.lo >>> 24      ,
            this.hi        & 255,
            this.hi >>> 8  & 255,
            this.hi >>> 16 & 255,
            this.hi >>> 24
        );
    };

    /**
     * Zig-zag encodes this long bits.
     * @returns {util.LongBits} `this`
     */
    LongBits$2.prototype.zzEncode = function zzEncode() {
        var mask =   this.hi >> 31;
        this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
        return this;
    };

    /**
     * Zig-zag decodes this long bits.
     * @returns {util.LongBits} `this`
     */
    LongBits$2.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
        return this;
    };

    /**
     * Calculates the length of this longbits when encoded as a varint.
     * @returns {number} Length
     */
    LongBits$2.prototype.length = function length() {
        var part0 =  this.lo,
            part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
            part2 =  this.hi >>> 24;
        return part2 === 0
             ? part1 === 0
               ? part0 < 16384
                 ? part0 < 128 ? 1 : 2
                 : part0 < 2097152 ? 3 : 4
               : part1 < 16384
                 ? part1 < 128 ? 5 : 6
                 : part1 < 2097152 ? 7 : 8
             : part2 < 128 ? 9 : 10;
    };

    var minimal$1 = createCommonjsModule(function (module, exports) {
    var util = exports;

    // used to return a Promise where callback is omitted
    util.asPromise = aspromise;

    // converts to / from base64 encoded strings
    util.base64 = base64_1;

    // base class of rpc.Service
    util.EventEmitter = eventemitter;

    // float handling accross browsers
    util.float = float;

    // requires modules optionally and hides the call from bundlers
    util.inquire = function inquire(module) {
        // all calls to inquire will fail
        return null;
    };
        
    // converts to / from utf8 encoded strings
    util.utf8 = utf8_1;

    // provides a node-like buffer pool in the browser
    util.pool = pool_1;

    // utility to work with the low and high bits of a 64 bit value
    util.LongBits = longbits;

    /**
     * Whether running within node or not.
     * @memberof util
     * @type {boolean}
     */
    util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
                       && commonjsGlobal
                       && commonjsGlobal.process
                       && commonjsGlobal.process.versions
                       && commonjsGlobal.process.versions.node);

    /**
     * Global object reference.
     * @memberof util
     * @type {Object}
     */
    util.global = util.isNode && commonjsGlobal
               || typeof window !== "undefined" && window
               || typeof self   !== "undefined" && self
               || commonjsGlobal; // eslint-disable-line no-invalid-this

    /**
     * An immuable empty array.
     * @memberof util
     * @type {Array.<*>}
     * @const
     */
    util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

    /**
     * An immutable empty object.
     * @type {Object}
     * @const
     */
    util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

    /**
     * Tests if the specified value is an integer.
     * @function
     * @param {*} value Value to test
     * @returns {boolean} `true` if the value is an integer
     */
    util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };

    /**
     * Tests if the specified value is a string.
     * @param {*} value Value to test
     * @returns {boolean} `true` if the value is a string
     */
    util.isString = function isString(value) {
        return typeof value === "string" || value instanceof String;
    };

    /**
     * Tests if the specified value is a non-null object.
     * @param {*} value Value to test
     * @returns {boolean} `true` if the value is a non-null object
     */
    util.isObject = function isObject(value) {
        return value && typeof value === "object";
    };

    /**
     * Checks if a property on a message is considered to be present.
     * This is an alias of {@link util.isSet}.
     * @function
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isset =

    /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
            return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
    };

    /**
     * Any compatible Buffer instance.
     * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
     * @interface Buffer
     * @extends Uint8Array
     */

    /**
     * Node's Buffer class if available.
     * @type {Constructor<Buffer>}
     */
    util.Buffer = (function() {
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        if (typeof Buffer !== "undefined" && Buffer.prototype.utf8Write) {
            return Buffer;
        }

        return null;
    })();

    // Internal alias of or polyfull for Buffer.from.
    util._Buffer_from = null;

    // Internal alias of or polyfill for Buffer.allocUnsafe.
    util._Buffer_allocUnsafe = null;

    /**
     * Creates a new buffer of whatever type supported by the environment.
     * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
     * @returns {Uint8Array|Buffer} Buffer
     */
    util.newBuffer = function newBuffer(sizeOrArray) {
        /* istanbul ignore next */
        return typeof sizeOrArray === "number"
            ? util.Buffer
                ? util._Buffer_allocUnsafe(sizeOrArray)
                : new util.Array(sizeOrArray)
            : util.Buffer
                ? util._Buffer_from(sizeOrArray)
                : typeof Uint8Array === "undefined"
                    ? sizeOrArray
                    : new Uint8Array(sizeOrArray);
    };

    /**
     * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
     * @type {Constructor<Uint8Array>}
     */
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

    /**
     * Any compatible Long instance.
     * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
     * @interface Long
     * @property {number} low Low bits
     * @property {number} high High bits
     * @property {boolean} unsigned Whether unsigned or not
     */

    /**
     * Long.js's Long class if available.
     * @type {Constructor<Long>}
     */
    util.Long = long;

    /**
     * Regular expression used to verify 2 bit (`bool`) map keys.
     * @type {RegExp}
     * @const
     */
    util.key2Re = /^true|false|0|1$/;

    /**
     * Regular expression used to verify 32 bit (`int32` etc.) map keys.
     * @type {RegExp}
     * @const
     */
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

    /**
     * Regular expression used to verify 64 bit (`int64` etc.) map keys.
     * @type {RegExp}
     * @const
     */
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

    /**
     * Converts a number or long to an 8 characters long hash string.
     * @param {Long|number} value Value to convert
     * @returns {string} Hash
     */
    util.longToHash = function longToHash(value) {
        return value
            ? util.LongBits.from(value).toHash()
            : util.LongBits.zeroHash;
    };

    /**
     * Converts an 8 characters long hash string to a long or number.
     * @param {string} hash Hash
     * @param {boolean} [unsigned=false] Whether unsigned or not
     * @returns {Long|number} Original value
     */
    util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long)
            return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
    };

    /**
     * Merges the properties of the source object into the destination object.
     * @memberof util
     * @param {Object.<string,*>} dst Destination object
     * @param {Object.<string,*>} src Source object
     * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
     * @returns {Object.<string,*>} Destination object
     */
    function merge(dst, src, ifNotSet) { // used by converters
        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
            if (dst[keys[i]] === undefined || !ifNotSet)
                dst[keys[i]] = src[keys[i]];
        return dst;
    }

    util.merge = merge;

    /**
     * Converts the first character of a string to lower case.
     * @param {string} str String to convert
     * @returns {string} Converted string
     */
    util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
    };

    /**
     * Creates a custom error constructor.
     * @memberof util
     * @param {string} name Error name
     * @returns {Constructor<Error>} Custom error constructor
     */
    function newError(name) {

        function CustomError(message, properties) {

            if (!(this instanceof CustomError))
                return new CustomError(message, properties);

            // Error.call(this, message);
            // ^ just returns a new error instance because the ctor can be called as a function

            Object.defineProperty(this, "message", { get: function() { return message; } });

            /* istanbul ignore next */
            if (Error.captureStackTrace) // node
                Error.captureStackTrace(this, CustomError);
            else
                Object.defineProperty(this, "stack", { value: new Error().stack || "" });

            if (properties)
                merge(this, properties);
        }

        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

        Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

        CustomError.prototype.toString = function toString() {
            return this.name + ": " + this.message;
        };

        return CustomError;
    }

    util.newError = newError;

    /**
     * Constructs a new protocol error.
     * @classdesc Error subclass indicating a protocol specifc error.
     * @memberof util
     * @extends Error
     * @template T extends Message<T>
     * @constructor
     * @param {string} message Error message
     * @param {Object.<string,*>} [properties] Additional properties
     * @example
     * try {
     *     MyMessage.decode(someBuffer); // throws if required fields are missing
     * } catch (e) {
     *     if (e instanceof ProtocolError && e.instance)
     *         console.log("decoded so far: " + JSON.stringify(e.instance));
     * }
     */
    util.ProtocolError = newError("ProtocolError");

    /**
     * So far decoded message instance.
     * @name util.ProtocolError#instance
     * @type {Message<T>}
     */

    /**
     * A OneOf getter as returned by {@link util.oneOfGetter}.
     * @typedef OneOfGetter
     * @type {function}
     * @returns {string|undefined} Set field name, if any
     */

    /**
     * Builds a getter for a oneof's present field name.
     * @param {string[]} fieldNames Field names
     * @returns {OneOfGetter} Unbound getter
     */
    util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};
        for (var i = 0; i < fieldNames.length; ++i)
            fieldMap[fieldNames[i]] = 1;

        /**
         * @returns {string|undefined} Set field name, if any
         * @this Object
         * @ignore
         */
        return function() { // eslint-disable-line consistent-return
            for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
                if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                    return keys[i];
        };
    };

    /**
     * A OneOf setter as returned by {@link util.oneOfSetter}.
     * @typedef OneOfSetter
     * @type {function}
     * @param {string|undefined} value Field name
     * @returns {undefined}
     */

    /**
     * Builds a setter for a oneof's present field name.
     * @param {string[]} fieldNames Field names
     * @returns {OneOfSetter} Unbound setter
     */
    util.oneOfSetter = function setOneOf(fieldNames) {

        /**
         * @param {string} name Field name
         * @returns {undefined}
         * @this Object
         * @ignore
         */
        return function(name) {
            for (var i = 0; i < fieldNames.length; ++i)
                if (fieldNames[i] !== name)
                    delete this[fieldNames[i]];
        };
    };

    /**
     * Default conversion options used for {@link Message#toJSON} implementations.
     *
     * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
     *
     * - Longs become strings
     * - Enums become string keys
     * - Bytes become base64 encoded strings
     * - (Sub-)Messages become plain objects
     * - Maps become plain objects with all string keys
     * - Repeated fields become arrays
     * - NaN and Infinity for float and double fields become strings
     *
     * @type {IConversionOptions}
     * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
     */
    util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
    };

    // Sets up buffer utility according to the environment (called in index-minimal)
    util._configure = function() {
        var Buffer = util.Buffer;
        /* istanbul ignore if */
        if (!Buffer) {
            util._Buffer_from = util._Buffer_allocUnsafe = null;
            return;
        }
        // because node 4.x buffers are incompatible & immutable
        // see: https://github.com/dcodeIO/protobuf.js/pull/665
        util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
            /* istanbul ignore next */
            function Buffer_from(value, encoding) {
                return new Buffer(value, encoding);
            };
        util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
            /* istanbul ignore next */
            function Buffer_allocUnsafe(size) {
                return new Buffer(size);
            };
    };
    });

    var writer = Writer;



    var BufferWriter$1; // cyclic

    var LongBits$1  = minimal$1.LongBits,
        base64    = minimal$1.base64,
        utf8$1      = minimal$1.utf8;

    /**
     * Constructs a new writer operation instance.
     * @classdesc Scheduled writer operation.
     * @constructor
     * @param {function(*, Uint8Array, number)} fn Function to call
     * @param {number} len Value byte length
     * @param {*} val Value to write
     * @ignore
     */
    function Op(fn, len, val) {

        /**
         * Function to call.
         * @type {function(Uint8Array, number, *)}
         */
        this.fn = fn;

        /**
         * Value byte length.
         * @type {number}
         */
        this.len = len;

        /**
         * Next operation.
         * @type {Writer.Op|undefined}
         */
        this.next = undefined;

        /**
         * Value to write.
         * @type {*}
         */
        this.val = val; // type varies
    }

    /* istanbul ignore next */
    function noop() {} // eslint-disable-line no-empty-function

    /**
     * Constructs a new writer state instance.
     * @classdesc Copied writer state.
     * @memberof Writer
     * @constructor
     * @param {Writer} writer Writer to copy state from
     * @ignore
     */
    function State(writer) {

        /**
         * Current head.
         * @type {Writer.Op}
         */
        this.head = writer.head;

        /**
         * Current tail.
         * @type {Writer.Op}
         */
        this.tail = writer.tail;

        /**
         * Current buffer length.
         * @type {number}
         */
        this.len = writer.len;

        /**
         * Next state.
         * @type {State|null}
         */
        this.next = writer.states;
    }

    /**
     * Constructs a new writer instance.
     * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
     * @constructor
     */
    function Writer() {

        /**
         * Current length.
         * @type {number}
         */
        this.len = 0;

        /**
         * Operations head.
         * @type {Object}
         */
        this.head = new Op(noop, 0, 0);

        /**
         * Operations tail
         * @type {Object}
         */
        this.tail = this.head;

        /**
         * Linked forked states.
         * @type {Object|null}
         */
        this.states = null;

        // When a value is written, the writer calculates its byte length and puts it into a linked
        // list of operations to perform when finish() is called. This both allows us to allocate
        // buffers of the exact required size and reduces the amount of work we have to do compared
        // to first calculating over objects and then encoding over objects. In our case, the encoding
        // part is just a linked list walk calling operations with already prepared values.
    }

    var create$1 = function create() {
        return minimal$1.Buffer
            ? function create_buffer_setup() {
                return (Writer.create = function create_buffer() {
                    return new BufferWriter$1();
                })();
            }
            /* istanbul ignore next */
            : function create_array() {
                return new Writer();
            };
    };

    /**
     * Creates a new writer.
     * @function
     * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
     */
    Writer.create = create$1();

    /**
     * Allocates a buffer of the specified size.
     * @param {number} size Buffer size
     * @returns {Uint8Array} Buffer
     */
    Writer.alloc = function alloc(size) {
        return new minimal$1.Array(size);
    };

    // Use Uint8Array buffer pool in the browser, just like node does with buffers
    /* istanbul ignore else */
    if (minimal$1.Array !== Array)
        Writer.alloc = minimal$1.pool(Writer.alloc, minimal$1.Array.prototype.subarray);

    /**
     * Pushes a new operation to the queue.
     * @param {function(Uint8Array, number, *)} fn Function to call
     * @param {number} len Value byte length
     * @param {number} val Value to write
     * @returns {Writer} `this`
     * @private
     */
    Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
    };

    function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
    }

    function writeVarint32(val, buf, pos) {
        while (val > 127) {
            buf[pos++] = val & 127 | 128;
            val >>>= 7;
        }
        buf[pos] = val;
    }

    /**
     * Constructs a new varint writer operation instance.
     * @classdesc Scheduled varint writer operation.
     * @extends Op
     * @constructor
     * @param {number} len Value byte length
     * @param {number} val Value to write
     * @ignore
     */
    function VarintOp(len, val) {
        this.len = len;
        this.next = undefined;
        this.val = val;
    }

    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;

    /**
     * Writes an unsigned 32 bit value as a varint.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.uint32 = function write_uint32(value) {
        // here, the call to this.push has been inlined and a varint specific Op subclass is used.
        // uint32 is by far the most frequently used operation and benefits significantly from this.
        this.len += (this.tail = this.tail.next = new VarintOp(
            (value = value >>> 0)
                    < 128       ? 1
            : value < 16384     ? 2
            : value < 2097152   ? 3
            : value < 268435456 ? 4
            :                     5,
        value)).len;
        return this;
    };

    /**
     * Writes a signed 32 bit value as a varint.
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.int32 = function write_int32(value) {
        return value < 0
            ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
            : this.uint32(value);
    };

    /**
     * Writes a 32 bit value as a varint, zig-zag encoded.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };

    function writeVarint64(val, buf, pos) {
        while (val.hi) {
            buf[pos++] = val.lo & 127 | 128;
            val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
            val.hi >>>= 7;
        }
        while (val.lo > 127) {
            buf[pos++] = val.lo & 127 | 128;
            val.lo = val.lo >>> 7;
        }
        buf[pos++] = val.lo;
    }

    /**
     * Writes an unsigned 64 bit value as a varint.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits$1.from(value);
        return this._push(writeVarint64, bits.length(), bits);
    };

    /**
     * Writes a signed 64 bit value as a varint.
     * @function
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer.prototype.int64 = Writer.prototype.uint64;

    /**
     * Writes a signed 64 bit value as a varint, zig-zag encoded.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits$1.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
    };

    /**
     * Writes a boolish value as a varint.
     * @param {boolean} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
    };

    function writeFixed32(val, buf, pos) {
        buf[pos    ] =  val         & 255;
        buf[pos + 1] =  val >>> 8   & 255;
        buf[pos + 2] =  val >>> 16  & 255;
        buf[pos + 3] =  val >>> 24;
    }

    /**
     * Writes an unsigned 32 bit value as fixed 32 bits.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
    };

    /**
     * Writes a signed 32 bit value as fixed 32 bits.
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;

    /**
     * Writes an unsigned 64 bit value as fixed 64 bits.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits$1.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };

    /**
     * Writes a signed 64 bit value as fixed 64 bits.
     * @function
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;

    /**
     * Writes a float (32 bit).
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.float = function write_float(value) {
        return this._push(minimal$1.float.writeFloatLE, 4, value);
    };

    /**
     * Writes a double (64 bit float).
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.double = function write_double(value) {
        return this._push(minimal$1.float.writeDoubleLE, 8, value);
    };

    var writeBytes = minimal$1.Array.prototype.set
        ? function writeBytes_set(val, buf, pos) {
            buf.set(val, pos); // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytes_for(val, buf, pos) {
            for (var i = 0; i < val.length; ++i)
                buf[pos + i] = val[i];
        };

    /**
     * Writes a sequence of bytes.
     * @param {Uint8Array|string} value Buffer or base64 encoded string to write
     * @returns {Writer} `this`
     */
    Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len)
            return this._push(writeByte, 1, 0);
        if (minimal$1.isString(value)) {
            var buf = Writer.alloc(len = base64.length(value));
            base64.decode(value, buf, 0);
            value = buf;
        }
        return this.uint32(len)._push(writeBytes, len, value);
    };

    /**
     * Writes a string.
     * @param {string} value Value to write
     * @returns {Writer} `this`
     */
    Writer.prototype.string = function write_string(value) {
        var len = utf8$1.length(value);
        return len
            ? this.uint32(len)._push(utf8$1.write, len, value)
            : this._push(writeByte, 1, 0);
    };

    /**
     * Forks this writer's state by pushing it to a stack.
     * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
     * @returns {Writer} `this`
     */
    Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
        return this;
    };

    /**
     * Resets this instance to the last state.
     * @returns {Writer} `this`
     */
    Writer.prototype.reset = function reset() {
        if (this.states) {
            this.head   = this.states.head;
            this.tail   = this.states.tail;
            this.len    = this.states.len;
            this.states = this.states.next;
        } else {
            this.head = this.tail = new Op(noop, 0, 0);
            this.len  = 0;
        }
        return this;
    };

    /**
     * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
     * @returns {Writer} `this`
     */
    Writer.prototype.ldelim = function ldelim() {
        var head = this.head,
            tail = this.tail,
            len  = this.len;
        this.reset().uint32(len);
        if (len) {
            this.tail.next = head.next; // skip noop
            this.tail = tail;
            this.len += len;
        }
        return this;
    };

    /**
     * Finishes the write operation.
     * @returns {Uint8Array} Finished buffer
     */
    Writer.prototype.finish = function finish() {
        var head = this.head.next, // skip noop
            buf  = this.constructor.alloc(this.len),
            pos  = 0;
        while (head) {
            head.fn(head.val, buf, pos);
            pos += head.len;
            head = head.next;
        }
        // this.head = this.tail = null;
        return buf;
    };

    Writer._configure = function(BufferWriter_) {
        BufferWriter$1 = BufferWriter_;
        Writer.create = create$1();
        BufferWriter$1._configure();
    };

    var writer_buffer = BufferWriter;

    // extends Writer

    (BufferWriter.prototype = Object.create(writer.prototype)).constructor = BufferWriter;



    /**
     * Constructs a new buffer writer instance.
     * @classdesc Wire format writer using node buffers.
     * @extends Writer
     * @constructor
     */
    function BufferWriter() {
        writer.call(this);
    }

    BufferWriter._configure = function () {
        /**
         * Allocates a buffer of the specified size.
         * @function
         * @param {number} size Buffer size
         * @returns {Buffer} Buffer
         */
        BufferWriter.alloc = minimal$1._Buffer_allocUnsafe;

        BufferWriter.writeBytesBuffer = minimal$1.Buffer && minimal$1.Buffer.prototype instanceof Uint8Array && minimal$1.Buffer.prototype.set.name === "set"
            ? function writeBytesBuffer_set(val, buf, pos) {
              buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
              // also works for plain array values
            }
            /* istanbul ignore next */
            : function writeBytesBuffer_copy(val, buf, pos) {
              if (val.copy) // Buffer values
                val.copy(buf, pos, 0, val.length);
              else for (var i = 0; i < val.length;) // plain array values
                buf[pos++] = val[i++];
            };
    };


    /**
     * @override
     */
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (minimal$1.isString(value))
            value = minimal$1._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len)
            this._push(BufferWriter.writeBytesBuffer, len, value);
        return this;
    };

    function writeStringBuffer(val, buf, pos) {
        if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
            minimal$1.utf8.write(val, buf, pos);
        else if (buf.utf8Write)
            buf.utf8Write(val, pos);
        else
            buf.write(val, pos);
    }

    /**
     * @override
     */
    BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = minimal$1.Buffer.byteLength(value);
        this.uint32(len);
        if (len)
            this._push(writeStringBuffer, len, value);
        return this;
    };


    /**
     * Finishes the write operation.
     * @name BufferWriter#finish
     * @function
     * @returns {Buffer} Finished buffer
     */

    BufferWriter._configure();

    var reader = Reader;



    var BufferReader$1; // cyclic

    var LongBits  = minimal$1.LongBits,
        utf8      = minimal$1.utf8;

    /* istanbul ignore next */
    function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }

    /**
     * Constructs a new reader instance using the specified buffer.
     * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
     * @constructor
     * @param {Uint8Array} buffer Buffer to read from
     */
    function Reader(buffer) {

        /**
         * Read buffer.
         * @type {Uint8Array}
         */
        this.buf = buffer;

        /**
         * Read buffer position.
         * @type {number}
         */
        this.pos = 0;

        /**
         * Read buffer length.
         * @type {number}
         */
        this.len = buffer.length;
    }

    var create_array = typeof Uint8Array !== "undefined"
        ? function create_typed_array(buffer) {
            if (buffer instanceof Uint8Array || Array.isArray(buffer))
                return new Reader(buffer);
            throw Error("illegal buffer");
        }
        /* istanbul ignore next */
        : function create_array(buffer) {
            if (Array.isArray(buffer))
                return new Reader(buffer);
            throw Error("illegal buffer");
        };

    var create = function create() {
        return minimal$1.Buffer
            ? function create_buffer_setup(buffer) {
                return (Reader.create = function create_buffer(buffer) {
                    return minimal$1.Buffer.isBuffer(buffer)
                        ? new BufferReader$1(buffer)
                        /* istanbul ignore next */
                        : create_array(buffer);
                })(buffer);
            }
            /* istanbul ignore next */
            : create_array;
    };

    /**
     * Creates a new reader using the specified buffer.
     * @function
     * @param {Uint8Array|Buffer} buffer Buffer to read from
     * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
     * @throws {Error} If `buffer` is not a valid buffer
     */
    Reader.create = create();

    Reader.prototype._slice = minimal$1.Array.prototype.subarray || /* istanbul ignore next */ minimal$1.Array.prototype.slice;

    /**
     * Reads a varint as an unsigned 32 bit value.
     * @function
     * @returns {number} Value read
     */
    Reader.prototype.uint32 = (function read_uint32_setup() {
        var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
        return function read_uint32() {
            value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

            /* istanbul ignore if */
            if ((this.pos += 5) > this.len) {
                this.pos = this.len;
                throw indexOutOfRange(this, 10);
            }
            return value;
        };
    })();

    /**
     * Reads a varint as a signed 32 bit value.
     * @returns {number} Value read
     */
    Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
    };

    /**
     * Reads a zig-zag encoded varint as a signed 32 bit value.
     * @returns {number} Value read
     */
    Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
    };

    /* eslint-disable no-invalid-this */

    function readLongVarint() {
        // tends to deopt with local vars for octet etc.
        var bits = new LongBits(0, 0);
        var i = 0;
        if (this.len - this.pos > 4) { // fast route (lo)
            for (; i < 4; ++i) {
                // 1st..4th
                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
            // 5th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
            i = 0;
        } else {
            for (; i < 3; ++i) {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
                // 1st..3th
                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
            // 4th
            bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
            return bits;
        }
        if (this.len - this.pos > 4) { // fast route (hi)
            for (; i < 5; ++i) {
                // 6th..10th
                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
        } else {
            for (; i < 5; ++i) {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
                // 6th..10th
                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
        }
        /* istanbul ignore next */
        throw Error("invalid varint encoding");
    }

    /* eslint-enable no-invalid-this */

    /**
     * Reads a varint as a signed 64 bit value.
     * @name Reader#int64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a varint as an unsigned 64 bit value.
     * @name Reader#uint64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a zig-zag encoded varint as a signed 64 bit value.
     * @name Reader#sint64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a varint as a boolean.
     * @returns {boolean} Value read
     */
    Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
    };

    function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
        return (buf[end - 4]
              | buf[end - 3] << 8
              | buf[end - 2] << 16
              | buf[end - 1] << 24) >>> 0;
    }

    /**
     * Reads fixed 32 bits as an unsigned 32 bit integer.
     * @returns {number} Value read
     */
    Reader.prototype.fixed32 = function read_fixed32() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        return readFixed32_end(this.buf, this.pos += 4);
    };

    /**
     * Reads fixed 32 bits as a signed 32 bit integer.
     * @returns {number} Value read
     */
    Reader.prototype.sfixed32 = function read_sfixed32() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        return readFixed32_end(this.buf, this.pos += 4) | 0;
    };

    /* eslint-disable no-invalid-this */

    function readFixed64(/* this: Reader */) {

        /* istanbul ignore if */
        if (this.pos + 8 > this.len)
            throw indexOutOfRange(this, 8);

        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }

    /* eslint-enable no-invalid-this */

    /**
     * Reads fixed 64 bits.
     * @name Reader#fixed64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads zig-zag encoded fixed 64 bits.
     * @name Reader#sfixed64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a float (32 bit) as a number.
     * @function
     * @returns {number} Value read
     */
    Reader.prototype.float = function read_float() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        var value = minimal$1.float.readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
    };

    /**
     * Reads a double (64 bit float) as a number.
     * @function
     * @returns {number} Value read
     */
    Reader.prototype.double = function read_double() {

        /* istanbul ignore if */
        if (this.pos + 8 > this.len)
            throw indexOutOfRange(this, 4);

        var value = minimal$1.float.readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
    };

    /**
     * Reads a sequence of bytes preceeded by its length as a varint.
     * @returns {Uint8Array} Value read
     */
    Reader.prototype.bytes = function read_bytes() {
        var length = this.uint32(),
            start  = this.pos,
            end    = this.pos + length;

        /* istanbul ignore if */
        if (end > this.len)
            throw indexOutOfRange(this, length);

        this.pos += length;
        if (Array.isArray(this.buf)) // plain array
            return this.buf.slice(start, end);
        return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
            ? new this.buf.constructor(0)
            : this._slice.call(this.buf, start, end);
    };

    /**
     * Reads a string preceeded by its byte length as a varint.
     * @returns {string} Value read
     */
    Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
    };

    /**
     * Skips the specified number of bytes if specified, otherwise skips a varint.
     * @param {number} [length] Length if known, otherwise a varint is assumed
     * @returns {Reader} `this`
     */
    Reader.prototype.skip = function skip(length) {
        if (typeof length === "number") {
            /* istanbul ignore if */
            if (this.pos + length > this.len)
                throw indexOutOfRange(this, length);
            this.pos += length;
        } else {
            do {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
            } while (this.buf[this.pos++] & 128);
        }
        return this;
    };

    /**
     * Skips the next element of the specified wire type.
     * @param {number} wireType Wire type received
     * @returns {Reader} `this`
     */
    Reader.prototype.skipType = function(wireType) {
        switch (wireType) {
            case 0:
                this.skip();
                break;
            case 1:
                this.skip(8);
                break;
            case 2:
                this.skip(this.uint32());
                break;
            case 3:
                while ((wireType = this.uint32() & 7) !== 4) {
                    this.skipType(wireType);
                }
                break;
            case 5:
                this.skip(4);
                break;

            /* istanbul ignore next */
            default:
                throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }
        return this;
    };

    Reader._configure = function(BufferReader_) {
        BufferReader$1 = BufferReader_;
        Reader.create = create();
        BufferReader$1._configure();

        var fn = minimal$1.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
        minimal$1.merge(Reader.prototype, {

            int64: function read_int64() {
                return readLongVarint.call(this)[fn](false);
            },

            uint64: function read_uint64() {
                return readLongVarint.call(this)[fn](true);
            },

            sint64: function read_sint64() {
                return readLongVarint.call(this).zzDecode()[fn](false);
            },

            fixed64: function read_fixed64() {
                return readFixed64.call(this)[fn](true);
            },

            sfixed64: function read_sfixed64() {
                return readFixed64.call(this)[fn](false);
            }

        });
    };

    var reader_buffer = BufferReader;

    // extends Reader

    (BufferReader.prototype = Object.create(reader.prototype)).constructor = BufferReader;



    /**
     * Constructs a new buffer reader instance.
     * @classdesc Wire format reader using node buffers.
     * @extends Reader
     * @constructor
     * @param {Buffer} buffer Buffer to read from
     */
    function BufferReader(buffer) {
        reader.call(this, buffer);

        /**
         * Read buffer.
         * @name BufferReader#buf
         * @type {Buffer}
         */
    }

    BufferReader._configure = function () {
        /* istanbul ignore else */
        if (minimal$1.Buffer)
            BufferReader.prototype._slice = minimal$1.Buffer.prototype.slice;
    };


    /**
     * @override
     */
    BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32(); // modifies pos
        return this.buf.utf8Slice
            ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
            : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };

    /**
     * Reads a sequence of bytes preceeded by its length as a varint.
     * @name BufferReader#bytes
     * @function
     * @returns {Buffer} Value read
     */

    BufferReader._configure();

    var service = Service;



    // Extends EventEmitter
    (Service.prototype = Object.create(minimal$1.EventEmitter.prototype)).constructor = Service;

    /**
     * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
     *
     * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
     * @typedef rpc.ServiceMethodCallback
     * @template TRes extends Message<TRes>
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {TRes} [response] Response message
     * @returns {undefined}
     */

    /**
     * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
     * @typedef rpc.ServiceMethod
     * @template TReq extends Message<TReq>
     * @template TRes extends Message<TRes>
     * @type {function}
     * @param {TReq|Properties<TReq>} request Request message or plain object
     * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
     * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
     */

    /**
     * Constructs a new RPC service instance.
     * @classdesc An RPC service as returned by {@link Service#create}.
     * @exports rpc.Service
     * @extends util.EventEmitter
     * @constructor
     * @param {RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     */
    function Service(rpcImpl, requestDelimited, responseDelimited) {

        if (typeof rpcImpl !== "function")
            throw TypeError("rpcImpl must be a function");

        minimal$1.EventEmitter.call(this);

        /**
         * RPC implementation. Becomes `null` once the service is ended.
         * @type {RPCImpl|null}
         */
        this.rpcImpl = rpcImpl;

        /**
         * Whether requests are length-delimited.
         * @type {boolean}
         */
        this.requestDelimited = Boolean(requestDelimited);

        /**
         * Whether responses are length-delimited.
         * @type {boolean}
         */
        this.responseDelimited = Boolean(responseDelimited);
    }

    /**
     * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
     * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
     * @param {Constructor<TReq>} requestCtor Request constructor
     * @param {Constructor<TRes>} responseCtor Response constructor
     * @param {TReq|Properties<TReq>} request Request message or plain object
     * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
     * @returns {undefined}
     * @template TReq extends Message<TReq>
     * @template TRes extends Message<TRes>
     */
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

        if (!request)
            throw TypeError("request must be specified");

        var self = this;
        if (!callback)
            return minimal$1.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

        if (!self.rpcImpl) {
            setTimeout(function() { callback(Error("already ended")); }, 0);
            return undefined;
        }

        try {
            return self.rpcImpl(
                method,
                requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
                function rpcCallback(err, response) {

                    if (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }

                    if (response === null) {
                        self.end(/* endedByRPC */ true);
                        return undefined;
                    }

                    if (!(response instanceof responseCtor)) {
                        try {
                            response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                        } catch (err) {
                            self.emit("error", err, method);
                            return callback(err);
                        }
                    }

                    self.emit("data", response, method);
                    return callback(null, response);
                }
            );
        } catch (err) {
            self.emit("error", err, method);
            setTimeout(function() { callback(err); }, 0);
            return undefined;
        }
    };

    /**
     * Ends this service and emits the `end` event.
     * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
     * @returns {rpc.Service} `this`
     */
    Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
            if (!endedByRPC) // signal end to rpcImpl
                this.rpcImpl(null, null, null);
            this.rpcImpl = null;
            this.emit("end").off();
        }
        return this;
    };

    var rpc_1 = createCommonjsModule(function (module, exports) {

    /**
     * Streaming RPC helpers.
     * @namespace
     */
    var rpc = exports;

    /**
     * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
     * @typedef RPCImpl
     * @type {function}
     * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
     * @param {Uint8Array} requestData Request data
     * @param {RPCImplCallback} callback Callback function
     * @returns {undefined}
     * @example
     * function rpcImpl(method, requestData, callback) {
     *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
     *         throw Error("no such method");
     *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
     *         callback(err, responseData);
     *     });
     * }
     */

    /**
     * Node-style callback as used by {@link RPCImpl}.
     * @typedef RPCImplCallback
     * @type {function}
     * @param {Error|null} error Error, if any, otherwise `null`
     * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
     * @returns {undefined}
     */

    rpc.Service = service;
    });

    var roots = {};

    var indexMinimal = createCommonjsModule(function (module, exports) {
    var protobuf = exports;

    /**
     * Build type, one of `"full"`, `"light"` or `"minimal"`.
     * @name build
     * @type {string}
     * @const
     */
    protobuf.build = "minimal";

    // Serialization
    protobuf.Writer       = writer;
    protobuf.BufferWriter = writer_buffer;
    protobuf.Reader       = reader;
    protobuf.BufferReader = reader_buffer;

    // Utility
    protobuf.util         = minimal$1;
    protobuf.rpc          = rpc_1;
    protobuf.roots        = roots;
    protobuf.configure    = configure;

    /* istanbul ignore next */
    /**
     * Reconfigures the library according to the environment.
     * @returns {undefined}
     */
    function configure() {
        protobuf.util._configure();
        protobuf.Writer._configure(protobuf.BufferWriter);
        protobuf.Reader._configure(protobuf.BufferReader);
    }

    // Set up buffer utility according to the environment
    configure();
    });

    var minimal = indexMinimal;

    /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

    // Common aliases
    const $Reader = minimal.Reader, $Writer = minimal.Writer, $util = minimal.util;

    // Exported root namespace
    const $root = minimal.roots["default"] || (minimal.roots["default"] = {});

    const proto = $root.proto = (() => {

        /**
         * Namespace proto.
         * @exports proto
         * @namespace
         */
        const proto = {};

        proto.TokenUnitBalance = (function() {

            /**
             * Properties of a TokenUnitBalance.
             * @memberof proto
             * @interface ITokenUnitBalance
             * @property {proto.ITokenID|null} [tokenId] TokenUnitBalance tokenId
             * @property {Long|null} [balance] TokenUnitBalance balance
             */

            /**
             * Constructs a new TokenUnitBalance.
             * @memberof proto
             * @classdesc Represents a TokenUnitBalance.
             * @implements ITokenUnitBalance
             * @constructor
             * @param {proto.ITokenUnitBalance=} [p] Properties to set
             */
            function TokenUnitBalance(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenUnitBalance tokenId.
             * @member {proto.ITokenID|null|undefined} tokenId
             * @memberof proto.TokenUnitBalance
             * @instance
             */
            TokenUnitBalance.prototype.tokenId = null;

            /**
             * TokenUnitBalance balance.
             * @member {Long} balance
             * @memberof proto.TokenUnitBalance
             * @instance
             */
            TokenUnitBalance.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new TokenUnitBalance instance using the specified properties.
             * @function create
             * @memberof proto.TokenUnitBalance
             * @static
             * @param {proto.ITokenUnitBalance=} [properties] Properties to set
             * @returns {proto.TokenUnitBalance} TokenUnitBalance instance
             */
            TokenUnitBalance.create = function create(properties) {
                return new TokenUnitBalance(properties);
            };

            /**
             * Encodes the specified TokenUnitBalance message. Does not implicitly {@link proto.TokenUnitBalance.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenUnitBalance
             * @static
             * @param {proto.ITokenUnitBalance} m TokenUnitBalance message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenUnitBalance.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenId != null && Object.hasOwnProperty.call(m, "tokenId"))
                    $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();
                if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                    w.uint32(16).uint64(m.balance);
                return w;
            };

            /**
             * Decodes a TokenUnitBalance message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenUnitBalance
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenUnitBalance} TokenUnitBalance
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenUnitBalance.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenUnitBalance();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.tokenId = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.balance = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenUnitBalance;
        })();

        proto.SingleAccountBalances = (function() {

            /**
             * Properties of a SingleAccountBalances.
             * @memberof proto
             * @interface ISingleAccountBalances
             * @property {proto.IAccountID|null} [accountID] SingleAccountBalances accountID
             * @property {Long|null} [hbarBalance] SingleAccountBalances hbarBalance
             * @property {Array.<proto.ITokenUnitBalance>|null} [tokenUnitBalances] SingleAccountBalances tokenUnitBalances
             */

            /**
             * Constructs a new SingleAccountBalances.
             * @memberof proto
             * @classdesc Represents a SingleAccountBalances.
             * @implements ISingleAccountBalances
             * @constructor
             * @param {proto.ISingleAccountBalances=} [p] Properties to set
             */
            function SingleAccountBalances(p) {
                this.tokenUnitBalances = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SingleAccountBalances accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.SingleAccountBalances
             * @instance
             */
            SingleAccountBalances.prototype.accountID = null;

            /**
             * SingleAccountBalances hbarBalance.
             * @member {Long} hbarBalance
             * @memberof proto.SingleAccountBalances
             * @instance
             */
            SingleAccountBalances.prototype.hbarBalance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * SingleAccountBalances tokenUnitBalances.
             * @member {Array.<proto.ITokenUnitBalance>} tokenUnitBalances
             * @memberof proto.SingleAccountBalances
             * @instance
             */
            SingleAccountBalances.prototype.tokenUnitBalances = $util.emptyArray;

            /**
             * Creates a new SingleAccountBalances instance using the specified properties.
             * @function create
             * @memberof proto.SingleAccountBalances
             * @static
             * @param {proto.ISingleAccountBalances=} [properties] Properties to set
             * @returns {proto.SingleAccountBalances} SingleAccountBalances instance
             */
            SingleAccountBalances.create = function create(properties) {
                return new SingleAccountBalances(properties);
            };

            /**
             * Encodes the specified SingleAccountBalances message. Does not implicitly {@link proto.SingleAccountBalances.verify|verify} messages.
             * @function encode
             * @memberof proto.SingleAccountBalances
             * @static
             * @param {proto.ISingleAccountBalances} m SingleAccountBalances message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SingleAccountBalances.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.hbarBalance != null && Object.hasOwnProperty.call(m, "hbarBalance"))
                    w.uint32(16).uint64(m.hbarBalance);
                if (m.tokenUnitBalances != null && m.tokenUnitBalances.length) {
                    for (var i = 0; i < m.tokenUnitBalances.length; ++i)
                        $root.proto.TokenUnitBalance.encode(m.tokenUnitBalances[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a SingleAccountBalances message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SingleAccountBalances
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SingleAccountBalances} SingleAccountBalances
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SingleAccountBalances.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SingleAccountBalances();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.hbarBalance = r.uint64();
                        break;
                    case 3:
                        if (!(m.tokenUnitBalances && m.tokenUnitBalances.length))
                            m.tokenUnitBalances = [];
                        m.tokenUnitBalances.push($root.proto.TokenUnitBalance.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SingleAccountBalances;
        })();

        proto.AllAccountBalances = (function() {

            /**
             * Properties of an AllAccountBalances.
             * @memberof proto
             * @interface IAllAccountBalances
             * @property {proto.ITimestamp|null} [consensusTimestamp] AllAccountBalances consensusTimestamp
             * @property {Array.<proto.ISingleAccountBalances>|null} [allAccounts] AllAccountBalances allAccounts
             */

            /**
             * Constructs a new AllAccountBalances.
             * @memberof proto
             * @classdesc Represents an AllAccountBalances.
             * @implements IAllAccountBalances
             * @constructor
             * @param {proto.IAllAccountBalances=} [p] Properties to set
             */
            function AllAccountBalances(p) {
                this.allAccounts = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AllAccountBalances consensusTimestamp.
             * @member {proto.ITimestamp|null|undefined} consensusTimestamp
             * @memberof proto.AllAccountBalances
             * @instance
             */
            AllAccountBalances.prototype.consensusTimestamp = null;

            /**
             * AllAccountBalances allAccounts.
             * @member {Array.<proto.ISingleAccountBalances>} allAccounts
             * @memberof proto.AllAccountBalances
             * @instance
             */
            AllAccountBalances.prototype.allAccounts = $util.emptyArray;

            /**
             * Creates a new AllAccountBalances instance using the specified properties.
             * @function create
             * @memberof proto.AllAccountBalances
             * @static
             * @param {proto.IAllAccountBalances=} [properties] Properties to set
             * @returns {proto.AllAccountBalances} AllAccountBalances instance
             */
            AllAccountBalances.create = function create(properties) {
                return new AllAccountBalances(properties);
            };

            /**
             * Encodes the specified AllAccountBalances message. Does not implicitly {@link proto.AllAccountBalances.verify|verify} messages.
             * @function encode
             * @memberof proto.AllAccountBalances
             * @static
             * @param {proto.IAllAccountBalances} m AllAccountBalances message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AllAccountBalances.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.consensusTimestamp != null && Object.hasOwnProperty.call(m, "consensusTimestamp"))
                    $root.proto.Timestamp.encode(m.consensusTimestamp, w.uint32(10).fork()).ldelim();
                if (m.allAccounts != null && m.allAccounts.length) {
                    for (var i = 0; i < m.allAccounts.length; ++i)
                        $root.proto.SingleAccountBalances.encode(m.allAccounts[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an AllAccountBalances message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AllAccountBalances
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AllAccountBalances} AllAccountBalances
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AllAccountBalances.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllAccountBalances();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.consensusTimestamp = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.allAccounts && m.allAccounts.length))
                            m.allAccounts = [];
                        m.allAccounts.push($root.proto.SingleAccountBalances.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AllAccountBalances;
        })();

        proto.ShardID = (function() {

            /**
             * Properties of a ShardID.
             * @memberof proto
             * @interface IShardID
             * @property {Long|null} [shardNum] ShardID shardNum
             */

            /**
             * Constructs a new ShardID.
             * @memberof proto
             * @classdesc Represents a ShardID.
             * @implements IShardID
             * @constructor
             * @param {proto.IShardID=} [p] Properties to set
             */
            function ShardID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ShardID shardNum.
             * @member {Long} shardNum
             * @memberof proto.ShardID
             * @instance
             */
            ShardID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ShardID instance using the specified properties.
             * @function create
             * @memberof proto.ShardID
             * @static
             * @param {proto.IShardID=} [properties] Properties to set
             * @returns {proto.ShardID} ShardID instance
             */
            ShardID.create = function create(properties) {
                return new ShardID(properties);
            };

            /**
             * Encodes the specified ShardID message. Does not implicitly {@link proto.ShardID.verify|verify} messages.
             * @function encode
             * @memberof proto.ShardID
             * @static
             * @param {proto.IShardID} m ShardID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShardID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                return w;
            };

            /**
             * Decodes a ShardID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ShardID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ShardID} ShardID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShardID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ShardID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ShardID;
        })();

        proto.RealmID = (function() {

            /**
             * Properties of a RealmID.
             * @memberof proto
             * @interface IRealmID
             * @property {Long|null} [shardNum] RealmID shardNum
             * @property {Long|null} [realmNum] RealmID realmNum
             */

            /**
             * Constructs a new RealmID.
             * @memberof proto
             * @classdesc Represents a RealmID.
             * @implements IRealmID
             * @constructor
             * @param {proto.IRealmID=} [p] Properties to set
             */
            function RealmID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * RealmID shardNum.
             * @member {Long} shardNum
             * @memberof proto.RealmID
             * @instance
             */
            RealmID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RealmID realmNum.
             * @member {Long} realmNum
             * @memberof proto.RealmID
             * @instance
             */
            RealmID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new RealmID instance using the specified properties.
             * @function create
             * @memberof proto.RealmID
             * @static
             * @param {proto.IRealmID=} [properties] Properties to set
             * @returns {proto.RealmID} RealmID instance
             */
            RealmID.create = function create(properties) {
                return new RealmID(properties);
            };

            /**
             * Encodes the specified RealmID message. Does not implicitly {@link proto.RealmID.verify|verify} messages.
             * @function encode
             * @memberof proto.RealmID
             * @static
             * @param {proto.IRealmID} m RealmID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RealmID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                return w;
            };

            /**
             * Decodes a RealmID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.RealmID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.RealmID} RealmID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RealmID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RealmID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return RealmID;
        })();

        proto.AccountID = (function() {

            /**
             * Properties of an AccountID.
             * @memberof proto
             * @interface IAccountID
             * @property {Long|null} [shardNum] AccountID shardNum
             * @property {Long|null} [realmNum] AccountID realmNum
             * @property {Long|null} [accountNum] AccountID accountNum
             */

            /**
             * Constructs a new AccountID.
             * @memberof proto
             * @classdesc Represents an AccountID.
             * @implements IAccountID
             * @constructor
             * @param {proto.IAccountID=} [p] Properties to set
             */
            function AccountID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AccountID shardNum.
             * @member {Long} shardNum
             * @memberof proto.AccountID
             * @instance
             */
            AccountID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AccountID realmNum.
             * @member {Long} realmNum
             * @memberof proto.AccountID
             * @instance
             */
            AccountID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AccountID accountNum.
             * @member {Long} accountNum
             * @memberof proto.AccountID
             * @instance
             */
            AccountID.prototype.accountNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AccountID instance using the specified properties.
             * @function create
             * @memberof proto.AccountID
             * @static
             * @param {proto.IAccountID=} [properties] Properties to set
             * @returns {proto.AccountID} AccountID instance
             */
            AccountID.create = function create(properties) {
                return new AccountID(properties);
            };

            /**
             * Encodes the specified AccountID message. Does not implicitly {@link proto.AccountID.verify|verify} messages.
             * @function encode
             * @memberof proto.AccountID
             * @static
             * @param {proto.IAccountID} m AccountID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccountID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.accountNum != null && Object.hasOwnProperty.call(m, "accountNum"))
                    w.uint32(24).int64(m.accountNum);
                return w;
            };

            /**
             * Decodes an AccountID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AccountID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AccountID} AccountID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccountID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AccountID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.accountNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AccountID;
        })();

        proto.FileID = (function() {

            /**
             * Properties of a FileID.
             * @memberof proto
             * @interface IFileID
             * @property {Long|null} [shardNum] FileID shardNum
             * @property {Long|null} [realmNum] FileID realmNum
             * @property {Long|null} [fileNum] FileID fileNum
             */

            /**
             * Constructs a new FileID.
             * @memberof proto
             * @classdesc Represents a FileID.
             * @implements IFileID
             * @constructor
             * @param {proto.IFileID=} [p] Properties to set
             */
            function FileID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileID shardNum.
             * @member {Long} shardNum
             * @memberof proto.FileID
             * @instance
             */
            FileID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FileID realmNum.
             * @member {Long} realmNum
             * @memberof proto.FileID
             * @instance
             */
            FileID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FileID fileNum.
             * @member {Long} fileNum
             * @memberof proto.FileID
             * @instance
             */
            FileID.prototype.fileNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new FileID instance using the specified properties.
             * @function create
             * @memberof proto.FileID
             * @static
             * @param {proto.IFileID=} [properties] Properties to set
             * @returns {proto.FileID} FileID instance
             */
            FileID.create = function create(properties) {
                return new FileID(properties);
            };

            /**
             * Encodes the specified FileID message. Does not implicitly {@link proto.FileID.verify|verify} messages.
             * @function encode
             * @memberof proto.FileID
             * @static
             * @param {proto.IFileID} m FileID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.fileNum != null && Object.hasOwnProperty.call(m, "fileNum"))
                    w.uint32(24).int64(m.fileNum);
                return w;
            };

            /**
             * Decodes a FileID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileID} FileID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.fileNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileID;
        })();

        proto.ContractID = (function() {

            /**
             * Properties of a ContractID.
             * @memberof proto
             * @interface IContractID
             * @property {Long|null} [shardNum] ContractID shardNum
             * @property {Long|null} [realmNum] ContractID realmNum
             * @property {Long|null} [contractNum] ContractID contractNum
             */

            /**
             * Constructs a new ContractID.
             * @memberof proto
             * @classdesc Represents a ContractID.
             * @implements IContractID
             * @constructor
             * @param {proto.IContractID=} [p] Properties to set
             */
            function ContractID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractID shardNum.
             * @member {Long} shardNum
             * @memberof proto.ContractID
             * @instance
             */
            ContractID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractID realmNum.
             * @member {Long} realmNum
             * @memberof proto.ContractID
             * @instance
             */
            ContractID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractID contractNum.
             * @member {Long} contractNum
             * @memberof proto.ContractID
             * @instance
             */
            ContractID.prototype.contractNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ContractID instance using the specified properties.
             * @function create
             * @memberof proto.ContractID
             * @static
             * @param {proto.IContractID=} [properties] Properties to set
             * @returns {proto.ContractID} ContractID instance
             */
            ContractID.create = function create(properties) {
                return new ContractID(properties);
            };

            /**
             * Encodes the specified ContractID message. Does not implicitly {@link proto.ContractID.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractID
             * @static
             * @param {proto.IContractID} m ContractID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.contractNum != null && Object.hasOwnProperty.call(m, "contractNum"))
                    w.uint32(24).int64(m.contractNum);
                return w;
            };

            /**
             * Decodes a ContractID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractID} ContractID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.contractNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractID;
        })();

        proto.TransactionID = (function() {

            /**
             * Properties of a TransactionID.
             * @memberof proto
             * @interface ITransactionID
             * @property {proto.ITimestamp|null} [transactionValidStart] TransactionID transactionValidStart
             * @property {proto.IAccountID|null} [accountID] TransactionID accountID
             * @property {boolean|null} [scheduled] TransactionID scheduled
             */

            /**
             * Constructs a new TransactionID.
             * @memberof proto
             * @classdesc Represents a TransactionID.
             * @implements ITransactionID
             * @constructor
             * @param {proto.ITransactionID=} [p] Properties to set
             */
            function TransactionID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionID transactionValidStart.
             * @member {proto.ITimestamp|null|undefined} transactionValidStart
             * @memberof proto.TransactionID
             * @instance
             */
            TransactionID.prototype.transactionValidStart = null;

            /**
             * TransactionID accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.TransactionID
             * @instance
             */
            TransactionID.prototype.accountID = null;

            /**
             * TransactionID scheduled.
             * @member {boolean} scheduled
             * @memberof proto.TransactionID
             * @instance
             */
            TransactionID.prototype.scheduled = false;

            /**
             * Creates a new TransactionID instance using the specified properties.
             * @function create
             * @memberof proto.TransactionID
             * @static
             * @param {proto.ITransactionID=} [properties] Properties to set
             * @returns {proto.TransactionID} TransactionID instance
             */
            TransactionID.create = function create(properties) {
                return new TransactionID(properties);
            };

            /**
             * Encodes the specified TransactionID message. Does not implicitly {@link proto.TransactionID.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionID
             * @static
             * @param {proto.ITransactionID} m TransactionID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionValidStart != null && Object.hasOwnProperty.call(m, "transactionValidStart"))
                    $root.proto.Timestamp.encode(m.transactionValidStart, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.scheduled != null && Object.hasOwnProperty.call(m, "scheduled"))
                    w.uint32(24).bool(m.scheduled);
                return w;
            };

            /**
             * Decodes a TransactionID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionID} TransactionID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transactionValidStart = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.scheduled = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionID;
        })();

        proto.AccountAmount = (function() {

            /**
             * Properties of an AccountAmount.
             * @memberof proto
             * @interface IAccountAmount
             * @property {proto.IAccountID|null} [accountID] AccountAmount accountID
             * @property {Long|null} [amount] AccountAmount amount
             */

            /**
             * Constructs a new AccountAmount.
             * @memberof proto
             * @classdesc Represents an AccountAmount.
             * @implements IAccountAmount
             * @constructor
             * @param {proto.IAccountAmount=} [p] Properties to set
             */
            function AccountAmount(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AccountAmount accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.AccountAmount
             * @instance
             */
            AccountAmount.prototype.accountID = null;

            /**
             * AccountAmount amount.
             * @member {Long} amount
             * @memberof proto.AccountAmount
             * @instance
             */
            AccountAmount.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AccountAmount instance using the specified properties.
             * @function create
             * @memberof proto.AccountAmount
             * @static
             * @param {proto.IAccountAmount=} [properties] Properties to set
             * @returns {proto.AccountAmount} AccountAmount instance
             */
            AccountAmount.create = function create(properties) {
                return new AccountAmount(properties);
            };

            /**
             * Encodes the specified AccountAmount message. Does not implicitly {@link proto.AccountAmount.verify|verify} messages.
             * @function encode
             * @memberof proto.AccountAmount
             * @static
             * @param {proto.IAccountAmount} m AccountAmount message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccountAmount.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(16).sint64(m.amount);
                return w;
            };

            /**
             * Decodes an AccountAmount message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AccountAmount
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AccountAmount} AccountAmount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccountAmount.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AccountAmount();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.sint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AccountAmount;
        })();

        proto.TransferList = (function() {

            /**
             * Properties of a TransferList.
             * @memberof proto
             * @interface ITransferList
             * @property {Array.<proto.IAccountAmount>|null} [accountAmounts] TransferList accountAmounts
             */

            /**
             * Constructs a new TransferList.
             * @memberof proto
             * @classdesc Represents a TransferList.
             * @implements ITransferList
             * @constructor
             * @param {proto.ITransferList=} [p] Properties to set
             */
            function TransferList(p) {
                this.accountAmounts = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransferList accountAmounts.
             * @member {Array.<proto.IAccountAmount>} accountAmounts
             * @memberof proto.TransferList
             * @instance
             */
            TransferList.prototype.accountAmounts = $util.emptyArray;

            /**
             * Creates a new TransferList instance using the specified properties.
             * @function create
             * @memberof proto.TransferList
             * @static
             * @param {proto.ITransferList=} [properties] Properties to set
             * @returns {proto.TransferList} TransferList instance
             */
            TransferList.create = function create(properties) {
                return new TransferList(properties);
            };

            /**
             * Encodes the specified TransferList message. Does not implicitly {@link proto.TransferList.verify|verify} messages.
             * @function encode
             * @memberof proto.TransferList
             * @static
             * @param {proto.ITransferList} m TransferList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountAmounts != null && m.accountAmounts.length) {
                    for (var i = 0; i < m.accountAmounts.length; ++i)
                        $root.proto.AccountAmount.encode(m.accountAmounts[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TransferList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransferList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransferList} TransferList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransferList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.accountAmounts && m.accountAmounts.length))
                            m.accountAmounts = [];
                        m.accountAmounts.push($root.proto.AccountAmount.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransferList;
        })();

        proto.TokenTransferList = (function() {

            /**
             * Properties of a TokenTransferList.
             * @memberof proto
             * @interface ITokenTransferList
             * @property {proto.ITokenID|null} [token] TokenTransferList token
             * @property {Array.<proto.IAccountAmount>|null} [transfers] TokenTransferList transfers
             */

            /**
             * Constructs a new TokenTransferList.
             * @memberof proto
             * @classdesc Represents a TokenTransferList.
             * @implements ITokenTransferList
             * @constructor
             * @param {proto.ITokenTransferList=} [p] Properties to set
             */
            function TokenTransferList(p) {
                this.transfers = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenTransferList token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenTransferList
             * @instance
             */
            TokenTransferList.prototype.token = null;

            /**
             * TokenTransferList transfers.
             * @member {Array.<proto.IAccountAmount>} transfers
             * @memberof proto.TokenTransferList
             * @instance
             */
            TokenTransferList.prototype.transfers = $util.emptyArray;

            /**
             * Creates a new TokenTransferList instance using the specified properties.
             * @function create
             * @memberof proto.TokenTransferList
             * @static
             * @param {proto.ITokenTransferList=} [properties] Properties to set
             * @returns {proto.TokenTransferList} TokenTransferList instance
             */
            TokenTransferList.create = function create(properties) {
                return new TokenTransferList(properties);
            };

            /**
             * Encodes the specified TokenTransferList message. Does not implicitly {@link proto.TokenTransferList.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenTransferList
             * @static
             * @param {proto.ITokenTransferList} m TokenTransferList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenTransferList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.transfers != null && m.transfers.length) {
                    for (var i = 0; i < m.transfers.length; ++i)
                        $root.proto.AccountAmount.encode(m.transfers[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TokenTransferList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenTransferList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenTransferList} TokenTransferList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenTransferList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenTransferList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.transfers && m.transfers.length))
                            m.transfers = [];
                        m.transfers.push($root.proto.AccountAmount.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenTransferList;
        })();

        proto.TopicID = (function() {

            /**
             * Properties of a TopicID.
             * @memberof proto
             * @interface ITopicID
             * @property {Long|null} [shardNum] TopicID shardNum
             * @property {Long|null} [realmNum] TopicID realmNum
             * @property {Long|null} [topicNum] TopicID topicNum
             */

            /**
             * Constructs a new TopicID.
             * @memberof proto
             * @classdesc Represents a TopicID.
             * @implements ITopicID
             * @constructor
             * @param {proto.ITopicID=} [p] Properties to set
             */
            function TopicID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TopicID shardNum.
             * @member {Long} shardNum
             * @memberof proto.TopicID
             * @instance
             */
            TopicID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TopicID realmNum.
             * @member {Long} realmNum
             * @memberof proto.TopicID
             * @instance
             */
            TopicID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TopicID topicNum.
             * @member {Long} topicNum
             * @memberof proto.TopicID
             * @instance
             */
            TopicID.prototype.topicNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new TopicID instance using the specified properties.
             * @function create
             * @memberof proto.TopicID
             * @static
             * @param {proto.ITopicID=} [properties] Properties to set
             * @returns {proto.TopicID} TopicID instance
             */
            TopicID.create = function create(properties) {
                return new TopicID(properties);
            };

            /**
             * Encodes the specified TopicID message. Does not implicitly {@link proto.TopicID.verify|verify} messages.
             * @function encode
             * @memberof proto.TopicID
             * @static
             * @param {proto.ITopicID} m TopicID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TopicID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.topicNum != null && Object.hasOwnProperty.call(m, "topicNum"))
                    w.uint32(24).int64(m.topicNum);
                return w;
            };

            /**
             * Decodes a TopicID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TopicID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TopicID} TopicID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TopicID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TopicID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.topicNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TopicID;
        })();

        proto.TokenID = (function() {

            /**
             * Properties of a TokenID.
             * @memberof proto
             * @interface ITokenID
             * @property {Long|null} [shardNum] TokenID shardNum
             * @property {Long|null} [realmNum] TokenID realmNum
             * @property {Long|null} [tokenNum] TokenID tokenNum
             */

            /**
             * Constructs a new TokenID.
             * @memberof proto
             * @classdesc Represents a TokenID.
             * @implements ITokenID
             * @constructor
             * @param {proto.ITokenID=} [p] Properties to set
             */
            function TokenID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenID shardNum.
             * @member {Long} shardNum
             * @memberof proto.TokenID
             * @instance
             */
            TokenID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TokenID realmNum.
             * @member {Long} realmNum
             * @memberof proto.TokenID
             * @instance
             */
            TokenID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TokenID tokenNum.
             * @member {Long} tokenNum
             * @memberof proto.TokenID
             * @instance
             */
            TokenID.prototype.tokenNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new TokenID instance using the specified properties.
             * @function create
             * @memberof proto.TokenID
             * @static
             * @param {proto.ITokenID=} [properties] Properties to set
             * @returns {proto.TokenID} TokenID instance
             */
            TokenID.create = function create(properties) {
                return new TokenID(properties);
            };

            /**
             * Encodes the specified TokenID message. Does not implicitly {@link proto.TokenID.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenID
             * @static
             * @param {proto.ITokenID} m TokenID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.tokenNum != null && Object.hasOwnProperty.call(m, "tokenNum"))
                    w.uint32(24).int64(m.tokenNum);
                return w;
            };

            /**
             * Decodes a TokenID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenID} TokenID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.tokenNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenID;
        })();

        proto.ScheduleID = (function() {

            /**
             * Properties of a ScheduleID.
             * @memberof proto
             * @interface IScheduleID
             * @property {Long|null} [shardNum] ScheduleID shardNum
             * @property {Long|null} [realmNum] ScheduleID realmNum
             * @property {Long|null} [scheduleNum] ScheduleID scheduleNum
             */

            /**
             * Constructs a new ScheduleID.
             * @memberof proto
             * @classdesc Represents a ScheduleID.
             * @implements IScheduleID
             * @constructor
             * @param {proto.IScheduleID=} [p] Properties to set
             */
            function ScheduleID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleID shardNum.
             * @member {Long} shardNum
             * @memberof proto.ScheduleID
             * @instance
             */
            ScheduleID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ScheduleID realmNum.
             * @member {Long} realmNum
             * @memberof proto.ScheduleID
             * @instance
             */
            ScheduleID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ScheduleID scheduleNum.
             * @member {Long} scheduleNum
             * @memberof proto.ScheduleID
             * @instance
             */
            ScheduleID.prototype.scheduleNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ScheduleID instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleID
             * @static
             * @param {proto.IScheduleID=} [properties] Properties to set
             * @returns {proto.ScheduleID} ScheduleID instance
             */
            ScheduleID.create = function create(properties) {
                return new ScheduleID(properties);
            };

            /**
             * Encodes the specified ScheduleID message. Does not implicitly {@link proto.ScheduleID.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleID
             * @static
             * @param {proto.IScheduleID} m ScheduleID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.shardNum != null && Object.hasOwnProperty.call(m, "shardNum"))
                    w.uint32(8).int64(m.shardNum);
                if (m.realmNum != null && Object.hasOwnProperty.call(m, "realmNum"))
                    w.uint32(16).int64(m.realmNum);
                if (m.scheduleNum != null && Object.hasOwnProperty.call(m, "scheduleNum"))
                    w.uint32(24).int64(m.scheduleNum);
                return w;
            };

            /**
             * Decodes a ScheduleID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleID} ScheduleID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.shardNum = r.int64();
                        break;
                    case 2:
                        m.realmNum = r.int64();
                        break;
                    case 3:
                        m.scheduleNum = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleID;
        })();

        /**
         * TokenFreezeStatus enum.
         * @name proto.TokenFreezeStatus
         * @enum {number}
         * @property {number} FreezeNotApplicable=0 FreezeNotApplicable value
         * @property {number} Frozen=1 Frozen value
         * @property {number} Unfrozen=2 Unfrozen value
         */
        proto.TokenFreezeStatus = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FreezeNotApplicable"] = 0;
            values[valuesById[1] = "Frozen"] = 1;
            values[valuesById[2] = "Unfrozen"] = 2;
            return values;
        })();

        /**
         * TokenKycStatus enum.
         * @name proto.TokenKycStatus
         * @enum {number}
         * @property {number} KycNotApplicable=0 KycNotApplicable value
         * @property {number} Granted=1 Granted value
         * @property {number} Revoked=2 Revoked value
         */
        proto.TokenKycStatus = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "KycNotApplicable"] = 0;
            values[valuesById[1] = "Granted"] = 1;
            values[valuesById[2] = "Revoked"] = 2;
            return values;
        })();

        proto.Key = (function() {

            /**
             * Properties of a Key.
             * @memberof proto
             * @interface IKey
             * @property {proto.IContractID|null} [contractID] Key contractID
             * @property {Uint8Array|null} [ed25519] Key ed25519
             * @property {Uint8Array|null} [RSA_3072] Key RSA_3072
             * @property {Uint8Array|null} [ECDSA_384] Key ECDSA_384
             * @property {proto.IThresholdKey|null} [thresholdKey] Key thresholdKey
             * @property {proto.IKeyList|null} [keyList] Key keyList
             */

            /**
             * Constructs a new Key.
             * @memberof proto
             * @classdesc Represents a Key.
             * @implements IKey
             * @constructor
             * @param {proto.IKey=} [p] Properties to set
             */
            function Key(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Key contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.contractID = null;

            /**
             * Key ed25519.
             * @member {Uint8Array} ed25519
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.ed25519 = $util.newBuffer([]);

            /**
             * Key RSA_3072.
             * @member {Uint8Array} RSA_3072
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.RSA_3072 = $util.newBuffer([]);

            /**
             * Key ECDSA_384.
             * @member {Uint8Array} ECDSA_384
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.ECDSA_384 = $util.newBuffer([]);

            /**
             * Key thresholdKey.
             * @member {proto.IThresholdKey|null|undefined} thresholdKey
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.thresholdKey = null;

            /**
             * Key keyList.
             * @member {proto.IKeyList|null|undefined} keyList
             * @memberof proto.Key
             * @instance
             */
            Key.prototype.keyList = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Key key.
             * @member {"contractID"|"ed25519"|"RSA_3072"|"ECDSA_384"|"thresholdKey"|"keyList"|undefined} key
             * @memberof proto.Key
             * @instance
             */
            Object.defineProperty(Key.prototype, "key", {
                get: $util.oneOfGetter($oneOfFields = ["contractID", "ed25519", "RSA_3072", "ECDSA_384", "thresholdKey", "keyList"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Key instance using the specified properties.
             * @function create
             * @memberof proto.Key
             * @static
             * @param {proto.IKey=} [properties] Properties to set
             * @returns {proto.Key} Key instance
             */
            Key.create = function create(properties) {
                return new Key(properties);
            };

            /**
             * Encodes the specified Key message. Does not implicitly {@link proto.Key.verify|verify} messages.
             * @function encode
             * @memberof proto.Key
             * @static
             * @param {proto.IKey} m Key message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Key.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.ed25519 != null && Object.hasOwnProperty.call(m, "ed25519"))
                    w.uint32(18).bytes(m.ed25519);
                if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, "RSA_3072"))
                    w.uint32(26).bytes(m.RSA_3072);
                if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, "ECDSA_384"))
                    w.uint32(34).bytes(m.ECDSA_384);
                if (m.thresholdKey != null && Object.hasOwnProperty.call(m, "thresholdKey"))
                    $root.proto.ThresholdKey.encode(m.thresholdKey, w.uint32(42).fork()).ldelim();
                if (m.keyList != null && Object.hasOwnProperty.call(m, "keyList"))
                    $root.proto.KeyList.encode(m.keyList, w.uint32(50).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Key message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Key
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Key} Key
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Key.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Key();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.ed25519 = r.bytes();
                        break;
                    case 3:
                        m.RSA_3072 = r.bytes();
                        break;
                    case 4:
                        m.ECDSA_384 = r.bytes();
                        break;
                    case 5:
                        m.thresholdKey = $root.proto.ThresholdKey.decode(r, r.uint32());
                        break;
                    case 6:
                        m.keyList = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Key;
        })();

        proto.ThresholdKey = (function() {

            /**
             * Properties of a ThresholdKey.
             * @memberof proto
             * @interface IThresholdKey
             * @property {number|null} [threshold] ThresholdKey threshold
             * @property {proto.IKeyList|null} [keys] ThresholdKey keys
             */

            /**
             * Constructs a new ThresholdKey.
             * @memberof proto
             * @classdesc Represents a ThresholdKey.
             * @implements IThresholdKey
             * @constructor
             * @param {proto.IThresholdKey=} [p] Properties to set
             */
            function ThresholdKey(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ThresholdKey threshold.
             * @member {number} threshold
             * @memberof proto.ThresholdKey
             * @instance
             */
            ThresholdKey.prototype.threshold = 0;

            /**
             * ThresholdKey keys.
             * @member {proto.IKeyList|null|undefined} keys
             * @memberof proto.ThresholdKey
             * @instance
             */
            ThresholdKey.prototype.keys = null;

            /**
             * Creates a new ThresholdKey instance using the specified properties.
             * @function create
             * @memberof proto.ThresholdKey
             * @static
             * @param {proto.IThresholdKey=} [properties] Properties to set
             * @returns {proto.ThresholdKey} ThresholdKey instance
             */
            ThresholdKey.create = function create(properties) {
                return new ThresholdKey(properties);
            };

            /**
             * Encodes the specified ThresholdKey message. Does not implicitly {@link proto.ThresholdKey.verify|verify} messages.
             * @function encode
             * @memberof proto.ThresholdKey
             * @static
             * @param {proto.IThresholdKey} m ThresholdKey message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThresholdKey.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.threshold != null && Object.hasOwnProperty.call(m, "threshold"))
                    w.uint32(8).uint32(m.threshold);
                if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                    $root.proto.KeyList.encode(m.keys, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ThresholdKey message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ThresholdKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ThresholdKey} ThresholdKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThresholdKey.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThresholdKey();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.threshold = r.uint32();
                        break;
                    case 2:
                        m.keys = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ThresholdKey;
        })();

        proto.KeyList = (function() {

            /**
             * Properties of a KeyList.
             * @memberof proto
             * @interface IKeyList
             * @property {Array.<proto.IKey>|null} [keys] KeyList keys
             */

            /**
             * Constructs a new KeyList.
             * @memberof proto
             * @classdesc Represents a KeyList.
             * @implements IKeyList
             * @constructor
             * @param {proto.IKeyList=} [p] Properties to set
             */
            function KeyList(p) {
                this.keys = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * KeyList keys.
             * @member {Array.<proto.IKey>} keys
             * @memberof proto.KeyList
             * @instance
             */
            KeyList.prototype.keys = $util.emptyArray;

            /**
             * Creates a new KeyList instance using the specified properties.
             * @function create
             * @memberof proto.KeyList
             * @static
             * @param {proto.IKeyList=} [properties] Properties to set
             * @returns {proto.KeyList} KeyList instance
             */
            KeyList.create = function create(properties) {
                return new KeyList(properties);
            };

            /**
             * Encodes the specified KeyList message. Does not implicitly {@link proto.KeyList.verify|verify} messages.
             * @function encode
             * @memberof proto.KeyList
             * @static
             * @param {proto.IKeyList} m KeyList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KeyList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.keys != null && m.keys.length) {
                    for (var i = 0; i < m.keys.length; ++i)
                        $root.proto.Key.encode(m.keys[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a KeyList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.KeyList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.KeyList} KeyList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KeyList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.KeyList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.keys && m.keys.length))
                            m.keys = [];
                        m.keys.push($root.proto.Key.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return KeyList;
        })();

        proto.Signature = (function() {

            /**
             * Properties of a Signature.
             * @memberof proto
             * @interface ISignature
             * @property {Uint8Array|null} [contract] Signature contract
             * @property {Uint8Array|null} [ed25519] Signature ed25519
             * @property {Uint8Array|null} [RSA_3072] Signature RSA_3072
             * @property {Uint8Array|null} [ECDSA_384] Signature ECDSA_384
             * @property {proto.IThresholdSignature|null} [thresholdSignature] Signature thresholdSignature
             * @property {proto.ISignatureList|null} [signatureList] Signature signatureList
             */

            /**
             * Constructs a new Signature.
             * @memberof proto
             * @classdesc Represents a Signature.
             * @implements ISignature
             * @constructor
             * @param {proto.ISignature=} [p] Properties to set
             */
            function Signature(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Signature contract.
             * @member {Uint8Array} contract
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.contract = $util.newBuffer([]);

            /**
             * Signature ed25519.
             * @member {Uint8Array} ed25519
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.ed25519 = $util.newBuffer([]);

            /**
             * Signature RSA_3072.
             * @member {Uint8Array} RSA_3072
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.RSA_3072 = $util.newBuffer([]);

            /**
             * Signature ECDSA_384.
             * @member {Uint8Array} ECDSA_384
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.ECDSA_384 = $util.newBuffer([]);

            /**
             * Signature thresholdSignature.
             * @member {proto.IThresholdSignature|null|undefined} thresholdSignature
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.thresholdSignature = null;

            /**
             * Signature signatureList.
             * @member {proto.ISignatureList|null|undefined} signatureList
             * @memberof proto.Signature
             * @instance
             */
            Signature.prototype.signatureList = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Signature signature.
             * @member {"contract"|"ed25519"|"RSA_3072"|"ECDSA_384"|"thresholdSignature"|"signatureList"|undefined} signature
             * @memberof proto.Signature
             * @instance
             */
            Object.defineProperty(Signature.prototype, "signature", {
                get: $util.oneOfGetter($oneOfFields = ["contract", "ed25519", "RSA_3072", "ECDSA_384", "thresholdSignature", "signatureList"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Signature instance using the specified properties.
             * @function create
             * @memberof proto.Signature
             * @static
             * @param {proto.ISignature=} [properties] Properties to set
             * @returns {proto.Signature} Signature instance
             */
            Signature.create = function create(properties) {
                return new Signature(properties);
            };

            /**
             * Encodes the specified Signature message. Does not implicitly {@link proto.Signature.verify|verify} messages.
             * @function encode
             * @memberof proto.Signature
             * @static
             * @param {proto.ISignature} m Signature message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Signature.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                    w.uint32(10).bytes(m.contract);
                if (m.ed25519 != null && Object.hasOwnProperty.call(m, "ed25519"))
                    w.uint32(18).bytes(m.ed25519);
                if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, "RSA_3072"))
                    w.uint32(26).bytes(m.RSA_3072);
                if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, "ECDSA_384"))
                    w.uint32(34).bytes(m.ECDSA_384);
                if (m.thresholdSignature != null && Object.hasOwnProperty.call(m, "thresholdSignature"))
                    $root.proto.ThresholdSignature.encode(m.thresholdSignature, w.uint32(42).fork()).ldelim();
                if (m.signatureList != null && Object.hasOwnProperty.call(m, "signatureList"))
                    $root.proto.SignatureList.encode(m.signatureList, w.uint32(50).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Signature message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Signature
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Signature} Signature
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Signature.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Signature();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contract = r.bytes();
                        break;
                    case 2:
                        m.ed25519 = r.bytes();
                        break;
                    case 3:
                        m.RSA_3072 = r.bytes();
                        break;
                    case 4:
                        m.ECDSA_384 = r.bytes();
                        break;
                    case 5:
                        m.thresholdSignature = $root.proto.ThresholdSignature.decode(r, r.uint32());
                        break;
                    case 6:
                        m.signatureList = $root.proto.SignatureList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Signature;
        })();

        proto.ThresholdSignature = (function() {

            /**
             * Properties of a ThresholdSignature.
             * @memberof proto
             * @interface IThresholdSignature
             * @property {proto.ISignatureList|null} [sigs] ThresholdSignature sigs
             */

            /**
             * Constructs a new ThresholdSignature.
             * @memberof proto
             * @classdesc Represents a ThresholdSignature.
             * @implements IThresholdSignature
             * @constructor
             * @param {proto.IThresholdSignature=} [p] Properties to set
             */
            function ThresholdSignature(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ThresholdSignature sigs.
             * @member {proto.ISignatureList|null|undefined} sigs
             * @memberof proto.ThresholdSignature
             * @instance
             */
            ThresholdSignature.prototype.sigs = null;

            /**
             * Creates a new ThresholdSignature instance using the specified properties.
             * @function create
             * @memberof proto.ThresholdSignature
             * @static
             * @param {proto.IThresholdSignature=} [properties] Properties to set
             * @returns {proto.ThresholdSignature} ThresholdSignature instance
             */
            ThresholdSignature.create = function create(properties) {
                return new ThresholdSignature(properties);
            };

            /**
             * Encodes the specified ThresholdSignature message. Does not implicitly {@link proto.ThresholdSignature.verify|verify} messages.
             * @function encode
             * @memberof proto.ThresholdSignature
             * @static
             * @param {proto.IThresholdSignature} m ThresholdSignature message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThresholdSignature.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.sigs != null && Object.hasOwnProperty.call(m, "sigs"))
                    $root.proto.SignatureList.encode(m.sigs, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ThresholdSignature message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ThresholdSignature
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ThresholdSignature} ThresholdSignature
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThresholdSignature.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThresholdSignature();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        m.sigs = $root.proto.SignatureList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ThresholdSignature;
        })();

        proto.SignatureList = (function() {

            /**
             * Properties of a SignatureList.
             * @memberof proto
             * @interface ISignatureList
             * @property {Array.<proto.ISignature>|null} [sigs] SignatureList sigs
             */

            /**
             * Constructs a new SignatureList.
             * @memberof proto
             * @classdesc Represents a SignatureList.
             * @implements ISignatureList
             * @constructor
             * @param {proto.ISignatureList=} [p] Properties to set
             */
            function SignatureList(p) {
                this.sigs = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SignatureList sigs.
             * @member {Array.<proto.ISignature>} sigs
             * @memberof proto.SignatureList
             * @instance
             */
            SignatureList.prototype.sigs = $util.emptyArray;

            /**
             * Creates a new SignatureList instance using the specified properties.
             * @function create
             * @memberof proto.SignatureList
             * @static
             * @param {proto.ISignatureList=} [properties] Properties to set
             * @returns {proto.SignatureList} SignatureList instance
             */
            SignatureList.create = function create(properties) {
                return new SignatureList(properties);
            };

            /**
             * Encodes the specified SignatureList message. Does not implicitly {@link proto.SignatureList.verify|verify} messages.
             * @function encode
             * @memberof proto.SignatureList
             * @static
             * @param {proto.ISignatureList} m SignatureList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignatureList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.sigs != null && m.sigs.length) {
                    for (var i = 0; i < m.sigs.length; ++i)
                        $root.proto.Signature.encode(m.sigs[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a SignatureList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SignatureList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SignatureList} SignatureList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignatureList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignatureList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        if (!(m.sigs && m.sigs.length))
                            m.sigs = [];
                        m.sigs.push($root.proto.Signature.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SignatureList;
        })();

        proto.SignaturePair = (function() {

            /**
             * Properties of a SignaturePair.
             * @memberof proto
             * @interface ISignaturePair
             * @property {Uint8Array|null} [pubKeyPrefix] SignaturePair pubKeyPrefix
             * @property {Uint8Array|null} [contract] SignaturePair contract
             * @property {Uint8Array|null} [ed25519] SignaturePair ed25519
             * @property {Uint8Array|null} [RSA_3072] SignaturePair RSA_3072
             * @property {Uint8Array|null} [ECDSA_384] SignaturePair ECDSA_384
             */

            /**
             * Constructs a new SignaturePair.
             * @memberof proto
             * @classdesc Represents a SignaturePair.
             * @implements ISignaturePair
             * @constructor
             * @param {proto.ISignaturePair=} [p] Properties to set
             */
            function SignaturePair(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SignaturePair pubKeyPrefix.
             * @member {Uint8Array} pubKeyPrefix
             * @memberof proto.SignaturePair
             * @instance
             */
            SignaturePair.prototype.pubKeyPrefix = $util.newBuffer([]);

            /**
             * SignaturePair contract.
             * @member {Uint8Array} contract
             * @memberof proto.SignaturePair
             * @instance
             */
            SignaturePair.prototype.contract = $util.newBuffer([]);

            /**
             * SignaturePair ed25519.
             * @member {Uint8Array} ed25519
             * @memberof proto.SignaturePair
             * @instance
             */
            SignaturePair.prototype.ed25519 = $util.newBuffer([]);

            /**
             * SignaturePair RSA_3072.
             * @member {Uint8Array} RSA_3072
             * @memberof proto.SignaturePair
             * @instance
             */
            SignaturePair.prototype.RSA_3072 = $util.newBuffer([]);

            /**
             * SignaturePair ECDSA_384.
             * @member {Uint8Array} ECDSA_384
             * @memberof proto.SignaturePair
             * @instance
             */
            SignaturePair.prototype.ECDSA_384 = $util.newBuffer([]);

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SignaturePair signature.
             * @member {"contract"|"ed25519"|"RSA_3072"|"ECDSA_384"|undefined} signature
             * @memberof proto.SignaturePair
             * @instance
             */
            Object.defineProperty(SignaturePair.prototype, "signature", {
                get: $util.oneOfGetter($oneOfFields = ["contract", "ed25519", "RSA_3072", "ECDSA_384"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SignaturePair instance using the specified properties.
             * @function create
             * @memberof proto.SignaturePair
             * @static
             * @param {proto.ISignaturePair=} [properties] Properties to set
             * @returns {proto.SignaturePair} SignaturePair instance
             */
            SignaturePair.create = function create(properties) {
                return new SignaturePair(properties);
            };

            /**
             * Encodes the specified SignaturePair message. Does not implicitly {@link proto.SignaturePair.verify|verify} messages.
             * @function encode
             * @memberof proto.SignaturePair
             * @static
             * @param {proto.ISignaturePair} m SignaturePair message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignaturePair.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.pubKeyPrefix != null && Object.hasOwnProperty.call(m, "pubKeyPrefix"))
                    w.uint32(10).bytes(m.pubKeyPrefix);
                if (m.contract != null && Object.hasOwnProperty.call(m, "contract"))
                    w.uint32(18).bytes(m.contract);
                if (m.ed25519 != null && Object.hasOwnProperty.call(m, "ed25519"))
                    w.uint32(26).bytes(m.ed25519);
                if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, "RSA_3072"))
                    w.uint32(34).bytes(m.RSA_3072);
                if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, "ECDSA_384"))
                    w.uint32(42).bytes(m.ECDSA_384);
                return w;
            };

            /**
             * Decodes a SignaturePair message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SignaturePair
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SignaturePair} SignaturePair
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignaturePair.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignaturePair();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.pubKeyPrefix = r.bytes();
                        break;
                    case 2:
                        m.contract = r.bytes();
                        break;
                    case 3:
                        m.ed25519 = r.bytes();
                        break;
                    case 4:
                        m.RSA_3072 = r.bytes();
                        break;
                    case 5:
                        m.ECDSA_384 = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SignaturePair;
        })();

        proto.SignatureMap = (function() {

            /**
             * Properties of a SignatureMap.
             * @memberof proto
             * @interface ISignatureMap
             * @property {Array.<proto.ISignaturePair>|null} [sigPair] SignatureMap sigPair
             */

            /**
             * Constructs a new SignatureMap.
             * @memberof proto
             * @classdesc Represents a SignatureMap.
             * @implements ISignatureMap
             * @constructor
             * @param {proto.ISignatureMap=} [p] Properties to set
             */
            function SignatureMap(p) {
                this.sigPair = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SignatureMap sigPair.
             * @member {Array.<proto.ISignaturePair>} sigPair
             * @memberof proto.SignatureMap
             * @instance
             */
            SignatureMap.prototype.sigPair = $util.emptyArray;

            /**
             * Creates a new SignatureMap instance using the specified properties.
             * @function create
             * @memberof proto.SignatureMap
             * @static
             * @param {proto.ISignatureMap=} [properties] Properties to set
             * @returns {proto.SignatureMap} SignatureMap instance
             */
            SignatureMap.create = function create(properties) {
                return new SignatureMap(properties);
            };

            /**
             * Encodes the specified SignatureMap message. Does not implicitly {@link proto.SignatureMap.verify|verify} messages.
             * @function encode
             * @memberof proto.SignatureMap
             * @static
             * @param {proto.ISignatureMap} m SignatureMap message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignatureMap.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.sigPair != null && m.sigPair.length) {
                    for (var i = 0; i < m.sigPair.length; ++i)
                        $root.proto.SignaturePair.encode(m.sigPair[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a SignatureMap message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SignatureMap
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SignatureMap} SignatureMap
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignatureMap.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignatureMap();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.sigPair && m.sigPair.length))
                            m.sigPair = [];
                        m.sigPair.push($root.proto.SignaturePair.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SignatureMap;
        })();

        /**
         * HederaFunctionality enum.
         * @name proto.HederaFunctionality
         * @enum {number}
         * @property {number} NONE=0 NONE value
         * @property {number} CryptoTransfer=1 CryptoTransfer value
         * @property {number} CryptoUpdate=2 CryptoUpdate value
         * @property {number} CryptoDelete=3 CryptoDelete value
         * @property {number} CryptoAddLiveHash=4 CryptoAddLiveHash value
         * @property {number} CryptoDeleteLiveHash=5 CryptoDeleteLiveHash value
         * @property {number} ContractCall=6 ContractCall value
         * @property {number} ContractCreate=7 ContractCreate value
         * @property {number} ContractUpdate=8 ContractUpdate value
         * @property {number} FileCreate=9 FileCreate value
         * @property {number} FileAppend=10 FileAppend value
         * @property {number} FileUpdate=11 FileUpdate value
         * @property {number} FileDelete=12 FileDelete value
         * @property {number} CryptoGetAccountBalance=13 CryptoGetAccountBalance value
         * @property {number} CryptoGetAccountRecords=14 CryptoGetAccountRecords value
         * @property {number} CryptoGetInfo=15 CryptoGetInfo value
         * @property {number} ContractCallLocal=16 ContractCallLocal value
         * @property {number} ContractGetInfo=17 ContractGetInfo value
         * @property {number} ContractGetBytecode=18 ContractGetBytecode value
         * @property {number} GetBySolidityID=19 GetBySolidityID value
         * @property {number} GetByKey=20 GetByKey value
         * @property {number} CryptoGetLiveHash=21 CryptoGetLiveHash value
         * @property {number} CryptoGetStakers=22 CryptoGetStakers value
         * @property {number} FileGetContents=23 FileGetContents value
         * @property {number} FileGetInfo=24 FileGetInfo value
         * @property {number} TransactionGetRecord=25 TransactionGetRecord value
         * @property {number} ContractGetRecords=26 ContractGetRecords value
         * @property {number} CryptoCreate=27 CryptoCreate value
         * @property {number} SystemDelete=28 SystemDelete value
         * @property {number} SystemUndelete=29 SystemUndelete value
         * @property {number} ContractDelete=30 ContractDelete value
         * @property {number} Freeze=31 Freeze value
         * @property {number} CreateTransactionRecord=32 CreateTransactionRecord value
         * @property {number} CryptoAccountAutoRenew=33 CryptoAccountAutoRenew value
         * @property {number} ContractAutoRenew=34 ContractAutoRenew value
         * @property {number} GetVersionInfo=35 GetVersionInfo value
         * @property {number} TransactionGetReceipt=36 TransactionGetReceipt value
         * @property {number} ConsensusCreateTopic=50 ConsensusCreateTopic value
         * @property {number} ConsensusUpdateTopic=51 ConsensusUpdateTopic value
         * @property {number} ConsensusDeleteTopic=52 ConsensusDeleteTopic value
         * @property {number} ConsensusGetTopicInfo=53 ConsensusGetTopicInfo value
         * @property {number} ConsensusSubmitMessage=54 ConsensusSubmitMessage value
         * @property {number} UncheckedSubmit=55 UncheckedSubmit value
         * @property {number} TokenCreate=56 TokenCreate value
         * @property {number} TokenGetInfo=58 TokenGetInfo value
         * @property {number} TokenFreezeAccount=59 TokenFreezeAccount value
         * @property {number} TokenUnfreezeAccount=60 TokenUnfreezeAccount value
         * @property {number} TokenGrantKycToAccount=61 TokenGrantKycToAccount value
         * @property {number} TokenRevokeKycFromAccount=62 TokenRevokeKycFromAccount value
         * @property {number} TokenDelete=63 TokenDelete value
         * @property {number} TokenUpdate=64 TokenUpdate value
         * @property {number} TokenMint=65 TokenMint value
         * @property {number} TokenBurn=66 TokenBurn value
         * @property {number} TokenAccountWipe=67 TokenAccountWipe value
         * @property {number} TokenAssociateToAccount=68 TokenAssociateToAccount value
         * @property {number} TokenDissociateFromAccount=69 TokenDissociateFromAccount value
         * @property {number} ScheduleCreate=70 ScheduleCreate value
         * @property {number} ScheduleDelete=71 ScheduleDelete value
         * @property {number} ScheduleSign=72 ScheduleSign value
         * @property {number} ScheduleGetInfo=73 ScheduleGetInfo value
         */
        proto.HederaFunctionality = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NONE"] = 0;
            values[valuesById[1] = "CryptoTransfer"] = 1;
            values[valuesById[2] = "CryptoUpdate"] = 2;
            values[valuesById[3] = "CryptoDelete"] = 3;
            values[valuesById[4] = "CryptoAddLiveHash"] = 4;
            values[valuesById[5] = "CryptoDeleteLiveHash"] = 5;
            values[valuesById[6] = "ContractCall"] = 6;
            values[valuesById[7] = "ContractCreate"] = 7;
            values[valuesById[8] = "ContractUpdate"] = 8;
            values[valuesById[9] = "FileCreate"] = 9;
            values[valuesById[10] = "FileAppend"] = 10;
            values[valuesById[11] = "FileUpdate"] = 11;
            values[valuesById[12] = "FileDelete"] = 12;
            values[valuesById[13] = "CryptoGetAccountBalance"] = 13;
            values[valuesById[14] = "CryptoGetAccountRecords"] = 14;
            values[valuesById[15] = "CryptoGetInfo"] = 15;
            values[valuesById[16] = "ContractCallLocal"] = 16;
            values[valuesById[17] = "ContractGetInfo"] = 17;
            values[valuesById[18] = "ContractGetBytecode"] = 18;
            values[valuesById[19] = "GetBySolidityID"] = 19;
            values[valuesById[20] = "GetByKey"] = 20;
            values[valuesById[21] = "CryptoGetLiveHash"] = 21;
            values[valuesById[22] = "CryptoGetStakers"] = 22;
            values[valuesById[23] = "FileGetContents"] = 23;
            values[valuesById[24] = "FileGetInfo"] = 24;
            values[valuesById[25] = "TransactionGetRecord"] = 25;
            values[valuesById[26] = "ContractGetRecords"] = 26;
            values[valuesById[27] = "CryptoCreate"] = 27;
            values[valuesById[28] = "SystemDelete"] = 28;
            values[valuesById[29] = "SystemUndelete"] = 29;
            values[valuesById[30] = "ContractDelete"] = 30;
            values[valuesById[31] = "Freeze"] = 31;
            values[valuesById[32] = "CreateTransactionRecord"] = 32;
            values[valuesById[33] = "CryptoAccountAutoRenew"] = 33;
            values[valuesById[34] = "ContractAutoRenew"] = 34;
            values[valuesById[35] = "GetVersionInfo"] = 35;
            values[valuesById[36] = "TransactionGetReceipt"] = 36;
            values[valuesById[50] = "ConsensusCreateTopic"] = 50;
            values[valuesById[51] = "ConsensusUpdateTopic"] = 51;
            values[valuesById[52] = "ConsensusDeleteTopic"] = 52;
            values[valuesById[53] = "ConsensusGetTopicInfo"] = 53;
            values[valuesById[54] = "ConsensusSubmitMessage"] = 54;
            values[valuesById[55] = "UncheckedSubmit"] = 55;
            values[valuesById[56] = "TokenCreate"] = 56;
            values[valuesById[58] = "TokenGetInfo"] = 58;
            values[valuesById[59] = "TokenFreezeAccount"] = 59;
            values[valuesById[60] = "TokenUnfreezeAccount"] = 60;
            values[valuesById[61] = "TokenGrantKycToAccount"] = 61;
            values[valuesById[62] = "TokenRevokeKycFromAccount"] = 62;
            values[valuesById[63] = "TokenDelete"] = 63;
            values[valuesById[64] = "TokenUpdate"] = 64;
            values[valuesById[65] = "TokenMint"] = 65;
            values[valuesById[66] = "TokenBurn"] = 66;
            values[valuesById[67] = "TokenAccountWipe"] = 67;
            values[valuesById[68] = "TokenAssociateToAccount"] = 68;
            values[valuesById[69] = "TokenDissociateFromAccount"] = 69;
            values[valuesById[70] = "ScheduleCreate"] = 70;
            values[valuesById[71] = "ScheduleDelete"] = 71;
            values[valuesById[72] = "ScheduleSign"] = 72;
            values[valuesById[73] = "ScheduleGetInfo"] = 73;
            return values;
        })();

        proto.FeeComponents = (function() {

            /**
             * Properties of a FeeComponents.
             * @memberof proto
             * @interface IFeeComponents
             * @property {Long|null} [min] FeeComponents min
             * @property {Long|null} [max] FeeComponents max
             * @property {Long|null} [constant] FeeComponents constant
             * @property {Long|null} [bpt] FeeComponents bpt
             * @property {Long|null} [vpt] FeeComponents vpt
             * @property {Long|null} [rbh] FeeComponents rbh
             * @property {Long|null} [sbh] FeeComponents sbh
             * @property {Long|null} [gas] FeeComponents gas
             * @property {Long|null} [tv] FeeComponents tv
             * @property {Long|null} [bpr] FeeComponents bpr
             * @property {Long|null} [sbpr] FeeComponents sbpr
             */

            /**
             * Constructs a new FeeComponents.
             * @memberof proto
             * @classdesc Represents a FeeComponents.
             * @implements IFeeComponents
             * @constructor
             * @param {proto.IFeeComponents=} [p] Properties to set
             */
            function FeeComponents(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FeeComponents min.
             * @member {Long} min
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.min = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents max.
             * @member {Long} max
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.max = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents constant.
             * @member {Long} constant
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.constant = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents bpt.
             * @member {Long} bpt
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.bpt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents vpt.
             * @member {Long} vpt
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.vpt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents rbh.
             * @member {Long} rbh
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.rbh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents sbh.
             * @member {Long} sbh
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.sbh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents gas.
             * @member {Long} gas
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents tv.
             * @member {Long} tv
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.tv = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents bpr.
             * @member {Long} bpr
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.bpr = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FeeComponents sbpr.
             * @member {Long} sbpr
             * @memberof proto.FeeComponents
             * @instance
             */
            FeeComponents.prototype.sbpr = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new FeeComponents instance using the specified properties.
             * @function create
             * @memberof proto.FeeComponents
             * @static
             * @param {proto.IFeeComponents=} [properties] Properties to set
             * @returns {proto.FeeComponents} FeeComponents instance
             */
            FeeComponents.create = function create(properties) {
                return new FeeComponents(properties);
            };

            /**
             * Encodes the specified FeeComponents message. Does not implicitly {@link proto.FeeComponents.verify|verify} messages.
             * @function encode
             * @memberof proto.FeeComponents
             * @static
             * @param {proto.IFeeComponents} m FeeComponents message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeeComponents.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.min != null && Object.hasOwnProperty.call(m, "min"))
                    w.uint32(8).int64(m.min);
                if (m.max != null && Object.hasOwnProperty.call(m, "max"))
                    w.uint32(16).int64(m.max);
                if (m.constant != null && Object.hasOwnProperty.call(m, "constant"))
                    w.uint32(24).int64(m.constant);
                if (m.bpt != null && Object.hasOwnProperty.call(m, "bpt"))
                    w.uint32(32).int64(m.bpt);
                if (m.vpt != null && Object.hasOwnProperty.call(m, "vpt"))
                    w.uint32(40).int64(m.vpt);
                if (m.rbh != null && Object.hasOwnProperty.call(m, "rbh"))
                    w.uint32(48).int64(m.rbh);
                if (m.sbh != null && Object.hasOwnProperty.call(m, "sbh"))
                    w.uint32(56).int64(m.sbh);
                if (m.gas != null && Object.hasOwnProperty.call(m, "gas"))
                    w.uint32(64).int64(m.gas);
                if (m.tv != null && Object.hasOwnProperty.call(m, "tv"))
                    w.uint32(72).int64(m.tv);
                if (m.bpr != null && Object.hasOwnProperty.call(m, "bpr"))
                    w.uint32(80).int64(m.bpr);
                if (m.sbpr != null && Object.hasOwnProperty.call(m, "sbpr"))
                    w.uint32(88).int64(m.sbpr);
                return w;
            };

            /**
             * Decodes a FeeComponents message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FeeComponents
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FeeComponents} FeeComponents
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeeComponents.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeComponents();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.min = r.int64();
                        break;
                    case 2:
                        m.max = r.int64();
                        break;
                    case 3:
                        m.constant = r.int64();
                        break;
                    case 4:
                        m.bpt = r.int64();
                        break;
                    case 5:
                        m.vpt = r.int64();
                        break;
                    case 6:
                        m.rbh = r.int64();
                        break;
                    case 7:
                        m.sbh = r.int64();
                        break;
                    case 8:
                        m.gas = r.int64();
                        break;
                    case 9:
                        m.tv = r.int64();
                        break;
                    case 10:
                        m.bpr = r.int64();
                        break;
                    case 11:
                        m.sbpr = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FeeComponents;
        })();

        proto.TransactionFeeSchedule = (function() {

            /**
             * Properties of a TransactionFeeSchedule.
             * @memberof proto
             * @interface ITransactionFeeSchedule
             * @property {proto.HederaFunctionality|null} [hederaFunctionality] TransactionFeeSchedule hederaFunctionality
             * @property {proto.IFeeData|null} [feeData] TransactionFeeSchedule feeData
             */

            /**
             * Constructs a new TransactionFeeSchedule.
             * @memberof proto
             * @classdesc Represents a TransactionFeeSchedule.
             * @implements ITransactionFeeSchedule
             * @constructor
             * @param {proto.ITransactionFeeSchedule=} [p] Properties to set
             */
            function TransactionFeeSchedule(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionFeeSchedule hederaFunctionality.
             * @member {proto.HederaFunctionality} hederaFunctionality
             * @memberof proto.TransactionFeeSchedule
             * @instance
             */
            TransactionFeeSchedule.prototype.hederaFunctionality = 0;

            /**
             * TransactionFeeSchedule feeData.
             * @member {proto.IFeeData|null|undefined} feeData
             * @memberof proto.TransactionFeeSchedule
             * @instance
             */
            TransactionFeeSchedule.prototype.feeData = null;

            /**
             * Creates a new TransactionFeeSchedule instance using the specified properties.
             * @function create
             * @memberof proto.TransactionFeeSchedule
             * @static
             * @param {proto.ITransactionFeeSchedule=} [properties] Properties to set
             * @returns {proto.TransactionFeeSchedule} TransactionFeeSchedule instance
             */
            TransactionFeeSchedule.create = function create(properties) {
                return new TransactionFeeSchedule(properties);
            };

            /**
             * Encodes the specified TransactionFeeSchedule message. Does not implicitly {@link proto.TransactionFeeSchedule.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionFeeSchedule
             * @static
             * @param {proto.ITransactionFeeSchedule} m TransactionFeeSchedule message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionFeeSchedule.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.hederaFunctionality != null && Object.hasOwnProperty.call(m, "hederaFunctionality"))
                    w.uint32(8).int32(m.hederaFunctionality);
                if (m.feeData != null && Object.hasOwnProperty.call(m, "feeData"))
                    $root.proto.FeeData.encode(m.feeData, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionFeeSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionFeeSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionFeeSchedule} TransactionFeeSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionFeeSchedule.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionFeeSchedule();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.hederaFunctionality = r.int32();
                        break;
                    case 2:
                        m.feeData = $root.proto.FeeData.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionFeeSchedule;
        })();

        proto.FeeData = (function() {

            /**
             * Properties of a FeeData.
             * @memberof proto
             * @interface IFeeData
             * @property {proto.IFeeComponents|null} [nodedata] FeeData nodedata
             * @property {proto.IFeeComponents|null} [networkdata] FeeData networkdata
             * @property {proto.IFeeComponents|null} [servicedata] FeeData servicedata
             */

            /**
             * Constructs a new FeeData.
             * @memberof proto
             * @classdesc Represents a FeeData.
             * @implements IFeeData
             * @constructor
             * @param {proto.IFeeData=} [p] Properties to set
             */
            function FeeData(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FeeData nodedata.
             * @member {proto.IFeeComponents|null|undefined} nodedata
             * @memberof proto.FeeData
             * @instance
             */
            FeeData.prototype.nodedata = null;

            /**
             * FeeData networkdata.
             * @member {proto.IFeeComponents|null|undefined} networkdata
             * @memberof proto.FeeData
             * @instance
             */
            FeeData.prototype.networkdata = null;

            /**
             * FeeData servicedata.
             * @member {proto.IFeeComponents|null|undefined} servicedata
             * @memberof proto.FeeData
             * @instance
             */
            FeeData.prototype.servicedata = null;

            /**
             * Creates a new FeeData instance using the specified properties.
             * @function create
             * @memberof proto.FeeData
             * @static
             * @param {proto.IFeeData=} [properties] Properties to set
             * @returns {proto.FeeData} FeeData instance
             */
            FeeData.create = function create(properties) {
                return new FeeData(properties);
            };

            /**
             * Encodes the specified FeeData message. Does not implicitly {@link proto.FeeData.verify|verify} messages.
             * @function encode
             * @memberof proto.FeeData
             * @static
             * @param {proto.IFeeData} m FeeData message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeeData.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodedata != null && Object.hasOwnProperty.call(m, "nodedata"))
                    $root.proto.FeeComponents.encode(m.nodedata, w.uint32(10).fork()).ldelim();
                if (m.networkdata != null && Object.hasOwnProperty.call(m, "networkdata"))
                    $root.proto.FeeComponents.encode(m.networkdata, w.uint32(18).fork()).ldelim();
                if (m.servicedata != null && Object.hasOwnProperty.call(m, "servicedata"))
                    $root.proto.FeeComponents.encode(m.servicedata, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FeeData message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FeeData
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FeeData} FeeData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeeData.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeData();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.nodedata = $root.proto.FeeComponents.decode(r, r.uint32());
                        break;
                    case 2:
                        m.networkdata = $root.proto.FeeComponents.decode(r, r.uint32());
                        break;
                    case 3:
                        m.servicedata = $root.proto.FeeComponents.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FeeData;
        })();

        proto.FeeSchedule = (function() {

            /**
             * Properties of a FeeSchedule.
             * @memberof proto
             * @interface IFeeSchedule
             * @property {Array.<proto.ITransactionFeeSchedule>|null} [transactionFeeSchedule] FeeSchedule transactionFeeSchedule
             * @property {proto.ITimestampSeconds|null} [expiryTime] FeeSchedule expiryTime
             */

            /**
             * Constructs a new FeeSchedule.
             * @memberof proto
             * @classdesc Represents a FeeSchedule.
             * @implements IFeeSchedule
             * @constructor
             * @param {proto.IFeeSchedule=} [p] Properties to set
             */
            function FeeSchedule(p) {
                this.transactionFeeSchedule = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FeeSchedule transactionFeeSchedule.
             * @member {Array.<proto.ITransactionFeeSchedule>} transactionFeeSchedule
             * @memberof proto.FeeSchedule
             * @instance
             */
            FeeSchedule.prototype.transactionFeeSchedule = $util.emptyArray;

            /**
             * FeeSchedule expiryTime.
             * @member {proto.ITimestampSeconds|null|undefined} expiryTime
             * @memberof proto.FeeSchedule
             * @instance
             */
            FeeSchedule.prototype.expiryTime = null;

            /**
             * Creates a new FeeSchedule instance using the specified properties.
             * @function create
             * @memberof proto.FeeSchedule
             * @static
             * @param {proto.IFeeSchedule=} [properties] Properties to set
             * @returns {proto.FeeSchedule} FeeSchedule instance
             */
            FeeSchedule.create = function create(properties) {
                return new FeeSchedule(properties);
            };

            /**
             * Encodes the specified FeeSchedule message. Does not implicitly {@link proto.FeeSchedule.verify|verify} messages.
             * @function encode
             * @memberof proto.FeeSchedule
             * @static
             * @param {proto.IFeeSchedule} m FeeSchedule message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeeSchedule.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionFeeSchedule != null && m.transactionFeeSchedule.length) {
                    for (var i = 0; i < m.transactionFeeSchedule.length; ++i)
                        $root.proto.TransactionFeeSchedule.encode(m.transactionFeeSchedule[i], w.uint32(10).fork()).ldelim();
                }
                if (m.expiryTime != null && Object.hasOwnProperty.call(m, "expiryTime"))
                    $root.proto.TimestampSeconds.encode(m.expiryTime, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FeeSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FeeSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FeeSchedule} FeeSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeeSchedule.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeSchedule();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.transactionFeeSchedule && m.transactionFeeSchedule.length))
                            m.transactionFeeSchedule = [];
                        m.transactionFeeSchedule.push($root.proto.TransactionFeeSchedule.decode(r, r.uint32()));
                        break;
                    case 2:
                        m.expiryTime = $root.proto.TimestampSeconds.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FeeSchedule;
        })();

        proto.CurrentAndNextFeeSchedule = (function() {

            /**
             * Properties of a CurrentAndNextFeeSchedule.
             * @memberof proto
             * @interface ICurrentAndNextFeeSchedule
             * @property {proto.IFeeSchedule|null} [currentFeeSchedule] CurrentAndNextFeeSchedule currentFeeSchedule
             * @property {proto.IFeeSchedule|null} [nextFeeSchedule] CurrentAndNextFeeSchedule nextFeeSchedule
             */

            /**
             * Constructs a new CurrentAndNextFeeSchedule.
             * @memberof proto
             * @classdesc Represents a CurrentAndNextFeeSchedule.
             * @implements ICurrentAndNextFeeSchedule
             * @constructor
             * @param {proto.ICurrentAndNextFeeSchedule=} [p] Properties to set
             */
            function CurrentAndNextFeeSchedule(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CurrentAndNextFeeSchedule currentFeeSchedule.
             * @member {proto.IFeeSchedule|null|undefined} currentFeeSchedule
             * @memberof proto.CurrentAndNextFeeSchedule
             * @instance
             */
            CurrentAndNextFeeSchedule.prototype.currentFeeSchedule = null;

            /**
             * CurrentAndNextFeeSchedule nextFeeSchedule.
             * @member {proto.IFeeSchedule|null|undefined} nextFeeSchedule
             * @memberof proto.CurrentAndNextFeeSchedule
             * @instance
             */
            CurrentAndNextFeeSchedule.prototype.nextFeeSchedule = null;

            /**
             * Creates a new CurrentAndNextFeeSchedule instance using the specified properties.
             * @function create
             * @memberof proto.CurrentAndNextFeeSchedule
             * @static
             * @param {proto.ICurrentAndNextFeeSchedule=} [properties] Properties to set
             * @returns {proto.CurrentAndNextFeeSchedule} CurrentAndNextFeeSchedule instance
             */
            CurrentAndNextFeeSchedule.create = function create(properties) {
                return new CurrentAndNextFeeSchedule(properties);
            };

            /**
             * Encodes the specified CurrentAndNextFeeSchedule message. Does not implicitly {@link proto.CurrentAndNextFeeSchedule.verify|verify} messages.
             * @function encode
             * @memberof proto.CurrentAndNextFeeSchedule
             * @static
             * @param {proto.ICurrentAndNextFeeSchedule} m CurrentAndNextFeeSchedule message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CurrentAndNextFeeSchedule.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.currentFeeSchedule != null && Object.hasOwnProperty.call(m, "currentFeeSchedule"))
                    $root.proto.FeeSchedule.encode(m.currentFeeSchedule, w.uint32(10).fork()).ldelim();
                if (m.nextFeeSchedule != null && Object.hasOwnProperty.call(m, "nextFeeSchedule"))
                    $root.proto.FeeSchedule.encode(m.nextFeeSchedule, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CurrentAndNextFeeSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CurrentAndNextFeeSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CurrentAndNextFeeSchedule} CurrentAndNextFeeSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CurrentAndNextFeeSchedule.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CurrentAndNextFeeSchedule();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.currentFeeSchedule = $root.proto.FeeSchedule.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nextFeeSchedule = $root.proto.FeeSchedule.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CurrentAndNextFeeSchedule;
        })();

        proto.NodeEndpoint = (function() {

            /**
             * Properties of a NodeEndpoint.
             * @memberof proto
             * @interface INodeEndpoint
             * @property {string|null} [ipAddress] NodeEndpoint ipAddress
             * @property {string|null} [port] NodeEndpoint port
             */

            /**
             * Constructs a new NodeEndpoint.
             * @memberof proto
             * @classdesc Represents a NodeEndpoint.
             * @implements INodeEndpoint
             * @constructor
             * @param {proto.INodeEndpoint=} [p] Properties to set
             */
            function NodeEndpoint(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NodeEndpoint ipAddress.
             * @member {string} ipAddress
             * @memberof proto.NodeEndpoint
             * @instance
             */
            NodeEndpoint.prototype.ipAddress = "";

            /**
             * NodeEndpoint port.
             * @member {string} port
             * @memberof proto.NodeEndpoint
             * @instance
             */
            NodeEndpoint.prototype.port = "";

            /**
             * Creates a new NodeEndpoint instance using the specified properties.
             * @function create
             * @memberof proto.NodeEndpoint
             * @static
             * @param {proto.INodeEndpoint=} [properties] Properties to set
             * @returns {proto.NodeEndpoint} NodeEndpoint instance
             */
            NodeEndpoint.create = function create(properties) {
                return new NodeEndpoint(properties);
            };

            /**
             * Encodes the specified NodeEndpoint message. Does not implicitly {@link proto.NodeEndpoint.verify|verify} messages.
             * @function encode
             * @memberof proto.NodeEndpoint
             * @static
             * @param {proto.INodeEndpoint} m NodeEndpoint message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NodeEndpoint.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.ipAddress != null && Object.hasOwnProperty.call(m, "ipAddress"))
                    w.uint32(10).string(m.ipAddress);
                if (m.port != null && Object.hasOwnProperty.call(m, "port"))
                    w.uint32(18).string(m.port);
                return w;
            };

            /**
             * Decodes a NodeEndpoint message from the specified reader or buffer.
             * @function decode
             * @memberof proto.NodeEndpoint
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.NodeEndpoint} NodeEndpoint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NodeEndpoint.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NodeEndpoint();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.ipAddress = r.string();
                        break;
                    case 2:
                        m.port = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return NodeEndpoint;
        })();

        proto.NodeAddress = (function() {

            /**
             * Properties of a NodeAddress.
             * @memberof proto
             * @interface INodeAddress
             * @property {Uint8Array|null} [ipAddress] NodeAddress ipAddress
             * @property {number|null} [portno] NodeAddress portno
             * @property {Uint8Array|null} [memo] NodeAddress memo
             * @property {string|null} [RSA_PubKey] NodeAddress RSA_PubKey
             * @property {Long|null} [nodeId] NodeAddress nodeId
             * @property {proto.IAccountID|null} [nodeAccountId] NodeAddress nodeAccountId
             * @property {Uint8Array|null} [nodeCertHash] NodeAddress nodeCertHash
             * @property {Array.<proto.INodeEndpoint>|null} [nodeEndpoint] NodeAddress nodeEndpoint
             * @property {string|null} [description] NodeAddress description
             * @property {Long|null} [stake] NodeAddress stake
             */

            /**
             * Constructs a new NodeAddress.
             * @memberof proto
             * @classdesc Represents a NodeAddress.
             * @implements INodeAddress
             * @constructor
             * @param {proto.INodeAddress=} [p] Properties to set
             */
            function NodeAddress(p) {
                this.nodeEndpoint = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NodeAddress ipAddress.
             * @member {Uint8Array} ipAddress
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.ipAddress = $util.newBuffer([]);

            /**
             * NodeAddress portno.
             * @member {number} portno
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.portno = 0;

            /**
             * NodeAddress memo.
             * @member {Uint8Array} memo
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.memo = $util.newBuffer([]);

            /**
             * NodeAddress RSA_PubKey.
             * @member {string} RSA_PubKey
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.RSA_PubKey = "";

            /**
             * NodeAddress nodeId.
             * @member {Long} nodeId
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.nodeId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NodeAddress nodeAccountId.
             * @member {proto.IAccountID|null|undefined} nodeAccountId
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.nodeAccountId = null;

            /**
             * NodeAddress nodeCertHash.
             * @member {Uint8Array} nodeCertHash
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.nodeCertHash = $util.newBuffer([]);

            /**
             * NodeAddress nodeEndpoint.
             * @member {Array.<proto.INodeEndpoint>} nodeEndpoint
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.nodeEndpoint = $util.emptyArray;

            /**
             * NodeAddress description.
             * @member {string} description
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.description = "";

            /**
             * NodeAddress stake.
             * @member {Long} stake
             * @memberof proto.NodeAddress
             * @instance
             */
            NodeAddress.prototype.stake = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new NodeAddress instance using the specified properties.
             * @function create
             * @memberof proto.NodeAddress
             * @static
             * @param {proto.INodeAddress=} [properties] Properties to set
             * @returns {proto.NodeAddress} NodeAddress instance
             */
            NodeAddress.create = function create(properties) {
                return new NodeAddress(properties);
            };

            /**
             * Encodes the specified NodeAddress message. Does not implicitly {@link proto.NodeAddress.verify|verify} messages.
             * @function encode
             * @memberof proto.NodeAddress
             * @static
             * @param {proto.INodeAddress} m NodeAddress message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NodeAddress.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.ipAddress != null && Object.hasOwnProperty.call(m, "ipAddress"))
                    w.uint32(10).bytes(m.ipAddress);
                if (m.portno != null && Object.hasOwnProperty.call(m, "portno"))
                    w.uint32(16).int32(m.portno);
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(26).bytes(m.memo);
                if (m.RSA_PubKey != null && Object.hasOwnProperty.call(m, "RSA_PubKey"))
                    w.uint32(34).string(m.RSA_PubKey);
                if (m.nodeId != null && Object.hasOwnProperty.call(m, "nodeId"))
                    w.uint32(40).int64(m.nodeId);
                if (m.nodeAccountId != null && Object.hasOwnProperty.call(m, "nodeAccountId"))
                    $root.proto.AccountID.encode(m.nodeAccountId, w.uint32(50).fork()).ldelim();
                if (m.nodeCertHash != null && Object.hasOwnProperty.call(m, "nodeCertHash"))
                    w.uint32(58).bytes(m.nodeCertHash);
                if (m.nodeEndpoint != null && m.nodeEndpoint.length) {
                    for (var i = 0; i < m.nodeEndpoint.length; ++i)
                        $root.proto.NodeEndpoint.encode(m.nodeEndpoint[i], w.uint32(66).fork()).ldelim();
                }
                if (m.description != null && Object.hasOwnProperty.call(m, "description"))
                    w.uint32(74).string(m.description);
                if (m.stake != null && Object.hasOwnProperty.call(m, "stake"))
                    w.uint32(80).int64(m.stake);
                return w;
            };

            /**
             * Decodes a NodeAddress message from the specified reader or buffer.
             * @function decode
             * @memberof proto.NodeAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.NodeAddress} NodeAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NodeAddress.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NodeAddress();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.ipAddress = r.bytes();
                        break;
                    case 2:
                        m.portno = r.int32();
                        break;
                    case 3:
                        m.memo = r.bytes();
                        break;
                    case 4:
                        m.RSA_PubKey = r.string();
                        break;
                    case 5:
                        m.nodeId = r.int64();
                        break;
                    case 6:
                        m.nodeAccountId = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.nodeCertHash = r.bytes();
                        break;
                    case 8:
                        if (!(m.nodeEndpoint && m.nodeEndpoint.length))
                            m.nodeEndpoint = [];
                        m.nodeEndpoint.push($root.proto.NodeEndpoint.decode(r, r.uint32()));
                        break;
                    case 9:
                        m.description = r.string();
                        break;
                    case 10:
                        m.stake = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return NodeAddress;
        })();

        proto.AddressBook = (function() {

            /**
             * Properties of an AddressBook.
             * @memberof proto
             * @interface IAddressBook
             * @property {Array.<proto.INodeAddress>|null} [nodeAddress] AddressBook nodeAddress
             */

            /**
             * Constructs a new AddressBook.
             * @memberof proto
             * @classdesc Represents an AddressBook.
             * @implements IAddressBook
             * @constructor
             * @param {proto.IAddressBook=} [p] Properties to set
             */
            function AddressBook(p) {
                this.nodeAddress = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AddressBook nodeAddress.
             * @member {Array.<proto.INodeAddress>} nodeAddress
             * @memberof proto.AddressBook
             * @instance
             */
            AddressBook.prototype.nodeAddress = $util.emptyArray;

            /**
             * Creates a new AddressBook instance using the specified properties.
             * @function create
             * @memberof proto.AddressBook
             * @static
             * @param {proto.IAddressBook=} [properties] Properties to set
             * @returns {proto.AddressBook} AddressBook instance
             */
            AddressBook.create = function create(properties) {
                return new AddressBook(properties);
            };

            /**
             * Encodes the specified AddressBook message. Does not implicitly {@link proto.AddressBook.verify|verify} messages.
             * @function encode
             * @memberof proto.AddressBook
             * @static
             * @param {proto.IAddressBook} m AddressBook message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddressBook.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodeAddress != null && m.nodeAddress.length) {
                    for (var i = 0; i < m.nodeAddress.length; ++i)
                        $root.proto.NodeAddress.encode(m.nodeAddress[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an AddressBook message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AddressBook
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AddressBook} AddressBook
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddressBook.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AddressBook();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.nodeAddress && m.nodeAddress.length))
                            m.nodeAddress = [];
                        m.nodeAddress.push($root.proto.NodeAddress.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AddressBook;
        })();

        proto.NodeAddressForClients = (function() {

            /**
             * Properties of a NodeAddressForClients.
             * @memberof proto
             * @interface INodeAddressForClients
             * @property {Long|null} [nodeId] NodeAddressForClients nodeId
             * @property {proto.IAccountID|null} [nodeAccountId] NodeAddressForClients nodeAccountId
             * @property {Uint8Array|null} [nodeCertHash] NodeAddressForClients nodeCertHash
             * @property {Array.<proto.INodeEndpoint>|null} [nodeEndpoint] NodeAddressForClients nodeEndpoint
             */

            /**
             * Constructs a new NodeAddressForClients.
             * @memberof proto
             * @classdesc Represents a NodeAddressForClients.
             * @implements INodeAddressForClients
             * @constructor
             * @param {proto.INodeAddressForClients=} [p] Properties to set
             */
            function NodeAddressForClients(p) {
                this.nodeEndpoint = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NodeAddressForClients nodeId.
             * @member {Long} nodeId
             * @memberof proto.NodeAddressForClients
             * @instance
             */
            NodeAddressForClients.prototype.nodeId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NodeAddressForClients nodeAccountId.
             * @member {proto.IAccountID|null|undefined} nodeAccountId
             * @memberof proto.NodeAddressForClients
             * @instance
             */
            NodeAddressForClients.prototype.nodeAccountId = null;

            /**
             * NodeAddressForClients nodeCertHash.
             * @member {Uint8Array} nodeCertHash
             * @memberof proto.NodeAddressForClients
             * @instance
             */
            NodeAddressForClients.prototype.nodeCertHash = $util.newBuffer([]);

            /**
             * NodeAddressForClients nodeEndpoint.
             * @member {Array.<proto.INodeEndpoint>} nodeEndpoint
             * @memberof proto.NodeAddressForClients
             * @instance
             */
            NodeAddressForClients.prototype.nodeEndpoint = $util.emptyArray;

            /**
             * Creates a new NodeAddressForClients instance using the specified properties.
             * @function create
             * @memberof proto.NodeAddressForClients
             * @static
             * @param {proto.INodeAddressForClients=} [properties] Properties to set
             * @returns {proto.NodeAddressForClients} NodeAddressForClients instance
             */
            NodeAddressForClients.create = function create(properties) {
                return new NodeAddressForClients(properties);
            };

            /**
             * Encodes the specified NodeAddressForClients message. Does not implicitly {@link proto.NodeAddressForClients.verify|verify} messages.
             * @function encode
             * @memberof proto.NodeAddressForClients
             * @static
             * @param {proto.INodeAddressForClients} m NodeAddressForClients message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NodeAddressForClients.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodeId != null && Object.hasOwnProperty.call(m, "nodeId"))
                    w.uint32(40).int64(m.nodeId);
                if (m.nodeAccountId != null && Object.hasOwnProperty.call(m, "nodeAccountId"))
                    $root.proto.AccountID.encode(m.nodeAccountId, w.uint32(50).fork()).ldelim();
                if (m.nodeCertHash != null && Object.hasOwnProperty.call(m, "nodeCertHash"))
                    w.uint32(58).bytes(m.nodeCertHash);
                if (m.nodeEndpoint != null && m.nodeEndpoint.length) {
                    for (var i = 0; i < m.nodeEndpoint.length; ++i)
                        $root.proto.NodeEndpoint.encode(m.nodeEndpoint[i], w.uint32(66).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a NodeAddressForClients message from the specified reader or buffer.
             * @function decode
             * @memberof proto.NodeAddressForClients
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.NodeAddressForClients} NodeAddressForClients
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NodeAddressForClients.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NodeAddressForClients();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 5:
                        m.nodeId = r.int64();
                        break;
                    case 6:
                        m.nodeAccountId = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.nodeCertHash = r.bytes();
                        break;
                    case 8:
                        if (!(m.nodeEndpoint && m.nodeEndpoint.length))
                            m.nodeEndpoint = [];
                        m.nodeEndpoint.push($root.proto.NodeEndpoint.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return NodeAddressForClients;
        })();

        proto.AddressBookForClients = (function() {

            /**
             * Properties of an AddressBookForClients.
             * @memberof proto
             * @interface IAddressBookForClients
             * @property {Array.<proto.INodeAddressForClients>|null} [nodeAddressForClients] AddressBookForClients nodeAddressForClients
             */

            /**
             * Constructs a new AddressBookForClients.
             * @memberof proto
             * @classdesc Represents an AddressBookForClients.
             * @implements IAddressBookForClients
             * @constructor
             * @param {proto.IAddressBookForClients=} [p] Properties to set
             */
            function AddressBookForClients(p) {
                this.nodeAddressForClients = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AddressBookForClients nodeAddressForClients.
             * @member {Array.<proto.INodeAddressForClients>} nodeAddressForClients
             * @memberof proto.AddressBookForClients
             * @instance
             */
            AddressBookForClients.prototype.nodeAddressForClients = $util.emptyArray;

            /**
             * Creates a new AddressBookForClients instance using the specified properties.
             * @function create
             * @memberof proto.AddressBookForClients
             * @static
             * @param {proto.IAddressBookForClients=} [properties] Properties to set
             * @returns {proto.AddressBookForClients} AddressBookForClients instance
             */
            AddressBookForClients.create = function create(properties) {
                return new AddressBookForClients(properties);
            };

            /**
             * Encodes the specified AddressBookForClients message. Does not implicitly {@link proto.AddressBookForClients.verify|verify} messages.
             * @function encode
             * @memberof proto.AddressBookForClients
             * @static
             * @param {proto.IAddressBookForClients} m AddressBookForClients message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddressBookForClients.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodeAddressForClients != null && m.nodeAddressForClients.length) {
                    for (var i = 0; i < m.nodeAddressForClients.length; ++i)
                        $root.proto.NodeAddressForClients.encode(m.nodeAddressForClients[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an AddressBookForClients message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AddressBookForClients
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AddressBookForClients} AddressBookForClients
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddressBookForClients.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AddressBookForClients();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.nodeAddressForClients && m.nodeAddressForClients.length))
                            m.nodeAddressForClients = [];
                        m.nodeAddressForClients.push($root.proto.NodeAddressForClients.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AddressBookForClients;
        })();

        proto.SemanticVersion = (function() {

            /**
             * Properties of a SemanticVersion.
             * @memberof proto
             * @interface ISemanticVersion
             * @property {number|null} [major] SemanticVersion major
             * @property {number|null} [minor] SemanticVersion minor
             * @property {number|null} [patch] SemanticVersion patch
             */

            /**
             * Constructs a new SemanticVersion.
             * @memberof proto
             * @classdesc Represents a SemanticVersion.
             * @implements ISemanticVersion
             * @constructor
             * @param {proto.ISemanticVersion=} [p] Properties to set
             */
            function SemanticVersion(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SemanticVersion major.
             * @member {number} major
             * @memberof proto.SemanticVersion
             * @instance
             */
            SemanticVersion.prototype.major = 0;

            /**
             * SemanticVersion minor.
             * @member {number} minor
             * @memberof proto.SemanticVersion
             * @instance
             */
            SemanticVersion.prototype.minor = 0;

            /**
             * SemanticVersion patch.
             * @member {number} patch
             * @memberof proto.SemanticVersion
             * @instance
             */
            SemanticVersion.prototype.patch = 0;

            /**
             * Creates a new SemanticVersion instance using the specified properties.
             * @function create
             * @memberof proto.SemanticVersion
             * @static
             * @param {proto.ISemanticVersion=} [properties] Properties to set
             * @returns {proto.SemanticVersion} SemanticVersion instance
             */
            SemanticVersion.create = function create(properties) {
                return new SemanticVersion(properties);
            };

            /**
             * Encodes the specified SemanticVersion message. Does not implicitly {@link proto.SemanticVersion.verify|verify} messages.
             * @function encode
             * @memberof proto.SemanticVersion
             * @static
             * @param {proto.ISemanticVersion} m SemanticVersion message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SemanticVersion.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.major != null && Object.hasOwnProperty.call(m, "major"))
                    w.uint32(8).int32(m.major);
                if (m.minor != null && Object.hasOwnProperty.call(m, "minor"))
                    w.uint32(16).int32(m.minor);
                if (m.patch != null && Object.hasOwnProperty.call(m, "patch"))
                    w.uint32(24).int32(m.patch);
                return w;
            };

            /**
             * Decodes a SemanticVersion message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SemanticVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SemanticVersion} SemanticVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SemanticVersion.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SemanticVersion();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.major = r.int32();
                        break;
                    case 2:
                        m.minor = r.int32();
                        break;
                    case 3:
                        m.patch = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SemanticVersion;
        })();

        proto.Setting = (function() {

            /**
             * Properties of a Setting.
             * @memberof proto
             * @interface ISetting
             * @property {string|null} [name] Setting name
             * @property {string|null} [value] Setting value
             * @property {Uint8Array|null} [data] Setting data
             */

            /**
             * Constructs a new Setting.
             * @memberof proto
             * @classdesc Represents a Setting.
             * @implements ISetting
             * @constructor
             * @param {proto.ISetting=} [p] Properties to set
             */
            function Setting(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Setting name.
             * @member {string} name
             * @memberof proto.Setting
             * @instance
             */
            Setting.prototype.name = "";

            /**
             * Setting value.
             * @member {string} value
             * @memberof proto.Setting
             * @instance
             */
            Setting.prototype.value = "";

            /**
             * Setting data.
             * @member {Uint8Array} data
             * @memberof proto.Setting
             * @instance
             */
            Setting.prototype.data = $util.newBuffer([]);

            /**
             * Creates a new Setting instance using the specified properties.
             * @function create
             * @memberof proto.Setting
             * @static
             * @param {proto.ISetting=} [properties] Properties to set
             * @returns {proto.Setting} Setting instance
             */
            Setting.create = function create(properties) {
                return new Setting(properties);
            };

            /**
             * Encodes the specified Setting message. Does not implicitly {@link proto.Setting.verify|verify} messages.
             * @function encode
             * @memberof proto.Setting
             * @static
             * @param {proto.ISetting} m Setting message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Setting.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(18).string(m.value);
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(26).bytes(m.data);
                return w;
            };

            /**
             * Decodes a Setting message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Setting
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Setting} Setting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Setting.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Setting();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        m.value = r.string();
                        break;
                    case 3:
                        m.data = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Setting;
        })();

        proto.ServicesConfigurationList = (function() {

            /**
             * Properties of a ServicesConfigurationList.
             * @memberof proto
             * @interface IServicesConfigurationList
             * @property {Array.<proto.ISetting>|null} [nameValue] ServicesConfigurationList nameValue
             */

            /**
             * Constructs a new ServicesConfigurationList.
             * @memberof proto
             * @classdesc Represents a ServicesConfigurationList.
             * @implements IServicesConfigurationList
             * @constructor
             * @param {proto.IServicesConfigurationList=} [p] Properties to set
             */
            function ServicesConfigurationList(p) {
                this.nameValue = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ServicesConfigurationList nameValue.
             * @member {Array.<proto.ISetting>} nameValue
             * @memberof proto.ServicesConfigurationList
             * @instance
             */
            ServicesConfigurationList.prototype.nameValue = $util.emptyArray;

            /**
             * Creates a new ServicesConfigurationList instance using the specified properties.
             * @function create
             * @memberof proto.ServicesConfigurationList
             * @static
             * @param {proto.IServicesConfigurationList=} [properties] Properties to set
             * @returns {proto.ServicesConfigurationList} ServicesConfigurationList instance
             */
            ServicesConfigurationList.create = function create(properties) {
                return new ServicesConfigurationList(properties);
            };

            /**
             * Encodes the specified ServicesConfigurationList message. Does not implicitly {@link proto.ServicesConfigurationList.verify|verify} messages.
             * @function encode
             * @memberof proto.ServicesConfigurationList
             * @static
             * @param {proto.IServicesConfigurationList} m ServicesConfigurationList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServicesConfigurationList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nameValue != null && m.nameValue.length) {
                    for (var i = 0; i < m.nameValue.length; ++i)
                        $root.proto.Setting.encode(m.nameValue[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ServicesConfigurationList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ServicesConfigurationList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ServicesConfigurationList} ServicesConfigurationList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServicesConfigurationList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ServicesConfigurationList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.nameValue && m.nameValue.length))
                            m.nameValue = [];
                        m.nameValue.push($root.proto.Setting.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ServicesConfigurationList;
        })();

        proto.TokenRelationship = (function() {

            /**
             * Properties of a TokenRelationship.
             * @memberof proto
             * @interface ITokenRelationship
             * @property {proto.ITokenID|null} [tokenId] TokenRelationship tokenId
             * @property {string|null} [symbol] TokenRelationship symbol
             * @property {Long|null} [balance] TokenRelationship balance
             * @property {proto.TokenKycStatus|null} [kycStatus] TokenRelationship kycStatus
             * @property {proto.TokenFreezeStatus|null} [freezeStatus] TokenRelationship freezeStatus
             * @property {number|null} [decimals] TokenRelationship decimals
             */

            /**
             * Constructs a new TokenRelationship.
             * @memberof proto
             * @classdesc Represents a TokenRelationship.
             * @implements ITokenRelationship
             * @constructor
             * @param {proto.ITokenRelationship=} [p] Properties to set
             */
            function TokenRelationship(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenRelationship tokenId.
             * @member {proto.ITokenID|null|undefined} tokenId
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.tokenId = null;

            /**
             * TokenRelationship symbol.
             * @member {string} symbol
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.symbol = "";

            /**
             * TokenRelationship balance.
             * @member {Long} balance
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TokenRelationship kycStatus.
             * @member {proto.TokenKycStatus} kycStatus
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.kycStatus = 0;

            /**
             * TokenRelationship freezeStatus.
             * @member {proto.TokenFreezeStatus} freezeStatus
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.freezeStatus = 0;

            /**
             * TokenRelationship decimals.
             * @member {number} decimals
             * @memberof proto.TokenRelationship
             * @instance
             */
            TokenRelationship.prototype.decimals = 0;

            /**
             * Creates a new TokenRelationship instance using the specified properties.
             * @function create
             * @memberof proto.TokenRelationship
             * @static
             * @param {proto.ITokenRelationship=} [properties] Properties to set
             * @returns {proto.TokenRelationship} TokenRelationship instance
             */
            TokenRelationship.create = function create(properties) {
                return new TokenRelationship(properties);
            };

            /**
             * Encodes the specified TokenRelationship message. Does not implicitly {@link proto.TokenRelationship.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenRelationship
             * @static
             * @param {proto.ITokenRelationship} m TokenRelationship message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenRelationship.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenId != null && Object.hasOwnProperty.call(m, "tokenId"))
                    $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();
                if (m.symbol != null && Object.hasOwnProperty.call(m, "symbol"))
                    w.uint32(18).string(m.symbol);
                if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                    w.uint32(24).uint64(m.balance);
                if (m.kycStatus != null && Object.hasOwnProperty.call(m, "kycStatus"))
                    w.uint32(32).int32(m.kycStatus);
                if (m.freezeStatus != null && Object.hasOwnProperty.call(m, "freezeStatus"))
                    w.uint32(40).int32(m.freezeStatus);
                if (m.decimals != null && Object.hasOwnProperty.call(m, "decimals"))
                    w.uint32(48).uint32(m.decimals);
                return w;
            };

            /**
             * Decodes a TokenRelationship message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenRelationship
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenRelationship} TokenRelationship
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenRelationship.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenRelationship();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.tokenId = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.symbol = r.string();
                        break;
                    case 3:
                        m.balance = r.uint64();
                        break;
                    case 4:
                        m.kycStatus = r.int32();
                        break;
                    case 5:
                        m.freezeStatus = r.int32();
                        break;
                    case 6:
                        m.decimals = r.uint32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenRelationship;
        })();

        proto.TokenBalance = (function() {

            /**
             * Properties of a TokenBalance.
             * @memberof proto
             * @interface ITokenBalance
             * @property {proto.ITokenID|null} [tokenId] TokenBalance tokenId
             * @property {Long|null} [balance] TokenBalance balance
             * @property {number|null} [decimals] TokenBalance decimals
             */

            /**
             * Constructs a new TokenBalance.
             * @memberof proto
             * @classdesc Represents a TokenBalance.
             * @implements ITokenBalance
             * @constructor
             * @param {proto.ITokenBalance=} [p] Properties to set
             */
            function TokenBalance(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenBalance tokenId.
             * @member {proto.ITokenID|null|undefined} tokenId
             * @memberof proto.TokenBalance
             * @instance
             */
            TokenBalance.prototype.tokenId = null;

            /**
             * TokenBalance balance.
             * @member {Long} balance
             * @memberof proto.TokenBalance
             * @instance
             */
            TokenBalance.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TokenBalance decimals.
             * @member {number} decimals
             * @memberof proto.TokenBalance
             * @instance
             */
            TokenBalance.prototype.decimals = 0;

            /**
             * Creates a new TokenBalance instance using the specified properties.
             * @function create
             * @memberof proto.TokenBalance
             * @static
             * @param {proto.ITokenBalance=} [properties] Properties to set
             * @returns {proto.TokenBalance} TokenBalance instance
             */
            TokenBalance.create = function create(properties) {
                return new TokenBalance(properties);
            };

            /**
             * Encodes the specified TokenBalance message. Does not implicitly {@link proto.TokenBalance.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenBalance
             * @static
             * @param {proto.ITokenBalance} m TokenBalance message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenBalance.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenId != null && Object.hasOwnProperty.call(m, "tokenId"))
                    $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();
                if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                    w.uint32(16).uint64(m.balance);
                if (m.decimals != null && Object.hasOwnProperty.call(m, "decimals"))
                    w.uint32(24).uint32(m.decimals);
                return w;
            };

            /**
             * Decodes a TokenBalance message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenBalance
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenBalance} TokenBalance
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenBalance.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBalance();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.tokenId = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.balance = r.uint64();
                        break;
                    case 3:
                        m.decimals = r.uint32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenBalance;
        })();

        proto.TokenBalances = (function() {

            /**
             * Properties of a TokenBalances.
             * @memberof proto
             * @interface ITokenBalances
             * @property {Array.<proto.ITokenBalance>|null} [tokenBalances] TokenBalances tokenBalances
             */

            /**
             * Constructs a new TokenBalances.
             * @memberof proto
             * @classdesc Represents a TokenBalances.
             * @implements ITokenBalances
             * @constructor
             * @param {proto.ITokenBalances=} [p] Properties to set
             */
            function TokenBalances(p) {
                this.tokenBalances = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenBalances tokenBalances.
             * @member {Array.<proto.ITokenBalance>} tokenBalances
             * @memberof proto.TokenBalances
             * @instance
             */
            TokenBalances.prototype.tokenBalances = $util.emptyArray;

            /**
             * Creates a new TokenBalances instance using the specified properties.
             * @function create
             * @memberof proto.TokenBalances
             * @static
             * @param {proto.ITokenBalances=} [properties] Properties to set
             * @returns {proto.TokenBalances} TokenBalances instance
             */
            TokenBalances.create = function create(properties) {
                return new TokenBalances(properties);
            };

            /**
             * Encodes the specified TokenBalances message. Does not implicitly {@link proto.TokenBalances.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenBalances
             * @static
             * @param {proto.ITokenBalances} m TokenBalances message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenBalances.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenBalances != null && m.tokenBalances.length) {
                    for (var i = 0; i < m.tokenBalances.length; ++i)
                        $root.proto.TokenBalance.encode(m.tokenBalances[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TokenBalances message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenBalances
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenBalances} TokenBalances
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenBalances.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBalances();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.tokenBalances && m.tokenBalances.length))
                            m.tokenBalances = [];
                        m.tokenBalances.push($root.proto.TokenBalance.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenBalances;
        })();

        proto.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof proto
             * @interface ITimestamp
             * @property {Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof proto
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {proto.ITimestamp=} [p] Properties to set
             */
            function Timestamp(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Timestamp seconds.
             * @member {Long} seconds
             * @memberof proto.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof proto.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @function create
             * @memberof proto.Timestamp
             * @static
             * @param {proto.ITimestamp=} [properties] Properties to set
             * @returns {proto.Timestamp} Timestamp instance
             */
            Timestamp.create = function create(properties) {
                return new Timestamp(properties);
            };

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link proto.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof proto.Timestamp
             * @static
             * @param {proto.ITimestamp} m Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds"))
                    w.uint32(8).int64(m.seconds);
                if (m.nanos != null && Object.hasOwnProperty.call(m, "nanos"))
                    w.uint32(16).int32(m.nanos);
                return w;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Timestamp();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.seconds = r.int64();
                        break;
                    case 2:
                        m.nanos = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Timestamp;
        })();

        proto.TimestampSeconds = (function() {

            /**
             * Properties of a TimestampSeconds.
             * @memberof proto
             * @interface ITimestampSeconds
             * @property {Long|null} [seconds] TimestampSeconds seconds
             */

            /**
             * Constructs a new TimestampSeconds.
             * @memberof proto
             * @classdesc Represents a TimestampSeconds.
             * @implements ITimestampSeconds
             * @constructor
             * @param {proto.ITimestampSeconds=} [p] Properties to set
             */
            function TimestampSeconds(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TimestampSeconds seconds.
             * @member {Long} seconds
             * @memberof proto.TimestampSeconds
             * @instance
             */
            TimestampSeconds.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new TimestampSeconds instance using the specified properties.
             * @function create
             * @memberof proto.TimestampSeconds
             * @static
             * @param {proto.ITimestampSeconds=} [properties] Properties to set
             * @returns {proto.TimestampSeconds} TimestampSeconds instance
             */
            TimestampSeconds.create = function create(properties) {
                return new TimestampSeconds(properties);
            };

            /**
             * Encodes the specified TimestampSeconds message. Does not implicitly {@link proto.TimestampSeconds.verify|verify} messages.
             * @function encode
             * @memberof proto.TimestampSeconds
             * @static
             * @param {proto.ITimestampSeconds} m TimestampSeconds message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimestampSeconds.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds"))
                    w.uint32(8).int64(m.seconds);
                return w;
            };

            /**
             * Decodes a TimestampSeconds message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TimestampSeconds
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TimestampSeconds} TimestampSeconds
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimestampSeconds.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TimestampSeconds();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.seconds = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TimestampSeconds;
        })();

        proto.ConsensusCreateTopicTransactionBody = (function() {

            /**
             * Properties of a ConsensusCreateTopicTransactionBody.
             * @memberof proto
             * @interface IConsensusCreateTopicTransactionBody
             * @property {string|null} [memo] ConsensusCreateTopicTransactionBody memo
             * @property {proto.IKey|null} [adminKey] ConsensusCreateTopicTransactionBody adminKey
             * @property {proto.IKey|null} [submitKey] ConsensusCreateTopicTransactionBody submitKey
             * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusCreateTopicTransactionBody autoRenewPeriod
             * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusCreateTopicTransactionBody autoRenewAccount
             */

            /**
             * Constructs a new ConsensusCreateTopicTransactionBody.
             * @memberof proto
             * @classdesc Represents a ConsensusCreateTopicTransactionBody.
             * @implements IConsensusCreateTopicTransactionBody
             * @constructor
             * @param {proto.IConsensusCreateTopicTransactionBody=} [p] Properties to set
             */
            function ConsensusCreateTopicTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusCreateTopicTransactionBody memo.
             * @member {string} memo
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @instance
             */
            ConsensusCreateTopicTransactionBody.prototype.memo = "";

            /**
             * ConsensusCreateTopicTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @instance
             */
            ConsensusCreateTopicTransactionBody.prototype.adminKey = null;

            /**
             * ConsensusCreateTopicTransactionBody submitKey.
             * @member {proto.IKey|null|undefined} submitKey
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @instance
             */
            ConsensusCreateTopicTransactionBody.prototype.submitKey = null;

            /**
             * ConsensusCreateTopicTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @instance
             */
            ConsensusCreateTopicTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * ConsensusCreateTopicTransactionBody autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @instance
             */
            ConsensusCreateTopicTransactionBody.prototype.autoRenewAccount = null;

            /**
             * Creates a new ConsensusCreateTopicTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @static
             * @param {proto.IConsensusCreateTopicTransactionBody=} [properties] Properties to set
             * @returns {proto.ConsensusCreateTopicTransactionBody} ConsensusCreateTopicTransactionBody instance
             */
            ConsensusCreateTopicTransactionBody.create = function create(properties) {
                return new ConsensusCreateTopicTransactionBody(properties);
            };

            /**
             * Encodes the specified ConsensusCreateTopicTransactionBody message. Does not implicitly {@link proto.ConsensusCreateTopicTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @static
             * @param {proto.IConsensusCreateTopicTransactionBody} m ConsensusCreateTopicTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusCreateTopicTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(10).string(m.memo);
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(18).fork()).ldelim();
                if (m.submitKey != null && Object.hasOwnProperty.call(m, "submitKey"))
                    $root.proto.Key.encode(m.submitKey, w.uint32(26).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(50).fork()).ldelim();
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(58).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusCreateTopicTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusCreateTopicTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusCreateTopicTransactionBody} ConsensusCreateTopicTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusCreateTopicTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusCreateTopicTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.memo = r.string();
                        break;
                    case 2:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 3:
                        m.submitKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 6:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 7:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusCreateTopicTransactionBody;
        })();

        proto.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof proto
             * @interface IDuration
             * @property {Long|null} [seconds] Duration seconds
             */

            /**
             * Constructs a new Duration.
             * @memberof proto
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {proto.IDuration=} [p] Properties to set
             */
            function Duration(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Duration seconds.
             * @member {Long} seconds
             * @memberof proto.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Duration instance using the specified properties.
             * @function create
             * @memberof proto.Duration
             * @static
             * @param {proto.IDuration=} [properties] Properties to set
             * @returns {proto.Duration} Duration instance
             */
            Duration.create = function create(properties) {
                return new Duration(properties);
            };

            /**
             * Encodes the specified Duration message. Does not implicitly {@link proto.Duration.verify|verify} messages.
             * @function encode
             * @memberof proto.Duration
             * @static
             * @param {proto.IDuration} m Duration message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds"))
                    w.uint32(8).int64(m.seconds);
                return w;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Duration();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.seconds = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Duration;
        })();

        proto.ConsensusDeleteTopicTransactionBody = (function() {

            /**
             * Properties of a ConsensusDeleteTopicTransactionBody.
             * @memberof proto
             * @interface IConsensusDeleteTopicTransactionBody
             * @property {proto.ITopicID|null} [topicID] ConsensusDeleteTopicTransactionBody topicID
             */

            /**
             * Constructs a new ConsensusDeleteTopicTransactionBody.
             * @memberof proto
             * @classdesc Represents a ConsensusDeleteTopicTransactionBody.
             * @implements IConsensusDeleteTopicTransactionBody
             * @constructor
             * @param {proto.IConsensusDeleteTopicTransactionBody=} [p] Properties to set
             */
            function ConsensusDeleteTopicTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusDeleteTopicTransactionBody topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusDeleteTopicTransactionBody
             * @instance
             */
            ConsensusDeleteTopicTransactionBody.prototype.topicID = null;

            /**
             * Creates a new ConsensusDeleteTopicTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusDeleteTopicTransactionBody
             * @static
             * @param {proto.IConsensusDeleteTopicTransactionBody=} [properties] Properties to set
             * @returns {proto.ConsensusDeleteTopicTransactionBody} ConsensusDeleteTopicTransactionBody instance
             */
            ConsensusDeleteTopicTransactionBody.create = function create(properties) {
                return new ConsensusDeleteTopicTransactionBody(properties);
            };

            /**
             * Encodes the specified ConsensusDeleteTopicTransactionBody message. Does not implicitly {@link proto.ConsensusDeleteTopicTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusDeleteTopicTransactionBody
             * @static
             * @param {proto.IConsensusDeleteTopicTransactionBody} m ConsensusDeleteTopicTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusDeleteTopicTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusDeleteTopicTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusDeleteTopicTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusDeleteTopicTransactionBody} ConsensusDeleteTopicTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusDeleteTopicTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusDeleteTopicTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusDeleteTopicTransactionBody;
        })();

        proto.ConsensusGetTopicInfoQuery = (function() {

            /**
             * Properties of a ConsensusGetTopicInfoQuery.
             * @memberof proto
             * @interface IConsensusGetTopicInfoQuery
             * @property {proto.IQueryHeader|null} [header] ConsensusGetTopicInfoQuery header
             * @property {proto.ITopicID|null} [topicID] ConsensusGetTopicInfoQuery topicID
             */

            /**
             * Constructs a new ConsensusGetTopicInfoQuery.
             * @memberof proto
             * @classdesc Represents a ConsensusGetTopicInfoQuery.
             * @implements IConsensusGetTopicInfoQuery
             * @constructor
             * @param {proto.IConsensusGetTopicInfoQuery=} [p] Properties to set
             */
            function ConsensusGetTopicInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusGetTopicInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ConsensusGetTopicInfoQuery
             * @instance
             */
            ConsensusGetTopicInfoQuery.prototype.header = null;

            /**
             * ConsensusGetTopicInfoQuery topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusGetTopicInfoQuery
             * @instance
             */
            ConsensusGetTopicInfoQuery.prototype.topicID = null;

            /**
             * Creates a new ConsensusGetTopicInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusGetTopicInfoQuery
             * @static
             * @param {proto.IConsensusGetTopicInfoQuery=} [properties] Properties to set
             * @returns {proto.ConsensusGetTopicInfoQuery} ConsensusGetTopicInfoQuery instance
             */
            ConsensusGetTopicInfoQuery.create = function create(properties) {
                return new ConsensusGetTopicInfoQuery(properties);
            };

            /**
             * Encodes the specified ConsensusGetTopicInfoQuery message. Does not implicitly {@link proto.ConsensusGetTopicInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusGetTopicInfoQuery
             * @static
             * @param {proto.IConsensusGetTopicInfoQuery} m ConsensusGetTopicInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusGetTopicInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusGetTopicInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusGetTopicInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusGetTopicInfoQuery} ConsensusGetTopicInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusGetTopicInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusGetTopicInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusGetTopicInfoQuery;
        })();

        proto.ConsensusGetTopicInfoResponse = (function() {

            /**
             * Properties of a ConsensusGetTopicInfoResponse.
             * @memberof proto
             * @interface IConsensusGetTopicInfoResponse
             * @property {proto.IResponseHeader|null} [header] ConsensusGetTopicInfoResponse header
             * @property {proto.ITopicID|null} [topicID] ConsensusGetTopicInfoResponse topicID
             * @property {proto.IConsensusTopicInfo|null} [topicInfo] ConsensusGetTopicInfoResponse topicInfo
             */

            /**
             * Constructs a new ConsensusGetTopicInfoResponse.
             * @memberof proto
             * @classdesc Represents a ConsensusGetTopicInfoResponse.
             * @implements IConsensusGetTopicInfoResponse
             * @constructor
             * @param {proto.IConsensusGetTopicInfoResponse=} [p] Properties to set
             */
            function ConsensusGetTopicInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusGetTopicInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @instance
             */
            ConsensusGetTopicInfoResponse.prototype.header = null;

            /**
             * ConsensusGetTopicInfoResponse topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @instance
             */
            ConsensusGetTopicInfoResponse.prototype.topicID = null;

            /**
             * ConsensusGetTopicInfoResponse topicInfo.
             * @member {proto.IConsensusTopicInfo|null|undefined} topicInfo
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @instance
             */
            ConsensusGetTopicInfoResponse.prototype.topicInfo = null;

            /**
             * Creates a new ConsensusGetTopicInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @static
             * @param {proto.IConsensusGetTopicInfoResponse=} [properties] Properties to set
             * @returns {proto.ConsensusGetTopicInfoResponse} ConsensusGetTopicInfoResponse instance
             */
            ConsensusGetTopicInfoResponse.create = function create(properties) {
                return new ConsensusGetTopicInfoResponse(properties);
            };

            /**
             * Encodes the specified ConsensusGetTopicInfoResponse message. Does not implicitly {@link proto.ConsensusGetTopicInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @static
             * @param {proto.IConsensusGetTopicInfoResponse} m ConsensusGetTopicInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusGetTopicInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(18).fork()).ldelim();
                if (m.topicInfo != null && Object.hasOwnProperty.call(m, "topicInfo"))
                    $root.proto.ConsensusTopicInfo.encode(m.topicInfo, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusGetTopicInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusGetTopicInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusGetTopicInfoResponse} ConsensusGetTopicInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusGetTopicInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusGetTopicInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    case 5:
                        m.topicInfo = $root.proto.ConsensusTopicInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusGetTopicInfoResponse;
        })();

        /**
         * ResponseType enum.
         * @name proto.ResponseType
         * @enum {number}
         * @property {number} ANSWER_ONLY=0 ANSWER_ONLY value
         * @property {number} ANSWER_STATE_PROOF=1 ANSWER_STATE_PROOF value
         * @property {number} COST_ANSWER=2 COST_ANSWER value
         * @property {number} COST_ANSWER_STATE_PROOF=3 COST_ANSWER_STATE_PROOF value
         */
        proto.ResponseType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ANSWER_ONLY"] = 0;
            values[valuesById[1] = "ANSWER_STATE_PROOF"] = 1;
            values[valuesById[2] = "COST_ANSWER"] = 2;
            values[valuesById[3] = "COST_ANSWER_STATE_PROOF"] = 3;
            return values;
        })();

        proto.QueryHeader = (function() {

            /**
             * Properties of a QueryHeader.
             * @memberof proto
             * @interface IQueryHeader
             * @property {proto.ITransaction|null} [payment] QueryHeader payment
             * @property {proto.ResponseType|null} [responseType] QueryHeader responseType
             */

            /**
             * Constructs a new QueryHeader.
             * @memberof proto
             * @classdesc Represents a QueryHeader.
             * @implements IQueryHeader
             * @constructor
             * @param {proto.IQueryHeader=} [p] Properties to set
             */
            function QueryHeader(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * QueryHeader payment.
             * @member {proto.ITransaction|null|undefined} payment
             * @memberof proto.QueryHeader
             * @instance
             */
            QueryHeader.prototype.payment = null;

            /**
             * QueryHeader responseType.
             * @member {proto.ResponseType} responseType
             * @memberof proto.QueryHeader
             * @instance
             */
            QueryHeader.prototype.responseType = 0;

            /**
             * Creates a new QueryHeader instance using the specified properties.
             * @function create
             * @memberof proto.QueryHeader
             * @static
             * @param {proto.IQueryHeader=} [properties] Properties to set
             * @returns {proto.QueryHeader} QueryHeader instance
             */
            QueryHeader.create = function create(properties) {
                return new QueryHeader(properties);
            };

            /**
             * Encodes the specified QueryHeader message. Does not implicitly {@link proto.QueryHeader.verify|verify} messages.
             * @function encode
             * @memberof proto.QueryHeader
             * @static
             * @param {proto.IQueryHeader} m QueryHeader message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryHeader.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.payment != null && Object.hasOwnProperty.call(m, "payment"))
                    $root.proto.Transaction.encode(m.payment, w.uint32(10).fork()).ldelim();
                if (m.responseType != null && Object.hasOwnProperty.call(m, "responseType"))
                    w.uint32(16).int32(m.responseType);
                return w;
            };

            /**
             * Decodes a QueryHeader message from the specified reader or buffer.
             * @function decode
             * @memberof proto.QueryHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.QueryHeader} QueryHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryHeader.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.QueryHeader();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.payment = $root.proto.Transaction.decode(r, r.uint32());
                        break;
                    case 2:
                        m.responseType = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return QueryHeader;
        })();

        proto.Transaction = (function() {

            /**
             * Properties of a Transaction.
             * @memberof proto
             * @interface ITransaction
             * @property {Uint8Array|null} [signedTransactionBytes] Transaction signedTransactionBytes
             * @property {Uint8Array|null} [bodyBytes] Transaction bodyBytes
             * @property {proto.ISignatureMap|null} [sigMap] Transaction sigMap
             */

            /**
             * Constructs a new Transaction.
             * @memberof proto
             * @classdesc Represents a Transaction.
             * @implements ITransaction
             * @constructor
             * @param {proto.ITransaction=} [p] Properties to set
             */
            function Transaction(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Transaction signedTransactionBytes.
             * @member {Uint8Array} signedTransactionBytes
             * @memberof proto.Transaction
             * @instance
             */
            Transaction.prototype.signedTransactionBytes = $util.newBuffer([]);

            /**
             * Transaction bodyBytes.
             * @member {Uint8Array} bodyBytes
             * @memberof proto.Transaction
             * @instance
             */
            Transaction.prototype.bodyBytes = $util.newBuffer([]);

            /**
             * Transaction sigMap.
             * @member {proto.ISignatureMap|null|undefined} sigMap
             * @memberof proto.Transaction
             * @instance
             */
            Transaction.prototype.sigMap = null;

            /**
             * Creates a new Transaction instance using the specified properties.
             * @function create
             * @memberof proto.Transaction
             * @static
             * @param {proto.ITransaction=} [properties] Properties to set
             * @returns {proto.Transaction} Transaction instance
             */
            Transaction.create = function create(properties) {
                return new Transaction(properties);
            };

            /**
             * Encodes the specified Transaction message. Does not implicitly {@link proto.Transaction.verify|verify} messages.
             * @function encode
             * @memberof proto.Transaction
             * @static
             * @param {proto.ITransaction} m Transaction message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Transaction.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.sigMap != null && Object.hasOwnProperty.call(m, "sigMap"))
                    $root.proto.SignatureMap.encode(m.sigMap, w.uint32(26).fork()).ldelim();
                if (m.bodyBytes != null && Object.hasOwnProperty.call(m, "bodyBytes"))
                    w.uint32(34).bytes(m.bodyBytes);
                if (m.signedTransactionBytes != null && Object.hasOwnProperty.call(m, "signedTransactionBytes"))
                    w.uint32(42).bytes(m.signedTransactionBytes);
                return w;
            };

            /**
             * Decodes a Transaction message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Transaction
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Transaction} Transaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Transaction.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Transaction();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 5:
                        m.signedTransactionBytes = r.bytes();
                        break;
                    case 4:
                        m.bodyBytes = r.bytes();
                        break;
                    case 3:
                        m.sigMap = $root.proto.SignatureMap.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Transaction;
        })();

        proto.ResponseHeader = (function() {

            /**
             * Properties of a ResponseHeader.
             * @memberof proto
             * @interface IResponseHeader
             * @property {proto.ResponseCodeEnum|null} [nodeTransactionPrecheckCode] ResponseHeader nodeTransactionPrecheckCode
             * @property {proto.ResponseType|null} [responseType] ResponseHeader responseType
             * @property {Long|null} [cost] ResponseHeader cost
             * @property {Uint8Array|null} [stateProof] ResponseHeader stateProof
             */

            /**
             * Constructs a new ResponseHeader.
             * @memberof proto
             * @classdesc Represents a ResponseHeader.
             * @implements IResponseHeader
             * @constructor
             * @param {proto.IResponseHeader=} [p] Properties to set
             */
            function ResponseHeader(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ResponseHeader nodeTransactionPrecheckCode.
             * @member {proto.ResponseCodeEnum} nodeTransactionPrecheckCode
             * @memberof proto.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.nodeTransactionPrecheckCode = 0;

            /**
             * ResponseHeader responseType.
             * @member {proto.ResponseType} responseType
             * @memberof proto.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.responseType = 0;

            /**
             * ResponseHeader cost.
             * @member {Long} cost
             * @memberof proto.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ResponseHeader stateProof.
             * @member {Uint8Array} stateProof
             * @memberof proto.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.stateProof = $util.newBuffer([]);

            /**
             * Creates a new ResponseHeader instance using the specified properties.
             * @function create
             * @memberof proto.ResponseHeader
             * @static
             * @param {proto.IResponseHeader=} [properties] Properties to set
             * @returns {proto.ResponseHeader} ResponseHeader instance
             */
            ResponseHeader.create = function create(properties) {
                return new ResponseHeader(properties);
            };

            /**
             * Encodes the specified ResponseHeader message. Does not implicitly {@link proto.ResponseHeader.verify|verify} messages.
             * @function encode
             * @memberof proto.ResponseHeader
             * @static
             * @param {proto.IResponseHeader} m ResponseHeader message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseHeader.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodeTransactionPrecheckCode != null && Object.hasOwnProperty.call(m, "nodeTransactionPrecheckCode"))
                    w.uint32(8).int32(m.nodeTransactionPrecheckCode);
                if (m.responseType != null && Object.hasOwnProperty.call(m, "responseType"))
                    w.uint32(16).int32(m.responseType);
                if (m.cost != null && Object.hasOwnProperty.call(m, "cost"))
                    w.uint32(24).uint64(m.cost);
                if (m.stateProof != null && Object.hasOwnProperty.call(m, "stateProof"))
                    w.uint32(34).bytes(m.stateProof);
                return w;
            };

            /**
             * Decodes a ResponseHeader message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ResponseHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ResponseHeader} ResponseHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseHeader.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ResponseHeader();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.nodeTransactionPrecheckCode = r.int32();
                        break;
                    case 2:
                        m.responseType = r.int32();
                        break;
                    case 3:
                        m.cost = r.uint64();
                        break;
                    case 4:
                        m.stateProof = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ResponseHeader;
        })();

        proto.TransactionResponse = (function() {

            /**
             * Properties of a TransactionResponse.
             * @memberof proto
             * @interface ITransactionResponse
             * @property {proto.ResponseCodeEnum|null} [nodeTransactionPrecheckCode] TransactionResponse nodeTransactionPrecheckCode
             * @property {Long|null} [cost] TransactionResponse cost
             */

            /**
             * Constructs a new TransactionResponse.
             * @memberof proto
             * @classdesc Represents a TransactionResponse.
             * @implements ITransactionResponse
             * @constructor
             * @param {proto.ITransactionResponse=} [p] Properties to set
             */
            function TransactionResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionResponse nodeTransactionPrecheckCode.
             * @member {proto.ResponseCodeEnum} nodeTransactionPrecheckCode
             * @memberof proto.TransactionResponse
             * @instance
             */
            TransactionResponse.prototype.nodeTransactionPrecheckCode = 0;

            /**
             * TransactionResponse cost.
             * @member {Long} cost
             * @memberof proto.TransactionResponse
             * @instance
             */
            TransactionResponse.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new TransactionResponse instance using the specified properties.
             * @function create
             * @memberof proto.TransactionResponse
             * @static
             * @param {proto.ITransactionResponse=} [properties] Properties to set
             * @returns {proto.TransactionResponse} TransactionResponse instance
             */
            TransactionResponse.create = function create(properties) {
                return new TransactionResponse(properties);
            };

            /**
             * Encodes the specified TransactionResponse message. Does not implicitly {@link proto.TransactionResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionResponse
             * @static
             * @param {proto.ITransactionResponse} m TransactionResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.nodeTransactionPrecheckCode != null && Object.hasOwnProperty.call(m, "nodeTransactionPrecheckCode"))
                    w.uint32(8).int32(m.nodeTransactionPrecheckCode);
                if (m.cost != null && Object.hasOwnProperty.call(m, "cost"))
                    w.uint32(16).uint64(m.cost);
                return w;
            };

            /**
             * Decodes a TransactionResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionResponse} TransactionResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.nodeTransactionPrecheckCode = r.int32();
                        break;
                    case 2:
                        m.cost = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionResponse;
        })();

        /**
         * ResponseCodeEnum enum.
         * @name proto.ResponseCodeEnum
         * @enum {number}
         * @property {number} OK=0 OK value
         * @property {number} INVALID_TRANSACTION=1 INVALID_TRANSACTION value
         * @property {number} PAYER_ACCOUNT_NOT_FOUND=2 PAYER_ACCOUNT_NOT_FOUND value
         * @property {number} INVALID_NODE_ACCOUNT=3 INVALID_NODE_ACCOUNT value
         * @property {number} TRANSACTION_EXPIRED=4 TRANSACTION_EXPIRED value
         * @property {number} INVALID_TRANSACTION_START=5 INVALID_TRANSACTION_START value
         * @property {number} INVALID_TRANSACTION_DURATION=6 INVALID_TRANSACTION_DURATION value
         * @property {number} INVALID_SIGNATURE=7 INVALID_SIGNATURE value
         * @property {number} MEMO_TOO_LONG=8 MEMO_TOO_LONG value
         * @property {number} INSUFFICIENT_TX_FEE=9 INSUFFICIENT_TX_FEE value
         * @property {number} INSUFFICIENT_PAYER_BALANCE=10 INSUFFICIENT_PAYER_BALANCE value
         * @property {number} DUPLICATE_TRANSACTION=11 DUPLICATE_TRANSACTION value
         * @property {number} BUSY=12 BUSY value
         * @property {number} NOT_SUPPORTED=13 NOT_SUPPORTED value
         * @property {number} INVALID_FILE_ID=14 INVALID_FILE_ID value
         * @property {number} INVALID_ACCOUNT_ID=15 INVALID_ACCOUNT_ID value
         * @property {number} INVALID_CONTRACT_ID=16 INVALID_CONTRACT_ID value
         * @property {number} INVALID_TRANSACTION_ID=17 INVALID_TRANSACTION_ID value
         * @property {number} RECEIPT_NOT_FOUND=18 RECEIPT_NOT_FOUND value
         * @property {number} RECORD_NOT_FOUND=19 RECORD_NOT_FOUND value
         * @property {number} INVALID_SOLIDITY_ID=20 INVALID_SOLIDITY_ID value
         * @property {number} UNKNOWN=21 UNKNOWN value
         * @property {number} SUCCESS=22 SUCCESS value
         * @property {number} FAIL_INVALID=23 FAIL_INVALID value
         * @property {number} FAIL_FEE=24 FAIL_FEE value
         * @property {number} FAIL_BALANCE=25 FAIL_BALANCE value
         * @property {number} KEY_REQUIRED=26 KEY_REQUIRED value
         * @property {number} BAD_ENCODING=27 BAD_ENCODING value
         * @property {number} INSUFFICIENT_ACCOUNT_BALANCE=28 INSUFFICIENT_ACCOUNT_BALANCE value
         * @property {number} INVALID_SOLIDITY_ADDRESS=29 INVALID_SOLIDITY_ADDRESS value
         * @property {number} INSUFFICIENT_GAS=30 INSUFFICIENT_GAS value
         * @property {number} CONTRACT_SIZE_LIMIT_EXCEEDED=31 CONTRACT_SIZE_LIMIT_EXCEEDED value
         * @property {number} LOCAL_CALL_MODIFICATION_EXCEPTION=32 LOCAL_CALL_MODIFICATION_EXCEPTION value
         * @property {number} CONTRACT_REVERT_EXECUTED=33 CONTRACT_REVERT_EXECUTED value
         * @property {number} CONTRACT_EXECUTION_EXCEPTION=34 CONTRACT_EXECUTION_EXCEPTION value
         * @property {number} INVALID_RECEIVING_NODE_ACCOUNT=35 INVALID_RECEIVING_NODE_ACCOUNT value
         * @property {number} MISSING_QUERY_HEADER=36 MISSING_QUERY_HEADER value
         * @property {number} ACCOUNT_UPDATE_FAILED=37 ACCOUNT_UPDATE_FAILED value
         * @property {number} INVALID_KEY_ENCODING=38 INVALID_KEY_ENCODING value
         * @property {number} NULL_SOLIDITY_ADDRESS=39 NULL_SOLIDITY_ADDRESS value
         * @property {number} CONTRACT_UPDATE_FAILED=40 CONTRACT_UPDATE_FAILED value
         * @property {number} INVALID_QUERY_HEADER=41 INVALID_QUERY_HEADER value
         * @property {number} INVALID_FEE_SUBMITTED=42 INVALID_FEE_SUBMITTED value
         * @property {number} INVALID_PAYER_SIGNATURE=43 INVALID_PAYER_SIGNATURE value
         * @property {number} KEY_NOT_PROVIDED=44 KEY_NOT_PROVIDED value
         * @property {number} INVALID_EXPIRATION_TIME=45 INVALID_EXPIRATION_TIME value
         * @property {number} NO_WACL_KEY=46 NO_WACL_KEY value
         * @property {number} FILE_CONTENT_EMPTY=47 FILE_CONTENT_EMPTY value
         * @property {number} INVALID_ACCOUNT_AMOUNTS=48 INVALID_ACCOUNT_AMOUNTS value
         * @property {number} EMPTY_TRANSACTION_BODY=49 EMPTY_TRANSACTION_BODY value
         * @property {number} INVALID_TRANSACTION_BODY=50 INVALID_TRANSACTION_BODY value
         * @property {number} INVALID_SIGNATURE_TYPE_MISMATCHING_KEY=51 INVALID_SIGNATURE_TYPE_MISMATCHING_KEY value
         * @property {number} INVALID_SIGNATURE_COUNT_MISMATCHING_KEY=52 INVALID_SIGNATURE_COUNT_MISMATCHING_KEY value
         * @property {number} EMPTY_LIVE_HASH_BODY=53 EMPTY_LIVE_HASH_BODY value
         * @property {number} EMPTY_LIVE_HASH=54 EMPTY_LIVE_HASH value
         * @property {number} EMPTY_LIVE_HASH_KEYS=55 EMPTY_LIVE_HASH_KEYS value
         * @property {number} INVALID_LIVE_HASH_SIZE=56 INVALID_LIVE_HASH_SIZE value
         * @property {number} EMPTY_QUERY_BODY=57 EMPTY_QUERY_BODY value
         * @property {number} EMPTY_LIVE_HASH_QUERY=58 EMPTY_LIVE_HASH_QUERY value
         * @property {number} LIVE_HASH_NOT_FOUND=59 LIVE_HASH_NOT_FOUND value
         * @property {number} ACCOUNT_ID_DOES_NOT_EXIST=60 ACCOUNT_ID_DOES_NOT_EXIST value
         * @property {number} LIVE_HASH_ALREADY_EXISTS=61 LIVE_HASH_ALREADY_EXISTS value
         * @property {number} INVALID_FILE_WACL=62 INVALID_FILE_WACL value
         * @property {number} SERIALIZATION_FAILED=63 SERIALIZATION_FAILED value
         * @property {number} TRANSACTION_OVERSIZE=64 TRANSACTION_OVERSIZE value
         * @property {number} TRANSACTION_TOO_MANY_LAYERS=65 TRANSACTION_TOO_MANY_LAYERS value
         * @property {number} CONTRACT_DELETED=66 CONTRACT_DELETED value
         * @property {number} PLATFORM_NOT_ACTIVE=67 PLATFORM_NOT_ACTIVE value
         * @property {number} KEY_PREFIX_MISMATCH=68 KEY_PREFIX_MISMATCH value
         * @property {number} PLATFORM_TRANSACTION_NOT_CREATED=69 PLATFORM_TRANSACTION_NOT_CREATED value
         * @property {number} INVALID_RENEWAL_PERIOD=70 INVALID_RENEWAL_PERIOD value
         * @property {number} INVALID_PAYER_ACCOUNT_ID=71 INVALID_PAYER_ACCOUNT_ID value
         * @property {number} ACCOUNT_DELETED=72 ACCOUNT_DELETED value
         * @property {number} FILE_DELETED=73 FILE_DELETED value
         * @property {number} ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS=74 ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS value
         * @property {number} SETTING_NEGATIVE_ACCOUNT_BALANCE=75 SETTING_NEGATIVE_ACCOUNT_BALANCE value
         * @property {number} OBTAINER_REQUIRED=76 OBTAINER_REQUIRED value
         * @property {number} OBTAINER_SAME_CONTRACT_ID=77 OBTAINER_SAME_CONTRACT_ID value
         * @property {number} OBTAINER_DOES_NOT_EXIST=78 OBTAINER_DOES_NOT_EXIST value
         * @property {number} MODIFYING_IMMUTABLE_CONTRACT=79 MODIFYING_IMMUTABLE_CONTRACT value
         * @property {number} FILE_SYSTEM_EXCEPTION=80 FILE_SYSTEM_EXCEPTION value
         * @property {number} AUTORENEW_DURATION_NOT_IN_RANGE=81 AUTORENEW_DURATION_NOT_IN_RANGE value
         * @property {number} ERROR_DECODING_BYTESTRING=82 ERROR_DECODING_BYTESTRING value
         * @property {number} CONTRACT_FILE_EMPTY=83 CONTRACT_FILE_EMPTY value
         * @property {number} CONTRACT_BYTECODE_EMPTY=84 CONTRACT_BYTECODE_EMPTY value
         * @property {number} INVALID_INITIAL_BALANCE=85 INVALID_INITIAL_BALANCE value
         * @property {number} INVALID_RECEIVE_RECORD_THRESHOLD=86 INVALID_RECEIVE_RECORD_THRESHOLD value
         * @property {number} INVALID_SEND_RECORD_THRESHOLD=87 INVALID_SEND_RECORD_THRESHOLD value
         * @property {number} ACCOUNT_IS_NOT_GENESIS_ACCOUNT=88 ACCOUNT_IS_NOT_GENESIS_ACCOUNT value
         * @property {number} PAYER_ACCOUNT_UNAUTHORIZED=89 PAYER_ACCOUNT_UNAUTHORIZED value
         * @property {number} INVALID_FREEZE_TRANSACTION_BODY=90 INVALID_FREEZE_TRANSACTION_BODY value
         * @property {number} FREEZE_TRANSACTION_BODY_NOT_FOUND=91 FREEZE_TRANSACTION_BODY_NOT_FOUND value
         * @property {number} TRANSFER_LIST_SIZE_LIMIT_EXCEEDED=92 TRANSFER_LIST_SIZE_LIMIT_EXCEEDED value
         * @property {number} RESULT_SIZE_LIMIT_EXCEEDED=93 RESULT_SIZE_LIMIT_EXCEEDED value
         * @property {number} NOT_SPECIAL_ACCOUNT=94 NOT_SPECIAL_ACCOUNT value
         * @property {number} CONTRACT_NEGATIVE_GAS=95 CONTRACT_NEGATIVE_GAS value
         * @property {number} CONTRACT_NEGATIVE_VALUE=96 CONTRACT_NEGATIVE_VALUE value
         * @property {number} INVALID_FEE_FILE=97 INVALID_FEE_FILE value
         * @property {number} INVALID_EXCHANGE_RATE_FILE=98 INVALID_EXCHANGE_RATE_FILE value
         * @property {number} INSUFFICIENT_LOCAL_CALL_GAS=99 INSUFFICIENT_LOCAL_CALL_GAS value
         * @property {number} ENTITY_NOT_ALLOWED_TO_DELETE=100 ENTITY_NOT_ALLOWED_TO_DELETE value
         * @property {number} AUTHORIZATION_FAILED=101 AUTHORIZATION_FAILED value
         * @property {number} FILE_UPLOADED_PROTO_INVALID=102 FILE_UPLOADED_PROTO_INVALID value
         * @property {number} FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK=103 FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK value
         * @property {number} FEE_SCHEDULE_FILE_PART_UPLOADED=104 FEE_SCHEDULE_FILE_PART_UPLOADED value
         * @property {number} EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED=105 EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED value
         * @property {number} MAX_CONTRACT_STORAGE_EXCEEDED=106 MAX_CONTRACT_STORAGE_EXCEEDED value
         * @property {number} TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT=107 TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT value
         * @property {number} TOTAL_LEDGER_BALANCE_INVALID=108 TOTAL_LEDGER_BALANCE_INVALID value
         * @property {number} EXPIRATION_REDUCTION_NOT_ALLOWED=110 EXPIRATION_REDUCTION_NOT_ALLOWED value
         * @property {number} MAX_GAS_LIMIT_EXCEEDED=111 MAX_GAS_LIMIT_EXCEEDED value
         * @property {number} MAX_FILE_SIZE_EXCEEDED=112 MAX_FILE_SIZE_EXCEEDED value
         * @property {number} INVALID_TOPIC_ID=150 INVALID_TOPIC_ID value
         * @property {number} INVALID_ADMIN_KEY=155 INVALID_ADMIN_KEY value
         * @property {number} INVALID_SUBMIT_KEY=156 INVALID_SUBMIT_KEY value
         * @property {number} UNAUTHORIZED=157 UNAUTHORIZED value
         * @property {number} INVALID_TOPIC_MESSAGE=158 INVALID_TOPIC_MESSAGE value
         * @property {number} INVALID_AUTORENEW_ACCOUNT=159 INVALID_AUTORENEW_ACCOUNT value
         * @property {number} AUTORENEW_ACCOUNT_NOT_ALLOWED=160 AUTORENEW_ACCOUNT_NOT_ALLOWED value
         * @property {number} TOPIC_EXPIRED=162 TOPIC_EXPIRED value
         * @property {number} INVALID_CHUNK_NUMBER=163 INVALID_CHUNK_NUMBER value
         * @property {number} INVALID_CHUNK_TRANSACTION_ID=164 INVALID_CHUNK_TRANSACTION_ID value
         * @property {number} ACCOUNT_FROZEN_FOR_TOKEN=165 ACCOUNT_FROZEN_FOR_TOKEN value
         * @property {number} TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED=166 TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED value
         * @property {number} INVALID_TOKEN_ID=167 INVALID_TOKEN_ID value
         * @property {number} INVALID_TOKEN_DECIMALS=168 INVALID_TOKEN_DECIMALS value
         * @property {number} INVALID_TOKEN_INITIAL_SUPPLY=169 INVALID_TOKEN_INITIAL_SUPPLY value
         * @property {number} INVALID_TREASURY_ACCOUNT_FOR_TOKEN=170 INVALID_TREASURY_ACCOUNT_FOR_TOKEN value
         * @property {number} INVALID_TOKEN_SYMBOL=171 INVALID_TOKEN_SYMBOL value
         * @property {number} TOKEN_HAS_NO_FREEZE_KEY=172 TOKEN_HAS_NO_FREEZE_KEY value
         * @property {number} TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN=173 TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN value
         * @property {number} MISSING_TOKEN_SYMBOL=174 MISSING_TOKEN_SYMBOL value
         * @property {number} TOKEN_SYMBOL_TOO_LONG=175 TOKEN_SYMBOL_TOO_LONG value
         * @property {number} ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN=176 ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN value
         * @property {number} TOKEN_HAS_NO_KYC_KEY=177 TOKEN_HAS_NO_KYC_KEY value
         * @property {number} INSUFFICIENT_TOKEN_BALANCE=178 INSUFFICIENT_TOKEN_BALANCE value
         * @property {number} TOKEN_WAS_DELETED=179 TOKEN_WAS_DELETED value
         * @property {number} TOKEN_HAS_NO_SUPPLY_KEY=180 TOKEN_HAS_NO_SUPPLY_KEY value
         * @property {number} TOKEN_HAS_NO_WIPE_KEY=181 TOKEN_HAS_NO_WIPE_KEY value
         * @property {number} INVALID_TOKEN_MINT_AMOUNT=182 INVALID_TOKEN_MINT_AMOUNT value
         * @property {number} INVALID_TOKEN_BURN_AMOUNT=183 INVALID_TOKEN_BURN_AMOUNT value
         * @property {number} TOKEN_NOT_ASSOCIATED_TO_ACCOUNT=184 TOKEN_NOT_ASSOCIATED_TO_ACCOUNT value
         * @property {number} CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT=185 CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT value
         * @property {number} INVALID_KYC_KEY=186 INVALID_KYC_KEY value
         * @property {number} INVALID_WIPE_KEY=187 INVALID_WIPE_KEY value
         * @property {number} INVALID_FREEZE_KEY=188 INVALID_FREEZE_KEY value
         * @property {number} INVALID_SUPPLY_KEY=189 INVALID_SUPPLY_KEY value
         * @property {number} MISSING_TOKEN_NAME=190 MISSING_TOKEN_NAME value
         * @property {number} TOKEN_NAME_TOO_LONG=191 TOKEN_NAME_TOO_LONG value
         * @property {number} INVALID_WIPING_AMOUNT=192 INVALID_WIPING_AMOUNT value
         * @property {number} TOKEN_IS_IMMUTABLE=193 TOKEN_IS_IMMUTABLE value
         * @property {number} TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT=194 TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT value
         * @property {number} TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES=195 TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES value
         * @property {number} ACCOUNT_IS_TREASURY=196 ACCOUNT_IS_TREASURY value
         * @property {number} TOKEN_ID_REPEATED_IN_TOKEN_LIST=197 TOKEN_ID_REPEATED_IN_TOKEN_LIST value
         * @property {number} TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED=198 TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED value
         * @property {number} EMPTY_TOKEN_TRANSFER_BODY=199 EMPTY_TOKEN_TRANSFER_BODY value
         * @property {number} EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS=200 EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS value
         * @property {number} INVALID_SCHEDULE_ID=201 INVALID_SCHEDULE_ID value
         * @property {number} SCHEDULE_IS_IMMUTABLE=202 SCHEDULE_IS_IMMUTABLE value
         * @property {number} INVALID_SCHEDULE_PAYER_ID=203 INVALID_SCHEDULE_PAYER_ID value
         * @property {number} INVALID_SCHEDULE_ACCOUNT_ID=204 INVALID_SCHEDULE_ACCOUNT_ID value
         * @property {number} NO_NEW_VALID_SIGNATURES=205 NO_NEW_VALID_SIGNATURES value
         * @property {number} UNRESOLVABLE_REQUIRED_SIGNERS=206 UNRESOLVABLE_REQUIRED_SIGNERS value
         * @property {number} SCHEDULED_TRANSACTION_NOT_IN_WHITELIST=207 SCHEDULED_TRANSACTION_NOT_IN_WHITELIST value
         * @property {number} SOME_SIGNATURES_WERE_INVALID=208 SOME_SIGNATURES_WERE_INVALID value
         * @property {number} TRANSACTION_ID_FIELD_NOT_ALLOWED=209 TRANSACTION_ID_FIELD_NOT_ALLOWED value
         * @property {number} IDENTICAL_SCHEDULE_ALREADY_CREATED=210 IDENTICAL_SCHEDULE_ALREADY_CREATED value
         * @property {number} INVALID_ZERO_BYTE_IN_STRING=211 INVALID_ZERO_BYTE_IN_STRING value
         * @property {number} SCHEDULE_ALREADY_DELETED=212 SCHEDULE_ALREADY_DELETED value
         * @property {number} SCHEDULE_ALREADY_EXECUTED=213 SCHEDULE_ALREADY_EXECUTED value
         * @property {number} MESSAGE_SIZE_TOO_LARGE=214 MESSAGE_SIZE_TOO_LARGE value
         * @property {number} OPERATION_REPEATED_IN_BUCKET_GROUPS=215 OPERATION_REPEATED_IN_BUCKET_GROUPS value
         * @property {number} BUCKET_CAPACITY_OVERFLOW=216 BUCKET_CAPACITY_OVERFLOW value
         * @property {number} NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION=217 NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION value
         * @property {number} BUCKET_HAS_NO_THROTTLE_GROUPS=218 BUCKET_HAS_NO_THROTTLE_GROUPS value
         * @property {number} THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC=219 THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC value
         * @property {number} SUCCESS_BUT_MISSING_EXPECTED_OPERATION=220 SUCCESS_BUT_MISSING_EXPECTED_OPERATION value
         * @property {number} UNPARSEABLE_THROTTLE_DEFINITIONS=221 UNPARSEABLE_THROTTLE_DEFINITIONS value
         * @property {number} INVALID_THROTTLE_DEFINITIONS=222 INVALID_THROTTLE_DEFINITIONS value
         */
        proto.ResponseCodeEnum = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "OK"] = 0;
            values[valuesById[1] = "INVALID_TRANSACTION"] = 1;
            values[valuesById[2] = "PAYER_ACCOUNT_NOT_FOUND"] = 2;
            values[valuesById[3] = "INVALID_NODE_ACCOUNT"] = 3;
            values[valuesById[4] = "TRANSACTION_EXPIRED"] = 4;
            values[valuesById[5] = "INVALID_TRANSACTION_START"] = 5;
            values[valuesById[6] = "INVALID_TRANSACTION_DURATION"] = 6;
            values[valuesById[7] = "INVALID_SIGNATURE"] = 7;
            values[valuesById[8] = "MEMO_TOO_LONG"] = 8;
            values[valuesById[9] = "INSUFFICIENT_TX_FEE"] = 9;
            values[valuesById[10] = "INSUFFICIENT_PAYER_BALANCE"] = 10;
            values[valuesById[11] = "DUPLICATE_TRANSACTION"] = 11;
            values[valuesById[12] = "BUSY"] = 12;
            values[valuesById[13] = "NOT_SUPPORTED"] = 13;
            values[valuesById[14] = "INVALID_FILE_ID"] = 14;
            values[valuesById[15] = "INVALID_ACCOUNT_ID"] = 15;
            values[valuesById[16] = "INVALID_CONTRACT_ID"] = 16;
            values[valuesById[17] = "INVALID_TRANSACTION_ID"] = 17;
            values[valuesById[18] = "RECEIPT_NOT_FOUND"] = 18;
            values[valuesById[19] = "RECORD_NOT_FOUND"] = 19;
            values[valuesById[20] = "INVALID_SOLIDITY_ID"] = 20;
            values[valuesById[21] = "UNKNOWN"] = 21;
            values[valuesById[22] = "SUCCESS"] = 22;
            values[valuesById[23] = "FAIL_INVALID"] = 23;
            values[valuesById[24] = "FAIL_FEE"] = 24;
            values[valuesById[25] = "FAIL_BALANCE"] = 25;
            values[valuesById[26] = "KEY_REQUIRED"] = 26;
            values[valuesById[27] = "BAD_ENCODING"] = 27;
            values[valuesById[28] = "INSUFFICIENT_ACCOUNT_BALANCE"] = 28;
            values[valuesById[29] = "INVALID_SOLIDITY_ADDRESS"] = 29;
            values[valuesById[30] = "INSUFFICIENT_GAS"] = 30;
            values[valuesById[31] = "CONTRACT_SIZE_LIMIT_EXCEEDED"] = 31;
            values[valuesById[32] = "LOCAL_CALL_MODIFICATION_EXCEPTION"] = 32;
            values[valuesById[33] = "CONTRACT_REVERT_EXECUTED"] = 33;
            values[valuesById[34] = "CONTRACT_EXECUTION_EXCEPTION"] = 34;
            values[valuesById[35] = "INVALID_RECEIVING_NODE_ACCOUNT"] = 35;
            values[valuesById[36] = "MISSING_QUERY_HEADER"] = 36;
            values[valuesById[37] = "ACCOUNT_UPDATE_FAILED"] = 37;
            values[valuesById[38] = "INVALID_KEY_ENCODING"] = 38;
            values[valuesById[39] = "NULL_SOLIDITY_ADDRESS"] = 39;
            values[valuesById[40] = "CONTRACT_UPDATE_FAILED"] = 40;
            values[valuesById[41] = "INVALID_QUERY_HEADER"] = 41;
            values[valuesById[42] = "INVALID_FEE_SUBMITTED"] = 42;
            values[valuesById[43] = "INVALID_PAYER_SIGNATURE"] = 43;
            values[valuesById[44] = "KEY_NOT_PROVIDED"] = 44;
            values[valuesById[45] = "INVALID_EXPIRATION_TIME"] = 45;
            values[valuesById[46] = "NO_WACL_KEY"] = 46;
            values[valuesById[47] = "FILE_CONTENT_EMPTY"] = 47;
            values[valuesById[48] = "INVALID_ACCOUNT_AMOUNTS"] = 48;
            values[valuesById[49] = "EMPTY_TRANSACTION_BODY"] = 49;
            values[valuesById[50] = "INVALID_TRANSACTION_BODY"] = 50;
            values[valuesById[51] = "INVALID_SIGNATURE_TYPE_MISMATCHING_KEY"] = 51;
            values[valuesById[52] = "INVALID_SIGNATURE_COUNT_MISMATCHING_KEY"] = 52;
            values[valuesById[53] = "EMPTY_LIVE_HASH_BODY"] = 53;
            values[valuesById[54] = "EMPTY_LIVE_HASH"] = 54;
            values[valuesById[55] = "EMPTY_LIVE_HASH_KEYS"] = 55;
            values[valuesById[56] = "INVALID_LIVE_HASH_SIZE"] = 56;
            values[valuesById[57] = "EMPTY_QUERY_BODY"] = 57;
            values[valuesById[58] = "EMPTY_LIVE_HASH_QUERY"] = 58;
            values[valuesById[59] = "LIVE_HASH_NOT_FOUND"] = 59;
            values[valuesById[60] = "ACCOUNT_ID_DOES_NOT_EXIST"] = 60;
            values[valuesById[61] = "LIVE_HASH_ALREADY_EXISTS"] = 61;
            values[valuesById[62] = "INVALID_FILE_WACL"] = 62;
            values[valuesById[63] = "SERIALIZATION_FAILED"] = 63;
            values[valuesById[64] = "TRANSACTION_OVERSIZE"] = 64;
            values[valuesById[65] = "TRANSACTION_TOO_MANY_LAYERS"] = 65;
            values[valuesById[66] = "CONTRACT_DELETED"] = 66;
            values[valuesById[67] = "PLATFORM_NOT_ACTIVE"] = 67;
            values[valuesById[68] = "KEY_PREFIX_MISMATCH"] = 68;
            values[valuesById[69] = "PLATFORM_TRANSACTION_NOT_CREATED"] = 69;
            values[valuesById[70] = "INVALID_RENEWAL_PERIOD"] = 70;
            values[valuesById[71] = "INVALID_PAYER_ACCOUNT_ID"] = 71;
            values[valuesById[72] = "ACCOUNT_DELETED"] = 72;
            values[valuesById[73] = "FILE_DELETED"] = 73;
            values[valuesById[74] = "ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS"] = 74;
            values[valuesById[75] = "SETTING_NEGATIVE_ACCOUNT_BALANCE"] = 75;
            values[valuesById[76] = "OBTAINER_REQUIRED"] = 76;
            values[valuesById[77] = "OBTAINER_SAME_CONTRACT_ID"] = 77;
            values[valuesById[78] = "OBTAINER_DOES_NOT_EXIST"] = 78;
            values[valuesById[79] = "MODIFYING_IMMUTABLE_CONTRACT"] = 79;
            values[valuesById[80] = "FILE_SYSTEM_EXCEPTION"] = 80;
            values[valuesById[81] = "AUTORENEW_DURATION_NOT_IN_RANGE"] = 81;
            values[valuesById[82] = "ERROR_DECODING_BYTESTRING"] = 82;
            values[valuesById[83] = "CONTRACT_FILE_EMPTY"] = 83;
            values[valuesById[84] = "CONTRACT_BYTECODE_EMPTY"] = 84;
            values[valuesById[85] = "INVALID_INITIAL_BALANCE"] = 85;
            values[valuesById[86] = "INVALID_RECEIVE_RECORD_THRESHOLD"] = 86;
            values[valuesById[87] = "INVALID_SEND_RECORD_THRESHOLD"] = 87;
            values[valuesById[88] = "ACCOUNT_IS_NOT_GENESIS_ACCOUNT"] = 88;
            values[valuesById[89] = "PAYER_ACCOUNT_UNAUTHORIZED"] = 89;
            values[valuesById[90] = "INVALID_FREEZE_TRANSACTION_BODY"] = 90;
            values[valuesById[91] = "FREEZE_TRANSACTION_BODY_NOT_FOUND"] = 91;
            values[valuesById[92] = "TRANSFER_LIST_SIZE_LIMIT_EXCEEDED"] = 92;
            values[valuesById[93] = "RESULT_SIZE_LIMIT_EXCEEDED"] = 93;
            values[valuesById[94] = "NOT_SPECIAL_ACCOUNT"] = 94;
            values[valuesById[95] = "CONTRACT_NEGATIVE_GAS"] = 95;
            values[valuesById[96] = "CONTRACT_NEGATIVE_VALUE"] = 96;
            values[valuesById[97] = "INVALID_FEE_FILE"] = 97;
            values[valuesById[98] = "INVALID_EXCHANGE_RATE_FILE"] = 98;
            values[valuesById[99] = "INSUFFICIENT_LOCAL_CALL_GAS"] = 99;
            values[valuesById[100] = "ENTITY_NOT_ALLOWED_TO_DELETE"] = 100;
            values[valuesById[101] = "AUTHORIZATION_FAILED"] = 101;
            values[valuesById[102] = "FILE_UPLOADED_PROTO_INVALID"] = 102;
            values[valuesById[103] = "FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK"] = 103;
            values[valuesById[104] = "FEE_SCHEDULE_FILE_PART_UPLOADED"] = 104;
            values[valuesById[105] = "EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED"] = 105;
            values[valuesById[106] = "MAX_CONTRACT_STORAGE_EXCEEDED"] = 106;
            values[valuesById[107] = "TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT"] = 107;
            values[valuesById[108] = "TOTAL_LEDGER_BALANCE_INVALID"] = 108;
            values[valuesById[110] = "EXPIRATION_REDUCTION_NOT_ALLOWED"] = 110;
            values[valuesById[111] = "MAX_GAS_LIMIT_EXCEEDED"] = 111;
            values[valuesById[112] = "MAX_FILE_SIZE_EXCEEDED"] = 112;
            values[valuesById[150] = "INVALID_TOPIC_ID"] = 150;
            values[valuesById[155] = "INVALID_ADMIN_KEY"] = 155;
            values[valuesById[156] = "INVALID_SUBMIT_KEY"] = 156;
            values[valuesById[157] = "UNAUTHORIZED"] = 157;
            values[valuesById[158] = "INVALID_TOPIC_MESSAGE"] = 158;
            values[valuesById[159] = "INVALID_AUTORENEW_ACCOUNT"] = 159;
            values[valuesById[160] = "AUTORENEW_ACCOUNT_NOT_ALLOWED"] = 160;
            values[valuesById[162] = "TOPIC_EXPIRED"] = 162;
            values[valuesById[163] = "INVALID_CHUNK_NUMBER"] = 163;
            values[valuesById[164] = "INVALID_CHUNK_TRANSACTION_ID"] = 164;
            values[valuesById[165] = "ACCOUNT_FROZEN_FOR_TOKEN"] = 165;
            values[valuesById[166] = "TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED"] = 166;
            values[valuesById[167] = "INVALID_TOKEN_ID"] = 167;
            values[valuesById[168] = "INVALID_TOKEN_DECIMALS"] = 168;
            values[valuesById[169] = "INVALID_TOKEN_INITIAL_SUPPLY"] = 169;
            values[valuesById[170] = "INVALID_TREASURY_ACCOUNT_FOR_TOKEN"] = 170;
            values[valuesById[171] = "INVALID_TOKEN_SYMBOL"] = 171;
            values[valuesById[172] = "TOKEN_HAS_NO_FREEZE_KEY"] = 172;
            values[valuesById[173] = "TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN"] = 173;
            values[valuesById[174] = "MISSING_TOKEN_SYMBOL"] = 174;
            values[valuesById[175] = "TOKEN_SYMBOL_TOO_LONG"] = 175;
            values[valuesById[176] = "ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN"] = 176;
            values[valuesById[177] = "TOKEN_HAS_NO_KYC_KEY"] = 177;
            values[valuesById[178] = "INSUFFICIENT_TOKEN_BALANCE"] = 178;
            values[valuesById[179] = "TOKEN_WAS_DELETED"] = 179;
            values[valuesById[180] = "TOKEN_HAS_NO_SUPPLY_KEY"] = 180;
            values[valuesById[181] = "TOKEN_HAS_NO_WIPE_KEY"] = 181;
            values[valuesById[182] = "INVALID_TOKEN_MINT_AMOUNT"] = 182;
            values[valuesById[183] = "INVALID_TOKEN_BURN_AMOUNT"] = 183;
            values[valuesById[184] = "TOKEN_NOT_ASSOCIATED_TO_ACCOUNT"] = 184;
            values[valuesById[185] = "CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT"] = 185;
            values[valuesById[186] = "INVALID_KYC_KEY"] = 186;
            values[valuesById[187] = "INVALID_WIPE_KEY"] = 187;
            values[valuesById[188] = "INVALID_FREEZE_KEY"] = 188;
            values[valuesById[189] = "INVALID_SUPPLY_KEY"] = 189;
            values[valuesById[190] = "MISSING_TOKEN_NAME"] = 190;
            values[valuesById[191] = "TOKEN_NAME_TOO_LONG"] = 191;
            values[valuesById[192] = "INVALID_WIPING_AMOUNT"] = 192;
            values[valuesById[193] = "TOKEN_IS_IMMUTABLE"] = 193;
            values[valuesById[194] = "TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT"] = 194;
            values[valuesById[195] = "TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES"] = 195;
            values[valuesById[196] = "ACCOUNT_IS_TREASURY"] = 196;
            values[valuesById[197] = "TOKEN_ID_REPEATED_IN_TOKEN_LIST"] = 197;
            values[valuesById[198] = "TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED"] = 198;
            values[valuesById[199] = "EMPTY_TOKEN_TRANSFER_BODY"] = 199;
            values[valuesById[200] = "EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS"] = 200;
            values[valuesById[201] = "INVALID_SCHEDULE_ID"] = 201;
            values[valuesById[202] = "SCHEDULE_IS_IMMUTABLE"] = 202;
            values[valuesById[203] = "INVALID_SCHEDULE_PAYER_ID"] = 203;
            values[valuesById[204] = "INVALID_SCHEDULE_ACCOUNT_ID"] = 204;
            values[valuesById[205] = "NO_NEW_VALID_SIGNATURES"] = 205;
            values[valuesById[206] = "UNRESOLVABLE_REQUIRED_SIGNERS"] = 206;
            values[valuesById[207] = "SCHEDULED_TRANSACTION_NOT_IN_WHITELIST"] = 207;
            values[valuesById[208] = "SOME_SIGNATURES_WERE_INVALID"] = 208;
            values[valuesById[209] = "TRANSACTION_ID_FIELD_NOT_ALLOWED"] = 209;
            values[valuesById[210] = "IDENTICAL_SCHEDULE_ALREADY_CREATED"] = 210;
            values[valuesById[211] = "INVALID_ZERO_BYTE_IN_STRING"] = 211;
            values[valuesById[212] = "SCHEDULE_ALREADY_DELETED"] = 212;
            values[valuesById[213] = "SCHEDULE_ALREADY_EXECUTED"] = 213;
            values[valuesById[214] = "MESSAGE_SIZE_TOO_LARGE"] = 214;
            values[valuesById[215] = "OPERATION_REPEATED_IN_BUCKET_GROUPS"] = 215;
            values[valuesById[216] = "BUCKET_CAPACITY_OVERFLOW"] = 216;
            values[valuesById[217] = "NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION"] = 217;
            values[valuesById[218] = "BUCKET_HAS_NO_THROTTLE_GROUPS"] = 218;
            values[valuesById[219] = "THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC"] = 219;
            values[valuesById[220] = "SUCCESS_BUT_MISSING_EXPECTED_OPERATION"] = 220;
            values[valuesById[221] = "UNPARSEABLE_THROTTLE_DEFINITIONS"] = 221;
            values[valuesById[222] = "INVALID_THROTTLE_DEFINITIONS"] = 222;
            return values;
        })();

        proto.ConsensusTopicInfo = (function() {

            /**
             * Properties of a ConsensusTopicInfo.
             * @memberof proto
             * @interface IConsensusTopicInfo
             * @property {string|null} [memo] ConsensusTopicInfo memo
             * @property {Uint8Array|null} [runningHash] ConsensusTopicInfo runningHash
             * @property {Long|null} [sequenceNumber] ConsensusTopicInfo sequenceNumber
             * @property {proto.ITimestamp|null} [expirationTime] ConsensusTopicInfo expirationTime
             * @property {proto.IKey|null} [adminKey] ConsensusTopicInfo adminKey
             * @property {proto.IKey|null} [submitKey] ConsensusTopicInfo submitKey
             * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusTopicInfo autoRenewPeriod
             * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusTopicInfo autoRenewAccount
             */

            /**
             * Constructs a new ConsensusTopicInfo.
             * @memberof proto
             * @classdesc Represents a ConsensusTopicInfo.
             * @implements IConsensusTopicInfo
             * @constructor
             * @param {proto.IConsensusTopicInfo=} [p] Properties to set
             */
            function ConsensusTopicInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusTopicInfo memo.
             * @member {string} memo
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.memo = "";

            /**
             * ConsensusTopicInfo runningHash.
             * @member {Uint8Array} runningHash
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.runningHash = $util.newBuffer([]);

            /**
             * ConsensusTopicInfo sequenceNumber.
             * @member {Long} sequenceNumber
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.sequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ConsensusTopicInfo expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.expirationTime = null;

            /**
             * ConsensusTopicInfo adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.adminKey = null;

            /**
             * ConsensusTopicInfo submitKey.
             * @member {proto.IKey|null|undefined} submitKey
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.submitKey = null;

            /**
             * ConsensusTopicInfo autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.autoRenewPeriod = null;

            /**
             * ConsensusTopicInfo autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.ConsensusTopicInfo
             * @instance
             */
            ConsensusTopicInfo.prototype.autoRenewAccount = null;

            /**
             * Creates a new ConsensusTopicInfo instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusTopicInfo
             * @static
             * @param {proto.IConsensusTopicInfo=} [properties] Properties to set
             * @returns {proto.ConsensusTopicInfo} ConsensusTopicInfo instance
             */
            ConsensusTopicInfo.create = function create(properties) {
                return new ConsensusTopicInfo(properties);
            };

            /**
             * Encodes the specified ConsensusTopicInfo message. Does not implicitly {@link proto.ConsensusTopicInfo.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusTopicInfo
             * @static
             * @param {proto.IConsensusTopicInfo} m ConsensusTopicInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusTopicInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(10).string(m.memo);
                if (m.runningHash != null && Object.hasOwnProperty.call(m, "runningHash"))
                    w.uint32(18).bytes(m.runningHash);
                if (m.sequenceNumber != null && Object.hasOwnProperty.call(m, "sequenceNumber"))
                    w.uint32(24).uint64(m.sequenceNumber);
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(34).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(42).fork()).ldelim();
                if (m.submitKey != null && Object.hasOwnProperty.call(m, "submitKey"))
                    $root.proto.Key.encode(m.submitKey, w.uint32(50).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(58).fork()).ldelim();
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(66).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusTopicInfo message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusTopicInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusTopicInfo} ConsensusTopicInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusTopicInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.memo = r.string();
                        break;
                    case 2:
                        m.runningHash = r.bytes();
                        break;
                    case 3:
                        m.sequenceNumber = r.uint64();
                        break;
                    case 4:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 5:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 6:
                        m.submitKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 7:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 8:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusTopicInfo;
        })();

        proto.ConsensusService = (function() {

            /**
             * Constructs a new ConsensusService service.
             * @memberof proto
             * @classdesc Represents a ConsensusService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function ConsensusService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (ConsensusService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = ConsensusService;

            /**
             * Creates new ConsensusService service using the specified rpc implementation.
             * @function create
             * @memberof proto.ConsensusService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {ConsensusService} RPC service. Useful where requests and/or responses are streamed.
             */
            ConsensusService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.ConsensusService#createTopic}.
             * @memberof proto.ConsensusService
             * @typedef createTopicCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createTopic.
             * @function createTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ConsensusService.createTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ConsensusService.prototype.createTopic = function createTopic(request, callback) {
                return this.rpcCall(createTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createTopic" });

            /**
             * Calls createTopic.
             * @function createTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ConsensusService#updateTopic}.
             * @memberof proto.ConsensusService
             * @typedef updateTopicCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls updateTopic.
             * @function updateTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ConsensusService.updateTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ConsensusService.prototype.updateTopic = function updateTopic(request, callback) {
                return this.rpcCall(updateTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "updateTopic" });

            /**
             * Calls updateTopic.
             * @function updateTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ConsensusService#deleteTopic}.
             * @memberof proto.ConsensusService
             * @typedef deleteTopicCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteTopic.
             * @function deleteTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ConsensusService.deleteTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ConsensusService.prototype.deleteTopic = function deleteTopic(request, callback) {
                return this.rpcCall(deleteTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteTopic" });

            /**
             * Calls deleteTopic.
             * @function deleteTopic
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ConsensusService#getTopicInfo}.
             * @memberof proto.ConsensusService
             * @typedef getTopicInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getTopicInfo.
             * @function getTopicInfo
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.ConsensusService.getTopicInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ConsensusService.prototype.getTopicInfo = function getTopicInfo(request, callback) {
                return this.rpcCall(getTopicInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getTopicInfo" });

            /**
             * Calls getTopicInfo.
             * @function getTopicInfo
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ConsensusService#submitMessage}.
             * @memberof proto.ConsensusService
             * @typedef submitMessageCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls submitMessage.
             * @function submitMessage
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ConsensusService.submitMessageCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ConsensusService.prototype.submitMessage = function submitMessage(request, callback) {
                return this.rpcCall(submitMessage, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "submitMessage" });

            /**
             * Calls submitMessage.
             * @function submitMessage
             * @memberof proto.ConsensusService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            return ConsensusService;
        })();

        proto.Query = (function() {

            /**
             * Properties of a Query.
             * @memberof proto
             * @interface IQuery
             * @property {proto.IGetByKeyQuery|null} [getByKey] Query getByKey
             * @property {proto.IGetBySolidityIDQuery|null} [getBySolidityID] Query getBySolidityID
             * @property {proto.IContractCallLocalQuery|null} [contractCallLocal] Query contractCallLocal
             * @property {proto.IContractGetInfoQuery|null} [contractGetInfo] Query contractGetInfo
             * @property {proto.IContractGetBytecodeQuery|null} [contractGetBytecode] Query contractGetBytecode
             * @property {proto.IContractGetRecordsQuery|null} [ContractGetRecords] Query ContractGetRecords
             * @property {proto.ICryptoGetAccountBalanceQuery|null} [cryptogetAccountBalance] Query cryptogetAccountBalance
             * @property {proto.ICryptoGetAccountRecordsQuery|null} [cryptoGetAccountRecords] Query cryptoGetAccountRecords
             * @property {proto.ICryptoGetInfoQuery|null} [cryptoGetInfo] Query cryptoGetInfo
             * @property {proto.ICryptoGetLiveHashQuery|null} [cryptoGetLiveHash] Query cryptoGetLiveHash
             * @property {proto.ICryptoGetStakersQuery|null} [cryptoGetProxyStakers] Query cryptoGetProxyStakers
             * @property {proto.IFileGetContentsQuery|null} [fileGetContents] Query fileGetContents
             * @property {proto.IFileGetInfoQuery|null} [fileGetInfo] Query fileGetInfo
             * @property {proto.ITransactionGetReceiptQuery|null} [transactionGetReceipt] Query transactionGetReceipt
             * @property {proto.ITransactionGetRecordQuery|null} [transactionGetRecord] Query transactionGetRecord
             * @property {proto.ITransactionGetFastRecordQuery|null} [transactionGetFastRecord] Query transactionGetFastRecord
             * @property {proto.IConsensusGetTopicInfoQuery|null} [consensusGetTopicInfo] Query consensusGetTopicInfo
             * @property {proto.INetworkGetVersionInfoQuery|null} [networkGetVersionInfo] Query networkGetVersionInfo
             * @property {proto.ITokenGetInfoQuery|null} [tokenGetInfo] Query tokenGetInfo
             * @property {proto.IScheduleGetInfoQuery|null} [scheduleGetInfo] Query scheduleGetInfo
             */

            /**
             * Constructs a new Query.
             * @memberof proto
             * @classdesc Represents a Query.
             * @implements IQuery
             * @constructor
             * @param {proto.IQuery=} [p] Properties to set
             */
            function Query(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Query getByKey.
             * @member {proto.IGetByKeyQuery|null|undefined} getByKey
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.getByKey = null;

            /**
             * Query getBySolidityID.
             * @member {proto.IGetBySolidityIDQuery|null|undefined} getBySolidityID
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.getBySolidityID = null;

            /**
             * Query contractCallLocal.
             * @member {proto.IContractCallLocalQuery|null|undefined} contractCallLocal
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.contractCallLocal = null;

            /**
             * Query contractGetInfo.
             * @member {proto.IContractGetInfoQuery|null|undefined} contractGetInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.contractGetInfo = null;

            /**
             * Query contractGetBytecode.
             * @member {proto.IContractGetBytecodeQuery|null|undefined} contractGetBytecode
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.contractGetBytecode = null;

            /**
             * Query ContractGetRecords.
             * @member {proto.IContractGetRecordsQuery|null|undefined} ContractGetRecords
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.ContractGetRecords = null;

            /**
             * Query cryptogetAccountBalance.
             * @member {proto.ICryptoGetAccountBalanceQuery|null|undefined} cryptogetAccountBalance
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.cryptogetAccountBalance = null;

            /**
             * Query cryptoGetAccountRecords.
             * @member {proto.ICryptoGetAccountRecordsQuery|null|undefined} cryptoGetAccountRecords
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.cryptoGetAccountRecords = null;

            /**
             * Query cryptoGetInfo.
             * @member {proto.ICryptoGetInfoQuery|null|undefined} cryptoGetInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.cryptoGetInfo = null;

            /**
             * Query cryptoGetLiveHash.
             * @member {proto.ICryptoGetLiveHashQuery|null|undefined} cryptoGetLiveHash
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.cryptoGetLiveHash = null;

            /**
             * Query cryptoGetProxyStakers.
             * @member {proto.ICryptoGetStakersQuery|null|undefined} cryptoGetProxyStakers
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.cryptoGetProxyStakers = null;

            /**
             * Query fileGetContents.
             * @member {proto.IFileGetContentsQuery|null|undefined} fileGetContents
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.fileGetContents = null;

            /**
             * Query fileGetInfo.
             * @member {proto.IFileGetInfoQuery|null|undefined} fileGetInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.fileGetInfo = null;

            /**
             * Query transactionGetReceipt.
             * @member {proto.ITransactionGetReceiptQuery|null|undefined} transactionGetReceipt
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.transactionGetReceipt = null;

            /**
             * Query transactionGetRecord.
             * @member {proto.ITransactionGetRecordQuery|null|undefined} transactionGetRecord
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.transactionGetRecord = null;

            /**
             * Query transactionGetFastRecord.
             * @member {proto.ITransactionGetFastRecordQuery|null|undefined} transactionGetFastRecord
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.transactionGetFastRecord = null;

            /**
             * Query consensusGetTopicInfo.
             * @member {proto.IConsensusGetTopicInfoQuery|null|undefined} consensusGetTopicInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.consensusGetTopicInfo = null;

            /**
             * Query networkGetVersionInfo.
             * @member {proto.INetworkGetVersionInfoQuery|null|undefined} networkGetVersionInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.networkGetVersionInfo = null;

            /**
             * Query tokenGetInfo.
             * @member {proto.ITokenGetInfoQuery|null|undefined} tokenGetInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.tokenGetInfo = null;

            /**
             * Query scheduleGetInfo.
             * @member {proto.IScheduleGetInfoQuery|null|undefined} scheduleGetInfo
             * @memberof proto.Query
             * @instance
             */
            Query.prototype.scheduleGetInfo = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Query query.
             * @member {"getByKey"|"getBySolidityID"|"contractCallLocal"|"contractGetInfo"|"contractGetBytecode"|"ContractGetRecords"|"cryptogetAccountBalance"|"cryptoGetAccountRecords"|"cryptoGetInfo"|"cryptoGetLiveHash"|"cryptoGetProxyStakers"|"fileGetContents"|"fileGetInfo"|"transactionGetReceipt"|"transactionGetRecord"|"transactionGetFastRecord"|"consensusGetTopicInfo"|"networkGetVersionInfo"|"tokenGetInfo"|"scheduleGetInfo"|undefined} query
             * @memberof proto.Query
             * @instance
             */
            Object.defineProperty(Query.prototype, "query", {
                get: $util.oneOfGetter($oneOfFields = ["getByKey", "getBySolidityID", "contractCallLocal", "contractGetInfo", "contractGetBytecode", "ContractGetRecords", "cryptogetAccountBalance", "cryptoGetAccountRecords", "cryptoGetInfo", "cryptoGetLiveHash", "cryptoGetProxyStakers", "fileGetContents", "fileGetInfo", "transactionGetReceipt", "transactionGetRecord", "transactionGetFastRecord", "consensusGetTopicInfo", "networkGetVersionInfo", "tokenGetInfo", "scheduleGetInfo"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Query instance using the specified properties.
             * @function create
             * @memberof proto.Query
             * @static
             * @param {proto.IQuery=} [properties] Properties to set
             * @returns {proto.Query} Query instance
             */
            Query.create = function create(properties) {
                return new Query(properties);
            };

            /**
             * Encodes the specified Query message. Does not implicitly {@link proto.Query.verify|verify} messages.
             * @function encode
             * @memberof proto.Query
             * @static
             * @param {proto.IQuery} m Query message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Query.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.getByKey != null && Object.hasOwnProperty.call(m, "getByKey"))
                    $root.proto.GetByKeyQuery.encode(m.getByKey, w.uint32(10).fork()).ldelim();
                if (m.getBySolidityID != null && Object.hasOwnProperty.call(m, "getBySolidityID"))
                    $root.proto.GetBySolidityIDQuery.encode(m.getBySolidityID, w.uint32(18).fork()).ldelim();
                if (m.contractCallLocal != null && Object.hasOwnProperty.call(m, "contractCallLocal"))
                    $root.proto.ContractCallLocalQuery.encode(m.contractCallLocal, w.uint32(26).fork()).ldelim();
                if (m.contractGetInfo != null && Object.hasOwnProperty.call(m, "contractGetInfo"))
                    $root.proto.ContractGetInfoQuery.encode(m.contractGetInfo, w.uint32(34).fork()).ldelim();
                if (m.contractGetBytecode != null && Object.hasOwnProperty.call(m, "contractGetBytecode"))
                    $root.proto.ContractGetBytecodeQuery.encode(m.contractGetBytecode, w.uint32(42).fork()).ldelim();
                if (m.ContractGetRecords != null && Object.hasOwnProperty.call(m, "ContractGetRecords"))
                    $root.proto.ContractGetRecordsQuery.encode(m.ContractGetRecords, w.uint32(50).fork()).ldelim();
                if (m.cryptogetAccountBalance != null && Object.hasOwnProperty.call(m, "cryptogetAccountBalance"))
                    $root.proto.CryptoGetAccountBalanceQuery.encode(m.cryptogetAccountBalance, w.uint32(58).fork()).ldelim();
                if (m.cryptoGetAccountRecords != null && Object.hasOwnProperty.call(m, "cryptoGetAccountRecords"))
                    $root.proto.CryptoGetAccountRecordsQuery.encode(m.cryptoGetAccountRecords, w.uint32(66).fork()).ldelim();
                if (m.cryptoGetInfo != null && Object.hasOwnProperty.call(m, "cryptoGetInfo"))
                    $root.proto.CryptoGetInfoQuery.encode(m.cryptoGetInfo, w.uint32(74).fork()).ldelim();
                if (m.cryptoGetLiveHash != null && Object.hasOwnProperty.call(m, "cryptoGetLiveHash"))
                    $root.proto.CryptoGetLiveHashQuery.encode(m.cryptoGetLiveHash, w.uint32(82).fork()).ldelim();
                if (m.cryptoGetProxyStakers != null && Object.hasOwnProperty.call(m, "cryptoGetProxyStakers"))
                    $root.proto.CryptoGetStakersQuery.encode(m.cryptoGetProxyStakers, w.uint32(90).fork()).ldelim();
                if (m.fileGetContents != null && Object.hasOwnProperty.call(m, "fileGetContents"))
                    $root.proto.FileGetContentsQuery.encode(m.fileGetContents, w.uint32(98).fork()).ldelim();
                if (m.fileGetInfo != null && Object.hasOwnProperty.call(m, "fileGetInfo"))
                    $root.proto.FileGetInfoQuery.encode(m.fileGetInfo, w.uint32(106).fork()).ldelim();
                if (m.transactionGetReceipt != null && Object.hasOwnProperty.call(m, "transactionGetReceipt"))
                    $root.proto.TransactionGetReceiptQuery.encode(m.transactionGetReceipt, w.uint32(114).fork()).ldelim();
                if (m.transactionGetRecord != null && Object.hasOwnProperty.call(m, "transactionGetRecord"))
                    $root.proto.TransactionGetRecordQuery.encode(m.transactionGetRecord, w.uint32(122).fork()).ldelim();
                if (m.transactionGetFastRecord != null && Object.hasOwnProperty.call(m, "transactionGetFastRecord"))
                    $root.proto.TransactionGetFastRecordQuery.encode(m.transactionGetFastRecord, w.uint32(130).fork()).ldelim();
                if (m.consensusGetTopicInfo != null && Object.hasOwnProperty.call(m, "consensusGetTopicInfo"))
                    $root.proto.ConsensusGetTopicInfoQuery.encode(m.consensusGetTopicInfo, w.uint32(402).fork()).ldelim();
                if (m.networkGetVersionInfo != null && Object.hasOwnProperty.call(m, "networkGetVersionInfo"))
                    $root.proto.NetworkGetVersionInfoQuery.encode(m.networkGetVersionInfo, w.uint32(410).fork()).ldelim();
                if (m.tokenGetInfo != null && Object.hasOwnProperty.call(m, "tokenGetInfo"))
                    $root.proto.TokenGetInfoQuery.encode(m.tokenGetInfo, w.uint32(418).fork()).ldelim();
                if (m.scheduleGetInfo != null && Object.hasOwnProperty.call(m, "scheduleGetInfo"))
                    $root.proto.ScheduleGetInfoQuery.encode(m.scheduleGetInfo, w.uint32(426).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Query message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Query
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Query} Query
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Query.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Query();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.getByKey = $root.proto.GetByKeyQuery.decode(r, r.uint32());
                        break;
                    case 2:
                        m.getBySolidityID = $root.proto.GetBySolidityIDQuery.decode(r, r.uint32());
                        break;
                    case 3:
                        m.contractCallLocal = $root.proto.ContractCallLocalQuery.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractGetInfo = $root.proto.ContractGetInfoQuery.decode(r, r.uint32());
                        break;
                    case 5:
                        m.contractGetBytecode = $root.proto.ContractGetBytecodeQuery.decode(r, r.uint32());
                        break;
                    case 6:
                        m.ContractGetRecords = $root.proto.ContractGetRecordsQuery.decode(r, r.uint32());
                        break;
                    case 7:
                        m.cryptogetAccountBalance = $root.proto.CryptoGetAccountBalanceQuery.decode(r, r.uint32());
                        break;
                    case 8:
                        m.cryptoGetAccountRecords = $root.proto.CryptoGetAccountRecordsQuery.decode(r, r.uint32());
                        break;
                    case 9:
                        m.cryptoGetInfo = $root.proto.CryptoGetInfoQuery.decode(r, r.uint32());
                        break;
                    case 10:
                        m.cryptoGetLiveHash = $root.proto.CryptoGetLiveHashQuery.decode(r, r.uint32());
                        break;
                    case 11:
                        m.cryptoGetProxyStakers = $root.proto.CryptoGetStakersQuery.decode(r, r.uint32());
                        break;
                    case 12:
                        m.fileGetContents = $root.proto.FileGetContentsQuery.decode(r, r.uint32());
                        break;
                    case 13:
                        m.fileGetInfo = $root.proto.FileGetInfoQuery.decode(r, r.uint32());
                        break;
                    case 14:
                        m.transactionGetReceipt = $root.proto.TransactionGetReceiptQuery.decode(r, r.uint32());
                        break;
                    case 15:
                        m.transactionGetRecord = $root.proto.TransactionGetRecordQuery.decode(r, r.uint32());
                        break;
                    case 16:
                        m.transactionGetFastRecord = $root.proto.TransactionGetFastRecordQuery.decode(r, r.uint32());
                        break;
                    case 50:
                        m.consensusGetTopicInfo = $root.proto.ConsensusGetTopicInfoQuery.decode(r, r.uint32());
                        break;
                    case 51:
                        m.networkGetVersionInfo = $root.proto.NetworkGetVersionInfoQuery.decode(r, r.uint32());
                        break;
                    case 52:
                        m.tokenGetInfo = $root.proto.TokenGetInfoQuery.decode(r, r.uint32());
                        break;
                    case 53:
                        m.scheduleGetInfo = $root.proto.ScheduleGetInfoQuery.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Query;
        })();

        proto.GetByKeyQuery = (function() {

            /**
             * Properties of a GetByKeyQuery.
             * @memberof proto
             * @interface IGetByKeyQuery
             * @property {proto.IQueryHeader|null} [header] GetByKeyQuery header
             * @property {proto.IKey|null} [key] GetByKeyQuery key
             */

            /**
             * Constructs a new GetByKeyQuery.
             * @memberof proto
             * @classdesc Represents a GetByKeyQuery.
             * @implements IGetByKeyQuery
             * @constructor
             * @param {proto.IGetByKeyQuery=} [p] Properties to set
             */
            function GetByKeyQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * GetByKeyQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.GetByKeyQuery
             * @instance
             */
            GetByKeyQuery.prototype.header = null;

            /**
             * GetByKeyQuery key.
             * @member {proto.IKey|null|undefined} key
             * @memberof proto.GetByKeyQuery
             * @instance
             */
            GetByKeyQuery.prototype.key = null;

            /**
             * Creates a new GetByKeyQuery instance using the specified properties.
             * @function create
             * @memberof proto.GetByKeyQuery
             * @static
             * @param {proto.IGetByKeyQuery=} [properties] Properties to set
             * @returns {proto.GetByKeyQuery} GetByKeyQuery instance
             */
            GetByKeyQuery.create = function create(properties) {
                return new GetByKeyQuery(properties);
            };

            /**
             * Encodes the specified GetByKeyQuery message. Does not implicitly {@link proto.GetByKeyQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.GetByKeyQuery
             * @static
             * @param {proto.IGetByKeyQuery} m GetByKeyQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetByKeyQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    $root.proto.Key.encode(m.key, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a GetByKeyQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.GetByKeyQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.GetByKeyQuery} GetByKeyQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetByKeyQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetByKeyQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.key = $root.proto.Key.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return GetByKeyQuery;
        })();

        proto.EntityID = (function() {

            /**
             * Properties of an EntityID.
             * @memberof proto
             * @interface IEntityID
             * @property {proto.IAccountID|null} [accountID] EntityID accountID
             * @property {proto.ILiveHash|null} [liveHash] EntityID liveHash
             * @property {proto.IFileID|null} [fileID] EntityID fileID
             * @property {proto.IContractID|null} [contractID] EntityID contractID
             */

            /**
             * Constructs a new EntityID.
             * @memberof proto
             * @classdesc Represents an EntityID.
             * @implements IEntityID
             * @constructor
             * @param {proto.IEntityID=} [p] Properties to set
             */
            function EntityID(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * EntityID accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.EntityID
             * @instance
             */
            EntityID.prototype.accountID = null;

            /**
             * EntityID liveHash.
             * @member {proto.ILiveHash|null|undefined} liveHash
             * @memberof proto.EntityID
             * @instance
             */
            EntityID.prototype.liveHash = null;

            /**
             * EntityID fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.EntityID
             * @instance
             */
            EntityID.prototype.fileID = null;

            /**
             * EntityID contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.EntityID
             * @instance
             */
            EntityID.prototype.contractID = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * EntityID entity.
             * @member {"accountID"|"liveHash"|"fileID"|"contractID"|undefined} entity
             * @memberof proto.EntityID
             * @instance
             */
            Object.defineProperty(EntityID.prototype, "entity", {
                get: $util.oneOfGetter($oneOfFields = ["accountID", "liveHash", "fileID", "contractID"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new EntityID instance using the specified properties.
             * @function create
             * @memberof proto.EntityID
             * @static
             * @param {proto.IEntityID=} [properties] Properties to set
             * @returns {proto.EntityID} EntityID instance
             */
            EntityID.create = function create(properties) {
                return new EntityID(properties);
            };

            /**
             * Encodes the specified EntityID message. Does not implicitly {@link proto.EntityID.verify|verify} messages.
             * @function encode
             * @memberof proto.EntityID
             * @static
             * @param {proto.IEntityID} m EntityID message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EntityID.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.liveHash != null && Object.hasOwnProperty.call(m, "liveHash"))
                    $root.proto.LiveHash.encode(m.liveHash, w.uint32(18).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an EntityID message from the specified reader or buffer.
             * @function decode
             * @memberof proto.EntityID
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.EntityID} EntityID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EntityID.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.EntityID();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());
                        break;
                    case 3:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return EntityID;
        })();

        proto.GetByKeyResponse = (function() {

            /**
             * Properties of a GetByKeyResponse.
             * @memberof proto
             * @interface IGetByKeyResponse
             * @property {proto.IResponseHeader|null} [header] GetByKeyResponse header
             * @property {Array.<proto.IEntityID>|null} [entities] GetByKeyResponse entities
             */

            /**
             * Constructs a new GetByKeyResponse.
             * @memberof proto
             * @classdesc Represents a GetByKeyResponse.
             * @implements IGetByKeyResponse
             * @constructor
             * @param {proto.IGetByKeyResponse=} [p] Properties to set
             */
            function GetByKeyResponse(p) {
                this.entities = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * GetByKeyResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.GetByKeyResponse
             * @instance
             */
            GetByKeyResponse.prototype.header = null;

            /**
             * GetByKeyResponse entities.
             * @member {Array.<proto.IEntityID>} entities
             * @memberof proto.GetByKeyResponse
             * @instance
             */
            GetByKeyResponse.prototype.entities = $util.emptyArray;

            /**
             * Creates a new GetByKeyResponse instance using the specified properties.
             * @function create
             * @memberof proto.GetByKeyResponse
             * @static
             * @param {proto.IGetByKeyResponse=} [properties] Properties to set
             * @returns {proto.GetByKeyResponse} GetByKeyResponse instance
             */
            GetByKeyResponse.create = function create(properties) {
                return new GetByKeyResponse(properties);
            };

            /**
             * Encodes the specified GetByKeyResponse message. Does not implicitly {@link proto.GetByKeyResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.GetByKeyResponse
             * @static
             * @param {proto.IGetByKeyResponse} m GetByKeyResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetByKeyResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.entities != null && m.entities.length) {
                    for (var i = 0; i < m.entities.length; ++i)
                        $root.proto.EntityID.encode(m.entities[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a GetByKeyResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.GetByKeyResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.GetByKeyResponse} GetByKeyResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetByKeyResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetByKeyResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.entities && m.entities.length))
                            m.entities = [];
                        m.entities.push($root.proto.EntityID.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return GetByKeyResponse;
        })();

        proto.LiveHash = (function() {

            /**
             * Properties of a LiveHash.
             * @memberof proto
             * @interface ILiveHash
             * @property {proto.IAccountID|null} [accountId] LiveHash accountId
             * @property {Uint8Array|null} [hash] LiveHash hash
             * @property {proto.IKeyList|null} [keys] LiveHash keys
             * @property {proto.IDuration|null} [duration] LiveHash duration
             */

            /**
             * Constructs a new LiveHash.
             * @memberof proto
             * @classdesc Represents a LiveHash.
             * @implements ILiveHash
             * @constructor
             * @param {proto.ILiveHash=} [p] Properties to set
             */
            function LiveHash(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * LiveHash accountId.
             * @member {proto.IAccountID|null|undefined} accountId
             * @memberof proto.LiveHash
             * @instance
             */
            LiveHash.prototype.accountId = null;

            /**
             * LiveHash hash.
             * @member {Uint8Array} hash
             * @memberof proto.LiveHash
             * @instance
             */
            LiveHash.prototype.hash = $util.newBuffer([]);

            /**
             * LiveHash keys.
             * @member {proto.IKeyList|null|undefined} keys
             * @memberof proto.LiveHash
             * @instance
             */
            LiveHash.prototype.keys = null;

            /**
             * LiveHash duration.
             * @member {proto.IDuration|null|undefined} duration
             * @memberof proto.LiveHash
             * @instance
             */
            LiveHash.prototype.duration = null;

            /**
             * Creates a new LiveHash instance using the specified properties.
             * @function create
             * @memberof proto.LiveHash
             * @static
             * @param {proto.ILiveHash=} [properties] Properties to set
             * @returns {proto.LiveHash} LiveHash instance
             */
            LiveHash.create = function create(properties) {
                return new LiveHash(properties);
            };

            /**
             * Encodes the specified LiveHash message. Does not implicitly {@link proto.LiveHash.verify|verify} messages.
             * @function encode
             * @memberof proto.LiveHash
             * @static
             * @param {proto.ILiveHash} m LiveHash message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LiveHash.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountId != null && Object.hasOwnProperty.call(m, "accountId"))
                    $root.proto.AccountID.encode(m.accountId, w.uint32(10).fork()).ldelim();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(18).bytes(m.hash);
                if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                    $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();
                if (m.duration != null && Object.hasOwnProperty.call(m, "duration"))
                    $root.proto.Duration.encode(m.duration, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a LiveHash message from the specified reader or buffer.
             * @function decode
             * @memberof proto.LiveHash
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.LiveHash} LiveHash
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LiveHash.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.LiveHash();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountId = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.hash = r.bytes();
                        break;
                    case 3:
                        m.keys = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    case 5:
                        m.duration = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return LiveHash;
        })();

        proto.CryptoAddLiveHashTransactionBody = (function() {

            /**
             * Properties of a CryptoAddLiveHashTransactionBody.
             * @memberof proto
             * @interface ICryptoAddLiveHashTransactionBody
             * @property {proto.ILiveHash|null} [liveHash] CryptoAddLiveHashTransactionBody liveHash
             */

            /**
             * Constructs a new CryptoAddLiveHashTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoAddLiveHashTransactionBody.
             * @implements ICryptoAddLiveHashTransactionBody
             * @constructor
             * @param {proto.ICryptoAddLiveHashTransactionBody=} [p] Properties to set
             */
            function CryptoAddLiveHashTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoAddLiveHashTransactionBody liveHash.
             * @member {proto.ILiveHash|null|undefined} liveHash
             * @memberof proto.CryptoAddLiveHashTransactionBody
             * @instance
             */
            CryptoAddLiveHashTransactionBody.prototype.liveHash = null;

            /**
             * Creates a new CryptoAddLiveHashTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoAddLiveHashTransactionBody
             * @static
             * @param {proto.ICryptoAddLiveHashTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoAddLiveHashTransactionBody} CryptoAddLiveHashTransactionBody instance
             */
            CryptoAddLiveHashTransactionBody.create = function create(properties) {
                return new CryptoAddLiveHashTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoAddLiveHashTransactionBody message. Does not implicitly {@link proto.CryptoAddLiveHashTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoAddLiveHashTransactionBody
             * @static
             * @param {proto.ICryptoAddLiveHashTransactionBody} m CryptoAddLiveHashTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoAddLiveHashTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.liveHash != null && Object.hasOwnProperty.call(m, "liveHash"))
                    $root.proto.LiveHash.encode(m.liveHash, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoAddLiveHashTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoAddLiveHashTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoAddLiveHashTransactionBody} CryptoAddLiveHashTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoAddLiveHashTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoAddLiveHashTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 3:
                        m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoAddLiveHashTransactionBody;
        })();

        proto.GetBySolidityIDQuery = (function() {

            /**
             * Properties of a GetBySolidityIDQuery.
             * @memberof proto
             * @interface IGetBySolidityIDQuery
             * @property {proto.IQueryHeader|null} [header] GetBySolidityIDQuery header
             * @property {string|null} [solidityID] GetBySolidityIDQuery solidityID
             */

            /**
             * Constructs a new GetBySolidityIDQuery.
             * @memberof proto
             * @classdesc Represents a GetBySolidityIDQuery.
             * @implements IGetBySolidityIDQuery
             * @constructor
             * @param {proto.IGetBySolidityIDQuery=} [p] Properties to set
             */
            function GetBySolidityIDQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * GetBySolidityIDQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.GetBySolidityIDQuery
             * @instance
             */
            GetBySolidityIDQuery.prototype.header = null;

            /**
             * GetBySolidityIDQuery solidityID.
             * @member {string} solidityID
             * @memberof proto.GetBySolidityIDQuery
             * @instance
             */
            GetBySolidityIDQuery.prototype.solidityID = "";

            /**
             * Creates a new GetBySolidityIDQuery instance using the specified properties.
             * @function create
             * @memberof proto.GetBySolidityIDQuery
             * @static
             * @param {proto.IGetBySolidityIDQuery=} [properties] Properties to set
             * @returns {proto.GetBySolidityIDQuery} GetBySolidityIDQuery instance
             */
            GetBySolidityIDQuery.create = function create(properties) {
                return new GetBySolidityIDQuery(properties);
            };

            /**
             * Encodes the specified GetBySolidityIDQuery message. Does not implicitly {@link proto.GetBySolidityIDQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.GetBySolidityIDQuery
             * @static
             * @param {proto.IGetBySolidityIDQuery} m GetBySolidityIDQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetBySolidityIDQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.solidityID != null && Object.hasOwnProperty.call(m, "solidityID"))
                    w.uint32(18).string(m.solidityID);
                return w;
            };

            /**
             * Decodes a GetBySolidityIDQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.GetBySolidityIDQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.GetBySolidityIDQuery} GetBySolidityIDQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetBySolidityIDQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetBySolidityIDQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.solidityID = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return GetBySolidityIDQuery;
        })();

        proto.GetBySolidityIDResponse = (function() {

            /**
             * Properties of a GetBySolidityIDResponse.
             * @memberof proto
             * @interface IGetBySolidityIDResponse
             * @property {proto.IResponseHeader|null} [header] GetBySolidityIDResponse header
             * @property {proto.IAccountID|null} [accountID] GetBySolidityIDResponse accountID
             * @property {proto.IFileID|null} [fileID] GetBySolidityIDResponse fileID
             * @property {proto.IContractID|null} [contractID] GetBySolidityIDResponse contractID
             */

            /**
             * Constructs a new GetBySolidityIDResponse.
             * @memberof proto
             * @classdesc Represents a GetBySolidityIDResponse.
             * @implements IGetBySolidityIDResponse
             * @constructor
             * @param {proto.IGetBySolidityIDResponse=} [p] Properties to set
             */
            function GetBySolidityIDResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * GetBySolidityIDResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.GetBySolidityIDResponse
             * @instance
             */
            GetBySolidityIDResponse.prototype.header = null;

            /**
             * GetBySolidityIDResponse accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.GetBySolidityIDResponse
             * @instance
             */
            GetBySolidityIDResponse.prototype.accountID = null;

            /**
             * GetBySolidityIDResponse fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.GetBySolidityIDResponse
             * @instance
             */
            GetBySolidityIDResponse.prototype.fileID = null;

            /**
             * GetBySolidityIDResponse contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.GetBySolidityIDResponse
             * @instance
             */
            GetBySolidityIDResponse.prototype.contractID = null;

            /**
             * Creates a new GetBySolidityIDResponse instance using the specified properties.
             * @function create
             * @memberof proto.GetBySolidityIDResponse
             * @static
             * @param {proto.IGetBySolidityIDResponse=} [properties] Properties to set
             * @returns {proto.GetBySolidityIDResponse} GetBySolidityIDResponse instance
             */
            GetBySolidityIDResponse.create = function create(properties) {
                return new GetBySolidityIDResponse(properties);
            };

            /**
             * Encodes the specified GetBySolidityIDResponse message. Does not implicitly {@link proto.GetBySolidityIDResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.GetBySolidityIDResponse
             * @static
             * @param {proto.IGetBySolidityIDResponse} m GetBySolidityIDResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetBySolidityIDResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a GetBySolidityIDResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.GetBySolidityIDResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.GetBySolidityIDResponse} GetBySolidityIDResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetBySolidityIDResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetBySolidityIDResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return GetBySolidityIDResponse;
        })();

        proto.ContractLoginfo = (function() {

            /**
             * Properties of a ContractLoginfo.
             * @memberof proto
             * @interface IContractLoginfo
             * @property {proto.IContractID|null} [contractID] ContractLoginfo contractID
             * @property {Uint8Array|null} [bloom] ContractLoginfo bloom
             * @property {Array.<Uint8Array>|null} [topic] ContractLoginfo topic
             * @property {Uint8Array|null} [data] ContractLoginfo data
             */

            /**
             * Constructs a new ContractLoginfo.
             * @memberof proto
             * @classdesc Represents a ContractLoginfo.
             * @implements IContractLoginfo
             * @constructor
             * @param {proto.IContractLoginfo=} [p] Properties to set
             */
            function ContractLoginfo(p) {
                this.topic = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractLoginfo contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractLoginfo
             * @instance
             */
            ContractLoginfo.prototype.contractID = null;

            /**
             * ContractLoginfo bloom.
             * @member {Uint8Array} bloom
             * @memberof proto.ContractLoginfo
             * @instance
             */
            ContractLoginfo.prototype.bloom = $util.newBuffer([]);

            /**
             * ContractLoginfo topic.
             * @member {Array.<Uint8Array>} topic
             * @memberof proto.ContractLoginfo
             * @instance
             */
            ContractLoginfo.prototype.topic = $util.emptyArray;

            /**
             * ContractLoginfo data.
             * @member {Uint8Array} data
             * @memberof proto.ContractLoginfo
             * @instance
             */
            ContractLoginfo.prototype.data = $util.newBuffer([]);

            /**
             * Creates a new ContractLoginfo instance using the specified properties.
             * @function create
             * @memberof proto.ContractLoginfo
             * @static
             * @param {proto.IContractLoginfo=} [properties] Properties to set
             * @returns {proto.ContractLoginfo} ContractLoginfo instance
             */
            ContractLoginfo.create = function create(properties) {
                return new ContractLoginfo(properties);
            };

            /**
             * Encodes the specified ContractLoginfo message. Does not implicitly {@link proto.ContractLoginfo.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractLoginfo
             * @static
             * @param {proto.IContractLoginfo} m ContractLoginfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractLoginfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.bloom != null && Object.hasOwnProperty.call(m, "bloom"))
                    w.uint32(18).bytes(m.bloom);
                if (m.topic != null && m.topic.length) {
                    for (var i = 0; i < m.topic.length; ++i)
                        w.uint32(26).bytes(m.topic[i]);
                }
                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                    w.uint32(34).bytes(m.data);
                return w;
            };

            /**
             * Decodes a ContractLoginfo message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractLoginfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractLoginfo} ContractLoginfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractLoginfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractLoginfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.bloom = r.bytes();
                        break;
                    case 3:
                        if (!(m.topic && m.topic.length))
                            m.topic = [];
                        m.topic.push(r.bytes());
                        break;
                    case 4:
                        m.data = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractLoginfo;
        })();

        proto.ContractFunctionResult = (function() {

            /**
             * Properties of a ContractFunctionResult.
             * @memberof proto
             * @interface IContractFunctionResult
             * @property {proto.IContractID|null} [contractID] ContractFunctionResult contractID
             * @property {Uint8Array|null} [contractCallResult] ContractFunctionResult contractCallResult
             * @property {string|null} [errorMessage] ContractFunctionResult errorMessage
             * @property {Uint8Array|null} [bloom] ContractFunctionResult bloom
             * @property {Long|null} [gasUsed] ContractFunctionResult gasUsed
             * @property {Array.<proto.IContractLoginfo>|null} [logInfo] ContractFunctionResult logInfo
             * @property {Array.<proto.IContractID>|null} [createdContractIDs] ContractFunctionResult createdContractIDs
             */

            /**
             * Constructs a new ContractFunctionResult.
             * @memberof proto
             * @classdesc Represents a ContractFunctionResult.
             * @implements IContractFunctionResult
             * @constructor
             * @param {proto.IContractFunctionResult=} [p] Properties to set
             */
            function ContractFunctionResult(p) {
                this.logInfo = [];
                this.createdContractIDs = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractFunctionResult contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.contractID = null;

            /**
             * ContractFunctionResult contractCallResult.
             * @member {Uint8Array} contractCallResult
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.contractCallResult = $util.newBuffer([]);

            /**
             * ContractFunctionResult errorMessage.
             * @member {string} errorMessage
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.errorMessage = "";

            /**
             * ContractFunctionResult bloom.
             * @member {Uint8Array} bloom
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.bloom = $util.newBuffer([]);

            /**
             * ContractFunctionResult gasUsed.
             * @member {Long} gasUsed
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.gasUsed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ContractFunctionResult logInfo.
             * @member {Array.<proto.IContractLoginfo>} logInfo
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.logInfo = $util.emptyArray;

            /**
             * ContractFunctionResult createdContractIDs.
             * @member {Array.<proto.IContractID>} createdContractIDs
             * @memberof proto.ContractFunctionResult
             * @instance
             */
            ContractFunctionResult.prototype.createdContractIDs = $util.emptyArray;

            /**
             * Creates a new ContractFunctionResult instance using the specified properties.
             * @function create
             * @memberof proto.ContractFunctionResult
             * @static
             * @param {proto.IContractFunctionResult=} [properties] Properties to set
             * @returns {proto.ContractFunctionResult} ContractFunctionResult instance
             */
            ContractFunctionResult.create = function create(properties) {
                return new ContractFunctionResult(properties);
            };

            /**
             * Encodes the specified ContractFunctionResult message. Does not implicitly {@link proto.ContractFunctionResult.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractFunctionResult
             * @static
             * @param {proto.IContractFunctionResult} m ContractFunctionResult message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractFunctionResult.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.contractCallResult != null && Object.hasOwnProperty.call(m, "contractCallResult"))
                    w.uint32(18).bytes(m.contractCallResult);
                if (m.errorMessage != null && Object.hasOwnProperty.call(m, "errorMessage"))
                    w.uint32(26).string(m.errorMessage);
                if (m.bloom != null && Object.hasOwnProperty.call(m, "bloom"))
                    w.uint32(34).bytes(m.bloom);
                if (m.gasUsed != null && Object.hasOwnProperty.call(m, "gasUsed"))
                    w.uint32(40).uint64(m.gasUsed);
                if (m.logInfo != null && m.logInfo.length) {
                    for (var i = 0; i < m.logInfo.length; ++i)
                        $root.proto.ContractLoginfo.encode(m.logInfo[i], w.uint32(50).fork()).ldelim();
                }
                if (m.createdContractIDs != null && m.createdContractIDs.length) {
                    for (var i = 0; i < m.createdContractIDs.length; ++i)
                        $root.proto.ContractID.encode(m.createdContractIDs[i], w.uint32(58).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ContractFunctionResult message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractFunctionResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractFunctionResult} ContractFunctionResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractFunctionResult.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractFunctionResult();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractCallResult = r.bytes();
                        break;
                    case 3:
                        m.errorMessage = r.string();
                        break;
                    case 4:
                        m.bloom = r.bytes();
                        break;
                    case 5:
                        m.gasUsed = r.uint64();
                        break;
                    case 6:
                        if (!(m.logInfo && m.logInfo.length))
                            m.logInfo = [];
                        m.logInfo.push($root.proto.ContractLoginfo.decode(r, r.uint32()));
                        break;
                    case 7:
                        if (!(m.createdContractIDs && m.createdContractIDs.length))
                            m.createdContractIDs = [];
                        m.createdContractIDs.push($root.proto.ContractID.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractFunctionResult;
        })();

        proto.ContractCallLocalQuery = (function() {

            /**
             * Properties of a ContractCallLocalQuery.
             * @memberof proto
             * @interface IContractCallLocalQuery
             * @property {proto.IQueryHeader|null} [header] ContractCallLocalQuery header
             * @property {proto.IContractID|null} [contractID] ContractCallLocalQuery contractID
             * @property {Long|null} [gas] ContractCallLocalQuery gas
             * @property {Uint8Array|null} [functionParameters] ContractCallLocalQuery functionParameters
             * @property {Long|null} [maxResultSize] ContractCallLocalQuery maxResultSize
             */

            /**
             * Constructs a new ContractCallLocalQuery.
             * @memberof proto
             * @classdesc Represents a ContractCallLocalQuery.
             * @implements IContractCallLocalQuery
             * @constructor
             * @param {proto.IContractCallLocalQuery=} [p] Properties to set
             */
            function ContractCallLocalQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractCallLocalQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ContractCallLocalQuery
             * @instance
             */
            ContractCallLocalQuery.prototype.header = null;

            /**
             * ContractCallLocalQuery contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractCallLocalQuery
             * @instance
             */
            ContractCallLocalQuery.prototype.contractID = null;

            /**
             * ContractCallLocalQuery gas.
             * @member {Long} gas
             * @memberof proto.ContractCallLocalQuery
             * @instance
             */
            ContractCallLocalQuery.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractCallLocalQuery functionParameters.
             * @member {Uint8Array} functionParameters
             * @memberof proto.ContractCallLocalQuery
             * @instance
             */
            ContractCallLocalQuery.prototype.functionParameters = $util.newBuffer([]);

            /**
             * ContractCallLocalQuery maxResultSize.
             * @member {Long} maxResultSize
             * @memberof proto.ContractCallLocalQuery
             * @instance
             */
            ContractCallLocalQuery.prototype.maxResultSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ContractCallLocalQuery instance using the specified properties.
             * @function create
             * @memberof proto.ContractCallLocalQuery
             * @static
             * @param {proto.IContractCallLocalQuery=} [properties] Properties to set
             * @returns {proto.ContractCallLocalQuery} ContractCallLocalQuery instance
             */
            ContractCallLocalQuery.create = function create(properties) {
                return new ContractCallLocalQuery(properties);
            };

            /**
             * Encodes the specified ContractCallLocalQuery message. Does not implicitly {@link proto.ContractCallLocalQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractCallLocalQuery
             * @static
             * @param {proto.IContractCallLocalQuery} m ContractCallLocalQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractCallLocalQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                if (m.gas != null && Object.hasOwnProperty.call(m, "gas"))
                    w.uint32(24).int64(m.gas);
                if (m.functionParameters != null && Object.hasOwnProperty.call(m, "functionParameters"))
                    w.uint32(34).bytes(m.functionParameters);
                if (m.maxResultSize != null && Object.hasOwnProperty.call(m, "maxResultSize"))
                    w.uint32(40).int64(m.maxResultSize);
                return w;
            };

            /**
             * Decodes a ContractCallLocalQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractCallLocalQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractCallLocalQuery} ContractCallLocalQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractCallLocalQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallLocalQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.gas = r.int64();
                        break;
                    case 4:
                        m.functionParameters = r.bytes();
                        break;
                    case 5:
                        m.maxResultSize = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractCallLocalQuery;
        })();

        proto.ContractCallLocalResponse = (function() {

            /**
             * Properties of a ContractCallLocalResponse.
             * @memberof proto
             * @interface IContractCallLocalResponse
             * @property {proto.IResponseHeader|null} [header] ContractCallLocalResponse header
             * @property {proto.IContractFunctionResult|null} [functionResult] ContractCallLocalResponse functionResult
             */

            /**
             * Constructs a new ContractCallLocalResponse.
             * @memberof proto
             * @classdesc Represents a ContractCallLocalResponse.
             * @implements IContractCallLocalResponse
             * @constructor
             * @param {proto.IContractCallLocalResponse=} [p] Properties to set
             */
            function ContractCallLocalResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractCallLocalResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ContractCallLocalResponse
             * @instance
             */
            ContractCallLocalResponse.prototype.header = null;

            /**
             * ContractCallLocalResponse functionResult.
             * @member {proto.IContractFunctionResult|null|undefined} functionResult
             * @memberof proto.ContractCallLocalResponse
             * @instance
             */
            ContractCallLocalResponse.prototype.functionResult = null;

            /**
             * Creates a new ContractCallLocalResponse instance using the specified properties.
             * @function create
             * @memberof proto.ContractCallLocalResponse
             * @static
             * @param {proto.IContractCallLocalResponse=} [properties] Properties to set
             * @returns {proto.ContractCallLocalResponse} ContractCallLocalResponse instance
             */
            ContractCallLocalResponse.create = function create(properties) {
                return new ContractCallLocalResponse(properties);
            };

            /**
             * Encodes the specified ContractCallLocalResponse message. Does not implicitly {@link proto.ContractCallLocalResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractCallLocalResponse
             * @static
             * @param {proto.IContractCallLocalResponse} m ContractCallLocalResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractCallLocalResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.functionResult != null && Object.hasOwnProperty.call(m, "functionResult"))
                    $root.proto.ContractFunctionResult.encode(m.functionResult, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractCallLocalResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractCallLocalResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractCallLocalResponse} ContractCallLocalResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractCallLocalResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallLocalResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.functionResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractCallLocalResponse;
        })();

        proto.ContractGetInfoQuery = (function() {

            /**
             * Properties of a ContractGetInfoQuery.
             * @memberof proto
             * @interface IContractGetInfoQuery
             * @property {proto.IQueryHeader|null} [header] ContractGetInfoQuery header
             * @property {proto.IContractID|null} [contractID] ContractGetInfoQuery contractID
             */

            /**
             * Constructs a new ContractGetInfoQuery.
             * @memberof proto
             * @classdesc Represents a ContractGetInfoQuery.
             * @implements IContractGetInfoQuery
             * @constructor
             * @param {proto.IContractGetInfoQuery=} [p] Properties to set
             */
            function ContractGetInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ContractGetInfoQuery
             * @instance
             */
            ContractGetInfoQuery.prototype.header = null;

            /**
             * ContractGetInfoQuery contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractGetInfoQuery
             * @instance
             */
            ContractGetInfoQuery.prototype.contractID = null;

            /**
             * Creates a new ContractGetInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetInfoQuery
             * @static
             * @param {proto.IContractGetInfoQuery=} [properties] Properties to set
             * @returns {proto.ContractGetInfoQuery} ContractGetInfoQuery instance
             */
            ContractGetInfoQuery.create = function create(properties) {
                return new ContractGetInfoQuery(properties);
            };

            /**
             * Encodes the specified ContractGetInfoQuery message. Does not implicitly {@link proto.ContractGetInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetInfoQuery
             * @static
             * @param {proto.IContractGetInfoQuery} m ContractGetInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractGetInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetInfoQuery} ContractGetInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractGetInfoQuery;
        })();

        proto.ContractGetInfoResponse = (function() {

            /**
             * Properties of a ContractGetInfoResponse.
             * @memberof proto
             * @interface IContractGetInfoResponse
             * @property {proto.IResponseHeader|null} [header] ContractGetInfoResponse header
             * @property {proto.ContractGetInfoResponse.IContractInfo|null} [contractInfo] ContractGetInfoResponse contractInfo
             */

            /**
             * Constructs a new ContractGetInfoResponse.
             * @memberof proto
             * @classdesc Represents a ContractGetInfoResponse.
             * @implements IContractGetInfoResponse
             * @constructor
             * @param {proto.IContractGetInfoResponse=} [p] Properties to set
             */
            function ContractGetInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ContractGetInfoResponse
             * @instance
             */
            ContractGetInfoResponse.prototype.header = null;

            /**
             * ContractGetInfoResponse contractInfo.
             * @member {proto.ContractGetInfoResponse.IContractInfo|null|undefined} contractInfo
             * @memberof proto.ContractGetInfoResponse
             * @instance
             */
            ContractGetInfoResponse.prototype.contractInfo = null;

            /**
             * Creates a new ContractGetInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetInfoResponse
             * @static
             * @param {proto.IContractGetInfoResponse=} [properties] Properties to set
             * @returns {proto.ContractGetInfoResponse} ContractGetInfoResponse instance
             */
            ContractGetInfoResponse.create = function create(properties) {
                return new ContractGetInfoResponse(properties);
            };

            /**
             * Encodes the specified ContractGetInfoResponse message. Does not implicitly {@link proto.ContractGetInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetInfoResponse
             * @static
             * @param {proto.IContractGetInfoResponse} m ContractGetInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractInfo != null && Object.hasOwnProperty.call(m, "contractInfo"))
                    $root.proto.ContractGetInfoResponse.ContractInfo.encode(m.contractInfo, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractGetInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetInfoResponse} ContractGetInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractInfo = $root.proto.ContractGetInfoResponse.ContractInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            ContractGetInfoResponse.ContractInfo = (function() {

                /**
                 * Properties of a ContractInfo.
                 * @memberof proto.ContractGetInfoResponse
                 * @interface IContractInfo
                 * @property {proto.IContractID|null} [contractID] ContractInfo contractID
                 * @property {proto.IAccountID|null} [accountID] ContractInfo accountID
                 * @property {string|null} [contractAccountID] ContractInfo contractAccountID
                 * @property {proto.IKey|null} [adminKey] ContractInfo adminKey
                 * @property {proto.ITimestamp|null} [expirationTime] ContractInfo expirationTime
                 * @property {proto.IDuration|null} [autoRenewPeriod] ContractInfo autoRenewPeriod
                 * @property {Long|null} [storage] ContractInfo storage
                 * @property {string|null} [memo] ContractInfo memo
                 * @property {Long|null} [balance] ContractInfo balance
                 * @property {boolean|null} [deleted] ContractInfo deleted
                 * @property {Array.<proto.ITokenRelationship>|null} [tokenRelationships] ContractInfo tokenRelationships
                 */

                /**
                 * Constructs a new ContractInfo.
                 * @memberof proto.ContractGetInfoResponse
                 * @classdesc Represents a ContractInfo.
                 * @implements IContractInfo
                 * @constructor
                 * @param {proto.ContractGetInfoResponse.IContractInfo=} [p] Properties to set
                 */
                function ContractInfo(p) {
                    this.tokenRelationships = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * ContractInfo contractID.
                 * @member {proto.IContractID|null|undefined} contractID
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.contractID = null;

                /**
                 * ContractInfo accountID.
                 * @member {proto.IAccountID|null|undefined} accountID
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.accountID = null;

                /**
                 * ContractInfo contractAccountID.
                 * @member {string} contractAccountID
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.contractAccountID = "";

                /**
                 * ContractInfo adminKey.
                 * @member {proto.IKey|null|undefined} adminKey
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.adminKey = null;

                /**
                 * ContractInfo expirationTime.
                 * @member {proto.ITimestamp|null|undefined} expirationTime
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.expirationTime = null;

                /**
                 * ContractInfo autoRenewPeriod.
                 * @member {proto.IDuration|null|undefined} autoRenewPeriod
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.autoRenewPeriod = null;

                /**
                 * ContractInfo storage.
                 * @member {Long} storage
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.storage = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * ContractInfo memo.
                 * @member {string} memo
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.memo = "";

                /**
                 * ContractInfo balance.
                 * @member {Long} balance
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * ContractInfo deleted.
                 * @member {boolean} deleted
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.deleted = false;

                /**
                 * ContractInfo tokenRelationships.
                 * @member {Array.<proto.ITokenRelationship>} tokenRelationships
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.tokenRelationships = $util.emptyArray;

                /**
                 * Creates a new ContractInfo instance using the specified properties.
                 * @function create
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @static
                 * @param {proto.ContractGetInfoResponse.IContractInfo=} [properties] Properties to set
                 * @returns {proto.ContractGetInfoResponse.ContractInfo} ContractInfo instance
                 */
                ContractInfo.create = function create(properties) {
                    return new ContractInfo(properties);
                };

                /**
                 * Encodes the specified ContractInfo message. Does not implicitly {@link proto.ContractGetInfoResponse.ContractInfo.verify|verify} messages.
                 * @function encode
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @static
                 * @param {proto.ContractGetInfoResponse.IContractInfo} m ContractInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                        $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                    if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                        $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                    if (m.contractAccountID != null && Object.hasOwnProperty.call(m, "contractAccountID"))
                        w.uint32(26).string(m.contractAccountID);
                    if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                        $root.proto.Key.encode(m.adminKey, w.uint32(34).fork()).ldelim();
                    if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                        $root.proto.Timestamp.encode(m.expirationTime, w.uint32(42).fork()).ldelim();
                    if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                        $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(50).fork()).ldelim();
                    if (m.storage != null && Object.hasOwnProperty.call(m, "storage"))
                        w.uint32(56).int64(m.storage);
                    if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                        w.uint32(66).string(m.memo);
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        w.uint32(72).uint64(m.balance);
                    if (m.deleted != null && Object.hasOwnProperty.call(m, "deleted"))
                        w.uint32(80).bool(m.deleted);
                    if (m.tokenRelationships != null && m.tokenRelationships.length) {
                        for (var i = 0; i < m.tokenRelationships.length; ++i)
                            $root.proto.TokenRelationship.encode(m.tokenRelationships[i], w.uint32(90).fork()).ldelim();
                    }
                    return w;
                };

                /**
                 * Decodes a ContractInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof proto.ContractGetInfoResponse.ContractInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {proto.ContractGetInfoResponse.ContractInfo} ContractInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoResponse.ContractInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                            break;
                        case 2:
                            m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                            break;
                        case 3:
                            m.contractAccountID = r.string();
                            break;
                        case 4:
                            m.adminKey = $root.proto.Key.decode(r, r.uint32());
                            break;
                        case 5:
                            m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                            break;
                        case 6:
                            m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                            break;
                        case 7:
                            m.storage = r.int64();
                            break;
                        case 8:
                            m.memo = r.string();
                            break;
                        case 9:
                            m.balance = r.uint64();
                            break;
                        case 10:
                            m.deleted = r.bool();
                            break;
                        case 11:
                            if (!(m.tokenRelationships && m.tokenRelationships.length))
                                m.tokenRelationships = [];
                            m.tokenRelationships.push($root.proto.TokenRelationship.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ContractInfo;
            })();

            return ContractGetInfoResponse;
        })();

        proto.ContractGetBytecodeQuery = (function() {

            /**
             * Properties of a ContractGetBytecodeQuery.
             * @memberof proto
             * @interface IContractGetBytecodeQuery
             * @property {proto.IQueryHeader|null} [header] ContractGetBytecodeQuery header
             * @property {proto.IContractID|null} [contractID] ContractGetBytecodeQuery contractID
             */

            /**
             * Constructs a new ContractGetBytecodeQuery.
             * @memberof proto
             * @classdesc Represents a ContractGetBytecodeQuery.
             * @implements IContractGetBytecodeQuery
             * @constructor
             * @param {proto.IContractGetBytecodeQuery=} [p] Properties to set
             */
            function ContractGetBytecodeQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetBytecodeQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ContractGetBytecodeQuery
             * @instance
             */
            ContractGetBytecodeQuery.prototype.header = null;

            /**
             * ContractGetBytecodeQuery contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractGetBytecodeQuery
             * @instance
             */
            ContractGetBytecodeQuery.prototype.contractID = null;

            /**
             * Creates a new ContractGetBytecodeQuery instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetBytecodeQuery
             * @static
             * @param {proto.IContractGetBytecodeQuery=} [properties] Properties to set
             * @returns {proto.ContractGetBytecodeQuery} ContractGetBytecodeQuery instance
             */
            ContractGetBytecodeQuery.create = function create(properties) {
                return new ContractGetBytecodeQuery(properties);
            };

            /**
             * Encodes the specified ContractGetBytecodeQuery message. Does not implicitly {@link proto.ContractGetBytecodeQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetBytecodeQuery
             * @static
             * @param {proto.IContractGetBytecodeQuery} m ContractGetBytecodeQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetBytecodeQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractGetBytecodeQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetBytecodeQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetBytecodeQuery} ContractGetBytecodeQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetBytecodeQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetBytecodeQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractGetBytecodeQuery;
        })();

        proto.ContractGetBytecodeResponse = (function() {

            /**
             * Properties of a ContractGetBytecodeResponse.
             * @memberof proto
             * @interface IContractGetBytecodeResponse
             * @property {proto.IResponseHeader|null} [header] ContractGetBytecodeResponse header
             * @property {Uint8Array|null} [bytecode] ContractGetBytecodeResponse bytecode
             */

            /**
             * Constructs a new ContractGetBytecodeResponse.
             * @memberof proto
             * @classdesc Represents a ContractGetBytecodeResponse.
             * @implements IContractGetBytecodeResponse
             * @constructor
             * @param {proto.IContractGetBytecodeResponse=} [p] Properties to set
             */
            function ContractGetBytecodeResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetBytecodeResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ContractGetBytecodeResponse
             * @instance
             */
            ContractGetBytecodeResponse.prototype.header = null;

            /**
             * ContractGetBytecodeResponse bytecode.
             * @member {Uint8Array} bytecode
             * @memberof proto.ContractGetBytecodeResponse
             * @instance
             */
            ContractGetBytecodeResponse.prototype.bytecode = $util.newBuffer([]);

            /**
             * Creates a new ContractGetBytecodeResponse instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetBytecodeResponse
             * @static
             * @param {proto.IContractGetBytecodeResponse=} [properties] Properties to set
             * @returns {proto.ContractGetBytecodeResponse} ContractGetBytecodeResponse instance
             */
            ContractGetBytecodeResponse.create = function create(properties) {
                return new ContractGetBytecodeResponse(properties);
            };

            /**
             * Encodes the specified ContractGetBytecodeResponse message. Does not implicitly {@link proto.ContractGetBytecodeResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetBytecodeResponse
             * @static
             * @param {proto.IContractGetBytecodeResponse} m ContractGetBytecodeResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetBytecodeResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.bytecode != null && Object.hasOwnProperty.call(m, "bytecode"))
                    w.uint32(50).bytes(m.bytecode);
                return w;
            };

            /**
             * Decodes a ContractGetBytecodeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetBytecodeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetBytecodeResponse} ContractGetBytecodeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetBytecodeResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetBytecodeResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 6:
                        m.bytecode = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractGetBytecodeResponse;
        })();

        proto.ContractGetRecordsQuery = (function() {

            /**
             * Properties of a ContractGetRecordsQuery.
             * @memberof proto
             * @interface IContractGetRecordsQuery
             * @property {proto.IQueryHeader|null} [header] ContractGetRecordsQuery header
             * @property {proto.IContractID|null} [contractID] ContractGetRecordsQuery contractID
             */

            /**
             * Constructs a new ContractGetRecordsQuery.
             * @memberof proto
             * @classdesc Represents a ContractGetRecordsQuery.
             * @implements IContractGetRecordsQuery
             * @constructor
             * @param {proto.IContractGetRecordsQuery=} [p] Properties to set
             */
            function ContractGetRecordsQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetRecordsQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ContractGetRecordsQuery
             * @instance
             */
            ContractGetRecordsQuery.prototype.header = null;

            /**
             * ContractGetRecordsQuery contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractGetRecordsQuery
             * @instance
             */
            ContractGetRecordsQuery.prototype.contractID = null;

            /**
             * Creates a new ContractGetRecordsQuery instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetRecordsQuery
             * @static
             * @param {proto.IContractGetRecordsQuery=} [properties] Properties to set
             * @returns {proto.ContractGetRecordsQuery} ContractGetRecordsQuery instance
             */
            ContractGetRecordsQuery.create = function create(properties) {
                return new ContractGetRecordsQuery(properties);
            };

            /**
             * Encodes the specified ContractGetRecordsQuery message. Does not implicitly {@link proto.ContractGetRecordsQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetRecordsQuery
             * @static
             * @param {proto.IContractGetRecordsQuery} m ContractGetRecordsQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetRecordsQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractGetRecordsQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetRecordsQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetRecordsQuery} ContractGetRecordsQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetRecordsQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetRecordsQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractGetRecordsQuery;
        })();

        proto.ContractGetRecordsResponse = (function() {

            /**
             * Properties of a ContractGetRecordsResponse.
             * @memberof proto
             * @interface IContractGetRecordsResponse
             * @property {proto.IResponseHeader|null} [header] ContractGetRecordsResponse header
             * @property {proto.IContractID|null} [contractID] ContractGetRecordsResponse contractID
             * @property {Array.<proto.ITransactionRecord>|null} [records] ContractGetRecordsResponse records
             */

            /**
             * Constructs a new ContractGetRecordsResponse.
             * @memberof proto
             * @classdesc Represents a ContractGetRecordsResponse.
             * @implements IContractGetRecordsResponse
             * @constructor
             * @param {proto.IContractGetRecordsResponse=} [p] Properties to set
             */
            function ContractGetRecordsResponse(p) {
                this.records = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractGetRecordsResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ContractGetRecordsResponse
             * @instance
             */
            ContractGetRecordsResponse.prototype.header = null;

            /**
             * ContractGetRecordsResponse contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractGetRecordsResponse
             * @instance
             */
            ContractGetRecordsResponse.prototype.contractID = null;

            /**
             * ContractGetRecordsResponse records.
             * @member {Array.<proto.ITransactionRecord>} records
             * @memberof proto.ContractGetRecordsResponse
             * @instance
             */
            ContractGetRecordsResponse.prototype.records = $util.emptyArray;

            /**
             * Creates a new ContractGetRecordsResponse instance using the specified properties.
             * @function create
             * @memberof proto.ContractGetRecordsResponse
             * @static
             * @param {proto.IContractGetRecordsResponse=} [properties] Properties to set
             * @returns {proto.ContractGetRecordsResponse} ContractGetRecordsResponse instance
             */
            ContractGetRecordsResponse.create = function create(properties) {
                return new ContractGetRecordsResponse(properties);
            };

            /**
             * Encodes the specified ContractGetRecordsResponse message. Does not implicitly {@link proto.ContractGetRecordsResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractGetRecordsResponse
             * @static
             * @param {proto.IContractGetRecordsResponse} m ContractGetRecordsResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractGetRecordsResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                if (m.records != null && m.records.length) {
                    for (var i = 0; i < m.records.length; ++i)
                        $root.proto.TransactionRecord.encode(m.records[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ContractGetRecordsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractGetRecordsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractGetRecordsResponse} ContractGetRecordsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractGetRecordsResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetRecordsResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 3:
                        if (!(m.records && m.records.length))
                            m.records = [];
                        m.records.push($root.proto.TransactionRecord.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractGetRecordsResponse;
        })();

        proto.TransactionRecord = (function() {

            /**
             * Properties of a TransactionRecord.
             * @memberof proto
             * @interface ITransactionRecord
             * @property {proto.ITransactionReceipt|null} [receipt] TransactionRecord receipt
             * @property {Uint8Array|null} [transactionHash] TransactionRecord transactionHash
             * @property {proto.ITimestamp|null} [consensusTimestamp] TransactionRecord consensusTimestamp
             * @property {proto.ITransactionID|null} [transactionID] TransactionRecord transactionID
             * @property {string|null} [memo] TransactionRecord memo
             * @property {Long|null} [transactionFee] TransactionRecord transactionFee
             * @property {proto.IContractFunctionResult|null} [contractCallResult] TransactionRecord contractCallResult
             * @property {proto.IContractFunctionResult|null} [contractCreateResult] TransactionRecord contractCreateResult
             * @property {proto.ITransferList|null} [transferList] TransactionRecord transferList
             * @property {Array.<proto.ITokenTransferList>|null} [tokenTransferLists] TransactionRecord tokenTransferLists
             * @property {proto.IScheduleID|null} [scheduleRef] TransactionRecord scheduleRef
             */

            /**
             * Constructs a new TransactionRecord.
             * @memberof proto
             * @classdesc Represents a TransactionRecord.
             * @implements ITransactionRecord
             * @constructor
             * @param {proto.ITransactionRecord=} [p] Properties to set
             */
            function TransactionRecord(p) {
                this.tokenTransferLists = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionRecord receipt.
             * @member {proto.ITransactionReceipt|null|undefined} receipt
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.receipt = null;

            /**
             * TransactionRecord transactionHash.
             * @member {Uint8Array} transactionHash
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.transactionHash = $util.newBuffer([]);

            /**
             * TransactionRecord consensusTimestamp.
             * @member {proto.ITimestamp|null|undefined} consensusTimestamp
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.consensusTimestamp = null;

            /**
             * TransactionRecord transactionID.
             * @member {proto.ITransactionID|null|undefined} transactionID
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.transactionID = null;

            /**
             * TransactionRecord memo.
             * @member {string} memo
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.memo = "";

            /**
             * TransactionRecord transactionFee.
             * @member {Long} transactionFee
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.transactionFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TransactionRecord contractCallResult.
             * @member {proto.IContractFunctionResult|null|undefined} contractCallResult
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.contractCallResult = null;

            /**
             * TransactionRecord contractCreateResult.
             * @member {proto.IContractFunctionResult|null|undefined} contractCreateResult
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.contractCreateResult = null;

            /**
             * TransactionRecord transferList.
             * @member {proto.ITransferList|null|undefined} transferList
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.transferList = null;

            /**
             * TransactionRecord tokenTransferLists.
             * @member {Array.<proto.ITokenTransferList>} tokenTransferLists
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.tokenTransferLists = $util.emptyArray;

            /**
             * TransactionRecord scheduleRef.
             * @member {proto.IScheduleID|null|undefined} scheduleRef
             * @memberof proto.TransactionRecord
             * @instance
             */
            TransactionRecord.prototype.scheduleRef = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * TransactionRecord body.
             * @member {"contractCallResult"|"contractCreateResult"|undefined} body
             * @memberof proto.TransactionRecord
             * @instance
             */
            Object.defineProperty(TransactionRecord.prototype, "body", {
                get: $util.oneOfGetter($oneOfFields = ["contractCallResult", "contractCreateResult"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new TransactionRecord instance using the specified properties.
             * @function create
             * @memberof proto.TransactionRecord
             * @static
             * @param {proto.ITransactionRecord=} [properties] Properties to set
             * @returns {proto.TransactionRecord} TransactionRecord instance
             */
            TransactionRecord.create = function create(properties) {
                return new TransactionRecord(properties);
            };

            /**
             * Encodes the specified TransactionRecord message. Does not implicitly {@link proto.TransactionRecord.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionRecord
             * @static
             * @param {proto.ITransactionRecord} m TransactionRecord message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionRecord.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.receipt != null && Object.hasOwnProperty.call(m, "receipt"))
                    $root.proto.TransactionReceipt.encode(m.receipt, w.uint32(10).fork()).ldelim();
                if (m.transactionHash != null && Object.hasOwnProperty.call(m, "transactionHash"))
                    w.uint32(18).bytes(m.transactionHash);
                if (m.consensusTimestamp != null && Object.hasOwnProperty.call(m, "consensusTimestamp"))
                    $root.proto.Timestamp.encode(m.consensusTimestamp, w.uint32(26).fork()).ldelim();
                if (m.transactionID != null && Object.hasOwnProperty.call(m, "transactionID"))
                    $root.proto.TransactionID.encode(m.transactionID, w.uint32(34).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(42).string(m.memo);
                if (m.transactionFee != null && Object.hasOwnProperty.call(m, "transactionFee"))
                    w.uint32(48).uint64(m.transactionFee);
                if (m.contractCallResult != null && Object.hasOwnProperty.call(m, "contractCallResult"))
                    $root.proto.ContractFunctionResult.encode(m.contractCallResult, w.uint32(58).fork()).ldelim();
                if (m.contractCreateResult != null && Object.hasOwnProperty.call(m, "contractCreateResult"))
                    $root.proto.ContractFunctionResult.encode(m.contractCreateResult, w.uint32(66).fork()).ldelim();
                if (m.transferList != null && Object.hasOwnProperty.call(m, "transferList"))
                    $root.proto.TransferList.encode(m.transferList, w.uint32(82).fork()).ldelim();
                if (m.tokenTransferLists != null && m.tokenTransferLists.length) {
                    for (var i = 0; i < m.tokenTransferLists.length; ++i)
                        $root.proto.TokenTransferList.encode(m.tokenTransferLists[i], w.uint32(90).fork()).ldelim();
                }
                if (m.scheduleRef != null && Object.hasOwnProperty.call(m, "scheduleRef"))
                    $root.proto.ScheduleID.encode(m.scheduleRef, w.uint32(98).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionRecord message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionRecord
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionRecord} TransactionRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionRecord.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionRecord();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.receipt = $root.proto.TransactionReceipt.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transactionHash = r.bytes();
                        break;
                    case 3:
                        m.consensusTimestamp = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 4:
                        m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    case 5:
                        m.memo = r.string();
                        break;
                    case 6:
                        m.transactionFee = r.uint64();
                        break;
                    case 7:
                        m.contractCallResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());
                        break;
                    case 8:
                        m.contractCreateResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());
                        break;
                    case 10:
                        m.transferList = $root.proto.TransferList.decode(r, r.uint32());
                        break;
                    case 11:
                        if (!(m.tokenTransferLists && m.tokenTransferLists.length))
                            m.tokenTransferLists = [];
                        m.tokenTransferLists.push($root.proto.TokenTransferList.decode(r, r.uint32()));
                        break;
                    case 12:
                        m.scheduleRef = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionRecord;
        })();

        proto.TransactionReceipt = (function() {

            /**
             * Properties of a TransactionReceipt.
             * @memberof proto
             * @interface ITransactionReceipt
             * @property {proto.ResponseCodeEnum|null} [status] TransactionReceipt status
             * @property {proto.IAccountID|null} [accountID] TransactionReceipt accountID
             * @property {proto.IFileID|null} [fileID] TransactionReceipt fileID
             * @property {proto.IContractID|null} [contractID] TransactionReceipt contractID
             * @property {proto.IExchangeRateSet|null} [exchangeRate] TransactionReceipt exchangeRate
             * @property {proto.ITopicID|null} [topicID] TransactionReceipt topicID
             * @property {Long|null} [topicSequenceNumber] TransactionReceipt topicSequenceNumber
             * @property {Uint8Array|null} [topicRunningHash] TransactionReceipt topicRunningHash
             * @property {Long|null} [topicRunningHashVersion] TransactionReceipt topicRunningHashVersion
             * @property {proto.ITokenID|null} [tokenID] TransactionReceipt tokenID
             * @property {Long|null} [newTotalSupply] TransactionReceipt newTotalSupply
             * @property {proto.IScheduleID|null} [scheduleID] TransactionReceipt scheduleID
             * @property {proto.ITransactionID|null} [scheduledTransactionID] TransactionReceipt scheduledTransactionID
             */

            /**
             * Constructs a new TransactionReceipt.
             * @memberof proto
             * @classdesc Represents a TransactionReceipt.
             * @implements ITransactionReceipt
             * @constructor
             * @param {proto.ITransactionReceipt=} [p] Properties to set
             */
            function TransactionReceipt(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionReceipt status.
             * @member {proto.ResponseCodeEnum} status
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.status = 0;

            /**
             * TransactionReceipt accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.accountID = null;

            /**
             * TransactionReceipt fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.fileID = null;

            /**
             * TransactionReceipt contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.contractID = null;

            /**
             * TransactionReceipt exchangeRate.
             * @member {proto.IExchangeRateSet|null|undefined} exchangeRate
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.exchangeRate = null;

            /**
             * TransactionReceipt topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.topicID = null;

            /**
             * TransactionReceipt topicSequenceNumber.
             * @member {Long} topicSequenceNumber
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.topicSequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TransactionReceipt topicRunningHash.
             * @member {Uint8Array} topicRunningHash
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.topicRunningHash = $util.newBuffer([]);

            /**
             * TransactionReceipt topicRunningHashVersion.
             * @member {Long} topicRunningHashVersion
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.topicRunningHashVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TransactionReceipt tokenID.
             * @member {proto.ITokenID|null|undefined} tokenID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.tokenID = null;

            /**
             * TransactionReceipt newTotalSupply.
             * @member {Long} newTotalSupply
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.newTotalSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TransactionReceipt scheduleID.
             * @member {proto.IScheduleID|null|undefined} scheduleID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.scheduleID = null;

            /**
             * TransactionReceipt scheduledTransactionID.
             * @member {proto.ITransactionID|null|undefined} scheduledTransactionID
             * @memberof proto.TransactionReceipt
             * @instance
             */
            TransactionReceipt.prototype.scheduledTransactionID = null;

            /**
             * Creates a new TransactionReceipt instance using the specified properties.
             * @function create
             * @memberof proto.TransactionReceipt
             * @static
             * @param {proto.ITransactionReceipt=} [properties] Properties to set
             * @returns {proto.TransactionReceipt} TransactionReceipt instance
             */
            TransactionReceipt.create = function create(properties) {
                return new TransactionReceipt(properties);
            };

            /**
             * Encodes the specified TransactionReceipt message. Does not implicitly {@link proto.TransactionReceipt.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionReceipt
             * @static
             * @param {proto.ITransactionReceipt} m TransactionReceipt message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionReceipt.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                    w.uint32(8).int32(m.status);
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();
                if (m.exchangeRate != null && Object.hasOwnProperty.call(m, "exchangeRate"))
                    $root.proto.ExchangeRateSet.encode(m.exchangeRate, w.uint32(42).fork()).ldelim();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(50).fork()).ldelim();
                if (m.topicSequenceNumber != null && Object.hasOwnProperty.call(m, "topicSequenceNumber"))
                    w.uint32(56).uint64(m.topicSequenceNumber);
                if (m.topicRunningHash != null && Object.hasOwnProperty.call(m, "topicRunningHash"))
                    w.uint32(66).bytes(m.topicRunningHash);
                if (m.topicRunningHashVersion != null && Object.hasOwnProperty.call(m, "topicRunningHashVersion"))
                    w.uint32(72).uint64(m.topicRunningHashVersion);
                if (m.tokenID != null && Object.hasOwnProperty.call(m, "tokenID"))
                    $root.proto.TokenID.encode(m.tokenID, w.uint32(82).fork()).ldelim();
                if (m.newTotalSupply != null && Object.hasOwnProperty.call(m, "newTotalSupply"))
                    w.uint32(88).uint64(m.newTotalSupply);
                if (m.scheduleID != null && Object.hasOwnProperty.call(m, "scheduleID"))
                    $root.proto.ScheduleID.encode(m.scheduleID, w.uint32(98).fork()).ldelim();
                if (m.scheduledTransactionID != null && Object.hasOwnProperty.call(m, "scheduledTransactionID"))
                    $root.proto.TransactionID.encode(m.scheduledTransactionID, w.uint32(106).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionReceipt message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionReceipt
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionReceipt} TransactionReceipt
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionReceipt.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionReceipt();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.status = r.int32();
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 5:
                        m.exchangeRate = $root.proto.ExchangeRateSet.decode(r, r.uint32());
                        break;
                    case 6:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.topicSequenceNumber = r.uint64();
                        break;
                    case 8:
                        m.topicRunningHash = r.bytes();
                        break;
                    case 9:
                        m.topicRunningHashVersion = r.uint64();
                        break;
                    case 10:
                        m.tokenID = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 11:
                        m.newTotalSupply = r.uint64();
                        break;
                    case 12:
                        m.scheduleID = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    case 13:
                        m.scheduledTransactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionReceipt;
        })();

        proto.ExchangeRate = (function() {

            /**
             * Properties of an ExchangeRate.
             * @memberof proto
             * @interface IExchangeRate
             * @property {number|null} [hbarEquiv] ExchangeRate hbarEquiv
             * @property {number|null} [centEquiv] ExchangeRate centEquiv
             * @property {proto.ITimestampSeconds|null} [expirationTime] ExchangeRate expirationTime
             */

            /**
             * Constructs a new ExchangeRate.
             * @memberof proto
             * @classdesc Represents an ExchangeRate.
             * @implements IExchangeRate
             * @constructor
             * @param {proto.IExchangeRate=} [p] Properties to set
             */
            function ExchangeRate(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ExchangeRate hbarEquiv.
             * @member {number} hbarEquiv
             * @memberof proto.ExchangeRate
             * @instance
             */
            ExchangeRate.prototype.hbarEquiv = 0;

            /**
             * ExchangeRate centEquiv.
             * @member {number} centEquiv
             * @memberof proto.ExchangeRate
             * @instance
             */
            ExchangeRate.prototype.centEquiv = 0;

            /**
             * ExchangeRate expirationTime.
             * @member {proto.ITimestampSeconds|null|undefined} expirationTime
             * @memberof proto.ExchangeRate
             * @instance
             */
            ExchangeRate.prototype.expirationTime = null;

            /**
             * Creates a new ExchangeRate instance using the specified properties.
             * @function create
             * @memberof proto.ExchangeRate
             * @static
             * @param {proto.IExchangeRate=} [properties] Properties to set
             * @returns {proto.ExchangeRate} ExchangeRate instance
             */
            ExchangeRate.create = function create(properties) {
                return new ExchangeRate(properties);
            };

            /**
             * Encodes the specified ExchangeRate message. Does not implicitly {@link proto.ExchangeRate.verify|verify} messages.
             * @function encode
             * @memberof proto.ExchangeRate
             * @static
             * @param {proto.IExchangeRate} m ExchangeRate message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeRate.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.hbarEquiv != null && Object.hasOwnProperty.call(m, "hbarEquiv"))
                    w.uint32(8).int32(m.hbarEquiv);
                if (m.centEquiv != null && Object.hasOwnProperty.call(m, "centEquiv"))
                    w.uint32(16).int32(m.centEquiv);
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.TimestampSeconds.encode(m.expirationTime, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an ExchangeRate message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ExchangeRate
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ExchangeRate} ExchangeRate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeRate.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ExchangeRate();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.hbarEquiv = r.int32();
                        break;
                    case 2:
                        m.centEquiv = r.int32();
                        break;
                    case 3:
                        m.expirationTime = $root.proto.TimestampSeconds.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ExchangeRate;
        })();

        proto.ExchangeRateSet = (function() {

            /**
             * Properties of an ExchangeRateSet.
             * @memberof proto
             * @interface IExchangeRateSet
             * @property {proto.IExchangeRate|null} [currentRate] ExchangeRateSet currentRate
             * @property {proto.IExchangeRate|null} [nextRate] ExchangeRateSet nextRate
             */

            /**
             * Constructs a new ExchangeRateSet.
             * @memberof proto
             * @classdesc Represents an ExchangeRateSet.
             * @implements IExchangeRateSet
             * @constructor
             * @param {proto.IExchangeRateSet=} [p] Properties to set
             */
            function ExchangeRateSet(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ExchangeRateSet currentRate.
             * @member {proto.IExchangeRate|null|undefined} currentRate
             * @memberof proto.ExchangeRateSet
             * @instance
             */
            ExchangeRateSet.prototype.currentRate = null;

            /**
             * ExchangeRateSet nextRate.
             * @member {proto.IExchangeRate|null|undefined} nextRate
             * @memberof proto.ExchangeRateSet
             * @instance
             */
            ExchangeRateSet.prototype.nextRate = null;

            /**
             * Creates a new ExchangeRateSet instance using the specified properties.
             * @function create
             * @memberof proto.ExchangeRateSet
             * @static
             * @param {proto.IExchangeRateSet=} [properties] Properties to set
             * @returns {proto.ExchangeRateSet} ExchangeRateSet instance
             */
            ExchangeRateSet.create = function create(properties) {
                return new ExchangeRateSet(properties);
            };

            /**
             * Encodes the specified ExchangeRateSet message. Does not implicitly {@link proto.ExchangeRateSet.verify|verify} messages.
             * @function encode
             * @memberof proto.ExchangeRateSet
             * @static
             * @param {proto.IExchangeRateSet} m ExchangeRateSet message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeRateSet.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.currentRate != null && Object.hasOwnProperty.call(m, "currentRate"))
                    $root.proto.ExchangeRate.encode(m.currentRate, w.uint32(10).fork()).ldelim();
                if (m.nextRate != null && Object.hasOwnProperty.call(m, "nextRate"))
                    $root.proto.ExchangeRate.encode(m.nextRate, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes an ExchangeRateSet message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ExchangeRateSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ExchangeRateSet} ExchangeRateSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeRateSet.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ExchangeRateSet();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.currentRate = $root.proto.ExchangeRate.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nextRate = $root.proto.ExchangeRate.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ExchangeRateSet;
        })();

        proto.CryptoTransferTransactionBody = (function() {

            /**
             * Properties of a CryptoTransferTransactionBody.
             * @memberof proto
             * @interface ICryptoTransferTransactionBody
             * @property {proto.ITransferList|null} [transfers] CryptoTransferTransactionBody transfers
             * @property {Array.<proto.ITokenTransferList>|null} [tokenTransfers] CryptoTransferTransactionBody tokenTransfers
             */

            /**
             * Constructs a new CryptoTransferTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoTransferTransactionBody.
             * @implements ICryptoTransferTransactionBody
             * @constructor
             * @param {proto.ICryptoTransferTransactionBody=} [p] Properties to set
             */
            function CryptoTransferTransactionBody(p) {
                this.tokenTransfers = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoTransferTransactionBody transfers.
             * @member {proto.ITransferList|null|undefined} transfers
             * @memberof proto.CryptoTransferTransactionBody
             * @instance
             */
            CryptoTransferTransactionBody.prototype.transfers = null;

            /**
             * CryptoTransferTransactionBody tokenTransfers.
             * @member {Array.<proto.ITokenTransferList>} tokenTransfers
             * @memberof proto.CryptoTransferTransactionBody
             * @instance
             */
            CryptoTransferTransactionBody.prototype.tokenTransfers = $util.emptyArray;

            /**
             * Creates a new CryptoTransferTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoTransferTransactionBody
             * @static
             * @param {proto.ICryptoTransferTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoTransferTransactionBody} CryptoTransferTransactionBody instance
             */
            CryptoTransferTransactionBody.create = function create(properties) {
                return new CryptoTransferTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoTransferTransactionBody message. Does not implicitly {@link proto.CryptoTransferTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoTransferTransactionBody
             * @static
             * @param {proto.ICryptoTransferTransactionBody} m CryptoTransferTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoTransferTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transfers != null && Object.hasOwnProperty.call(m, "transfers"))
                    $root.proto.TransferList.encode(m.transfers, w.uint32(10).fork()).ldelim();
                if (m.tokenTransfers != null && m.tokenTransfers.length) {
                    for (var i = 0; i < m.tokenTransfers.length; ++i)
                        $root.proto.TokenTransferList.encode(m.tokenTransfers[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a CryptoTransferTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoTransferTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoTransferTransactionBody} CryptoTransferTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoTransferTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoTransferTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transfers = $root.proto.TransferList.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.tokenTransfers && m.tokenTransfers.length))
                            m.tokenTransfers = [];
                        m.tokenTransfers.push($root.proto.TokenTransferList.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoTransferTransactionBody;
        })();

        proto.CryptoGetAccountBalanceQuery = (function() {

            /**
             * Properties of a CryptoGetAccountBalanceQuery.
             * @memberof proto
             * @interface ICryptoGetAccountBalanceQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetAccountBalanceQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetAccountBalanceQuery accountID
             * @property {proto.IContractID|null} [contractID] CryptoGetAccountBalanceQuery contractID
             */

            /**
             * Constructs a new CryptoGetAccountBalanceQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetAccountBalanceQuery.
             * @implements ICryptoGetAccountBalanceQuery
             * @constructor
             * @param {proto.ICryptoGetAccountBalanceQuery=} [p] Properties to set
             */
            function CryptoGetAccountBalanceQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetAccountBalanceQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @instance
             */
            CryptoGetAccountBalanceQuery.prototype.header = null;

            /**
             * CryptoGetAccountBalanceQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @instance
             */
            CryptoGetAccountBalanceQuery.prototype.accountID = null;

            /**
             * CryptoGetAccountBalanceQuery contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @instance
             */
            CryptoGetAccountBalanceQuery.prototype.contractID = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * CryptoGetAccountBalanceQuery balanceSource.
             * @member {"accountID"|"contractID"|undefined} balanceSource
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @instance
             */
            Object.defineProperty(CryptoGetAccountBalanceQuery.prototype, "balanceSource", {
                get: $util.oneOfGetter($oneOfFields = ["accountID", "contractID"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CryptoGetAccountBalanceQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @static
             * @param {proto.ICryptoGetAccountBalanceQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetAccountBalanceQuery} CryptoGetAccountBalanceQuery instance
             */
            CryptoGetAccountBalanceQuery.create = function create(properties) {
                return new CryptoGetAccountBalanceQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetAccountBalanceQuery message. Does not implicitly {@link proto.CryptoGetAccountBalanceQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @static
             * @param {proto.ICryptoGetAccountBalanceQuery} m CryptoGetAccountBalanceQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetAccountBalanceQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetAccountBalanceQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetAccountBalanceQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetAccountBalanceQuery} CryptoGetAccountBalanceQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetAccountBalanceQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountBalanceQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetAccountBalanceQuery;
        })();

        proto.CryptoGetAccountBalanceResponse = (function() {

            /**
             * Properties of a CryptoGetAccountBalanceResponse.
             * @memberof proto
             * @interface ICryptoGetAccountBalanceResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetAccountBalanceResponse header
             * @property {proto.IAccountID|null} [accountID] CryptoGetAccountBalanceResponse accountID
             * @property {Long|null} [balance] CryptoGetAccountBalanceResponse balance
             * @property {Array.<proto.ITokenBalance>|null} [tokenBalances] CryptoGetAccountBalanceResponse tokenBalances
             */

            /**
             * Constructs a new CryptoGetAccountBalanceResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetAccountBalanceResponse.
             * @implements ICryptoGetAccountBalanceResponse
             * @constructor
             * @param {proto.ICryptoGetAccountBalanceResponse=} [p] Properties to set
             */
            function CryptoGetAccountBalanceResponse(p) {
                this.tokenBalances = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetAccountBalanceResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @instance
             */
            CryptoGetAccountBalanceResponse.prototype.header = null;

            /**
             * CryptoGetAccountBalanceResponse accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @instance
             */
            CryptoGetAccountBalanceResponse.prototype.accountID = null;

            /**
             * CryptoGetAccountBalanceResponse balance.
             * @member {Long} balance
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @instance
             */
            CryptoGetAccountBalanceResponse.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoGetAccountBalanceResponse tokenBalances.
             * @member {Array.<proto.ITokenBalance>} tokenBalances
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @instance
             */
            CryptoGetAccountBalanceResponse.prototype.tokenBalances = $util.emptyArray;

            /**
             * Creates a new CryptoGetAccountBalanceResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @static
             * @param {proto.ICryptoGetAccountBalanceResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetAccountBalanceResponse} CryptoGetAccountBalanceResponse instance
             */
            CryptoGetAccountBalanceResponse.create = function create(properties) {
                return new CryptoGetAccountBalanceResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetAccountBalanceResponse message. Does not implicitly {@link proto.CryptoGetAccountBalanceResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @static
             * @param {proto.ICryptoGetAccountBalanceResponse} m CryptoGetAccountBalanceResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetAccountBalanceResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                    w.uint32(24).uint64(m.balance);
                if (m.tokenBalances != null && m.tokenBalances.length) {
                    for (var i = 0; i < m.tokenBalances.length; ++i)
                        $root.proto.TokenBalance.encode(m.tokenBalances[i], w.uint32(34).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a CryptoGetAccountBalanceResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetAccountBalanceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetAccountBalanceResponse} CryptoGetAccountBalanceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetAccountBalanceResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountBalanceResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.balance = r.uint64();
                        break;
                    case 4:
                        if (!(m.tokenBalances && m.tokenBalances.length))
                            m.tokenBalances = [];
                        m.tokenBalances.push($root.proto.TokenBalance.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetAccountBalanceResponse;
        })();

        proto.CryptoGetAccountRecordsQuery = (function() {

            /**
             * Properties of a CryptoGetAccountRecordsQuery.
             * @memberof proto
             * @interface ICryptoGetAccountRecordsQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetAccountRecordsQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetAccountRecordsQuery accountID
             */

            /**
             * Constructs a new CryptoGetAccountRecordsQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetAccountRecordsQuery.
             * @implements ICryptoGetAccountRecordsQuery
             * @constructor
             * @param {proto.ICryptoGetAccountRecordsQuery=} [p] Properties to set
             */
            function CryptoGetAccountRecordsQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetAccountRecordsQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetAccountRecordsQuery
             * @instance
             */
            CryptoGetAccountRecordsQuery.prototype.header = null;

            /**
             * CryptoGetAccountRecordsQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetAccountRecordsQuery
             * @instance
             */
            CryptoGetAccountRecordsQuery.prototype.accountID = null;

            /**
             * Creates a new CryptoGetAccountRecordsQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetAccountRecordsQuery
             * @static
             * @param {proto.ICryptoGetAccountRecordsQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetAccountRecordsQuery} CryptoGetAccountRecordsQuery instance
             */
            CryptoGetAccountRecordsQuery.create = function create(properties) {
                return new CryptoGetAccountRecordsQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetAccountRecordsQuery message. Does not implicitly {@link proto.CryptoGetAccountRecordsQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetAccountRecordsQuery
             * @static
             * @param {proto.ICryptoGetAccountRecordsQuery} m CryptoGetAccountRecordsQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetAccountRecordsQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetAccountRecordsQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetAccountRecordsQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetAccountRecordsQuery} CryptoGetAccountRecordsQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetAccountRecordsQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountRecordsQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetAccountRecordsQuery;
        })();

        proto.CryptoGetAccountRecordsResponse = (function() {

            /**
             * Properties of a CryptoGetAccountRecordsResponse.
             * @memberof proto
             * @interface ICryptoGetAccountRecordsResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetAccountRecordsResponse header
             * @property {proto.IAccountID|null} [accountID] CryptoGetAccountRecordsResponse accountID
             * @property {Array.<proto.ITransactionRecord>|null} [records] CryptoGetAccountRecordsResponse records
             */

            /**
             * Constructs a new CryptoGetAccountRecordsResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetAccountRecordsResponse.
             * @implements ICryptoGetAccountRecordsResponse
             * @constructor
             * @param {proto.ICryptoGetAccountRecordsResponse=} [p] Properties to set
             */
            function CryptoGetAccountRecordsResponse(p) {
                this.records = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetAccountRecordsResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @instance
             */
            CryptoGetAccountRecordsResponse.prototype.header = null;

            /**
             * CryptoGetAccountRecordsResponse accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @instance
             */
            CryptoGetAccountRecordsResponse.prototype.accountID = null;

            /**
             * CryptoGetAccountRecordsResponse records.
             * @member {Array.<proto.ITransactionRecord>} records
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @instance
             */
            CryptoGetAccountRecordsResponse.prototype.records = $util.emptyArray;

            /**
             * Creates a new CryptoGetAccountRecordsResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @static
             * @param {proto.ICryptoGetAccountRecordsResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetAccountRecordsResponse} CryptoGetAccountRecordsResponse instance
             */
            CryptoGetAccountRecordsResponse.create = function create(properties) {
                return new CryptoGetAccountRecordsResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetAccountRecordsResponse message. Does not implicitly {@link proto.CryptoGetAccountRecordsResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @static
             * @param {proto.ICryptoGetAccountRecordsResponse} m CryptoGetAccountRecordsResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetAccountRecordsResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.records != null && m.records.length) {
                    for (var i = 0; i < m.records.length; ++i)
                        $root.proto.TransactionRecord.encode(m.records[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a CryptoGetAccountRecordsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetAccountRecordsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetAccountRecordsResponse} CryptoGetAccountRecordsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetAccountRecordsResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountRecordsResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        if (!(m.records && m.records.length))
                            m.records = [];
                        m.records.push($root.proto.TransactionRecord.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetAccountRecordsResponse;
        })();

        proto.CryptoGetInfoQuery = (function() {

            /**
             * Properties of a CryptoGetInfoQuery.
             * @memberof proto
             * @interface ICryptoGetInfoQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetInfoQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetInfoQuery accountID
             */

            /**
             * Constructs a new CryptoGetInfoQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetInfoQuery.
             * @implements ICryptoGetInfoQuery
             * @constructor
             * @param {proto.ICryptoGetInfoQuery=} [p] Properties to set
             */
            function CryptoGetInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetInfoQuery
             * @instance
             */
            CryptoGetInfoQuery.prototype.header = null;

            /**
             * CryptoGetInfoQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetInfoQuery
             * @instance
             */
            CryptoGetInfoQuery.prototype.accountID = null;

            /**
             * Creates a new CryptoGetInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetInfoQuery
             * @static
             * @param {proto.ICryptoGetInfoQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetInfoQuery} CryptoGetInfoQuery instance
             */
            CryptoGetInfoQuery.create = function create(properties) {
                return new CryptoGetInfoQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetInfoQuery message. Does not implicitly {@link proto.CryptoGetInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetInfoQuery
             * @static
             * @param {proto.ICryptoGetInfoQuery} m CryptoGetInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetInfoQuery} CryptoGetInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetInfoQuery;
        })();

        proto.CryptoGetInfoResponse = (function() {

            /**
             * Properties of a CryptoGetInfoResponse.
             * @memberof proto
             * @interface ICryptoGetInfoResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetInfoResponse header
             * @property {proto.CryptoGetInfoResponse.IAccountInfo|null} [accountInfo] CryptoGetInfoResponse accountInfo
             */

            /**
             * Constructs a new CryptoGetInfoResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetInfoResponse.
             * @implements ICryptoGetInfoResponse
             * @constructor
             * @param {proto.ICryptoGetInfoResponse=} [p] Properties to set
             */
            function CryptoGetInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetInfoResponse
             * @instance
             */
            CryptoGetInfoResponse.prototype.header = null;

            /**
             * CryptoGetInfoResponse accountInfo.
             * @member {proto.CryptoGetInfoResponse.IAccountInfo|null|undefined} accountInfo
             * @memberof proto.CryptoGetInfoResponse
             * @instance
             */
            CryptoGetInfoResponse.prototype.accountInfo = null;

            /**
             * Creates a new CryptoGetInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetInfoResponse
             * @static
             * @param {proto.ICryptoGetInfoResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetInfoResponse} CryptoGetInfoResponse instance
             */
            CryptoGetInfoResponse.create = function create(properties) {
                return new CryptoGetInfoResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetInfoResponse message. Does not implicitly {@link proto.CryptoGetInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetInfoResponse
             * @static
             * @param {proto.ICryptoGetInfoResponse} m CryptoGetInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountInfo != null && Object.hasOwnProperty.call(m, "accountInfo"))
                    $root.proto.CryptoGetInfoResponse.AccountInfo.encode(m.accountInfo, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetInfoResponse} CryptoGetInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountInfo = $root.proto.CryptoGetInfoResponse.AccountInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            CryptoGetInfoResponse.AccountInfo = (function() {

                /**
                 * Properties of an AccountInfo.
                 * @memberof proto.CryptoGetInfoResponse
                 * @interface IAccountInfo
                 * @property {proto.IAccountID|null} [accountID] AccountInfo accountID
                 * @property {string|null} [contractAccountID] AccountInfo contractAccountID
                 * @property {boolean|null} [deleted] AccountInfo deleted
                 * @property {proto.IAccountID|null} [proxyAccountID] AccountInfo proxyAccountID
                 * @property {Long|null} [proxyReceived] AccountInfo proxyReceived
                 * @property {proto.IKey|null} [key] AccountInfo key
                 * @property {Long|null} [balance] AccountInfo balance
                 * @property {Long|null} [generateSendRecordThreshold] AccountInfo generateSendRecordThreshold
                 * @property {Long|null} [generateReceiveRecordThreshold] AccountInfo generateReceiveRecordThreshold
                 * @property {boolean|null} [receiverSigRequired] AccountInfo receiverSigRequired
                 * @property {proto.ITimestamp|null} [expirationTime] AccountInfo expirationTime
                 * @property {proto.IDuration|null} [autoRenewPeriod] AccountInfo autoRenewPeriod
                 * @property {Array.<proto.ILiveHash>|null} [liveHashes] AccountInfo liveHashes
                 * @property {Array.<proto.ITokenRelationship>|null} [tokenRelationships] AccountInfo tokenRelationships
                 * @property {string|null} [memo] AccountInfo memo
                 */

                /**
                 * Constructs a new AccountInfo.
                 * @memberof proto.CryptoGetInfoResponse
                 * @classdesc Represents an AccountInfo.
                 * @implements IAccountInfo
                 * @constructor
                 * @param {proto.CryptoGetInfoResponse.IAccountInfo=} [p] Properties to set
                 */
                function AccountInfo(p) {
                    this.liveHashes = [];
                    this.tokenRelationships = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * AccountInfo accountID.
                 * @member {proto.IAccountID|null|undefined} accountID
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.accountID = null;

                /**
                 * AccountInfo contractAccountID.
                 * @member {string} contractAccountID
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.contractAccountID = "";

                /**
                 * AccountInfo deleted.
                 * @member {boolean} deleted
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.deleted = false;

                /**
                 * AccountInfo proxyAccountID.
                 * @member {proto.IAccountID|null|undefined} proxyAccountID
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.proxyAccountID = null;

                /**
                 * AccountInfo proxyReceived.
                 * @member {Long} proxyReceived
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.proxyReceived = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * AccountInfo key.
                 * @member {proto.IKey|null|undefined} key
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.key = null;

                /**
                 * AccountInfo balance.
                 * @member {Long} balance
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccountInfo generateSendRecordThreshold.
                 * @member {Long} generateSendRecordThreshold
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.generateSendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccountInfo generateReceiveRecordThreshold.
                 * @member {Long} generateReceiveRecordThreshold
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.generateReceiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccountInfo receiverSigRequired.
                 * @member {boolean} receiverSigRequired
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.receiverSigRequired = false;

                /**
                 * AccountInfo expirationTime.
                 * @member {proto.ITimestamp|null|undefined} expirationTime
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.expirationTime = null;

                /**
                 * AccountInfo autoRenewPeriod.
                 * @member {proto.IDuration|null|undefined} autoRenewPeriod
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.autoRenewPeriod = null;

                /**
                 * AccountInfo liveHashes.
                 * @member {Array.<proto.ILiveHash>} liveHashes
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.liveHashes = $util.emptyArray;

                /**
                 * AccountInfo tokenRelationships.
                 * @member {Array.<proto.ITokenRelationship>} tokenRelationships
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.tokenRelationships = $util.emptyArray;

                /**
                 * AccountInfo memo.
                 * @member {string} memo
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @instance
                 */
                AccountInfo.prototype.memo = "";

                /**
                 * Creates a new AccountInfo instance using the specified properties.
                 * @function create
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @static
                 * @param {proto.CryptoGetInfoResponse.IAccountInfo=} [properties] Properties to set
                 * @returns {proto.CryptoGetInfoResponse.AccountInfo} AccountInfo instance
                 */
                AccountInfo.create = function create(properties) {
                    return new AccountInfo(properties);
                };

                /**
                 * Encodes the specified AccountInfo message. Does not implicitly {@link proto.CryptoGetInfoResponse.AccountInfo.verify|verify} messages.
                 * @function encode
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @static
                 * @param {proto.CryptoGetInfoResponse.IAccountInfo} m AccountInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccountInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                        $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                    if (m.contractAccountID != null && Object.hasOwnProperty.call(m, "contractAccountID"))
                        w.uint32(18).string(m.contractAccountID);
                    if (m.deleted != null && Object.hasOwnProperty.call(m, "deleted"))
                        w.uint32(24).bool(m.deleted);
                    if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, "proxyAccountID"))
                        $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(34).fork()).ldelim();
                    if (m.proxyReceived != null && Object.hasOwnProperty.call(m, "proxyReceived"))
                        w.uint32(48).int64(m.proxyReceived);
                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                        $root.proto.Key.encode(m.key, w.uint32(58).fork()).ldelim();
                    if (m.balance != null && Object.hasOwnProperty.call(m, "balance"))
                        w.uint32(64).uint64(m.balance);
                    if (m.generateSendRecordThreshold != null && Object.hasOwnProperty.call(m, "generateSendRecordThreshold"))
                        w.uint32(72).uint64(m.generateSendRecordThreshold);
                    if (m.generateReceiveRecordThreshold != null && Object.hasOwnProperty.call(m, "generateReceiveRecordThreshold"))
                        w.uint32(80).uint64(m.generateReceiveRecordThreshold);
                    if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, "receiverSigRequired"))
                        w.uint32(88).bool(m.receiverSigRequired);
                    if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                        $root.proto.Timestamp.encode(m.expirationTime, w.uint32(98).fork()).ldelim();
                    if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                        $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(106).fork()).ldelim();
                    if (m.liveHashes != null && m.liveHashes.length) {
                        for (var i = 0; i < m.liveHashes.length; ++i)
                            $root.proto.LiveHash.encode(m.liveHashes[i], w.uint32(114).fork()).ldelim();
                    }
                    if (m.tokenRelationships != null && m.tokenRelationships.length) {
                        for (var i = 0; i < m.tokenRelationships.length; ++i)
                            $root.proto.TokenRelationship.encode(m.tokenRelationships[i], w.uint32(122).fork()).ldelim();
                    }
                    if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                        w.uint32(130).string(m.memo);
                    return w;
                };

                /**
                 * Decodes an AccountInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof proto.CryptoGetInfoResponse.AccountInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {proto.CryptoGetInfoResponse.AccountInfo} AccountInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccountInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoResponse.AccountInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                            break;
                        case 2:
                            m.contractAccountID = r.string();
                            break;
                        case 3:
                            m.deleted = r.bool();
                            break;
                        case 4:
                            m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());
                            break;
                        case 6:
                            m.proxyReceived = r.int64();
                            break;
                        case 7:
                            m.key = $root.proto.Key.decode(r, r.uint32());
                            break;
                        case 8:
                            m.balance = r.uint64();
                            break;
                        case 9:
                            m.generateSendRecordThreshold = r.uint64();
                            break;
                        case 10:
                            m.generateReceiveRecordThreshold = r.uint64();
                            break;
                        case 11:
                            m.receiverSigRequired = r.bool();
                            break;
                        case 12:
                            m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                            break;
                        case 13:
                            m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                            break;
                        case 14:
                            if (!(m.liveHashes && m.liveHashes.length))
                                m.liveHashes = [];
                            m.liveHashes.push($root.proto.LiveHash.decode(r, r.uint32()));
                            break;
                        case 15:
                            if (!(m.tokenRelationships && m.tokenRelationships.length))
                                m.tokenRelationships = [];
                            m.tokenRelationships.push($root.proto.TokenRelationship.decode(r, r.uint32()));
                            break;
                        case 16:
                            m.memo = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AccountInfo;
            })();

            return CryptoGetInfoResponse;
        })();

        proto.CryptoGetLiveHashQuery = (function() {

            /**
             * Properties of a CryptoGetLiveHashQuery.
             * @memberof proto
             * @interface ICryptoGetLiveHashQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetLiveHashQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetLiveHashQuery accountID
             * @property {Uint8Array|null} [hash] CryptoGetLiveHashQuery hash
             */

            /**
             * Constructs a new CryptoGetLiveHashQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetLiveHashQuery.
             * @implements ICryptoGetLiveHashQuery
             * @constructor
             * @param {proto.ICryptoGetLiveHashQuery=} [p] Properties to set
             */
            function CryptoGetLiveHashQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetLiveHashQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetLiveHashQuery
             * @instance
             */
            CryptoGetLiveHashQuery.prototype.header = null;

            /**
             * CryptoGetLiveHashQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetLiveHashQuery
             * @instance
             */
            CryptoGetLiveHashQuery.prototype.accountID = null;

            /**
             * CryptoGetLiveHashQuery hash.
             * @member {Uint8Array} hash
             * @memberof proto.CryptoGetLiveHashQuery
             * @instance
             */
            CryptoGetLiveHashQuery.prototype.hash = $util.newBuffer([]);

            /**
             * Creates a new CryptoGetLiveHashQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetLiveHashQuery
             * @static
             * @param {proto.ICryptoGetLiveHashQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetLiveHashQuery} CryptoGetLiveHashQuery instance
             */
            CryptoGetLiveHashQuery.create = function create(properties) {
                return new CryptoGetLiveHashQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetLiveHashQuery message. Does not implicitly {@link proto.CryptoGetLiveHashQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetLiveHashQuery
             * @static
             * @param {proto.ICryptoGetLiveHashQuery} m CryptoGetLiveHashQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetLiveHashQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(26).bytes(m.hash);
                return w;
            };

            /**
             * Decodes a CryptoGetLiveHashQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetLiveHashQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetLiveHashQuery} CryptoGetLiveHashQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetLiveHashQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetLiveHashQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.hash = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetLiveHashQuery;
        })();

        proto.CryptoGetLiveHashResponse = (function() {

            /**
             * Properties of a CryptoGetLiveHashResponse.
             * @memberof proto
             * @interface ICryptoGetLiveHashResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetLiveHashResponse header
             * @property {proto.ILiveHash|null} [liveHash] CryptoGetLiveHashResponse liveHash
             */

            /**
             * Constructs a new CryptoGetLiveHashResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetLiveHashResponse.
             * @implements ICryptoGetLiveHashResponse
             * @constructor
             * @param {proto.ICryptoGetLiveHashResponse=} [p] Properties to set
             */
            function CryptoGetLiveHashResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetLiveHashResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetLiveHashResponse
             * @instance
             */
            CryptoGetLiveHashResponse.prototype.header = null;

            /**
             * CryptoGetLiveHashResponse liveHash.
             * @member {proto.ILiveHash|null|undefined} liveHash
             * @memberof proto.CryptoGetLiveHashResponse
             * @instance
             */
            CryptoGetLiveHashResponse.prototype.liveHash = null;

            /**
             * Creates a new CryptoGetLiveHashResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetLiveHashResponse
             * @static
             * @param {proto.ICryptoGetLiveHashResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetLiveHashResponse} CryptoGetLiveHashResponse instance
             */
            CryptoGetLiveHashResponse.create = function create(properties) {
                return new CryptoGetLiveHashResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetLiveHashResponse message. Does not implicitly {@link proto.CryptoGetLiveHashResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetLiveHashResponse
             * @static
             * @param {proto.ICryptoGetLiveHashResponse} m CryptoGetLiveHashResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetLiveHashResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.liveHash != null && Object.hasOwnProperty.call(m, "liveHash"))
                    $root.proto.LiveHash.encode(m.liveHash, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetLiveHashResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetLiveHashResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetLiveHashResponse} CryptoGetLiveHashResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetLiveHashResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetLiveHashResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetLiveHashResponse;
        })();

        proto.CryptoGetStakersQuery = (function() {

            /**
             * Properties of a CryptoGetStakersQuery.
             * @memberof proto
             * @interface ICryptoGetStakersQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetStakersQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetStakersQuery accountID
             */

            /**
             * Constructs a new CryptoGetStakersQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetStakersQuery.
             * @implements ICryptoGetStakersQuery
             * @constructor
             * @param {proto.ICryptoGetStakersQuery=} [p] Properties to set
             */
            function CryptoGetStakersQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetStakersQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetStakersQuery
             * @instance
             */
            CryptoGetStakersQuery.prototype.header = null;

            /**
             * CryptoGetStakersQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetStakersQuery
             * @instance
             */
            CryptoGetStakersQuery.prototype.accountID = null;

            /**
             * Creates a new CryptoGetStakersQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetStakersQuery
             * @static
             * @param {proto.ICryptoGetStakersQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetStakersQuery} CryptoGetStakersQuery instance
             */
            CryptoGetStakersQuery.create = function create(properties) {
                return new CryptoGetStakersQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetStakersQuery message. Does not implicitly {@link proto.CryptoGetStakersQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetStakersQuery
             * @static
             * @param {proto.ICryptoGetStakersQuery} m CryptoGetStakersQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetStakersQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetStakersQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetStakersQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetStakersQuery} CryptoGetStakersQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetStakersQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetStakersQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetStakersQuery;
        })();

        proto.ProxyStaker = (function() {

            /**
             * Properties of a ProxyStaker.
             * @memberof proto
             * @interface IProxyStaker
             * @property {proto.IAccountID|null} [accountID] ProxyStaker accountID
             * @property {Long|null} [amount] ProxyStaker amount
             */

            /**
             * Constructs a new ProxyStaker.
             * @memberof proto
             * @classdesc Represents a ProxyStaker.
             * @implements IProxyStaker
             * @constructor
             * @param {proto.IProxyStaker=} [p] Properties to set
             */
            function ProxyStaker(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ProxyStaker accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.ProxyStaker
             * @instance
             */
            ProxyStaker.prototype.accountID = null;

            /**
             * ProxyStaker amount.
             * @member {Long} amount
             * @memberof proto.ProxyStaker
             * @instance
             */
            ProxyStaker.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ProxyStaker instance using the specified properties.
             * @function create
             * @memberof proto.ProxyStaker
             * @static
             * @param {proto.IProxyStaker=} [properties] Properties to set
             * @returns {proto.ProxyStaker} ProxyStaker instance
             */
            ProxyStaker.create = function create(properties) {
                return new ProxyStaker(properties);
            };

            /**
             * Encodes the specified ProxyStaker message. Does not implicitly {@link proto.ProxyStaker.verify|verify} messages.
             * @function encode
             * @memberof proto.ProxyStaker
             * @static
             * @param {proto.IProxyStaker} m ProxyStaker message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyStaker.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(16).int64(m.amount);
                return w;
            };

            /**
             * Decodes a ProxyStaker message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ProxyStaker
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ProxyStaker} ProxyStaker
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyStaker.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ProxyStaker();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ProxyStaker;
        })();

        proto.AllProxyStakers = (function() {

            /**
             * Properties of an AllProxyStakers.
             * @memberof proto
             * @interface IAllProxyStakers
             * @property {proto.IAccountID|null} [accountID] AllProxyStakers accountID
             * @property {Array.<proto.IProxyStaker>|null} [proxyStaker] AllProxyStakers proxyStaker
             */

            /**
             * Constructs a new AllProxyStakers.
             * @memberof proto
             * @classdesc Represents an AllProxyStakers.
             * @implements IAllProxyStakers
             * @constructor
             * @param {proto.IAllProxyStakers=} [p] Properties to set
             */
            function AllProxyStakers(p) {
                this.proxyStaker = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * AllProxyStakers accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.AllProxyStakers
             * @instance
             */
            AllProxyStakers.prototype.accountID = null;

            /**
             * AllProxyStakers proxyStaker.
             * @member {Array.<proto.IProxyStaker>} proxyStaker
             * @memberof proto.AllProxyStakers
             * @instance
             */
            AllProxyStakers.prototype.proxyStaker = $util.emptyArray;

            /**
             * Creates a new AllProxyStakers instance using the specified properties.
             * @function create
             * @memberof proto.AllProxyStakers
             * @static
             * @param {proto.IAllProxyStakers=} [properties] Properties to set
             * @returns {proto.AllProxyStakers} AllProxyStakers instance
             */
            AllProxyStakers.create = function create(properties) {
                return new AllProxyStakers(properties);
            };

            /**
             * Encodes the specified AllProxyStakers message. Does not implicitly {@link proto.AllProxyStakers.verify|verify} messages.
             * @function encode
             * @memberof proto.AllProxyStakers
             * @static
             * @param {proto.IAllProxyStakers} m AllProxyStakers message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AllProxyStakers.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.proxyStaker != null && m.proxyStaker.length) {
                    for (var i = 0; i < m.proxyStaker.length; ++i)
                        $root.proto.ProxyStaker.encode(m.proxyStaker[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes an AllProxyStakers message from the specified reader or buffer.
             * @function decode
             * @memberof proto.AllProxyStakers
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.AllProxyStakers} AllProxyStakers
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AllProxyStakers.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllProxyStakers();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.proxyStaker && m.proxyStaker.length))
                            m.proxyStaker = [];
                        m.proxyStaker.push($root.proto.ProxyStaker.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return AllProxyStakers;
        })();

        proto.CryptoGetStakersResponse = (function() {

            /**
             * Properties of a CryptoGetStakersResponse.
             * @memberof proto
             * @interface ICryptoGetStakersResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetStakersResponse header
             * @property {proto.IAllProxyStakers|null} [stakers] CryptoGetStakersResponse stakers
             */

            /**
             * Constructs a new CryptoGetStakersResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetStakersResponse.
             * @implements ICryptoGetStakersResponse
             * @constructor
             * @param {proto.ICryptoGetStakersResponse=} [p] Properties to set
             */
            function CryptoGetStakersResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetStakersResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetStakersResponse
             * @instance
             */
            CryptoGetStakersResponse.prototype.header = null;

            /**
             * CryptoGetStakersResponse stakers.
             * @member {proto.IAllProxyStakers|null|undefined} stakers
             * @memberof proto.CryptoGetStakersResponse
             * @instance
             */
            CryptoGetStakersResponse.prototype.stakers = null;

            /**
             * Creates a new CryptoGetStakersResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetStakersResponse
             * @static
             * @param {proto.ICryptoGetStakersResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetStakersResponse} CryptoGetStakersResponse instance
             */
            CryptoGetStakersResponse.create = function create(properties) {
                return new CryptoGetStakersResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetStakersResponse message. Does not implicitly {@link proto.CryptoGetStakersResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetStakersResponse
             * @static
             * @param {proto.ICryptoGetStakersResponse} m CryptoGetStakersResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetStakersResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.stakers != null && Object.hasOwnProperty.call(m, "stakers"))
                    $root.proto.AllProxyStakers.encode(m.stakers, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetStakersResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetStakersResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetStakersResponse} CryptoGetStakersResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetStakersResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetStakersResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 3:
                        m.stakers = $root.proto.AllProxyStakers.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetStakersResponse;
        })();

        proto.FileGetContentsQuery = (function() {

            /**
             * Properties of a FileGetContentsQuery.
             * @memberof proto
             * @interface IFileGetContentsQuery
             * @property {proto.IQueryHeader|null} [header] FileGetContentsQuery header
             * @property {proto.IFileID|null} [fileID] FileGetContentsQuery fileID
             */

            /**
             * Constructs a new FileGetContentsQuery.
             * @memberof proto
             * @classdesc Represents a FileGetContentsQuery.
             * @implements IFileGetContentsQuery
             * @constructor
             * @param {proto.IFileGetContentsQuery=} [p] Properties to set
             */
            function FileGetContentsQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileGetContentsQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.FileGetContentsQuery
             * @instance
             */
            FileGetContentsQuery.prototype.header = null;

            /**
             * FileGetContentsQuery fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.FileGetContentsQuery
             * @instance
             */
            FileGetContentsQuery.prototype.fileID = null;

            /**
             * Creates a new FileGetContentsQuery instance using the specified properties.
             * @function create
             * @memberof proto.FileGetContentsQuery
             * @static
             * @param {proto.IFileGetContentsQuery=} [properties] Properties to set
             * @returns {proto.FileGetContentsQuery} FileGetContentsQuery instance
             */
            FileGetContentsQuery.create = function create(properties) {
                return new FileGetContentsQuery(properties);
            };

            /**
             * Encodes the specified FileGetContentsQuery message. Does not implicitly {@link proto.FileGetContentsQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.FileGetContentsQuery
             * @static
             * @param {proto.IFileGetContentsQuery} m FileGetContentsQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileGetContentsQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileGetContentsQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileGetContentsQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileGetContentsQuery} FileGetContentsQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileGetContentsQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileGetContentsQuery;
        })();

        proto.FileGetContentsResponse = (function() {

            /**
             * Properties of a FileGetContentsResponse.
             * @memberof proto
             * @interface IFileGetContentsResponse
             * @property {proto.IResponseHeader|null} [header] FileGetContentsResponse header
             * @property {proto.FileGetContentsResponse.IFileContents|null} [fileContents] FileGetContentsResponse fileContents
             */

            /**
             * Constructs a new FileGetContentsResponse.
             * @memberof proto
             * @classdesc Represents a FileGetContentsResponse.
             * @implements IFileGetContentsResponse
             * @constructor
             * @param {proto.IFileGetContentsResponse=} [p] Properties to set
             */
            function FileGetContentsResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileGetContentsResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.FileGetContentsResponse
             * @instance
             */
            FileGetContentsResponse.prototype.header = null;

            /**
             * FileGetContentsResponse fileContents.
             * @member {proto.FileGetContentsResponse.IFileContents|null|undefined} fileContents
             * @memberof proto.FileGetContentsResponse
             * @instance
             */
            FileGetContentsResponse.prototype.fileContents = null;

            /**
             * Creates a new FileGetContentsResponse instance using the specified properties.
             * @function create
             * @memberof proto.FileGetContentsResponse
             * @static
             * @param {proto.IFileGetContentsResponse=} [properties] Properties to set
             * @returns {proto.FileGetContentsResponse} FileGetContentsResponse instance
             */
            FileGetContentsResponse.create = function create(properties) {
                return new FileGetContentsResponse(properties);
            };

            /**
             * Encodes the specified FileGetContentsResponse message. Does not implicitly {@link proto.FileGetContentsResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.FileGetContentsResponse
             * @static
             * @param {proto.IFileGetContentsResponse} m FileGetContentsResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileGetContentsResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.fileContents != null && Object.hasOwnProperty.call(m, "fileContents"))
                    $root.proto.FileGetContentsResponse.FileContents.encode(m.fileContents, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileGetContentsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileGetContentsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileGetContentsResponse} FileGetContentsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileGetContentsResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.fileContents = $root.proto.FileGetContentsResponse.FileContents.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            FileGetContentsResponse.FileContents = (function() {

                /**
                 * Properties of a FileContents.
                 * @memberof proto.FileGetContentsResponse
                 * @interface IFileContents
                 * @property {proto.IFileID|null} [fileID] FileContents fileID
                 * @property {Uint8Array|null} [contents] FileContents contents
                 */

                /**
                 * Constructs a new FileContents.
                 * @memberof proto.FileGetContentsResponse
                 * @classdesc Represents a FileContents.
                 * @implements IFileContents
                 * @constructor
                 * @param {proto.FileGetContentsResponse.IFileContents=} [p] Properties to set
                 */
                function FileContents(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * FileContents fileID.
                 * @member {proto.IFileID|null|undefined} fileID
                 * @memberof proto.FileGetContentsResponse.FileContents
                 * @instance
                 */
                FileContents.prototype.fileID = null;

                /**
                 * FileContents contents.
                 * @member {Uint8Array} contents
                 * @memberof proto.FileGetContentsResponse.FileContents
                 * @instance
                 */
                FileContents.prototype.contents = $util.newBuffer([]);

                /**
                 * Creates a new FileContents instance using the specified properties.
                 * @function create
                 * @memberof proto.FileGetContentsResponse.FileContents
                 * @static
                 * @param {proto.FileGetContentsResponse.IFileContents=} [properties] Properties to set
                 * @returns {proto.FileGetContentsResponse.FileContents} FileContents instance
                 */
                FileContents.create = function create(properties) {
                    return new FileContents(properties);
                };

                /**
                 * Encodes the specified FileContents message. Does not implicitly {@link proto.FileGetContentsResponse.FileContents.verify|verify} messages.
                 * @function encode
                 * @memberof proto.FileGetContentsResponse.FileContents
                 * @static
                 * @param {proto.FileGetContentsResponse.IFileContents} m FileContents message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileContents.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                        $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                    if (m.contents != null && Object.hasOwnProperty.call(m, "contents"))
                        w.uint32(18).bytes(m.contents);
                    return w;
                };

                /**
                 * Decodes a FileContents message from the specified reader or buffer.
                 * @function decode
                 * @memberof proto.FileGetContentsResponse.FileContents
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {proto.FileGetContentsResponse.FileContents} FileContents
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileContents.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsResponse.FileContents();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.fileID = $root.proto.FileID.decode(r, r.uint32());
                            break;
                        case 2:
                            m.contents = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return FileContents;
            })();

            return FileGetContentsResponse;
        })();

        proto.FileGetInfoQuery = (function() {

            /**
             * Properties of a FileGetInfoQuery.
             * @memberof proto
             * @interface IFileGetInfoQuery
             * @property {proto.IQueryHeader|null} [header] FileGetInfoQuery header
             * @property {proto.IFileID|null} [fileID] FileGetInfoQuery fileID
             */

            /**
             * Constructs a new FileGetInfoQuery.
             * @memberof proto
             * @classdesc Represents a FileGetInfoQuery.
             * @implements IFileGetInfoQuery
             * @constructor
             * @param {proto.IFileGetInfoQuery=} [p] Properties to set
             */
            function FileGetInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileGetInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.FileGetInfoQuery
             * @instance
             */
            FileGetInfoQuery.prototype.header = null;

            /**
             * FileGetInfoQuery fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.FileGetInfoQuery
             * @instance
             */
            FileGetInfoQuery.prototype.fileID = null;

            /**
             * Creates a new FileGetInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.FileGetInfoQuery
             * @static
             * @param {proto.IFileGetInfoQuery=} [properties] Properties to set
             * @returns {proto.FileGetInfoQuery} FileGetInfoQuery instance
             */
            FileGetInfoQuery.create = function create(properties) {
                return new FileGetInfoQuery(properties);
            };

            /**
             * Encodes the specified FileGetInfoQuery message. Does not implicitly {@link proto.FileGetInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.FileGetInfoQuery
             * @static
             * @param {proto.IFileGetInfoQuery} m FileGetInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileGetInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileGetInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileGetInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileGetInfoQuery} FileGetInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileGetInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileGetInfoQuery;
        })();

        proto.FileGetInfoResponse = (function() {

            /**
             * Properties of a FileGetInfoResponse.
             * @memberof proto
             * @interface IFileGetInfoResponse
             * @property {proto.IResponseHeader|null} [header] FileGetInfoResponse header
             * @property {proto.FileGetInfoResponse.IFileInfo|null} [fileInfo] FileGetInfoResponse fileInfo
             */

            /**
             * Constructs a new FileGetInfoResponse.
             * @memberof proto
             * @classdesc Represents a FileGetInfoResponse.
             * @implements IFileGetInfoResponse
             * @constructor
             * @param {proto.IFileGetInfoResponse=} [p] Properties to set
             */
            function FileGetInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileGetInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.FileGetInfoResponse
             * @instance
             */
            FileGetInfoResponse.prototype.header = null;

            /**
             * FileGetInfoResponse fileInfo.
             * @member {proto.FileGetInfoResponse.IFileInfo|null|undefined} fileInfo
             * @memberof proto.FileGetInfoResponse
             * @instance
             */
            FileGetInfoResponse.prototype.fileInfo = null;

            /**
             * Creates a new FileGetInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.FileGetInfoResponse
             * @static
             * @param {proto.IFileGetInfoResponse=} [properties] Properties to set
             * @returns {proto.FileGetInfoResponse} FileGetInfoResponse instance
             */
            FileGetInfoResponse.create = function create(properties) {
                return new FileGetInfoResponse(properties);
            };

            /**
             * Encodes the specified FileGetInfoResponse message. Does not implicitly {@link proto.FileGetInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.FileGetInfoResponse
             * @static
             * @param {proto.IFileGetInfoResponse} m FileGetInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileGetInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.fileInfo != null && Object.hasOwnProperty.call(m, "fileInfo"))
                    $root.proto.FileGetInfoResponse.FileInfo.encode(m.fileInfo, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileGetInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileGetInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileGetInfoResponse} FileGetInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileGetInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.fileInfo = $root.proto.FileGetInfoResponse.FileInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            FileGetInfoResponse.FileInfo = (function() {

                /**
                 * Properties of a FileInfo.
                 * @memberof proto.FileGetInfoResponse
                 * @interface IFileInfo
                 * @property {proto.IFileID|null} [fileID] FileInfo fileID
                 * @property {Long|null} [size] FileInfo size
                 * @property {proto.ITimestamp|null} [expirationTime] FileInfo expirationTime
                 * @property {boolean|null} [deleted] FileInfo deleted
                 * @property {proto.IKeyList|null} [keys] FileInfo keys
                 * @property {string|null} [memo] FileInfo memo
                 */

                /**
                 * Constructs a new FileInfo.
                 * @memberof proto.FileGetInfoResponse
                 * @classdesc Represents a FileInfo.
                 * @implements IFileInfo
                 * @constructor
                 * @param {proto.FileGetInfoResponse.IFileInfo=} [p] Properties to set
                 */
                function FileInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * FileInfo fileID.
                 * @member {proto.IFileID|null|undefined} fileID
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileID = null;

                /**
                 * FileInfo size.
                 * @member {Long} size
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * FileInfo expirationTime.
                 * @member {proto.ITimestamp|null|undefined} expirationTime
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.expirationTime = null;

                /**
                 * FileInfo deleted.
                 * @member {boolean} deleted
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.deleted = false;

                /**
                 * FileInfo keys.
                 * @member {proto.IKeyList|null|undefined} keys
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.keys = null;

                /**
                 * FileInfo memo.
                 * @member {string} memo
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @instance
                 */
                FileInfo.prototype.memo = "";

                /**
                 * Creates a new FileInfo instance using the specified properties.
                 * @function create
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @static
                 * @param {proto.FileGetInfoResponse.IFileInfo=} [properties] Properties to set
                 * @returns {proto.FileGetInfoResponse.FileInfo} FileInfo instance
                 */
                FileInfo.create = function create(properties) {
                    return new FileInfo(properties);
                };

                /**
                 * Encodes the specified FileInfo message. Does not implicitly {@link proto.FileGetInfoResponse.FileInfo.verify|verify} messages.
                 * @function encode
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @static
                 * @param {proto.FileGetInfoResponse.IFileInfo} m FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                        $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                    if (m.size != null && Object.hasOwnProperty.call(m, "size"))
                        w.uint32(16).int64(m.size);
                    if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                        $root.proto.Timestamp.encode(m.expirationTime, w.uint32(26).fork()).ldelim();
                    if (m.deleted != null && Object.hasOwnProperty.call(m, "deleted"))
                        w.uint32(32).bool(m.deleted);
                    if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                        $root.proto.KeyList.encode(m.keys, w.uint32(42).fork()).ldelim();
                    if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                        w.uint32(50).string(m.memo);
                    return w;
                };

                /**
                 * Decodes a FileInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof proto.FileGetInfoResponse.FileInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {proto.FileGetInfoResponse.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoResponse.FileInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.fileID = $root.proto.FileID.decode(r, r.uint32());
                            break;
                        case 2:
                            m.size = r.int64();
                            break;
                        case 3:
                            m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                            break;
                        case 4:
                            m.deleted = r.bool();
                            break;
                        case 5:
                            m.keys = $root.proto.KeyList.decode(r, r.uint32());
                            break;
                        case 6:
                            m.memo = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return FileInfo;
            })();

            return FileGetInfoResponse;
        })();

        proto.TransactionGetReceiptQuery = (function() {

            /**
             * Properties of a TransactionGetReceiptQuery.
             * @memberof proto
             * @interface ITransactionGetReceiptQuery
             * @property {proto.IQueryHeader|null} [header] TransactionGetReceiptQuery header
             * @property {proto.ITransactionID|null} [transactionID] TransactionGetReceiptQuery transactionID
             * @property {boolean|null} [includeDuplicates] TransactionGetReceiptQuery includeDuplicates
             */

            /**
             * Constructs a new TransactionGetReceiptQuery.
             * @memberof proto
             * @classdesc Represents a TransactionGetReceiptQuery.
             * @implements ITransactionGetReceiptQuery
             * @constructor
             * @param {proto.ITransactionGetReceiptQuery=} [p] Properties to set
             */
            function TransactionGetReceiptQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetReceiptQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.TransactionGetReceiptQuery
             * @instance
             */
            TransactionGetReceiptQuery.prototype.header = null;

            /**
             * TransactionGetReceiptQuery transactionID.
             * @member {proto.ITransactionID|null|undefined} transactionID
             * @memberof proto.TransactionGetReceiptQuery
             * @instance
             */
            TransactionGetReceiptQuery.prototype.transactionID = null;

            /**
             * TransactionGetReceiptQuery includeDuplicates.
             * @member {boolean} includeDuplicates
             * @memberof proto.TransactionGetReceiptQuery
             * @instance
             */
            TransactionGetReceiptQuery.prototype.includeDuplicates = false;

            /**
             * Creates a new TransactionGetReceiptQuery instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetReceiptQuery
             * @static
             * @param {proto.ITransactionGetReceiptQuery=} [properties] Properties to set
             * @returns {proto.TransactionGetReceiptQuery} TransactionGetReceiptQuery instance
             */
            TransactionGetReceiptQuery.create = function create(properties) {
                return new TransactionGetReceiptQuery(properties);
            };

            /**
             * Encodes the specified TransactionGetReceiptQuery message. Does not implicitly {@link proto.TransactionGetReceiptQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetReceiptQuery
             * @static
             * @param {proto.ITransactionGetReceiptQuery} m TransactionGetReceiptQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetReceiptQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.transactionID != null && Object.hasOwnProperty.call(m, "transactionID"))
                    $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();
                if (m.includeDuplicates != null && Object.hasOwnProperty.call(m, "includeDuplicates"))
                    w.uint32(24).bool(m.includeDuplicates);
                return w;
            };

            /**
             * Decodes a TransactionGetReceiptQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetReceiptQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetReceiptQuery} TransactionGetReceiptQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetReceiptQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetReceiptQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.includeDuplicates = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetReceiptQuery;
        })();

        proto.TransactionGetReceiptResponse = (function() {

            /**
             * Properties of a TransactionGetReceiptResponse.
             * @memberof proto
             * @interface ITransactionGetReceiptResponse
             * @property {proto.IResponseHeader|null} [header] TransactionGetReceiptResponse header
             * @property {proto.ITransactionReceipt|null} [receipt] TransactionGetReceiptResponse receipt
             * @property {Array.<proto.ITransactionReceipt>|null} [duplicateTransactionReceipts] TransactionGetReceiptResponse duplicateTransactionReceipts
             */

            /**
             * Constructs a new TransactionGetReceiptResponse.
             * @memberof proto
             * @classdesc Represents a TransactionGetReceiptResponse.
             * @implements ITransactionGetReceiptResponse
             * @constructor
             * @param {proto.ITransactionGetReceiptResponse=} [p] Properties to set
             */
            function TransactionGetReceiptResponse(p) {
                this.duplicateTransactionReceipts = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetReceiptResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.TransactionGetReceiptResponse
             * @instance
             */
            TransactionGetReceiptResponse.prototype.header = null;

            /**
             * TransactionGetReceiptResponse receipt.
             * @member {proto.ITransactionReceipt|null|undefined} receipt
             * @memberof proto.TransactionGetReceiptResponse
             * @instance
             */
            TransactionGetReceiptResponse.prototype.receipt = null;

            /**
             * TransactionGetReceiptResponse duplicateTransactionReceipts.
             * @member {Array.<proto.ITransactionReceipt>} duplicateTransactionReceipts
             * @memberof proto.TransactionGetReceiptResponse
             * @instance
             */
            TransactionGetReceiptResponse.prototype.duplicateTransactionReceipts = $util.emptyArray;

            /**
             * Creates a new TransactionGetReceiptResponse instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetReceiptResponse
             * @static
             * @param {proto.ITransactionGetReceiptResponse=} [properties] Properties to set
             * @returns {proto.TransactionGetReceiptResponse} TransactionGetReceiptResponse instance
             */
            TransactionGetReceiptResponse.create = function create(properties) {
                return new TransactionGetReceiptResponse(properties);
            };

            /**
             * Encodes the specified TransactionGetReceiptResponse message. Does not implicitly {@link proto.TransactionGetReceiptResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetReceiptResponse
             * @static
             * @param {proto.ITransactionGetReceiptResponse} m TransactionGetReceiptResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetReceiptResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.receipt != null && Object.hasOwnProperty.call(m, "receipt"))
                    $root.proto.TransactionReceipt.encode(m.receipt, w.uint32(18).fork()).ldelim();
                if (m.duplicateTransactionReceipts != null && m.duplicateTransactionReceipts.length) {
                    for (var i = 0; i < m.duplicateTransactionReceipts.length; ++i)
                        $root.proto.TransactionReceipt.encode(m.duplicateTransactionReceipts[i], w.uint32(34).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TransactionGetReceiptResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetReceiptResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetReceiptResponse} TransactionGetReceiptResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetReceiptResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetReceiptResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.receipt = $root.proto.TransactionReceipt.decode(r, r.uint32());
                        break;
                    case 4:
                        if (!(m.duplicateTransactionReceipts && m.duplicateTransactionReceipts.length))
                            m.duplicateTransactionReceipts = [];
                        m.duplicateTransactionReceipts.push($root.proto.TransactionReceipt.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetReceiptResponse;
        })();

        proto.TransactionGetRecordQuery = (function() {

            /**
             * Properties of a TransactionGetRecordQuery.
             * @memberof proto
             * @interface ITransactionGetRecordQuery
             * @property {proto.IQueryHeader|null} [header] TransactionGetRecordQuery header
             * @property {proto.ITransactionID|null} [transactionID] TransactionGetRecordQuery transactionID
             * @property {boolean|null} [includeDuplicates] TransactionGetRecordQuery includeDuplicates
             */

            /**
             * Constructs a new TransactionGetRecordQuery.
             * @memberof proto
             * @classdesc Represents a TransactionGetRecordQuery.
             * @implements ITransactionGetRecordQuery
             * @constructor
             * @param {proto.ITransactionGetRecordQuery=} [p] Properties to set
             */
            function TransactionGetRecordQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetRecordQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.TransactionGetRecordQuery
             * @instance
             */
            TransactionGetRecordQuery.prototype.header = null;

            /**
             * TransactionGetRecordQuery transactionID.
             * @member {proto.ITransactionID|null|undefined} transactionID
             * @memberof proto.TransactionGetRecordQuery
             * @instance
             */
            TransactionGetRecordQuery.prototype.transactionID = null;

            /**
             * TransactionGetRecordQuery includeDuplicates.
             * @member {boolean} includeDuplicates
             * @memberof proto.TransactionGetRecordQuery
             * @instance
             */
            TransactionGetRecordQuery.prototype.includeDuplicates = false;

            /**
             * Creates a new TransactionGetRecordQuery instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetRecordQuery
             * @static
             * @param {proto.ITransactionGetRecordQuery=} [properties] Properties to set
             * @returns {proto.TransactionGetRecordQuery} TransactionGetRecordQuery instance
             */
            TransactionGetRecordQuery.create = function create(properties) {
                return new TransactionGetRecordQuery(properties);
            };

            /**
             * Encodes the specified TransactionGetRecordQuery message. Does not implicitly {@link proto.TransactionGetRecordQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetRecordQuery
             * @static
             * @param {proto.ITransactionGetRecordQuery} m TransactionGetRecordQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetRecordQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.transactionID != null && Object.hasOwnProperty.call(m, "transactionID"))
                    $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();
                if (m.includeDuplicates != null && Object.hasOwnProperty.call(m, "includeDuplicates"))
                    w.uint32(24).bool(m.includeDuplicates);
                return w;
            };

            /**
             * Decodes a TransactionGetRecordQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetRecordQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetRecordQuery} TransactionGetRecordQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetRecordQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetRecordQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.includeDuplicates = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetRecordQuery;
        })();

        proto.TransactionGetRecordResponse = (function() {

            /**
             * Properties of a TransactionGetRecordResponse.
             * @memberof proto
             * @interface ITransactionGetRecordResponse
             * @property {proto.IResponseHeader|null} [header] TransactionGetRecordResponse header
             * @property {proto.ITransactionRecord|null} [transactionRecord] TransactionGetRecordResponse transactionRecord
             * @property {Array.<proto.ITransactionRecord>|null} [duplicateTransactionRecords] TransactionGetRecordResponse duplicateTransactionRecords
             */

            /**
             * Constructs a new TransactionGetRecordResponse.
             * @memberof proto
             * @classdesc Represents a TransactionGetRecordResponse.
             * @implements ITransactionGetRecordResponse
             * @constructor
             * @param {proto.ITransactionGetRecordResponse=} [p] Properties to set
             */
            function TransactionGetRecordResponse(p) {
                this.duplicateTransactionRecords = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetRecordResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.TransactionGetRecordResponse
             * @instance
             */
            TransactionGetRecordResponse.prototype.header = null;

            /**
             * TransactionGetRecordResponse transactionRecord.
             * @member {proto.ITransactionRecord|null|undefined} transactionRecord
             * @memberof proto.TransactionGetRecordResponse
             * @instance
             */
            TransactionGetRecordResponse.prototype.transactionRecord = null;

            /**
             * TransactionGetRecordResponse duplicateTransactionRecords.
             * @member {Array.<proto.ITransactionRecord>} duplicateTransactionRecords
             * @memberof proto.TransactionGetRecordResponse
             * @instance
             */
            TransactionGetRecordResponse.prototype.duplicateTransactionRecords = $util.emptyArray;

            /**
             * Creates a new TransactionGetRecordResponse instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetRecordResponse
             * @static
             * @param {proto.ITransactionGetRecordResponse=} [properties] Properties to set
             * @returns {proto.TransactionGetRecordResponse} TransactionGetRecordResponse instance
             */
            TransactionGetRecordResponse.create = function create(properties) {
                return new TransactionGetRecordResponse(properties);
            };

            /**
             * Encodes the specified TransactionGetRecordResponse message. Does not implicitly {@link proto.TransactionGetRecordResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetRecordResponse
             * @static
             * @param {proto.ITransactionGetRecordResponse} m TransactionGetRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetRecordResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.transactionRecord != null && Object.hasOwnProperty.call(m, "transactionRecord"))
                    $root.proto.TransactionRecord.encode(m.transactionRecord, w.uint32(26).fork()).ldelim();
                if (m.duplicateTransactionRecords != null && m.duplicateTransactionRecords.length) {
                    for (var i = 0; i < m.duplicateTransactionRecords.length; ++i)
                        $root.proto.TransactionRecord.encode(m.duplicateTransactionRecords[i], w.uint32(34).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TransactionGetRecordResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetRecordResponse} TransactionGetRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetRecordResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetRecordResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 3:
                        m.transactionRecord = $root.proto.TransactionRecord.decode(r, r.uint32());
                        break;
                    case 4:
                        if (!(m.duplicateTransactionRecords && m.duplicateTransactionRecords.length))
                            m.duplicateTransactionRecords = [];
                        m.duplicateTransactionRecords.push($root.proto.TransactionRecord.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetRecordResponse;
        })();

        proto.TransactionGetFastRecordQuery = (function() {

            /**
             * Properties of a TransactionGetFastRecordQuery.
             * @memberof proto
             * @interface ITransactionGetFastRecordQuery
             * @property {proto.IQueryHeader|null} [header] TransactionGetFastRecordQuery header
             * @property {proto.ITransactionID|null} [transactionID] TransactionGetFastRecordQuery transactionID
             */

            /**
             * Constructs a new TransactionGetFastRecordQuery.
             * @memberof proto
             * @classdesc Represents a TransactionGetFastRecordQuery.
             * @implements ITransactionGetFastRecordQuery
             * @constructor
             * @param {proto.ITransactionGetFastRecordQuery=} [p] Properties to set
             */
            function TransactionGetFastRecordQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetFastRecordQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.TransactionGetFastRecordQuery
             * @instance
             */
            TransactionGetFastRecordQuery.prototype.header = null;

            /**
             * TransactionGetFastRecordQuery transactionID.
             * @member {proto.ITransactionID|null|undefined} transactionID
             * @memberof proto.TransactionGetFastRecordQuery
             * @instance
             */
            TransactionGetFastRecordQuery.prototype.transactionID = null;

            /**
             * Creates a new TransactionGetFastRecordQuery instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetFastRecordQuery
             * @static
             * @param {proto.ITransactionGetFastRecordQuery=} [properties] Properties to set
             * @returns {proto.TransactionGetFastRecordQuery} TransactionGetFastRecordQuery instance
             */
            TransactionGetFastRecordQuery.create = function create(properties) {
                return new TransactionGetFastRecordQuery(properties);
            };

            /**
             * Encodes the specified TransactionGetFastRecordQuery message. Does not implicitly {@link proto.TransactionGetFastRecordQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetFastRecordQuery
             * @static
             * @param {proto.ITransactionGetFastRecordQuery} m TransactionGetFastRecordQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetFastRecordQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.transactionID != null && Object.hasOwnProperty.call(m, "transactionID"))
                    $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionGetFastRecordQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetFastRecordQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetFastRecordQuery} TransactionGetFastRecordQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetFastRecordQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetFastRecordQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetFastRecordQuery;
        })();

        proto.TransactionGetFastRecordResponse = (function() {

            /**
             * Properties of a TransactionGetFastRecordResponse.
             * @memberof proto
             * @interface ITransactionGetFastRecordResponse
             * @property {proto.IResponseHeader|null} [header] TransactionGetFastRecordResponse header
             * @property {proto.ITransactionRecord|null} [transactionRecord] TransactionGetFastRecordResponse transactionRecord
             */

            /**
             * Constructs a new TransactionGetFastRecordResponse.
             * @memberof proto
             * @classdesc Represents a TransactionGetFastRecordResponse.
             * @implements ITransactionGetFastRecordResponse
             * @constructor
             * @param {proto.ITransactionGetFastRecordResponse=} [p] Properties to set
             */
            function TransactionGetFastRecordResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionGetFastRecordResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.TransactionGetFastRecordResponse
             * @instance
             */
            TransactionGetFastRecordResponse.prototype.header = null;

            /**
             * TransactionGetFastRecordResponse transactionRecord.
             * @member {proto.ITransactionRecord|null|undefined} transactionRecord
             * @memberof proto.TransactionGetFastRecordResponse
             * @instance
             */
            TransactionGetFastRecordResponse.prototype.transactionRecord = null;

            /**
             * Creates a new TransactionGetFastRecordResponse instance using the specified properties.
             * @function create
             * @memberof proto.TransactionGetFastRecordResponse
             * @static
             * @param {proto.ITransactionGetFastRecordResponse=} [properties] Properties to set
             * @returns {proto.TransactionGetFastRecordResponse} TransactionGetFastRecordResponse instance
             */
            TransactionGetFastRecordResponse.create = function create(properties) {
                return new TransactionGetFastRecordResponse(properties);
            };

            /**
             * Encodes the specified TransactionGetFastRecordResponse message. Does not implicitly {@link proto.TransactionGetFastRecordResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionGetFastRecordResponse
             * @static
             * @param {proto.ITransactionGetFastRecordResponse} m TransactionGetFastRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionGetFastRecordResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.transactionRecord != null && Object.hasOwnProperty.call(m, "transactionRecord"))
                    $root.proto.TransactionRecord.encode(m.transactionRecord, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionGetFastRecordResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionGetFastRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionGetFastRecordResponse} TransactionGetFastRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionGetFastRecordResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetFastRecordResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transactionRecord = $root.proto.TransactionRecord.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionGetFastRecordResponse;
        })();

        proto.NetworkGetVersionInfoQuery = (function() {

            /**
             * Properties of a NetworkGetVersionInfoQuery.
             * @memberof proto
             * @interface INetworkGetVersionInfoQuery
             * @property {proto.IQueryHeader|null} [header] NetworkGetVersionInfoQuery header
             */

            /**
             * Constructs a new NetworkGetVersionInfoQuery.
             * @memberof proto
             * @classdesc Represents a NetworkGetVersionInfoQuery.
             * @implements INetworkGetVersionInfoQuery
             * @constructor
             * @param {proto.INetworkGetVersionInfoQuery=} [p] Properties to set
             */
            function NetworkGetVersionInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NetworkGetVersionInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.NetworkGetVersionInfoQuery
             * @instance
             */
            NetworkGetVersionInfoQuery.prototype.header = null;

            /**
             * Creates a new NetworkGetVersionInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.NetworkGetVersionInfoQuery
             * @static
             * @param {proto.INetworkGetVersionInfoQuery=} [properties] Properties to set
             * @returns {proto.NetworkGetVersionInfoQuery} NetworkGetVersionInfoQuery instance
             */
            NetworkGetVersionInfoQuery.create = function create(properties) {
                return new NetworkGetVersionInfoQuery(properties);
            };

            /**
             * Encodes the specified NetworkGetVersionInfoQuery message. Does not implicitly {@link proto.NetworkGetVersionInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.NetworkGetVersionInfoQuery
             * @static
             * @param {proto.INetworkGetVersionInfoQuery} m NetworkGetVersionInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NetworkGetVersionInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a NetworkGetVersionInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.NetworkGetVersionInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.NetworkGetVersionInfoQuery} NetworkGetVersionInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NetworkGetVersionInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NetworkGetVersionInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return NetworkGetVersionInfoQuery;
        })();

        proto.NetworkGetVersionInfoResponse = (function() {

            /**
             * Properties of a NetworkGetVersionInfoResponse.
             * @memberof proto
             * @interface INetworkGetVersionInfoResponse
             * @property {proto.IResponseHeader|null} [header] NetworkGetVersionInfoResponse header
             * @property {proto.ISemanticVersion|null} [hapiProtoVersion] NetworkGetVersionInfoResponse hapiProtoVersion
             * @property {proto.ISemanticVersion|null} [hederaServicesVersion] NetworkGetVersionInfoResponse hederaServicesVersion
             */

            /**
             * Constructs a new NetworkGetVersionInfoResponse.
             * @memberof proto
             * @classdesc Represents a NetworkGetVersionInfoResponse.
             * @implements INetworkGetVersionInfoResponse
             * @constructor
             * @param {proto.INetworkGetVersionInfoResponse=} [p] Properties to set
             */
            function NetworkGetVersionInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * NetworkGetVersionInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.NetworkGetVersionInfoResponse
             * @instance
             */
            NetworkGetVersionInfoResponse.prototype.header = null;

            /**
             * NetworkGetVersionInfoResponse hapiProtoVersion.
             * @member {proto.ISemanticVersion|null|undefined} hapiProtoVersion
             * @memberof proto.NetworkGetVersionInfoResponse
             * @instance
             */
            NetworkGetVersionInfoResponse.prototype.hapiProtoVersion = null;

            /**
             * NetworkGetVersionInfoResponse hederaServicesVersion.
             * @member {proto.ISemanticVersion|null|undefined} hederaServicesVersion
             * @memberof proto.NetworkGetVersionInfoResponse
             * @instance
             */
            NetworkGetVersionInfoResponse.prototype.hederaServicesVersion = null;

            /**
             * Creates a new NetworkGetVersionInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.NetworkGetVersionInfoResponse
             * @static
             * @param {proto.INetworkGetVersionInfoResponse=} [properties] Properties to set
             * @returns {proto.NetworkGetVersionInfoResponse} NetworkGetVersionInfoResponse instance
             */
            NetworkGetVersionInfoResponse.create = function create(properties) {
                return new NetworkGetVersionInfoResponse(properties);
            };

            /**
             * Encodes the specified NetworkGetVersionInfoResponse message. Does not implicitly {@link proto.NetworkGetVersionInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.NetworkGetVersionInfoResponse
             * @static
             * @param {proto.INetworkGetVersionInfoResponse} m NetworkGetVersionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NetworkGetVersionInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.hapiProtoVersion != null && Object.hasOwnProperty.call(m, "hapiProtoVersion"))
                    $root.proto.SemanticVersion.encode(m.hapiProtoVersion, w.uint32(18).fork()).ldelim();
                if (m.hederaServicesVersion != null && Object.hasOwnProperty.call(m, "hederaServicesVersion"))
                    $root.proto.SemanticVersion.encode(m.hederaServicesVersion, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a NetworkGetVersionInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.NetworkGetVersionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.NetworkGetVersionInfoResponse} NetworkGetVersionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NetworkGetVersionInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NetworkGetVersionInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.hapiProtoVersion = $root.proto.SemanticVersion.decode(r, r.uint32());
                        break;
                    case 3:
                        m.hederaServicesVersion = $root.proto.SemanticVersion.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return NetworkGetVersionInfoResponse;
        })();

        proto.TokenGetInfoQuery = (function() {

            /**
             * Properties of a TokenGetInfoQuery.
             * @memberof proto
             * @interface ITokenGetInfoQuery
             * @property {proto.IQueryHeader|null} [header] TokenGetInfoQuery header
             * @property {proto.ITokenID|null} [token] TokenGetInfoQuery token
             */

            /**
             * Constructs a new TokenGetInfoQuery.
             * @memberof proto
             * @classdesc Represents a TokenGetInfoQuery.
             * @implements ITokenGetInfoQuery
             * @constructor
             * @param {proto.ITokenGetInfoQuery=} [p] Properties to set
             */
            function TokenGetInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenGetInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.TokenGetInfoQuery
             * @instance
             */
            TokenGetInfoQuery.prototype.header = null;

            /**
             * TokenGetInfoQuery token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenGetInfoQuery
             * @instance
             */
            TokenGetInfoQuery.prototype.token = null;

            /**
             * Creates a new TokenGetInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.TokenGetInfoQuery
             * @static
             * @param {proto.ITokenGetInfoQuery=} [properties] Properties to set
             * @returns {proto.TokenGetInfoQuery} TokenGetInfoQuery instance
             */
            TokenGetInfoQuery.create = function create(properties) {
                return new TokenGetInfoQuery(properties);
            };

            /**
             * Encodes the specified TokenGetInfoQuery message. Does not implicitly {@link proto.TokenGetInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenGetInfoQuery
             * @static
             * @param {proto.ITokenGetInfoQuery} m TokenGetInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenGetInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenGetInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenGetInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenGetInfoQuery} TokenGetInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenGetInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGetInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenGetInfoQuery;
        })();

        proto.TokenInfo = (function() {

            /**
             * Properties of a TokenInfo.
             * @memberof proto
             * @interface ITokenInfo
             * @property {proto.ITokenID|null} [tokenId] TokenInfo tokenId
             * @property {string|null} [name] TokenInfo name
             * @property {string|null} [symbol] TokenInfo symbol
             * @property {number|null} [decimals] TokenInfo decimals
             * @property {Long|null} [totalSupply] TokenInfo totalSupply
             * @property {proto.IAccountID|null} [treasury] TokenInfo treasury
             * @property {proto.IKey|null} [adminKey] TokenInfo adminKey
             * @property {proto.IKey|null} [kycKey] TokenInfo kycKey
             * @property {proto.IKey|null} [freezeKey] TokenInfo freezeKey
             * @property {proto.IKey|null} [wipeKey] TokenInfo wipeKey
             * @property {proto.IKey|null} [supplyKey] TokenInfo supplyKey
             * @property {proto.TokenFreezeStatus|null} [defaultFreezeStatus] TokenInfo defaultFreezeStatus
             * @property {proto.TokenKycStatus|null} [defaultKycStatus] TokenInfo defaultKycStatus
             * @property {boolean|null} [deleted] TokenInfo deleted
             * @property {proto.IAccountID|null} [autoRenewAccount] TokenInfo autoRenewAccount
             * @property {proto.IDuration|null} [autoRenewPeriod] TokenInfo autoRenewPeriod
             * @property {proto.ITimestamp|null} [expiry] TokenInfo expiry
             * @property {string|null} [memo] TokenInfo memo
             */

            /**
             * Constructs a new TokenInfo.
             * @memberof proto
             * @classdesc Represents a TokenInfo.
             * @implements ITokenInfo
             * @constructor
             * @param {proto.ITokenInfo=} [p] Properties to set
             */
            function TokenInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenInfo tokenId.
             * @member {proto.ITokenID|null|undefined} tokenId
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.tokenId = null;

            /**
             * TokenInfo name.
             * @member {string} name
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.name = "";

            /**
             * TokenInfo symbol.
             * @member {string} symbol
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.symbol = "";

            /**
             * TokenInfo decimals.
             * @member {number} decimals
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.decimals = 0;

            /**
             * TokenInfo totalSupply.
             * @member {Long} totalSupply
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.totalSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TokenInfo treasury.
             * @member {proto.IAccountID|null|undefined} treasury
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.treasury = null;

            /**
             * TokenInfo adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.adminKey = null;

            /**
             * TokenInfo kycKey.
             * @member {proto.IKey|null|undefined} kycKey
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.kycKey = null;

            /**
             * TokenInfo freezeKey.
             * @member {proto.IKey|null|undefined} freezeKey
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.freezeKey = null;

            /**
             * TokenInfo wipeKey.
             * @member {proto.IKey|null|undefined} wipeKey
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.wipeKey = null;

            /**
             * TokenInfo supplyKey.
             * @member {proto.IKey|null|undefined} supplyKey
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.supplyKey = null;

            /**
             * TokenInfo defaultFreezeStatus.
             * @member {proto.TokenFreezeStatus} defaultFreezeStatus
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.defaultFreezeStatus = 0;

            /**
             * TokenInfo defaultKycStatus.
             * @member {proto.TokenKycStatus} defaultKycStatus
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.defaultKycStatus = 0;

            /**
             * TokenInfo deleted.
             * @member {boolean} deleted
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.deleted = false;

            /**
             * TokenInfo autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.autoRenewAccount = null;

            /**
             * TokenInfo autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.autoRenewPeriod = null;

            /**
             * TokenInfo expiry.
             * @member {proto.ITimestamp|null|undefined} expiry
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.expiry = null;

            /**
             * TokenInfo memo.
             * @member {string} memo
             * @memberof proto.TokenInfo
             * @instance
             */
            TokenInfo.prototype.memo = "";

            /**
             * Creates a new TokenInfo instance using the specified properties.
             * @function create
             * @memberof proto.TokenInfo
             * @static
             * @param {proto.ITokenInfo=} [properties] Properties to set
             * @returns {proto.TokenInfo} TokenInfo instance
             */
            TokenInfo.create = function create(properties) {
                return new TokenInfo(properties);
            };

            /**
             * Encodes the specified TokenInfo message. Does not implicitly {@link proto.TokenInfo.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenInfo
             * @static
             * @param {proto.ITokenInfo} m TokenInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenId != null && Object.hasOwnProperty.call(m, "tokenId"))
                    $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(18).string(m.name);
                if (m.symbol != null && Object.hasOwnProperty.call(m, "symbol"))
                    w.uint32(26).string(m.symbol);
                if (m.decimals != null && Object.hasOwnProperty.call(m, "decimals"))
                    w.uint32(32).uint32(m.decimals);
                if (m.totalSupply != null && Object.hasOwnProperty.call(m, "totalSupply"))
                    w.uint32(40).uint64(m.totalSupply);
                if (m.treasury != null && Object.hasOwnProperty.call(m, "treasury"))
                    $root.proto.AccountID.encode(m.treasury, w.uint32(50).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(58).fork()).ldelim();
                if (m.kycKey != null && Object.hasOwnProperty.call(m, "kycKey"))
                    $root.proto.Key.encode(m.kycKey, w.uint32(66).fork()).ldelim();
                if (m.freezeKey != null && Object.hasOwnProperty.call(m, "freezeKey"))
                    $root.proto.Key.encode(m.freezeKey, w.uint32(74).fork()).ldelim();
                if (m.wipeKey != null && Object.hasOwnProperty.call(m, "wipeKey"))
                    $root.proto.Key.encode(m.wipeKey, w.uint32(82).fork()).ldelim();
                if (m.supplyKey != null && Object.hasOwnProperty.call(m, "supplyKey"))
                    $root.proto.Key.encode(m.supplyKey, w.uint32(90).fork()).ldelim();
                if (m.defaultFreezeStatus != null && Object.hasOwnProperty.call(m, "defaultFreezeStatus"))
                    w.uint32(96).int32(m.defaultFreezeStatus);
                if (m.defaultKycStatus != null && Object.hasOwnProperty.call(m, "defaultKycStatus"))
                    w.uint32(104).int32(m.defaultKycStatus);
                if (m.deleted != null && Object.hasOwnProperty.call(m, "deleted"))
                    w.uint32(112).bool(m.deleted);
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(122).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(130).fork()).ldelim();
                if (m.expiry != null && Object.hasOwnProperty.call(m, "expiry"))
                    $root.proto.Timestamp.encode(m.expiry, w.uint32(138).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(146).string(m.memo);
                return w;
            };

            /**
             * Decodes a TokenInfo message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenInfo} TokenInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.tokenId = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.name = r.string();
                        break;
                    case 3:
                        m.symbol = r.string();
                        break;
                    case 4:
                        m.decimals = r.uint32();
                        break;
                    case 5:
                        m.totalSupply = r.uint64();
                        break;
                    case 6:
                        m.treasury = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.kycKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 9:
                        m.freezeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 10:
                        m.wipeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 11:
                        m.supplyKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 12:
                        m.defaultFreezeStatus = r.int32();
                        break;
                    case 13:
                        m.defaultKycStatus = r.int32();
                        break;
                    case 14:
                        m.deleted = r.bool();
                        break;
                    case 15:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 16:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 17:
                        m.expiry = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 18:
                        m.memo = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenInfo;
        })();

        proto.TokenGetInfoResponse = (function() {

            /**
             * Properties of a TokenGetInfoResponse.
             * @memberof proto
             * @interface ITokenGetInfoResponse
             * @property {proto.IResponseHeader|null} [header] TokenGetInfoResponse header
             * @property {proto.ITokenInfo|null} [tokenInfo] TokenGetInfoResponse tokenInfo
             */

            /**
             * Constructs a new TokenGetInfoResponse.
             * @memberof proto
             * @classdesc Represents a TokenGetInfoResponse.
             * @implements ITokenGetInfoResponse
             * @constructor
             * @param {proto.ITokenGetInfoResponse=} [p] Properties to set
             */
            function TokenGetInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenGetInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.TokenGetInfoResponse
             * @instance
             */
            TokenGetInfoResponse.prototype.header = null;

            /**
             * TokenGetInfoResponse tokenInfo.
             * @member {proto.ITokenInfo|null|undefined} tokenInfo
             * @memberof proto.TokenGetInfoResponse
             * @instance
             */
            TokenGetInfoResponse.prototype.tokenInfo = null;

            /**
             * Creates a new TokenGetInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.TokenGetInfoResponse
             * @static
             * @param {proto.ITokenGetInfoResponse=} [properties] Properties to set
             * @returns {proto.TokenGetInfoResponse} TokenGetInfoResponse instance
             */
            TokenGetInfoResponse.create = function create(properties) {
                return new TokenGetInfoResponse(properties);
            };

            /**
             * Encodes the specified TokenGetInfoResponse message. Does not implicitly {@link proto.TokenGetInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenGetInfoResponse
             * @static
             * @param {proto.ITokenGetInfoResponse} m TokenGetInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenGetInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.tokenInfo != null && Object.hasOwnProperty.call(m, "tokenInfo"))
                    $root.proto.TokenInfo.encode(m.tokenInfo, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenGetInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenGetInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenGetInfoResponse} TokenGetInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenGetInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGetInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.tokenInfo = $root.proto.TokenInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenGetInfoResponse;
        })();

        proto.ScheduleGetInfoQuery = (function() {

            /**
             * Properties of a ScheduleGetInfoQuery.
             * @memberof proto
             * @interface IScheduleGetInfoQuery
             * @property {proto.IQueryHeader|null} [header] ScheduleGetInfoQuery header
             * @property {proto.IScheduleID|null} [scheduleID] ScheduleGetInfoQuery scheduleID
             */

            /**
             * Constructs a new ScheduleGetInfoQuery.
             * @memberof proto
             * @classdesc Represents a ScheduleGetInfoQuery.
             * @implements IScheduleGetInfoQuery
             * @constructor
             * @param {proto.IScheduleGetInfoQuery=} [p] Properties to set
             */
            function ScheduleGetInfoQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleGetInfoQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.ScheduleGetInfoQuery
             * @instance
             */
            ScheduleGetInfoQuery.prototype.header = null;

            /**
             * ScheduleGetInfoQuery scheduleID.
             * @member {proto.IScheduleID|null|undefined} scheduleID
             * @memberof proto.ScheduleGetInfoQuery
             * @instance
             */
            ScheduleGetInfoQuery.prototype.scheduleID = null;

            /**
             * Creates a new ScheduleGetInfoQuery instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleGetInfoQuery
             * @static
             * @param {proto.IScheduleGetInfoQuery=} [properties] Properties to set
             * @returns {proto.ScheduleGetInfoQuery} ScheduleGetInfoQuery instance
             */
            ScheduleGetInfoQuery.create = function create(properties) {
                return new ScheduleGetInfoQuery(properties);
            };

            /**
             * Encodes the specified ScheduleGetInfoQuery message. Does not implicitly {@link proto.ScheduleGetInfoQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleGetInfoQuery
             * @static
             * @param {proto.IScheduleGetInfoQuery} m ScheduleGetInfoQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleGetInfoQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.scheduleID != null && Object.hasOwnProperty.call(m, "scheduleID"))
                    $root.proto.ScheduleID.encode(m.scheduleID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleGetInfoQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleGetInfoQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleGetInfoQuery} ScheduleGetInfoQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleGetInfoQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleGetInfoQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.scheduleID = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleGetInfoQuery;
        })();

        proto.ScheduleInfo = (function() {

            /**
             * Properties of a ScheduleInfo.
             * @memberof proto
             * @interface IScheduleInfo
             * @property {proto.IScheduleID|null} [scheduleID] ScheduleInfo scheduleID
             * @property {proto.ITimestamp|null} [deletionTime] ScheduleInfo deletionTime
             * @property {proto.ITimestamp|null} [executionTime] ScheduleInfo executionTime
             * @property {proto.ITimestamp|null} [expirationTime] ScheduleInfo expirationTime
             * @property {proto.ISchedulableTransactionBody|null} [scheduledTransactionBody] ScheduleInfo scheduledTransactionBody
             * @property {string|null} [memo] ScheduleInfo memo
             * @property {proto.IKey|null} [adminKey] ScheduleInfo adminKey
             * @property {proto.IKeyList|null} [signers] ScheduleInfo signers
             * @property {proto.IAccountID|null} [creatorAccountID] ScheduleInfo creatorAccountID
             * @property {proto.IAccountID|null} [payerAccountID] ScheduleInfo payerAccountID
             * @property {proto.ITransactionID|null} [scheduledTransactionID] ScheduleInfo scheduledTransactionID
             */

            /**
             * Constructs a new ScheduleInfo.
             * @memberof proto
             * @classdesc Represents a ScheduleInfo.
             * @implements IScheduleInfo
             * @constructor
             * @param {proto.IScheduleInfo=} [p] Properties to set
             */
            function ScheduleInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleInfo scheduleID.
             * @member {proto.IScheduleID|null|undefined} scheduleID
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.scheduleID = null;

            /**
             * ScheduleInfo deletionTime.
             * @member {proto.ITimestamp|null|undefined} deletionTime
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.deletionTime = null;

            /**
             * ScheduleInfo executionTime.
             * @member {proto.ITimestamp|null|undefined} executionTime
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.executionTime = null;

            /**
             * ScheduleInfo expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.expirationTime = null;

            /**
             * ScheduleInfo scheduledTransactionBody.
             * @member {proto.ISchedulableTransactionBody|null|undefined} scheduledTransactionBody
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.scheduledTransactionBody = null;

            /**
             * ScheduleInfo memo.
             * @member {string} memo
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.memo = "";

            /**
             * ScheduleInfo adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.adminKey = null;

            /**
             * ScheduleInfo signers.
             * @member {proto.IKeyList|null|undefined} signers
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.signers = null;

            /**
             * ScheduleInfo creatorAccountID.
             * @member {proto.IAccountID|null|undefined} creatorAccountID
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.creatorAccountID = null;

            /**
             * ScheduleInfo payerAccountID.
             * @member {proto.IAccountID|null|undefined} payerAccountID
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.payerAccountID = null;

            /**
             * ScheduleInfo scheduledTransactionID.
             * @member {proto.ITransactionID|null|undefined} scheduledTransactionID
             * @memberof proto.ScheduleInfo
             * @instance
             */
            ScheduleInfo.prototype.scheduledTransactionID = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * ScheduleInfo data.
             * @member {"deletionTime"|"executionTime"|undefined} data
             * @memberof proto.ScheduleInfo
             * @instance
             */
            Object.defineProperty(ScheduleInfo.prototype, "data", {
                get: $util.oneOfGetter($oneOfFields = ["deletionTime", "executionTime"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ScheduleInfo instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleInfo
             * @static
             * @param {proto.IScheduleInfo=} [properties] Properties to set
             * @returns {proto.ScheduleInfo} ScheduleInfo instance
             */
            ScheduleInfo.create = function create(properties) {
                return new ScheduleInfo(properties);
            };

            /**
             * Encodes the specified ScheduleInfo message. Does not implicitly {@link proto.ScheduleInfo.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleInfo
             * @static
             * @param {proto.IScheduleInfo} m ScheduleInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.scheduleID != null && Object.hasOwnProperty.call(m, "scheduleID"))
                    $root.proto.ScheduleID.encode(m.scheduleID, w.uint32(10).fork()).ldelim();
                if (m.deletionTime != null && Object.hasOwnProperty.call(m, "deletionTime"))
                    $root.proto.Timestamp.encode(m.deletionTime, w.uint32(18).fork()).ldelim();
                if (m.executionTime != null && Object.hasOwnProperty.call(m, "executionTime"))
                    $root.proto.Timestamp.encode(m.executionTime, w.uint32(26).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(34).fork()).ldelim();
                if (m.scheduledTransactionBody != null && Object.hasOwnProperty.call(m, "scheduledTransactionBody"))
                    $root.proto.SchedulableTransactionBody.encode(m.scheduledTransactionBody, w.uint32(42).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(50).string(m.memo);
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(58).fork()).ldelim();
                if (m.signers != null && Object.hasOwnProperty.call(m, "signers"))
                    $root.proto.KeyList.encode(m.signers, w.uint32(66).fork()).ldelim();
                if (m.creatorAccountID != null && Object.hasOwnProperty.call(m, "creatorAccountID"))
                    $root.proto.AccountID.encode(m.creatorAccountID, w.uint32(74).fork()).ldelim();
                if (m.payerAccountID != null && Object.hasOwnProperty.call(m, "payerAccountID"))
                    $root.proto.AccountID.encode(m.payerAccountID, w.uint32(82).fork()).ldelim();
                if (m.scheduledTransactionID != null && Object.hasOwnProperty.call(m, "scheduledTransactionID"))
                    $root.proto.TransactionID.encode(m.scheduledTransactionID, w.uint32(90).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleInfo message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleInfo} ScheduleInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.scheduleID = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.deletionTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 3:
                        m.executionTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 4:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 5:
                        m.scheduledTransactionBody = $root.proto.SchedulableTransactionBody.decode(r, r.uint32());
                        break;
                    case 6:
                        m.memo = r.string();
                        break;
                    case 7:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.signers = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    case 9:
                        m.creatorAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 10:
                        m.payerAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 11:
                        m.scheduledTransactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleInfo;
        })();

        proto.ScheduleGetInfoResponse = (function() {

            /**
             * Properties of a ScheduleGetInfoResponse.
             * @memberof proto
             * @interface IScheduleGetInfoResponse
             * @property {proto.IResponseHeader|null} [header] ScheduleGetInfoResponse header
             * @property {proto.IScheduleInfo|null} [scheduleInfo] ScheduleGetInfoResponse scheduleInfo
             */

            /**
             * Constructs a new ScheduleGetInfoResponse.
             * @memberof proto
             * @classdesc Represents a ScheduleGetInfoResponse.
             * @implements IScheduleGetInfoResponse
             * @constructor
             * @param {proto.IScheduleGetInfoResponse=} [p] Properties to set
             */
            function ScheduleGetInfoResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleGetInfoResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.ScheduleGetInfoResponse
             * @instance
             */
            ScheduleGetInfoResponse.prototype.header = null;

            /**
             * ScheduleGetInfoResponse scheduleInfo.
             * @member {proto.IScheduleInfo|null|undefined} scheduleInfo
             * @memberof proto.ScheduleGetInfoResponse
             * @instance
             */
            ScheduleGetInfoResponse.prototype.scheduleInfo = null;

            /**
             * Creates a new ScheduleGetInfoResponse instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleGetInfoResponse
             * @static
             * @param {proto.IScheduleGetInfoResponse=} [properties] Properties to set
             * @returns {proto.ScheduleGetInfoResponse} ScheduleGetInfoResponse instance
             */
            ScheduleGetInfoResponse.create = function create(properties) {
                return new ScheduleGetInfoResponse(properties);
            };

            /**
             * Encodes the specified ScheduleGetInfoResponse message. Does not implicitly {@link proto.ScheduleGetInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleGetInfoResponse
             * @static
             * @param {proto.IScheduleGetInfoResponse} m ScheduleGetInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleGetInfoResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.scheduleInfo != null && Object.hasOwnProperty.call(m, "scheduleInfo"))
                    $root.proto.ScheduleInfo.encode(m.scheduleInfo, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleGetInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleGetInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleGetInfoResponse} ScheduleGetInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleGetInfoResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleGetInfoResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.scheduleInfo = $root.proto.ScheduleInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleGetInfoResponse;
        })();

        proto.SchedulableTransactionBody = (function() {

            /**
             * Properties of a SchedulableTransactionBody.
             * @memberof proto
             * @interface ISchedulableTransactionBody
             * @property {Long|null} [transactionFee] SchedulableTransactionBody transactionFee
             * @property {string|null} [memo] SchedulableTransactionBody memo
             * @property {proto.IContractCallTransactionBody|null} [contractCall] SchedulableTransactionBody contractCall
             * @property {proto.IContractCreateTransactionBody|null} [contractCreateInstance] SchedulableTransactionBody contractCreateInstance
             * @property {proto.IContractUpdateTransactionBody|null} [contractUpdateInstance] SchedulableTransactionBody contractUpdateInstance
             * @property {proto.IContractDeleteTransactionBody|null} [contractDeleteInstance] SchedulableTransactionBody contractDeleteInstance
             * @property {proto.ICryptoCreateTransactionBody|null} [cryptoCreateAccount] SchedulableTransactionBody cryptoCreateAccount
             * @property {proto.ICryptoDeleteTransactionBody|null} [cryptoDelete] SchedulableTransactionBody cryptoDelete
             * @property {proto.ICryptoTransferTransactionBody|null} [cryptoTransfer] SchedulableTransactionBody cryptoTransfer
             * @property {proto.ICryptoUpdateTransactionBody|null} [cryptoUpdateAccount] SchedulableTransactionBody cryptoUpdateAccount
             * @property {proto.IFileAppendTransactionBody|null} [fileAppend] SchedulableTransactionBody fileAppend
             * @property {proto.IFileCreateTransactionBody|null} [fileCreate] SchedulableTransactionBody fileCreate
             * @property {proto.IFileDeleteTransactionBody|null} [fileDelete] SchedulableTransactionBody fileDelete
             * @property {proto.IFileUpdateTransactionBody|null} [fileUpdate] SchedulableTransactionBody fileUpdate
             * @property {proto.ISystemDeleteTransactionBody|null} [systemDelete] SchedulableTransactionBody systemDelete
             * @property {proto.ISystemUndeleteTransactionBody|null} [systemUndelete] SchedulableTransactionBody systemUndelete
             * @property {proto.IFreezeTransactionBody|null} [freeze] SchedulableTransactionBody freeze
             * @property {proto.IConsensusCreateTopicTransactionBody|null} [consensusCreateTopic] SchedulableTransactionBody consensusCreateTopic
             * @property {proto.IConsensusUpdateTopicTransactionBody|null} [consensusUpdateTopic] SchedulableTransactionBody consensusUpdateTopic
             * @property {proto.IConsensusDeleteTopicTransactionBody|null} [consensusDeleteTopic] SchedulableTransactionBody consensusDeleteTopic
             * @property {proto.IConsensusSubmitMessageTransactionBody|null} [consensusSubmitMessage] SchedulableTransactionBody consensusSubmitMessage
             * @property {proto.ITokenCreateTransactionBody|null} [tokenCreation] SchedulableTransactionBody tokenCreation
             * @property {proto.ITokenFreezeAccountTransactionBody|null} [tokenFreeze] SchedulableTransactionBody tokenFreeze
             * @property {proto.ITokenUnfreezeAccountTransactionBody|null} [tokenUnfreeze] SchedulableTransactionBody tokenUnfreeze
             * @property {proto.ITokenGrantKycTransactionBody|null} [tokenGrantKyc] SchedulableTransactionBody tokenGrantKyc
             * @property {proto.ITokenRevokeKycTransactionBody|null} [tokenRevokeKyc] SchedulableTransactionBody tokenRevokeKyc
             * @property {proto.ITokenDeleteTransactionBody|null} [tokenDeletion] SchedulableTransactionBody tokenDeletion
             * @property {proto.ITokenUpdateTransactionBody|null} [tokenUpdate] SchedulableTransactionBody tokenUpdate
             * @property {proto.ITokenMintTransactionBody|null} [tokenMint] SchedulableTransactionBody tokenMint
             * @property {proto.ITokenBurnTransactionBody|null} [tokenBurn] SchedulableTransactionBody tokenBurn
             * @property {proto.ITokenWipeAccountTransactionBody|null} [tokenWipe] SchedulableTransactionBody tokenWipe
             * @property {proto.ITokenAssociateTransactionBody|null} [tokenAssociate] SchedulableTransactionBody tokenAssociate
             * @property {proto.ITokenDissociateTransactionBody|null} [tokenDissociate] SchedulableTransactionBody tokenDissociate
             * @property {proto.IScheduleDeleteTransactionBody|null} [scheduleDelete] SchedulableTransactionBody scheduleDelete
             */

            /**
             * Constructs a new SchedulableTransactionBody.
             * @memberof proto
             * @classdesc Represents a SchedulableTransactionBody.
             * @implements ISchedulableTransactionBody
             * @constructor
             * @param {proto.ISchedulableTransactionBody=} [p] Properties to set
             */
            function SchedulableTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SchedulableTransactionBody transactionFee.
             * @member {Long} transactionFee
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.transactionFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * SchedulableTransactionBody memo.
             * @member {string} memo
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.memo = "";

            /**
             * SchedulableTransactionBody contractCall.
             * @member {proto.IContractCallTransactionBody|null|undefined} contractCall
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.contractCall = null;

            /**
             * SchedulableTransactionBody contractCreateInstance.
             * @member {proto.IContractCreateTransactionBody|null|undefined} contractCreateInstance
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.contractCreateInstance = null;

            /**
             * SchedulableTransactionBody contractUpdateInstance.
             * @member {proto.IContractUpdateTransactionBody|null|undefined} contractUpdateInstance
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.contractUpdateInstance = null;

            /**
             * SchedulableTransactionBody contractDeleteInstance.
             * @member {proto.IContractDeleteTransactionBody|null|undefined} contractDeleteInstance
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.contractDeleteInstance = null;

            /**
             * SchedulableTransactionBody cryptoCreateAccount.
             * @member {proto.ICryptoCreateTransactionBody|null|undefined} cryptoCreateAccount
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.cryptoCreateAccount = null;

            /**
             * SchedulableTransactionBody cryptoDelete.
             * @member {proto.ICryptoDeleteTransactionBody|null|undefined} cryptoDelete
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.cryptoDelete = null;

            /**
             * SchedulableTransactionBody cryptoTransfer.
             * @member {proto.ICryptoTransferTransactionBody|null|undefined} cryptoTransfer
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.cryptoTransfer = null;

            /**
             * SchedulableTransactionBody cryptoUpdateAccount.
             * @member {proto.ICryptoUpdateTransactionBody|null|undefined} cryptoUpdateAccount
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.cryptoUpdateAccount = null;

            /**
             * SchedulableTransactionBody fileAppend.
             * @member {proto.IFileAppendTransactionBody|null|undefined} fileAppend
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.fileAppend = null;

            /**
             * SchedulableTransactionBody fileCreate.
             * @member {proto.IFileCreateTransactionBody|null|undefined} fileCreate
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.fileCreate = null;

            /**
             * SchedulableTransactionBody fileDelete.
             * @member {proto.IFileDeleteTransactionBody|null|undefined} fileDelete
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.fileDelete = null;

            /**
             * SchedulableTransactionBody fileUpdate.
             * @member {proto.IFileUpdateTransactionBody|null|undefined} fileUpdate
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.fileUpdate = null;

            /**
             * SchedulableTransactionBody systemDelete.
             * @member {proto.ISystemDeleteTransactionBody|null|undefined} systemDelete
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.systemDelete = null;

            /**
             * SchedulableTransactionBody systemUndelete.
             * @member {proto.ISystemUndeleteTransactionBody|null|undefined} systemUndelete
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.systemUndelete = null;

            /**
             * SchedulableTransactionBody freeze.
             * @member {proto.IFreezeTransactionBody|null|undefined} freeze
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.freeze = null;

            /**
             * SchedulableTransactionBody consensusCreateTopic.
             * @member {proto.IConsensusCreateTopicTransactionBody|null|undefined} consensusCreateTopic
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.consensusCreateTopic = null;

            /**
             * SchedulableTransactionBody consensusUpdateTopic.
             * @member {proto.IConsensusUpdateTopicTransactionBody|null|undefined} consensusUpdateTopic
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.consensusUpdateTopic = null;

            /**
             * SchedulableTransactionBody consensusDeleteTopic.
             * @member {proto.IConsensusDeleteTopicTransactionBody|null|undefined} consensusDeleteTopic
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.consensusDeleteTopic = null;

            /**
             * SchedulableTransactionBody consensusSubmitMessage.
             * @member {proto.IConsensusSubmitMessageTransactionBody|null|undefined} consensusSubmitMessage
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.consensusSubmitMessage = null;

            /**
             * SchedulableTransactionBody tokenCreation.
             * @member {proto.ITokenCreateTransactionBody|null|undefined} tokenCreation
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenCreation = null;

            /**
             * SchedulableTransactionBody tokenFreeze.
             * @member {proto.ITokenFreezeAccountTransactionBody|null|undefined} tokenFreeze
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenFreeze = null;

            /**
             * SchedulableTransactionBody tokenUnfreeze.
             * @member {proto.ITokenUnfreezeAccountTransactionBody|null|undefined} tokenUnfreeze
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenUnfreeze = null;

            /**
             * SchedulableTransactionBody tokenGrantKyc.
             * @member {proto.ITokenGrantKycTransactionBody|null|undefined} tokenGrantKyc
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenGrantKyc = null;

            /**
             * SchedulableTransactionBody tokenRevokeKyc.
             * @member {proto.ITokenRevokeKycTransactionBody|null|undefined} tokenRevokeKyc
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenRevokeKyc = null;

            /**
             * SchedulableTransactionBody tokenDeletion.
             * @member {proto.ITokenDeleteTransactionBody|null|undefined} tokenDeletion
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenDeletion = null;

            /**
             * SchedulableTransactionBody tokenUpdate.
             * @member {proto.ITokenUpdateTransactionBody|null|undefined} tokenUpdate
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenUpdate = null;

            /**
             * SchedulableTransactionBody tokenMint.
             * @member {proto.ITokenMintTransactionBody|null|undefined} tokenMint
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenMint = null;

            /**
             * SchedulableTransactionBody tokenBurn.
             * @member {proto.ITokenBurnTransactionBody|null|undefined} tokenBurn
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenBurn = null;

            /**
             * SchedulableTransactionBody tokenWipe.
             * @member {proto.ITokenWipeAccountTransactionBody|null|undefined} tokenWipe
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenWipe = null;

            /**
             * SchedulableTransactionBody tokenAssociate.
             * @member {proto.ITokenAssociateTransactionBody|null|undefined} tokenAssociate
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenAssociate = null;

            /**
             * SchedulableTransactionBody tokenDissociate.
             * @member {proto.ITokenDissociateTransactionBody|null|undefined} tokenDissociate
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.tokenDissociate = null;

            /**
             * SchedulableTransactionBody scheduleDelete.
             * @member {proto.IScheduleDeleteTransactionBody|null|undefined} scheduleDelete
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            SchedulableTransactionBody.prototype.scheduleDelete = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SchedulableTransactionBody data.
             * @member {"contractCall"|"contractCreateInstance"|"contractUpdateInstance"|"contractDeleteInstance"|"cryptoCreateAccount"|"cryptoDelete"|"cryptoTransfer"|"cryptoUpdateAccount"|"fileAppend"|"fileCreate"|"fileDelete"|"fileUpdate"|"systemDelete"|"systemUndelete"|"freeze"|"consensusCreateTopic"|"consensusUpdateTopic"|"consensusDeleteTopic"|"consensusSubmitMessage"|"tokenCreation"|"tokenFreeze"|"tokenUnfreeze"|"tokenGrantKyc"|"tokenRevokeKyc"|"tokenDeletion"|"tokenUpdate"|"tokenMint"|"tokenBurn"|"tokenWipe"|"tokenAssociate"|"tokenDissociate"|"scheduleDelete"|undefined} data
             * @memberof proto.SchedulableTransactionBody
             * @instance
             */
            Object.defineProperty(SchedulableTransactionBody.prototype, "data", {
                get: $util.oneOfGetter($oneOfFields = ["contractCall", "contractCreateInstance", "contractUpdateInstance", "contractDeleteInstance", "cryptoCreateAccount", "cryptoDelete", "cryptoTransfer", "cryptoUpdateAccount", "fileAppend", "fileCreate", "fileDelete", "fileUpdate", "systemDelete", "systemUndelete", "freeze", "consensusCreateTopic", "consensusUpdateTopic", "consensusDeleteTopic", "consensusSubmitMessage", "tokenCreation", "tokenFreeze", "tokenUnfreeze", "tokenGrantKyc", "tokenRevokeKyc", "tokenDeletion", "tokenUpdate", "tokenMint", "tokenBurn", "tokenWipe", "tokenAssociate", "tokenDissociate", "scheduleDelete"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SchedulableTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.SchedulableTransactionBody
             * @static
             * @param {proto.ISchedulableTransactionBody=} [properties] Properties to set
             * @returns {proto.SchedulableTransactionBody} SchedulableTransactionBody instance
             */
            SchedulableTransactionBody.create = function create(properties) {
                return new SchedulableTransactionBody(properties);
            };

            /**
             * Encodes the specified SchedulableTransactionBody message. Does not implicitly {@link proto.SchedulableTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.SchedulableTransactionBody
             * @static
             * @param {proto.ISchedulableTransactionBody} m SchedulableTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SchedulableTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionFee != null && Object.hasOwnProperty.call(m, "transactionFee"))
                    w.uint32(8).uint64(m.transactionFee);
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(18).string(m.memo);
                if (m.contractCall != null && Object.hasOwnProperty.call(m, "contractCall"))
                    $root.proto.ContractCallTransactionBody.encode(m.contractCall, w.uint32(26).fork()).ldelim();
                if (m.contractCreateInstance != null && Object.hasOwnProperty.call(m, "contractCreateInstance"))
                    $root.proto.ContractCreateTransactionBody.encode(m.contractCreateInstance, w.uint32(34).fork()).ldelim();
                if (m.contractUpdateInstance != null && Object.hasOwnProperty.call(m, "contractUpdateInstance"))
                    $root.proto.ContractUpdateTransactionBody.encode(m.contractUpdateInstance, w.uint32(42).fork()).ldelim();
                if (m.contractDeleteInstance != null && Object.hasOwnProperty.call(m, "contractDeleteInstance"))
                    $root.proto.ContractDeleteTransactionBody.encode(m.contractDeleteInstance, w.uint32(50).fork()).ldelim();
                if (m.cryptoCreateAccount != null && Object.hasOwnProperty.call(m, "cryptoCreateAccount"))
                    $root.proto.CryptoCreateTransactionBody.encode(m.cryptoCreateAccount, w.uint32(58).fork()).ldelim();
                if (m.cryptoDelete != null && Object.hasOwnProperty.call(m, "cryptoDelete"))
                    $root.proto.CryptoDeleteTransactionBody.encode(m.cryptoDelete, w.uint32(66).fork()).ldelim();
                if (m.cryptoTransfer != null && Object.hasOwnProperty.call(m, "cryptoTransfer"))
                    $root.proto.CryptoTransferTransactionBody.encode(m.cryptoTransfer, w.uint32(74).fork()).ldelim();
                if (m.cryptoUpdateAccount != null && Object.hasOwnProperty.call(m, "cryptoUpdateAccount"))
                    $root.proto.CryptoUpdateTransactionBody.encode(m.cryptoUpdateAccount, w.uint32(82).fork()).ldelim();
                if (m.fileAppend != null && Object.hasOwnProperty.call(m, "fileAppend"))
                    $root.proto.FileAppendTransactionBody.encode(m.fileAppend, w.uint32(90).fork()).ldelim();
                if (m.fileCreate != null && Object.hasOwnProperty.call(m, "fileCreate"))
                    $root.proto.FileCreateTransactionBody.encode(m.fileCreate, w.uint32(98).fork()).ldelim();
                if (m.fileDelete != null && Object.hasOwnProperty.call(m, "fileDelete"))
                    $root.proto.FileDeleteTransactionBody.encode(m.fileDelete, w.uint32(106).fork()).ldelim();
                if (m.fileUpdate != null && Object.hasOwnProperty.call(m, "fileUpdate"))
                    $root.proto.FileUpdateTransactionBody.encode(m.fileUpdate, w.uint32(114).fork()).ldelim();
                if (m.systemDelete != null && Object.hasOwnProperty.call(m, "systemDelete"))
                    $root.proto.SystemDeleteTransactionBody.encode(m.systemDelete, w.uint32(122).fork()).ldelim();
                if (m.systemUndelete != null && Object.hasOwnProperty.call(m, "systemUndelete"))
                    $root.proto.SystemUndeleteTransactionBody.encode(m.systemUndelete, w.uint32(130).fork()).ldelim();
                if (m.freeze != null && Object.hasOwnProperty.call(m, "freeze"))
                    $root.proto.FreezeTransactionBody.encode(m.freeze, w.uint32(138).fork()).ldelim();
                if (m.consensusCreateTopic != null && Object.hasOwnProperty.call(m, "consensusCreateTopic"))
                    $root.proto.ConsensusCreateTopicTransactionBody.encode(m.consensusCreateTopic, w.uint32(146).fork()).ldelim();
                if (m.consensusUpdateTopic != null && Object.hasOwnProperty.call(m, "consensusUpdateTopic"))
                    $root.proto.ConsensusUpdateTopicTransactionBody.encode(m.consensusUpdateTopic, w.uint32(154).fork()).ldelim();
                if (m.consensusDeleteTopic != null && Object.hasOwnProperty.call(m, "consensusDeleteTopic"))
                    $root.proto.ConsensusDeleteTopicTransactionBody.encode(m.consensusDeleteTopic, w.uint32(162).fork()).ldelim();
                if (m.consensusSubmitMessage != null && Object.hasOwnProperty.call(m, "consensusSubmitMessage"))
                    $root.proto.ConsensusSubmitMessageTransactionBody.encode(m.consensusSubmitMessage, w.uint32(170).fork()).ldelim();
                if (m.tokenCreation != null && Object.hasOwnProperty.call(m, "tokenCreation"))
                    $root.proto.TokenCreateTransactionBody.encode(m.tokenCreation, w.uint32(178).fork()).ldelim();
                if (m.tokenFreeze != null && Object.hasOwnProperty.call(m, "tokenFreeze"))
                    $root.proto.TokenFreezeAccountTransactionBody.encode(m.tokenFreeze, w.uint32(186).fork()).ldelim();
                if (m.tokenUnfreeze != null && Object.hasOwnProperty.call(m, "tokenUnfreeze"))
                    $root.proto.TokenUnfreezeAccountTransactionBody.encode(m.tokenUnfreeze, w.uint32(194).fork()).ldelim();
                if (m.tokenGrantKyc != null && Object.hasOwnProperty.call(m, "tokenGrantKyc"))
                    $root.proto.TokenGrantKycTransactionBody.encode(m.tokenGrantKyc, w.uint32(202).fork()).ldelim();
                if (m.tokenRevokeKyc != null && Object.hasOwnProperty.call(m, "tokenRevokeKyc"))
                    $root.proto.TokenRevokeKycTransactionBody.encode(m.tokenRevokeKyc, w.uint32(210).fork()).ldelim();
                if (m.tokenDeletion != null && Object.hasOwnProperty.call(m, "tokenDeletion"))
                    $root.proto.TokenDeleteTransactionBody.encode(m.tokenDeletion, w.uint32(218).fork()).ldelim();
                if (m.tokenUpdate != null && Object.hasOwnProperty.call(m, "tokenUpdate"))
                    $root.proto.TokenUpdateTransactionBody.encode(m.tokenUpdate, w.uint32(226).fork()).ldelim();
                if (m.tokenMint != null && Object.hasOwnProperty.call(m, "tokenMint"))
                    $root.proto.TokenMintTransactionBody.encode(m.tokenMint, w.uint32(234).fork()).ldelim();
                if (m.tokenBurn != null && Object.hasOwnProperty.call(m, "tokenBurn"))
                    $root.proto.TokenBurnTransactionBody.encode(m.tokenBurn, w.uint32(242).fork()).ldelim();
                if (m.tokenWipe != null && Object.hasOwnProperty.call(m, "tokenWipe"))
                    $root.proto.TokenWipeAccountTransactionBody.encode(m.tokenWipe, w.uint32(250).fork()).ldelim();
                if (m.tokenAssociate != null && Object.hasOwnProperty.call(m, "tokenAssociate"))
                    $root.proto.TokenAssociateTransactionBody.encode(m.tokenAssociate, w.uint32(258).fork()).ldelim();
                if (m.tokenDissociate != null && Object.hasOwnProperty.call(m, "tokenDissociate"))
                    $root.proto.TokenDissociateTransactionBody.encode(m.tokenDissociate, w.uint32(266).fork()).ldelim();
                if (m.scheduleDelete != null && Object.hasOwnProperty.call(m, "scheduleDelete"))
                    $root.proto.ScheduleDeleteTransactionBody.encode(m.scheduleDelete, w.uint32(274).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a SchedulableTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SchedulableTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SchedulableTransactionBody} SchedulableTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SchedulableTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SchedulableTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transactionFee = r.uint64();
                        break;
                    case 2:
                        m.memo = r.string();
                        break;
                    case 3:
                        m.contractCall = $root.proto.ContractCallTransactionBody.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractCreateInstance = $root.proto.ContractCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 5:
                        m.contractUpdateInstance = $root.proto.ContractUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 6:
                        m.contractDeleteInstance = $root.proto.ContractDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 7:
                        m.cryptoCreateAccount = $root.proto.CryptoCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 8:
                        m.cryptoDelete = $root.proto.CryptoDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 9:
                        m.cryptoTransfer = $root.proto.CryptoTransferTransactionBody.decode(r, r.uint32());
                        break;
                    case 10:
                        m.cryptoUpdateAccount = $root.proto.CryptoUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 11:
                        m.fileAppend = $root.proto.FileAppendTransactionBody.decode(r, r.uint32());
                        break;
                    case 12:
                        m.fileCreate = $root.proto.FileCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 13:
                        m.fileDelete = $root.proto.FileDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 14:
                        m.fileUpdate = $root.proto.FileUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 15:
                        m.systemDelete = $root.proto.SystemDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 16:
                        m.systemUndelete = $root.proto.SystemUndeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 17:
                        m.freeze = $root.proto.FreezeTransactionBody.decode(r, r.uint32());
                        break;
                    case 18:
                        m.consensusCreateTopic = $root.proto.ConsensusCreateTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 19:
                        m.consensusUpdateTopic = $root.proto.ConsensusUpdateTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 20:
                        m.consensusDeleteTopic = $root.proto.ConsensusDeleteTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 21:
                        m.consensusSubmitMessage = $root.proto.ConsensusSubmitMessageTransactionBody.decode(r, r.uint32());
                        break;
                    case 22:
                        m.tokenCreation = $root.proto.TokenCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 23:
                        m.tokenFreeze = $root.proto.TokenFreezeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 24:
                        m.tokenUnfreeze = $root.proto.TokenUnfreezeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 25:
                        m.tokenGrantKyc = $root.proto.TokenGrantKycTransactionBody.decode(r, r.uint32());
                        break;
                    case 26:
                        m.tokenRevokeKyc = $root.proto.TokenRevokeKycTransactionBody.decode(r, r.uint32());
                        break;
                    case 27:
                        m.tokenDeletion = $root.proto.TokenDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 28:
                        m.tokenUpdate = $root.proto.TokenUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 29:
                        m.tokenMint = $root.proto.TokenMintTransactionBody.decode(r, r.uint32());
                        break;
                    case 30:
                        m.tokenBurn = $root.proto.TokenBurnTransactionBody.decode(r, r.uint32());
                        break;
                    case 31:
                        m.tokenWipe = $root.proto.TokenWipeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 32:
                        m.tokenAssociate = $root.proto.TokenAssociateTransactionBody.decode(r, r.uint32());
                        break;
                    case 33:
                        m.tokenDissociate = $root.proto.TokenDissociateTransactionBody.decode(r, r.uint32());
                        break;
                    case 34:
                        m.scheduleDelete = $root.proto.ScheduleDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SchedulableTransactionBody;
        })();

        proto.SystemDeleteTransactionBody = (function() {

            /**
             * Properties of a SystemDeleteTransactionBody.
             * @memberof proto
             * @interface ISystemDeleteTransactionBody
             * @property {proto.IFileID|null} [fileID] SystemDeleteTransactionBody fileID
             * @property {proto.IContractID|null} [contractID] SystemDeleteTransactionBody contractID
             * @property {proto.ITimestampSeconds|null} [expirationTime] SystemDeleteTransactionBody expirationTime
             */

            /**
             * Constructs a new SystemDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a SystemDeleteTransactionBody.
             * @implements ISystemDeleteTransactionBody
             * @constructor
             * @param {proto.ISystemDeleteTransactionBody=} [p] Properties to set
             */
            function SystemDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SystemDeleteTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.SystemDeleteTransactionBody
             * @instance
             */
            SystemDeleteTransactionBody.prototype.fileID = null;

            /**
             * SystemDeleteTransactionBody contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.SystemDeleteTransactionBody
             * @instance
             */
            SystemDeleteTransactionBody.prototype.contractID = null;

            /**
             * SystemDeleteTransactionBody expirationTime.
             * @member {proto.ITimestampSeconds|null|undefined} expirationTime
             * @memberof proto.SystemDeleteTransactionBody
             * @instance
             */
            SystemDeleteTransactionBody.prototype.expirationTime = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SystemDeleteTransactionBody id.
             * @member {"fileID"|"contractID"|undefined} id
             * @memberof proto.SystemDeleteTransactionBody
             * @instance
             */
            Object.defineProperty(SystemDeleteTransactionBody.prototype, "id", {
                get: $util.oneOfGetter($oneOfFields = ["fileID", "contractID"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SystemDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.SystemDeleteTransactionBody
             * @static
             * @param {proto.ISystemDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.SystemDeleteTransactionBody} SystemDeleteTransactionBody instance
             */
            SystemDeleteTransactionBody.create = function create(properties) {
                return new SystemDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified SystemDeleteTransactionBody message. Does not implicitly {@link proto.SystemDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.SystemDeleteTransactionBody
             * @static
             * @param {proto.ISystemDeleteTransactionBody} m SystemDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.TimestampSeconds.encode(m.expirationTime, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a SystemDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SystemDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SystemDeleteTransactionBody} SystemDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SystemDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.expirationTime = $root.proto.TimestampSeconds.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SystemDeleteTransactionBody;
        })();

        proto.SystemUndeleteTransactionBody = (function() {

            /**
             * Properties of a SystemUndeleteTransactionBody.
             * @memberof proto
             * @interface ISystemUndeleteTransactionBody
             * @property {proto.IFileID|null} [fileID] SystemUndeleteTransactionBody fileID
             * @property {proto.IContractID|null} [contractID] SystemUndeleteTransactionBody contractID
             */

            /**
             * Constructs a new SystemUndeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a SystemUndeleteTransactionBody.
             * @implements ISystemUndeleteTransactionBody
             * @constructor
             * @param {proto.ISystemUndeleteTransactionBody=} [p] Properties to set
             */
            function SystemUndeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SystemUndeleteTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.SystemUndeleteTransactionBody
             * @instance
             */
            SystemUndeleteTransactionBody.prototype.fileID = null;

            /**
             * SystemUndeleteTransactionBody contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.SystemUndeleteTransactionBody
             * @instance
             */
            SystemUndeleteTransactionBody.prototype.contractID = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SystemUndeleteTransactionBody id.
             * @member {"fileID"|"contractID"|undefined} id
             * @memberof proto.SystemUndeleteTransactionBody
             * @instance
             */
            Object.defineProperty(SystemUndeleteTransactionBody.prototype, "id", {
                get: $util.oneOfGetter($oneOfFields = ["fileID", "contractID"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SystemUndeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.SystemUndeleteTransactionBody
             * @static
             * @param {proto.ISystemUndeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.SystemUndeleteTransactionBody} SystemUndeleteTransactionBody instance
             */
            SystemUndeleteTransactionBody.create = function create(properties) {
                return new SystemUndeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified SystemUndeleteTransactionBody message. Does not implicitly {@link proto.SystemUndeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.SystemUndeleteTransactionBody
             * @static
             * @param {proto.ISystemUndeleteTransactionBody} m SystemUndeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemUndeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a SystemUndeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SystemUndeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SystemUndeleteTransactionBody} SystemUndeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemUndeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SystemUndeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SystemUndeleteTransactionBody;
        })();

        proto.FreezeTransactionBody = (function() {

            /**
             * Properties of a FreezeTransactionBody.
             * @memberof proto
             * @interface IFreezeTransactionBody
             * @property {number|null} [startHour] FreezeTransactionBody startHour
             * @property {number|null} [startMin] FreezeTransactionBody startMin
             * @property {number|null} [endHour] FreezeTransactionBody endHour
             * @property {number|null} [endMin] FreezeTransactionBody endMin
             * @property {proto.IFileID|null} [updateFile] FreezeTransactionBody updateFile
             * @property {Uint8Array|null} [fileHash] FreezeTransactionBody fileHash
             */

            /**
             * Constructs a new FreezeTransactionBody.
             * @memberof proto
             * @classdesc Represents a FreezeTransactionBody.
             * @implements IFreezeTransactionBody
             * @constructor
             * @param {proto.IFreezeTransactionBody=} [p] Properties to set
             */
            function FreezeTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FreezeTransactionBody startHour.
             * @member {number} startHour
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.startHour = 0;

            /**
             * FreezeTransactionBody startMin.
             * @member {number} startMin
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.startMin = 0;

            /**
             * FreezeTransactionBody endHour.
             * @member {number} endHour
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.endHour = 0;

            /**
             * FreezeTransactionBody endMin.
             * @member {number} endMin
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.endMin = 0;

            /**
             * FreezeTransactionBody updateFile.
             * @member {proto.IFileID|null|undefined} updateFile
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.updateFile = null;

            /**
             * FreezeTransactionBody fileHash.
             * @member {Uint8Array} fileHash
             * @memberof proto.FreezeTransactionBody
             * @instance
             */
            FreezeTransactionBody.prototype.fileHash = $util.newBuffer([]);

            /**
             * Creates a new FreezeTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.FreezeTransactionBody
             * @static
             * @param {proto.IFreezeTransactionBody=} [properties] Properties to set
             * @returns {proto.FreezeTransactionBody} FreezeTransactionBody instance
             */
            FreezeTransactionBody.create = function create(properties) {
                return new FreezeTransactionBody(properties);
            };

            /**
             * Encodes the specified FreezeTransactionBody message. Does not implicitly {@link proto.FreezeTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.FreezeTransactionBody
             * @static
             * @param {proto.IFreezeTransactionBody} m FreezeTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FreezeTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.startHour != null && Object.hasOwnProperty.call(m, "startHour"))
                    w.uint32(8).int32(m.startHour);
                if (m.startMin != null && Object.hasOwnProperty.call(m, "startMin"))
                    w.uint32(16).int32(m.startMin);
                if (m.endHour != null && Object.hasOwnProperty.call(m, "endHour"))
                    w.uint32(24).int32(m.endHour);
                if (m.endMin != null && Object.hasOwnProperty.call(m, "endMin"))
                    w.uint32(32).int32(m.endMin);
                if (m.updateFile != null && Object.hasOwnProperty.call(m, "updateFile"))
                    $root.proto.FileID.encode(m.updateFile, w.uint32(42).fork()).ldelim();
                if (m.fileHash != null && Object.hasOwnProperty.call(m, "fileHash"))
                    w.uint32(50).bytes(m.fileHash);
                return w;
            };

            /**
             * Decodes a FreezeTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FreezeTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FreezeTransactionBody} FreezeTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FreezeTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FreezeTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.startHour = r.int32();
                        break;
                    case 2:
                        m.startMin = r.int32();
                        break;
                    case 3:
                        m.endHour = r.int32();
                        break;
                    case 4:
                        m.endMin = r.int32();
                        break;
                    case 5:
                        m.updateFile = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 6:
                        m.fileHash = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FreezeTransactionBody;
        })();

        proto.ContractCallTransactionBody = (function() {

            /**
             * Properties of a ContractCallTransactionBody.
             * @memberof proto
             * @interface IContractCallTransactionBody
             * @property {proto.IContractID|null} [contractID] ContractCallTransactionBody contractID
             * @property {Long|null} [gas] ContractCallTransactionBody gas
             * @property {Long|null} [amount] ContractCallTransactionBody amount
             * @property {Uint8Array|null} [functionParameters] ContractCallTransactionBody functionParameters
             */

            /**
             * Constructs a new ContractCallTransactionBody.
             * @memberof proto
             * @classdesc Represents a ContractCallTransactionBody.
             * @implements IContractCallTransactionBody
             * @constructor
             * @param {proto.IContractCallTransactionBody=} [p] Properties to set
             */
            function ContractCallTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractCallTransactionBody contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractCallTransactionBody
             * @instance
             */
            ContractCallTransactionBody.prototype.contractID = null;

            /**
             * ContractCallTransactionBody gas.
             * @member {Long} gas
             * @memberof proto.ContractCallTransactionBody
             * @instance
             */
            ContractCallTransactionBody.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractCallTransactionBody amount.
             * @member {Long} amount
             * @memberof proto.ContractCallTransactionBody
             * @instance
             */
            ContractCallTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractCallTransactionBody functionParameters.
             * @member {Uint8Array} functionParameters
             * @memberof proto.ContractCallTransactionBody
             * @instance
             */
            ContractCallTransactionBody.prototype.functionParameters = $util.newBuffer([]);

            /**
             * Creates a new ContractCallTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ContractCallTransactionBody
             * @static
             * @param {proto.IContractCallTransactionBody=} [properties] Properties to set
             * @returns {proto.ContractCallTransactionBody} ContractCallTransactionBody instance
             */
            ContractCallTransactionBody.create = function create(properties) {
                return new ContractCallTransactionBody(properties);
            };

            /**
             * Encodes the specified ContractCallTransactionBody message. Does not implicitly {@link proto.ContractCallTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractCallTransactionBody
             * @static
             * @param {proto.IContractCallTransactionBody} m ContractCallTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractCallTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.gas != null && Object.hasOwnProperty.call(m, "gas"))
                    w.uint32(16).int64(m.gas);
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(24).int64(m.amount);
                if (m.functionParameters != null && Object.hasOwnProperty.call(m, "functionParameters"))
                    w.uint32(34).bytes(m.functionParameters);
                return w;
            };

            /**
             * Decodes a ContractCallTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractCallTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractCallTransactionBody} ContractCallTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractCallTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.gas = r.int64();
                        break;
                    case 3:
                        m.amount = r.int64();
                        break;
                    case 4:
                        m.functionParameters = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractCallTransactionBody;
        })();

        proto.ContractCreateTransactionBody = (function() {

            /**
             * Properties of a ContractCreateTransactionBody.
             * @memberof proto
             * @interface IContractCreateTransactionBody
             * @property {proto.IFileID|null} [fileID] ContractCreateTransactionBody fileID
             * @property {proto.IKey|null} [adminKey] ContractCreateTransactionBody adminKey
             * @property {Long|null} [gas] ContractCreateTransactionBody gas
             * @property {Long|null} [initialBalance] ContractCreateTransactionBody initialBalance
             * @property {proto.IAccountID|null} [proxyAccountID] ContractCreateTransactionBody proxyAccountID
             * @property {proto.IDuration|null} [autoRenewPeriod] ContractCreateTransactionBody autoRenewPeriod
             * @property {Uint8Array|null} [constructorParameters] ContractCreateTransactionBody constructorParameters
             * @property {proto.IShardID|null} [shardID] ContractCreateTransactionBody shardID
             * @property {proto.IRealmID|null} [realmID] ContractCreateTransactionBody realmID
             * @property {proto.IKey|null} [newRealmAdminKey] ContractCreateTransactionBody newRealmAdminKey
             * @property {string|null} [memo] ContractCreateTransactionBody memo
             */

            /**
             * Constructs a new ContractCreateTransactionBody.
             * @memberof proto
             * @classdesc Represents a ContractCreateTransactionBody.
             * @implements IContractCreateTransactionBody
             * @constructor
             * @param {proto.IContractCreateTransactionBody=} [p] Properties to set
             */
            function ContractCreateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractCreateTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.fileID = null;

            /**
             * ContractCreateTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.adminKey = null;

            /**
             * ContractCreateTransactionBody gas.
             * @member {Long} gas
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractCreateTransactionBody initialBalance.
             * @member {Long} initialBalance
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.initialBalance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ContractCreateTransactionBody proxyAccountID.
             * @member {proto.IAccountID|null|undefined} proxyAccountID
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.proxyAccountID = null;

            /**
             * ContractCreateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * ContractCreateTransactionBody constructorParameters.
             * @member {Uint8Array} constructorParameters
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.constructorParameters = $util.newBuffer([]);

            /**
             * ContractCreateTransactionBody shardID.
             * @member {proto.IShardID|null|undefined} shardID
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.shardID = null;

            /**
             * ContractCreateTransactionBody realmID.
             * @member {proto.IRealmID|null|undefined} realmID
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.realmID = null;

            /**
             * ContractCreateTransactionBody newRealmAdminKey.
             * @member {proto.IKey|null|undefined} newRealmAdminKey
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.newRealmAdminKey = null;

            /**
             * ContractCreateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.ContractCreateTransactionBody
             * @instance
             */
            ContractCreateTransactionBody.prototype.memo = "";

            /**
             * Creates a new ContractCreateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ContractCreateTransactionBody
             * @static
             * @param {proto.IContractCreateTransactionBody=} [properties] Properties to set
             * @returns {proto.ContractCreateTransactionBody} ContractCreateTransactionBody instance
             */
            ContractCreateTransactionBody.create = function create(properties) {
                return new ContractCreateTransactionBody(properties);
            };

            /**
             * Encodes the specified ContractCreateTransactionBody message. Does not implicitly {@link proto.ContractCreateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractCreateTransactionBody
             * @static
             * @param {proto.IContractCreateTransactionBody} m ContractCreateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractCreateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(26).fork()).ldelim();
                if (m.gas != null && Object.hasOwnProperty.call(m, "gas"))
                    w.uint32(32).int64(m.gas);
                if (m.initialBalance != null && Object.hasOwnProperty.call(m, "initialBalance"))
                    w.uint32(40).int64(m.initialBalance);
                if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, "proxyAccountID"))
                    $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(50).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();
                if (m.constructorParameters != null && Object.hasOwnProperty.call(m, "constructorParameters"))
                    w.uint32(74).bytes(m.constructorParameters);
                if (m.shardID != null && Object.hasOwnProperty.call(m, "shardID"))
                    $root.proto.ShardID.encode(m.shardID, w.uint32(82).fork()).ldelim();
                if (m.realmID != null && Object.hasOwnProperty.call(m, "realmID"))
                    $root.proto.RealmID.encode(m.realmID, w.uint32(90).fork()).ldelim();
                if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, "newRealmAdminKey"))
                    $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(98).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(106).string(m.memo);
                return w;
            };

            /**
             * Decodes a ContractCreateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractCreateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractCreateTransactionBody} ContractCreateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractCreateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCreateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 4:
                        m.gas = r.int64();
                        break;
                    case 5:
                        m.initialBalance = r.int64();
                        break;
                    case 6:
                        m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 8:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 9:
                        m.constructorParameters = r.bytes();
                        break;
                    case 10:
                        m.shardID = $root.proto.ShardID.decode(r, r.uint32());
                        break;
                    case 11:
                        m.realmID = $root.proto.RealmID.decode(r, r.uint32());
                        break;
                    case 12:
                        m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 13:
                        m.memo = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractCreateTransactionBody;
        })();

        proto.ContractUpdateTransactionBody = (function() {

            /**
             * Properties of a ContractUpdateTransactionBody.
             * @memberof proto
             * @interface IContractUpdateTransactionBody
             * @property {proto.IContractID|null} [contractID] ContractUpdateTransactionBody contractID
             * @property {proto.ITimestamp|null} [expirationTime] ContractUpdateTransactionBody expirationTime
             * @property {proto.IKey|null} [adminKey] ContractUpdateTransactionBody adminKey
             * @property {proto.IAccountID|null} [proxyAccountID] ContractUpdateTransactionBody proxyAccountID
             * @property {proto.IDuration|null} [autoRenewPeriod] ContractUpdateTransactionBody autoRenewPeriod
             * @property {proto.IFileID|null} [fileID] ContractUpdateTransactionBody fileID
             * @property {string|null} [memo] ContractUpdateTransactionBody memo
             * @property {google.protobuf.IStringValue|null} [memoWrapper] ContractUpdateTransactionBody memoWrapper
             */

            /**
             * Constructs a new ContractUpdateTransactionBody.
             * @memberof proto
             * @classdesc Represents a ContractUpdateTransactionBody.
             * @implements IContractUpdateTransactionBody
             * @constructor
             * @param {proto.IContractUpdateTransactionBody=} [p] Properties to set
             */
            function ContractUpdateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractUpdateTransactionBody contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.contractID = null;

            /**
             * ContractUpdateTransactionBody expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.expirationTime = null;

            /**
             * ContractUpdateTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.adminKey = null;

            /**
             * ContractUpdateTransactionBody proxyAccountID.
             * @member {proto.IAccountID|null|undefined} proxyAccountID
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.proxyAccountID = null;

            /**
             * ContractUpdateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * ContractUpdateTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.fileID = null;

            /**
             * ContractUpdateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.memo = "";

            /**
             * ContractUpdateTransactionBody memoWrapper.
             * @member {google.protobuf.IStringValue|null|undefined} memoWrapper
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            ContractUpdateTransactionBody.prototype.memoWrapper = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * ContractUpdateTransactionBody memoField.
             * @member {"memo"|"memoWrapper"|undefined} memoField
             * @memberof proto.ContractUpdateTransactionBody
             * @instance
             */
            Object.defineProperty(ContractUpdateTransactionBody.prototype, "memoField", {
                get: $util.oneOfGetter($oneOfFields = ["memo", "memoWrapper"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ContractUpdateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ContractUpdateTransactionBody
             * @static
             * @param {proto.IContractUpdateTransactionBody=} [properties] Properties to set
             * @returns {proto.ContractUpdateTransactionBody} ContractUpdateTransactionBody instance
             */
            ContractUpdateTransactionBody.create = function create(properties) {
                return new ContractUpdateTransactionBody(properties);
            };

            /**
             * Encodes the specified ContractUpdateTransactionBody message. Does not implicitly {@link proto.ContractUpdateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractUpdateTransactionBody
             * @static
             * @param {proto.IContractUpdateTransactionBody} m ContractUpdateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractUpdateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(26).fork()).ldelim();
                if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, "proxyAccountID"))
                    $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(50).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(58).fork()).ldelim();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(66).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(74).string(m.memo);
                if (m.memoWrapper != null && Object.hasOwnProperty.call(m, "memoWrapper"))
                    $root.google.protobuf.StringValue.encode(m.memoWrapper, w.uint32(82).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractUpdateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractUpdateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractUpdateTransactionBody} ContractUpdateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractUpdateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractUpdateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 3:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 6:
                        m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 8:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 9:
                        m.memo = r.string();
                        break;
                    case 10:
                        m.memoWrapper = $root.google.protobuf.StringValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractUpdateTransactionBody;
        })();

        proto.CryptoCreateTransactionBody = (function() {

            /**
             * Properties of a CryptoCreateTransactionBody.
             * @memberof proto
             * @interface ICryptoCreateTransactionBody
             * @property {proto.IKey|null} [key] CryptoCreateTransactionBody key
             * @property {Long|null} [initialBalance] CryptoCreateTransactionBody initialBalance
             * @property {proto.IAccountID|null} [proxyAccountID] CryptoCreateTransactionBody proxyAccountID
             * @property {Long|null} [sendRecordThreshold] CryptoCreateTransactionBody sendRecordThreshold
             * @property {Long|null} [receiveRecordThreshold] CryptoCreateTransactionBody receiveRecordThreshold
             * @property {boolean|null} [receiverSigRequired] CryptoCreateTransactionBody receiverSigRequired
             * @property {proto.IDuration|null} [autoRenewPeriod] CryptoCreateTransactionBody autoRenewPeriod
             * @property {proto.IShardID|null} [shardID] CryptoCreateTransactionBody shardID
             * @property {proto.IRealmID|null} [realmID] CryptoCreateTransactionBody realmID
             * @property {proto.IKey|null} [newRealmAdminKey] CryptoCreateTransactionBody newRealmAdminKey
             * @property {string|null} [memo] CryptoCreateTransactionBody memo
             */

            /**
             * Constructs a new CryptoCreateTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoCreateTransactionBody.
             * @implements ICryptoCreateTransactionBody
             * @constructor
             * @param {proto.ICryptoCreateTransactionBody=} [p] Properties to set
             */
            function CryptoCreateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoCreateTransactionBody key.
             * @member {proto.IKey|null|undefined} key
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.key = null;

            /**
             * CryptoCreateTransactionBody initialBalance.
             * @member {Long} initialBalance
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.initialBalance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoCreateTransactionBody proxyAccountID.
             * @member {proto.IAccountID|null|undefined} proxyAccountID
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.proxyAccountID = null;

            /**
             * CryptoCreateTransactionBody sendRecordThreshold.
             * @member {Long} sendRecordThreshold
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.sendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoCreateTransactionBody receiveRecordThreshold.
             * @member {Long} receiveRecordThreshold
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.receiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoCreateTransactionBody receiverSigRequired.
             * @member {boolean} receiverSigRequired
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.receiverSigRequired = false;

            /**
             * CryptoCreateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * CryptoCreateTransactionBody shardID.
             * @member {proto.IShardID|null|undefined} shardID
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.shardID = null;

            /**
             * CryptoCreateTransactionBody realmID.
             * @member {proto.IRealmID|null|undefined} realmID
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.realmID = null;

            /**
             * CryptoCreateTransactionBody newRealmAdminKey.
             * @member {proto.IKey|null|undefined} newRealmAdminKey
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.newRealmAdminKey = null;

            /**
             * CryptoCreateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.CryptoCreateTransactionBody
             * @instance
             */
            CryptoCreateTransactionBody.prototype.memo = "";

            /**
             * Creates a new CryptoCreateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoCreateTransactionBody
             * @static
             * @param {proto.ICryptoCreateTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoCreateTransactionBody} CryptoCreateTransactionBody instance
             */
            CryptoCreateTransactionBody.create = function create(properties) {
                return new CryptoCreateTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoCreateTransactionBody message. Does not implicitly {@link proto.CryptoCreateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoCreateTransactionBody
             * @static
             * @param {proto.ICryptoCreateTransactionBody} m CryptoCreateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoCreateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    $root.proto.Key.encode(m.key, w.uint32(10).fork()).ldelim();
                if (m.initialBalance != null && Object.hasOwnProperty.call(m, "initialBalance"))
                    w.uint32(16).uint64(m.initialBalance);
                if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, "proxyAccountID"))
                    $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(26).fork()).ldelim();
                if (m.sendRecordThreshold != null && Object.hasOwnProperty.call(m, "sendRecordThreshold"))
                    w.uint32(48).uint64(m.sendRecordThreshold);
                if (m.receiveRecordThreshold != null && Object.hasOwnProperty.call(m, "receiveRecordThreshold"))
                    w.uint32(56).uint64(m.receiveRecordThreshold);
                if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, "receiverSigRequired"))
                    w.uint32(64).bool(m.receiverSigRequired);
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(74).fork()).ldelim();
                if (m.shardID != null && Object.hasOwnProperty.call(m, "shardID"))
                    $root.proto.ShardID.encode(m.shardID, w.uint32(82).fork()).ldelim();
                if (m.realmID != null && Object.hasOwnProperty.call(m, "realmID"))
                    $root.proto.RealmID.encode(m.realmID, w.uint32(90).fork()).ldelim();
                if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, "newRealmAdminKey"))
                    $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(98).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(106).string(m.memo);
                return w;
            };

            /**
             * Decodes a CryptoCreateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoCreateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoCreateTransactionBody} CryptoCreateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoCreateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoCreateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.key = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 2:
                        m.initialBalance = r.uint64();
                        break;
                    case 3:
                        m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 6:
                        m.sendRecordThreshold = r.uint64();
                        break;
                    case 7:
                        m.receiveRecordThreshold = r.uint64();
                        break;
                    case 8:
                        m.receiverSigRequired = r.bool();
                        break;
                    case 9:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 10:
                        m.shardID = $root.proto.ShardID.decode(r, r.uint32());
                        break;
                    case 11:
                        m.realmID = $root.proto.RealmID.decode(r, r.uint32());
                        break;
                    case 12:
                        m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 13:
                        m.memo = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoCreateTransactionBody;
        })();

        proto.CryptoDeleteTransactionBody = (function() {

            /**
             * Properties of a CryptoDeleteTransactionBody.
             * @memberof proto
             * @interface ICryptoDeleteTransactionBody
             * @property {proto.IAccountID|null} [transferAccountID] CryptoDeleteTransactionBody transferAccountID
             * @property {proto.IAccountID|null} [deleteAccountID] CryptoDeleteTransactionBody deleteAccountID
             */

            /**
             * Constructs a new CryptoDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoDeleteTransactionBody.
             * @implements ICryptoDeleteTransactionBody
             * @constructor
             * @param {proto.ICryptoDeleteTransactionBody=} [p] Properties to set
             */
            function CryptoDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoDeleteTransactionBody transferAccountID.
             * @member {proto.IAccountID|null|undefined} transferAccountID
             * @memberof proto.CryptoDeleteTransactionBody
             * @instance
             */
            CryptoDeleteTransactionBody.prototype.transferAccountID = null;

            /**
             * CryptoDeleteTransactionBody deleteAccountID.
             * @member {proto.IAccountID|null|undefined} deleteAccountID
             * @memberof proto.CryptoDeleteTransactionBody
             * @instance
             */
            CryptoDeleteTransactionBody.prototype.deleteAccountID = null;

            /**
             * Creates a new CryptoDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoDeleteTransactionBody
             * @static
             * @param {proto.ICryptoDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoDeleteTransactionBody} CryptoDeleteTransactionBody instance
             */
            CryptoDeleteTransactionBody.create = function create(properties) {
                return new CryptoDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoDeleteTransactionBody message. Does not implicitly {@link proto.CryptoDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoDeleteTransactionBody
             * @static
             * @param {proto.ICryptoDeleteTransactionBody} m CryptoDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transferAccountID != null && Object.hasOwnProperty.call(m, "transferAccountID"))
                    $root.proto.AccountID.encode(m.transferAccountID, w.uint32(10).fork()).ldelim();
                if (m.deleteAccountID != null && Object.hasOwnProperty.call(m, "deleteAccountID"))
                    $root.proto.AccountID.encode(m.deleteAccountID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoDeleteTransactionBody} CryptoDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transferAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.deleteAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoDeleteTransactionBody;
        })();

        proto.CryptoUpdateTransactionBody = (function() {

            /**
             * Properties of a CryptoUpdateTransactionBody.
             * @memberof proto
             * @interface ICryptoUpdateTransactionBody
             * @property {proto.IAccountID|null} [accountIDToUpdate] CryptoUpdateTransactionBody accountIDToUpdate
             * @property {proto.IKey|null} [key] CryptoUpdateTransactionBody key
             * @property {proto.IAccountID|null} [proxyAccountID] CryptoUpdateTransactionBody proxyAccountID
             * @property {number|null} [proxyFraction] CryptoUpdateTransactionBody proxyFraction
             * @property {Long|null} [sendRecordThreshold] CryptoUpdateTransactionBody sendRecordThreshold
             * @property {google.protobuf.IUInt64Value|null} [sendRecordThresholdWrapper] CryptoUpdateTransactionBody sendRecordThresholdWrapper
             * @property {Long|null} [receiveRecordThreshold] CryptoUpdateTransactionBody receiveRecordThreshold
             * @property {google.protobuf.IUInt64Value|null} [receiveRecordThresholdWrapper] CryptoUpdateTransactionBody receiveRecordThresholdWrapper
             * @property {proto.IDuration|null} [autoRenewPeriod] CryptoUpdateTransactionBody autoRenewPeriod
             * @property {proto.ITimestamp|null} [expirationTime] CryptoUpdateTransactionBody expirationTime
             * @property {boolean|null} [receiverSigRequired] CryptoUpdateTransactionBody receiverSigRequired
             * @property {google.protobuf.IBoolValue|null} [receiverSigRequiredWrapper] CryptoUpdateTransactionBody receiverSigRequiredWrapper
             * @property {google.protobuf.IStringValue|null} [memo] CryptoUpdateTransactionBody memo
             */

            /**
             * Constructs a new CryptoUpdateTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoUpdateTransactionBody.
             * @implements ICryptoUpdateTransactionBody
             * @constructor
             * @param {proto.ICryptoUpdateTransactionBody=} [p] Properties to set
             */
            function CryptoUpdateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoUpdateTransactionBody accountIDToUpdate.
             * @member {proto.IAccountID|null|undefined} accountIDToUpdate
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.accountIDToUpdate = null;

            /**
             * CryptoUpdateTransactionBody key.
             * @member {proto.IKey|null|undefined} key
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.key = null;

            /**
             * CryptoUpdateTransactionBody proxyAccountID.
             * @member {proto.IAccountID|null|undefined} proxyAccountID
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.proxyAccountID = null;

            /**
             * CryptoUpdateTransactionBody proxyFraction.
             * @member {number} proxyFraction
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.proxyFraction = 0;

            /**
             * CryptoUpdateTransactionBody sendRecordThreshold.
             * @member {Long} sendRecordThreshold
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.sendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoUpdateTransactionBody sendRecordThresholdWrapper.
             * @member {google.protobuf.IUInt64Value|null|undefined} sendRecordThresholdWrapper
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.sendRecordThresholdWrapper = null;

            /**
             * CryptoUpdateTransactionBody receiveRecordThreshold.
             * @member {Long} receiveRecordThreshold
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.receiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CryptoUpdateTransactionBody receiveRecordThresholdWrapper.
             * @member {google.protobuf.IUInt64Value|null|undefined} receiveRecordThresholdWrapper
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.receiveRecordThresholdWrapper = null;

            /**
             * CryptoUpdateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * CryptoUpdateTransactionBody expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.expirationTime = null;

            /**
             * CryptoUpdateTransactionBody receiverSigRequired.
             * @member {boolean} receiverSigRequired
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.receiverSigRequired = false;

            /**
             * CryptoUpdateTransactionBody receiverSigRequiredWrapper.
             * @member {google.protobuf.IBoolValue|null|undefined} receiverSigRequiredWrapper
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.receiverSigRequiredWrapper = null;

            /**
             * CryptoUpdateTransactionBody memo.
             * @member {google.protobuf.IStringValue|null|undefined} memo
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            CryptoUpdateTransactionBody.prototype.memo = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * CryptoUpdateTransactionBody sendRecordThresholdField.
             * @member {"sendRecordThreshold"|"sendRecordThresholdWrapper"|undefined} sendRecordThresholdField
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            Object.defineProperty(CryptoUpdateTransactionBody.prototype, "sendRecordThresholdField", {
                get: $util.oneOfGetter($oneOfFields = ["sendRecordThreshold", "sendRecordThresholdWrapper"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * CryptoUpdateTransactionBody receiveRecordThresholdField.
             * @member {"receiveRecordThreshold"|"receiveRecordThresholdWrapper"|undefined} receiveRecordThresholdField
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            Object.defineProperty(CryptoUpdateTransactionBody.prototype, "receiveRecordThresholdField", {
                get: $util.oneOfGetter($oneOfFields = ["receiveRecordThreshold", "receiveRecordThresholdWrapper"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * CryptoUpdateTransactionBody receiverSigRequiredField.
             * @member {"receiverSigRequired"|"receiverSigRequiredWrapper"|undefined} receiverSigRequiredField
             * @memberof proto.CryptoUpdateTransactionBody
             * @instance
             */
            Object.defineProperty(CryptoUpdateTransactionBody.prototype, "receiverSigRequiredField", {
                get: $util.oneOfGetter($oneOfFields = ["receiverSigRequired", "receiverSigRequiredWrapper"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CryptoUpdateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoUpdateTransactionBody
             * @static
             * @param {proto.ICryptoUpdateTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoUpdateTransactionBody} CryptoUpdateTransactionBody instance
             */
            CryptoUpdateTransactionBody.create = function create(properties) {
                return new CryptoUpdateTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoUpdateTransactionBody message. Does not implicitly {@link proto.CryptoUpdateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoUpdateTransactionBody
             * @static
             * @param {proto.ICryptoUpdateTransactionBody} m CryptoUpdateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoUpdateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountIDToUpdate != null && Object.hasOwnProperty.call(m, "accountIDToUpdate"))
                    $root.proto.AccountID.encode(m.accountIDToUpdate, w.uint32(18).fork()).ldelim();
                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
                    $root.proto.Key.encode(m.key, w.uint32(26).fork()).ldelim();
                if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, "proxyAccountID"))
                    $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(34).fork()).ldelim();
                if (m.proxyFraction != null && Object.hasOwnProperty.call(m, "proxyFraction"))
                    w.uint32(40).int32(m.proxyFraction);
                if (m.sendRecordThreshold != null && Object.hasOwnProperty.call(m, "sendRecordThreshold"))
                    w.uint32(48).uint64(m.sendRecordThreshold);
                if (m.receiveRecordThreshold != null && Object.hasOwnProperty.call(m, "receiveRecordThreshold"))
                    w.uint32(56).uint64(m.receiveRecordThreshold);
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(74).fork()).ldelim();
                if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, "receiverSigRequired"))
                    w.uint32(80).bool(m.receiverSigRequired);
                if (m.sendRecordThresholdWrapper != null && Object.hasOwnProperty.call(m, "sendRecordThresholdWrapper"))
                    $root.google.protobuf.UInt64Value.encode(m.sendRecordThresholdWrapper, w.uint32(90).fork()).ldelim();
                if (m.receiveRecordThresholdWrapper != null && Object.hasOwnProperty.call(m, "receiveRecordThresholdWrapper"))
                    $root.google.protobuf.UInt64Value.encode(m.receiveRecordThresholdWrapper, w.uint32(98).fork()).ldelim();
                if (m.receiverSigRequiredWrapper != null && Object.hasOwnProperty.call(m, "receiverSigRequiredWrapper"))
                    $root.google.protobuf.BoolValue.encode(m.receiverSigRequiredWrapper, w.uint32(106).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    $root.google.protobuf.StringValue.encode(m.memo, w.uint32(114).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoUpdateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoUpdateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoUpdateTransactionBody} CryptoUpdateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoUpdateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoUpdateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        m.accountIDToUpdate = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.key = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 4:
                        m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 5:
                        m.proxyFraction = r.int32();
                        break;
                    case 6:
                        m.sendRecordThreshold = r.uint64();
                        break;
                    case 11:
                        m.sendRecordThresholdWrapper = $root.google.protobuf.UInt64Value.decode(r, r.uint32());
                        break;
                    case 7:
                        m.receiveRecordThreshold = r.uint64();
                        break;
                    case 12:
                        m.receiveRecordThresholdWrapper = $root.google.protobuf.UInt64Value.decode(r, r.uint32());
                        break;
                    case 8:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 9:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 10:
                        m.receiverSigRequired = r.bool();
                        break;
                    case 13:
                        m.receiverSigRequiredWrapper = $root.google.protobuf.BoolValue.decode(r, r.uint32());
                        break;
                    case 14:
                        m.memo = $root.google.protobuf.StringValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoUpdateTransactionBody;
        })();

        proto.FileAppendTransactionBody = (function() {

            /**
             * Properties of a FileAppendTransactionBody.
             * @memberof proto
             * @interface IFileAppendTransactionBody
             * @property {proto.IFileID|null} [fileID] FileAppendTransactionBody fileID
             * @property {Uint8Array|null} [contents] FileAppendTransactionBody contents
             */

            /**
             * Constructs a new FileAppendTransactionBody.
             * @memberof proto
             * @classdesc Represents a FileAppendTransactionBody.
             * @implements IFileAppendTransactionBody
             * @constructor
             * @param {proto.IFileAppendTransactionBody=} [p] Properties to set
             */
            function FileAppendTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileAppendTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.FileAppendTransactionBody
             * @instance
             */
            FileAppendTransactionBody.prototype.fileID = null;

            /**
             * FileAppendTransactionBody contents.
             * @member {Uint8Array} contents
             * @memberof proto.FileAppendTransactionBody
             * @instance
             */
            FileAppendTransactionBody.prototype.contents = $util.newBuffer([]);

            /**
             * Creates a new FileAppendTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.FileAppendTransactionBody
             * @static
             * @param {proto.IFileAppendTransactionBody=} [properties] Properties to set
             * @returns {proto.FileAppendTransactionBody} FileAppendTransactionBody instance
             */
            FileAppendTransactionBody.create = function create(properties) {
                return new FileAppendTransactionBody(properties);
            };

            /**
             * Encodes the specified FileAppendTransactionBody message. Does not implicitly {@link proto.FileAppendTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.FileAppendTransactionBody
             * @static
             * @param {proto.IFileAppendTransactionBody} m FileAppendTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileAppendTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();
                if (m.contents != null && Object.hasOwnProperty.call(m, "contents"))
                    w.uint32(34).bytes(m.contents);
                return w;
            };

            /**
             * Decodes a FileAppendTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileAppendTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileAppendTransactionBody} FileAppendTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileAppendTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileAppendTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contents = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileAppendTransactionBody;
        })();

        proto.FileCreateTransactionBody = (function() {

            /**
             * Properties of a FileCreateTransactionBody.
             * @memberof proto
             * @interface IFileCreateTransactionBody
             * @property {proto.ITimestamp|null} [expirationTime] FileCreateTransactionBody expirationTime
             * @property {proto.IKeyList|null} [keys] FileCreateTransactionBody keys
             * @property {Uint8Array|null} [contents] FileCreateTransactionBody contents
             * @property {proto.IShardID|null} [shardID] FileCreateTransactionBody shardID
             * @property {proto.IRealmID|null} [realmID] FileCreateTransactionBody realmID
             * @property {proto.IKey|null} [newRealmAdminKey] FileCreateTransactionBody newRealmAdminKey
             * @property {string|null} [memo] FileCreateTransactionBody memo
             */

            /**
             * Constructs a new FileCreateTransactionBody.
             * @memberof proto
             * @classdesc Represents a FileCreateTransactionBody.
             * @implements IFileCreateTransactionBody
             * @constructor
             * @param {proto.IFileCreateTransactionBody=} [p] Properties to set
             */
            function FileCreateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileCreateTransactionBody expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.expirationTime = null;

            /**
             * FileCreateTransactionBody keys.
             * @member {proto.IKeyList|null|undefined} keys
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.keys = null;

            /**
             * FileCreateTransactionBody contents.
             * @member {Uint8Array} contents
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.contents = $util.newBuffer([]);

            /**
             * FileCreateTransactionBody shardID.
             * @member {proto.IShardID|null|undefined} shardID
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.shardID = null;

            /**
             * FileCreateTransactionBody realmID.
             * @member {proto.IRealmID|null|undefined} realmID
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.realmID = null;

            /**
             * FileCreateTransactionBody newRealmAdminKey.
             * @member {proto.IKey|null|undefined} newRealmAdminKey
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.newRealmAdminKey = null;

            /**
             * FileCreateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.FileCreateTransactionBody
             * @instance
             */
            FileCreateTransactionBody.prototype.memo = "";

            /**
             * Creates a new FileCreateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.FileCreateTransactionBody
             * @static
             * @param {proto.IFileCreateTransactionBody=} [properties] Properties to set
             * @returns {proto.FileCreateTransactionBody} FileCreateTransactionBody instance
             */
            FileCreateTransactionBody.create = function create(properties) {
                return new FileCreateTransactionBody(properties);
            };

            /**
             * Encodes the specified FileCreateTransactionBody message. Does not implicitly {@link proto.FileCreateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.FileCreateTransactionBody
             * @static
             * @param {proto.IFileCreateTransactionBody} m FileCreateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileCreateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();
                if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                    $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();
                if (m.contents != null && Object.hasOwnProperty.call(m, "contents"))
                    w.uint32(34).bytes(m.contents);
                if (m.shardID != null && Object.hasOwnProperty.call(m, "shardID"))
                    $root.proto.ShardID.encode(m.shardID, w.uint32(42).fork()).ldelim();
                if (m.realmID != null && Object.hasOwnProperty.call(m, "realmID"))
                    $root.proto.RealmID.encode(m.realmID, w.uint32(50).fork()).ldelim();
                if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, "newRealmAdminKey"))
                    $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(58).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(66).string(m.memo);
                return w;
            };

            /**
             * Decodes a FileCreateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileCreateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileCreateTransactionBody} FileCreateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileCreateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileCreateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 3:
                        m.keys = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contents = r.bytes();
                        break;
                    case 5:
                        m.shardID = $root.proto.ShardID.decode(r, r.uint32());
                        break;
                    case 6:
                        m.realmID = $root.proto.RealmID.decode(r, r.uint32());
                        break;
                    case 7:
                        m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.memo = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileCreateTransactionBody;
        })();

        proto.FileDeleteTransactionBody = (function() {

            /**
             * Properties of a FileDeleteTransactionBody.
             * @memberof proto
             * @interface IFileDeleteTransactionBody
             * @property {proto.IFileID|null} [fileID] FileDeleteTransactionBody fileID
             */

            /**
             * Constructs a new FileDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a FileDeleteTransactionBody.
             * @implements IFileDeleteTransactionBody
             * @constructor
             * @param {proto.IFileDeleteTransactionBody=} [p] Properties to set
             */
            function FileDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileDeleteTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.FileDeleteTransactionBody
             * @instance
             */
            FileDeleteTransactionBody.prototype.fileID = null;

            /**
             * Creates a new FileDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.FileDeleteTransactionBody
             * @static
             * @param {proto.IFileDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.FileDeleteTransactionBody} FileDeleteTransactionBody instance
             */
            FileDeleteTransactionBody.create = function create(properties) {
                return new FileDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified FileDeleteTransactionBody message. Does not implicitly {@link proto.FileDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.FileDeleteTransactionBody
             * @static
             * @param {proto.IFileDeleteTransactionBody} m FileDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileDeleteTransactionBody} FileDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 2:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileDeleteTransactionBody;
        })();

        proto.FileUpdateTransactionBody = (function() {

            /**
             * Properties of a FileUpdateTransactionBody.
             * @memberof proto
             * @interface IFileUpdateTransactionBody
             * @property {proto.IFileID|null} [fileID] FileUpdateTransactionBody fileID
             * @property {proto.ITimestamp|null} [expirationTime] FileUpdateTransactionBody expirationTime
             * @property {proto.IKeyList|null} [keys] FileUpdateTransactionBody keys
             * @property {Uint8Array|null} [contents] FileUpdateTransactionBody contents
             * @property {google.protobuf.IStringValue|null} [memo] FileUpdateTransactionBody memo
             */

            /**
             * Constructs a new FileUpdateTransactionBody.
             * @memberof proto
             * @classdesc Represents a FileUpdateTransactionBody.
             * @implements IFileUpdateTransactionBody
             * @constructor
             * @param {proto.IFileUpdateTransactionBody=} [p] Properties to set
             */
            function FileUpdateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FileUpdateTransactionBody fileID.
             * @member {proto.IFileID|null|undefined} fileID
             * @memberof proto.FileUpdateTransactionBody
             * @instance
             */
            FileUpdateTransactionBody.prototype.fileID = null;

            /**
             * FileUpdateTransactionBody expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.FileUpdateTransactionBody
             * @instance
             */
            FileUpdateTransactionBody.prototype.expirationTime = null;

            /**
             * FileUpdateTransactionBody keys.
             * @member {proto.IKeyList|null|undefined} keys
             * @memberof proto.FileUpdateTransactionBody
             * @instance
             */
            FileUpdateTransactionBody.prototype.keys = null;

            /**
             * FileUpdateTransactionBody contents.
             * @member {Uint8Array} contents
             * @memberof proto.FileUpdateTransactionBody
             * @instance
             */
            FileUpdateTransactionBody.prototype.contents = $util.newBuffer([]);

            /**
             * FileUpdateTransactionBody memo.
             * @member {google.protobuf.IStringValue|null|undefined} memo
             * @memberof proto.FileUpdateTransactionBody
             * @instance
             */
            FileUpdateTransactionBody.prototype.memo = null;

            /**
             * Creates a new FileUpdateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.FileUpdateTransactionBody
             * @static
             * @param {proto.IFileUpdateTransactionBody=} [properties] Properties to set
             * @returns {proto.FileUpdateTransactionBody} FileUpdateTransactionBody instance
             */
            FileUpdateTransactionBody.create = function create(properties) {
                return new FileUpdateTransactionBody(properties);
            };

            /**
             * Encodes the specified FileUpdateTransactionBody message. Does not implicitly {@link proto.FileUpdateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.FileUpdateTransactionBody
             * @static
             * @param {proto.IFileUpdateTransactionBody} m FileUpdateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileUpdateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.fileID != null && Object.hasOwnProperty.call(m, "fileID"))
                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();
                if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                    $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();
                if (m.contents != null && Object.hasOwnProperty.call(m, "contents"))
                    w.uint32(34).bytes(m.contents);
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    $root.google.protobuf.StringValue.encode(m.memo, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a FileUpdateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FileUpdateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FileUpdateTransactionBody} FileUpdateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileUpdateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileUpdateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.fileID = $root.proto.FileID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 3:
                        m.keys = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contents = r.bytes();
                        break;
                    case 5:
                        m.memo = $root.google.protobuf.StringValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FileUpdateTransactionBody;
        })();

        proto.ContractDeleteTransactionBody = (function() {

            /**
             * Properties of a ContractDeleteTransactionBody.
             * @memberof proto
             * @interface IContractDeleteTransactionBody
             * @property {proto.IContractID|null} [contractID] ContractDeleteTransactionBody contractID
             * @property {proto.IAccountID|null} [transferAccountID] ContractDeleteTransactionBody transferAccountID
             * @property {proto.IContractID|null} [transferContractID] ContractDeleteTransactionBody transferContractID
             */

            /**
             * Constructs a new ContractDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a ContractDeleteTransactionBody.
             * @implements IContractDeleteTransactionBody
             * @constructor
             * @param {proto.IContractDeleteTransactionBody=} [p] Properties to set
             */
            function ContractDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ContractDeleteTransactionBody contractID.
             * @member {proto.IContractID|null|undefined} contractID
             * @memberof proto.ContractDeleteTransactionBody
             * @instance
             */
            ContractDeleteTransactionBody.prototype.contractID = null;

            /**
             * ContractDeleteTransactionBody transferAccountID.
             * @member {proto.IAccountID|null|undefined} transferAccountID
             * @memberof proto.ContractDeleteTransactionBody
             * @instance
             */
            ContractDeleteTransactionBody.prototype.transferAccountID = null;

            /**
             * ContractDeleteTransactionBody transferContractID.
             * @member {proto.IContractID|null|undefined} transferContractID
             * @memberof proto.ContractDeleteTransactionBody
             * @instance
             */
            ContractDeleteTransactionBody.prototype.transferContractID = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * ContractDeleteTransactionBody obtainers.
             * @member {"transferAccountID"|"transferContractID"|undefined} obtainers
             * @memberof proto.ContractDeleteTransactionBody
             * @instance
             */
            Object.defineProperty(ContractDeleteTransactionBody.prototype, "obtainers", {
                get: $util.oneOfGetter($oneOfFields = ["transferAccountID", "transferContractID"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ContractDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ContractDeleteTransactionBody
             * @static
             * @param {proto.IContractDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.ContractDeleteTransactionBody} ContractDeleteTransactionBody instance
             */
            ContractDeleteTransactionBody.create = function create(properties) {
                return new ContractDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified ContractDeleteTransactionBody message. Does not implicitly {@link proto.ContractDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ContractDeleteTransactionBody
             * @static
             * @param {proto.IContractDeleteTransactionBody} m ContractDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContractDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.contractID != null && Object.hasOwnProperty.call(m, "contractID"))
                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();
                if (m.transferAccountID != null && Object.hasOwnProperty.call(m, "transferAccountID"))
                    $root.proto.AccountID.encode(m.transferAccountID, w.uint32(18).fork()).ldelim();
                if (m.transferContractID != null && Object.hasOwnProperty.call(m, "transferContractID"))
                    $root.proto.ContractID.encode(m.transferContractID, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ContractDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ContractDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ContractDeleteTransactionBody} ContractDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContractDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.transferAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.transferContractID = $root.proto.ContractID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ContractDeleteTransactionBody;
        })();

        proto.ConsensusUpdateTopicTransactionBody = (function() {

            /**
             * Properties of a ConsensusUpdateTopicTransactionBody.
             * @memberof proto
             * @interface IConsensusUpdateTopicTransactionBody
             * @property {proto.ITopicID|null} [topicID] ConsensusUpdateTopicTransactionBody topicID
             * @property {google.protobuf.IStringValue|null} [memo] ConsensusUpdateTopicTransactionBody memo
             * @property {proto.ITimestamp|null} [expirationTime] ConsensusUpdateTopicTransactionBody expirationTime
             * @property {proto.IKey|null} [adminKey] ConsensusUpdateTopicTransactionBody adminKey
             * @property {proto.IKey|null} [submitKey] ConsensusUpdateTopicTransactionBody submitKey
             * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusUpdateTopicTransactionBody autoRenewPeriod
             * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusUpdateTopicTransactionBody autoRenewAccount
             */

            /**
             * Constructs a new ConsensusUpdateTopicTransactionBody.
             * @memberof proto
             * @classdesc Represents a ConsensusUpdateTopicTransactionBody.
             * @implements IConsensusUpdateTopicTransactionBody
             * @constructor
             * @param {proto.IConsensusUpdateTopicTransactionBody=} [p] Properties to set
             */
            function ConsensusUpdateTopicTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusUpdateTopicTransactionBody topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.topicID = null;

            /**
             * ConsensusUpdateTopicTransactionBody memo.
             * @member {google.protobuf.IStringValue|null|undefined} memo
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.memo = null;

            /**
             * ConsensusUpdateTopicTransactionBody expirationTime.
             * @member {proto.ITimestamp|null|undefined} expirationTime
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.expirationTime = null;

            /**
             * ConsensusUpdateTopicTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.adminKey = null;

            /**
             * ConsensusUpdateTopicTransactionBody submitKey.
             * @member {proto.IKey|null|undefined} submitKey
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.submitKey = null;

            /**
             * ConsensusUpdateTopicTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * ConsensusUpdateTopicTransactionBody autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @instance
             */
            ConsensusUpdateTopicTransactionBody.prototype.autoRenewAccount = null;

            /**
             * Creates a new ConsensusUpdateTopicTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @static
             * @param {proto.IConsensusUpdateTopicTransactionBody=} [properties] Properties to set
             * @returns {proto.ConsensusUpdateTopicTransactionBody} ConsensusUpdateTopicTransactionBody instance
             */
            ConsensusUpdateTopicTransactionBody.create = function create(properties) {
                return new ConsensusUpdateTopicTransactionBody(properties);
            };

            /**
             * Encodes the specified ConsensusUpdateTopicTransactionBody message. Does not implicitly {@link proto.ConsensusUpdateTopicTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @static
             * @param {proto.IConsensusUpdateTopicTransactionBody} m ConsensusUpdateTopicTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusUpdateTopicTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    $root.google.protobuf.StringValue.encode(m.memo, w.uint32(18).fork()).ldelim();
                if (m.expirationTime != null && Object.hasOwnProperty.call(m, "expirationTime"))
                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(34).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(50).fork()).ldelim();
                if (m.submitKey != null && Object.hasOwnProperty.call(m, "submitKey"))
                    $root.proto.Key.encode(m.submitKey, w.uint32(58).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(74).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusUpdateTopicTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusUpdateTopicTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusUpdateTopicTransactionBody} ConsensusUpdateTopicTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusUpdateTopicTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusUpdateTopicTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.memo = $root.google.protobuf.StringValue.decode(r, r.uint32());
                        break;
                    case 4:
                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 6:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 7:
                        m.submitKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 9:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusUpdateTopicTransactionBody;
        })();

        proto.ConsensusMessageChunkInfo = (function() {

            /**
             * Properties of a ConsensusMessageChunkInfo.
             * @memberof proto
             * @interface IConsensusMessageChunkInfo
             * @property {proto.ITransactionID|null} [initialTransactionID] ConsensusMessageChunkInfo initialTransactionID
             * @property {number|null} [total] ConsensusMessageChunkInfo total
             * @property {number|null} [number] ConsensusMessageChunkInfo number
             */

            /**
             * Constructs a new ConsensusMessageChunkInfo.
             * @memberof proto
             * @classdesc Represents a ConsensusMessageChunkInfo.
             * @implements IConsensusMessageChunkInfo
             * @constructor
             * @param {proto.IConsensusMessageChunkInfo=} [p] Properties to set
             */
            function ConsensusMessageChunkInfo(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusMessageChunkInfo initialTransactionID.
             * @member {proto.ITransactionID|null|undefined} initialTransactionID
             * @memberof proto.ConsensusMessageChunkInfo
             * @instance
             */
            ConsensusMessageChunkInfo.prototype.initialTransactionID = null;

            /**
             * ConsensusMessageChunkInfo total.
             * @member {number} total
             * @memberof proto.ConsensusMessageChunkInfo
             * @instance
             */
            ConsensusMessageChunkInfo.prototype.total = 0;

            /**
             * ConsensusMessageChunkInfo number.
             * @member {number} number
             * @memberof proto.ConsensusMessageChunkInfo
             * @instance
             */
            ConsensusMessageChunkInfo.prototype.number = 0;

            /**
             * Creates a new ConsensusMessageChunkInfo instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusMessageChunkInfo
             * @static
             * @param {proto.IConsensusMessageChunkInfo=} [properties] Properties to set
             * @returns {proto.ConsensusMessageChunkInfo} ConsensusMessageChunkInfo instance
             */
            ConsensusMessageChunkInfo.create = function create(properties) {
                return new ConsensusMessageChunkInfo(properties);
            };

            /**
             * Encodes the specified ConsensusMessageChunkInfo message. Does not implicitly {@link proto.ConsensusMessageChunkInfo.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusMessageChunkInfo
             * @static
             * @param {proto.IConsensusMessageChunkInfo} m ConsensusMessageChunkInfo message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusMessageChunkInfo.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.initialTransactionID != null && Object.hasOwnProperty.call(m, "initialTransactionID"))
                    $root.proto.TransactionID.encode(m.initialTransactionID, w.uint32(10).fork()).ldelim();
                if (m.total != null && Object.hasOwnProperty.call(m, "total"))
                    w.uint32(16).int32(m.total);
                if (m.number != null && Object.hasOwnProperty.call(m, "number"))
                    w.uint32(24).int32(m.number);
                return w;
            };

            /**
             * Decodes a ConsensusMessageChunkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusMessageChunkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusMessageChunkInfo} ConsensusMessageChunkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusMessageChunkInfo.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusMessageChunkInfo();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.initialTransactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.total = r.int32();
                        break;
                    case 3:
                        m.number = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusMessageChunkInfo;
        })();

        proto.ConsensusSubmitMessageTransactionBody = (function() {

            /**
             * Properties of a ConsensusSubmitMessageTransactionBody.
             * @memberof proto
             * @interface IConsensusSubmitMessageTransactionBody
             * @property {proto.ITopicID|null} [topicID] ConsensusSubmitMessageTransactionBody topicID
             * @property {Uint8Array|null} [message] ConsensusSubmitMessageTransactionBody message
             * @property {proto.IConsensusMessageChunkInfo|null} [chunkInfo] ConsensusSubmitMessageTransactionBody chunkInfo
             */

            /**
             * Constructs a new ConsensusSubmitMessageTransactionBody.
             * @memberof proto
             * @classdesc Represents a ConsensusSubmitMessageTransactionBody.
             * @implements IConsensusSubmitMessageTransactionBody
             * @constructor
             * @param {proto.IConsensusSubmitMessageTransactionBody=} [p] Properties to set
             */
            function ConsensusSubmitMessageTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusSubmitMessageTransactionBody topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @instance
             */
            ConsensusSubmitMessageTransactionBody.prototype.topicID = null;

            /**
             * ConsensusSubmitMessageTransactionBody message.
             * @member {Uint8Array} message
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @instance
             */
            ConsensusSubmitMessageTransactionBody.prototype.message = $util.newBuffer([]);

            /**
             * ConsensusSubmitMessageTransactionBody chunkInfo.
             * @member {proto.IConsensusMessageChunkInfo|null|undefined} chunkInfo
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @instance
             */
            ConsensusSubmitMessageTransactionBody.prototype.chunkInfo = null;

            /**
             * Creates a new ConsensusSubmitMessageTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @static
             * @param {proto.IConsensusSubmitMessageTransactionBody=} [properties] Properties to set
             * @returns {proto.ConsensusSubmitMessageTransactionBody} ConsensusSubmitMessageTransactionBody instance
             */
            ConsensusSubmitMessageTransactionBody.create = function create(properties) {
                return new ConsensusSubmitMessageTransactionBody(properties);
            };

            /**
             * Encodes the specified ConsensusSubmitMessageTransactionBody message. Does not implicitly {@link proto.ConsensusSubmitMessageTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @static
             * @param {proto.IConsensusSubmitMessageTransactionBody} m ConsensusSubmitMessageTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusSubmitMessageTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();
                if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                    w.uint32(18).bytes(m.message);
                if (m.chunkInfo != null && Object.hasOwnProperty.call(m, "chunkInfo"))
                    $root.proto.ConsensusMessageChunkInfo.encode(m.chunkInfo, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusSubmitMessageTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusSubmitMessageTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusSubmitMessageTransactionBody} ConsensusSubmitMessageTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusSubmitMessageTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusSubmitMessageTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.message = r.bytes();
                        break;
                    case 3:
                        m.chunkInfo = $root.proto.ConsensusMessageChunkInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusSubmitMessageTransactionBody;
        })();

        proto.TokenCreateTransactionBody = (function() {

            /**
             * Properties of a TokenCreateTransactionBody.
             * @memberof proto
             * @interface ITokenCreateTransactionBody
             * @property {string|null} [name] TokenCreateTransactionBody name
             * @property {string|null} [symbol] TokenCreateTransactionBody symbol
             * @property {number|null} [decimals] TokenCreateTransactionBody decimals
             * @property {Long|null} [initialSupply] TokenCreateTransactionBody initialSupply
             * @property {proto.IAccountID|null} [treasury] TokenCreateTransactionBody treasury
             * @property {proto.IKey|null} [adminKey] TokenCreateTransactionBody adminKey
             * @property {proto.IKey|null} [kycKey] TokenCreateTransactionBody kycKey
             * @property {proto.IKey|null} [freezeKey] TokenCreateTransactionBody freezeKey
             * @property {proto.IKey|null} [wipeKey] TokenCreateTransactionBody wipeKey
             * @property {proto.IKey|null} [supplyKey] TokenCreateTransactionBody supplyKey
             * @property {boolean|null} [freezeDefault] TokenCreateTransactionBody freezeDefault
             * @property {proto.ITimestamp|null} [expiry] TokenCreateTransactionBody expiry
             * @property {proto.IAccountID|null} [autoRenewAccount] TokenCreateTransactionBody autoRenewAccount
             * @property {proto.IDuration|null} [autoRenewPeriod] TokenCreateTransactionBody autoRenewPeriod
             * @property {string|null} [memo] TokenCreateTransactionBody memo
             */

            /**
             * Constructs a new TokenCreateTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenCreateTransactionBody.
             * @implements ITokenCreateTransactionBody
             * @constructor
             * @param {proto.ITokenCreateTransactionBody=} [p] Properties to set
             */
            function TokenCreateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenCreateTransactionBody name.
             * @member {string} name
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.name = "";

            /**
             * TokenCreateTransactionBody symbol.
             * @member {string} symbol
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.symbol = "";

            /**
             * TokenCreateTransactionBody decimals.
             * @member {number} decimals
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.decimals = 0;

            /**
             * TokenCreateTransactionBody initialSupply.
             * @member {Long} initialSupply
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.initialSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TokenCreateTransactionBody treasury.
             * @member {proto.IAccountID|null|undefined} treasury
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.treasury = null;

            /**
             * TokenCreateTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.adminKey = null;

            /**
             * TokenCreateTransactionBody kycKey.
             * @member {proto.IKey|null|undefined} kycKey
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.kycKey = null;

            /**
             * TokenCreateTransactionBody freezeKey.
             * @member {proto.IKey|null|undefined} freezeKey
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.freezeKey = null;

            /**
             * TokenCreateTransactionBody wipeKey.
             * @member {proto.IKey|null|undefined} wipeKey
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.wipeKey = null;

            /**
             * TokenCreateTransactionBody supplyKey.
             * @member {proto.IKey|null|undefined} supplyKey
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.supplyKey = null;

            /**
             * TokenCreateTransactionBody freezeDefault.
             * @member {boolean} freezeDefault
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.freezeDefault = false;

            /**
             * TokenCreateTransactionBody expiry.
             * @member {proto.ITimestamp|null|undefined} expiry
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.expiry = null;

            /**
             * TokenCreateTransactionBody autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.autoRenewAccount = null;

            /**
             * TokenCreateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * TokenCreateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.TokenCreateTransactionBody
             * @instance
             */
            TokenCreateTransactionBody.prototype.memo = "";

            /**
             * Creates a new TokenCreateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenCreateTransactionBody
             * @static
             * @param {proto.ITokenCreateTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenCreateTransactionBody} TokenCreateTransactionBody instance
             */
            TokenCreateTransactionBody.create = function create(properties) {
                return new TokenCreateTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenCreateTransactionBody message. Does not implicitly {@link proto.TokenCreateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenCreateTransactionBody
             * @static
             * @param {proto.ITokenCreateTransactionBody} m TokenCreateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenCreateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.symbol != null && Object.hasOwnProperty.call(m, "symbol"))
                    w.uint32(18).string(m.symbol);
                if (m.decimals != null && Object.hasOwnProperty.call(m, "decimals"))
                    w.uint32(24).uint32(m.decimals);
                if (m.initialSupply != null && Object.hasOwnProperty.call(m, "initialSupply"))
                    w.uint32(32).uint64(m.initialSupply);
                if (m.treasury != null && Object.hasOwnProperty.call(m, "treasury"))
                    $root.proto.AccountID.encode(m.treasury, w.uint32(42).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(50).fork()).ldelim();
                if (m.kycKey != null && Object.hasOwnProperty.call(m, "kycKey"))
                    $root.proto.Key.encode(m.kycKey, w.uint32(58).fork()).ldelim();
                if (m.freezeKey != null && Object.hasOwnProperty.call(m, "freezeKey"))
                    $root.proto.Key.encode(m.freezeKey, w.uint32(66).fork()).ldelim();
                if (m.wipeKey != null && Object.hasOwnProperty.call(m, "wipeKey"))
                    $root.proto.Key.encode(m.wipeKey, w.uint32(74).fork()).ldelim();
                if (m.supplyKey != null && Object.hasOwnProperty.call(m, "supplyKey"))
                    $root.proto.Key.encode(m.supplyKey, w.uint32(82).fork()).ldelim();
                if (m.freezeDefault != null && Object.hasOwnProperty.call(m, "freezeDefault"))
                    w.uint32(88).bool(m.freezeDefault);
                if (m.expiry != null && Object.hasOwnProperty.call(m, "expiry"))
                    $root.proto.Timestamp.encode(m.expiry, w.uint32(106).fork()).ldelim();
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(114).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(122).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(130).string(m.memo);
                return w;
            };

            /**
             * Decodes a TokenCreateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenCreateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenCreateTransactionBody} TokenCreateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenCreateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenCreateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        m.symbol = r.string();
                        break;
                    case 3:
                        m.decimals = r.uint32();
                        break;
                    case 4:
                        m.initialSupply = r.uint64();
                        break;
                    case 5:
                        m.treasury = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 6:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 7:
                        m.kycKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.freezeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 9:
                        m.wipeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 10:
                        m.supplyKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 11:
                        m.freezeDefault = r.bool();
                        break;
                    case 13:
                        m.expiry = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 14:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 15:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 16:
                        m.memo = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenCreateTransactionBody;
        })();

        proto.TokenFreezeAccountTransactionBody = (function() {

            /**
             * Properties of a TokenFreezeAccountTransactionBody.
             * @memberof proto
             * @interface ITokenFreezeAccountTransactionBody
             * @property {proto.ITokenID|null} [token] TokenFreezeAccountTransactionBody token
             * @property {proto.IAccountID|null} [account] TokenFreezeAccountTransactionBody account
             */

            /**
             * Constructs a new TokenFreezeAccountTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenFreezeAccountTransactionBody.
             * @implements ITokenFreezeAccountTransactionBody
             * @constructor
             * @param {proto.ITokenFreezeAccountTransactionBody=} [p] Properties to set
             */
            function TokenFreezeAccountTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenFreezeAccountTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenFreezeAccountTransactionBody
             * @instance
             */
            TokenFreezeAccountTransactionBody.prototype.token = null;

            /**
             * TokenFreezeAccountTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenFreezeAccountTransactionBody
             * @instance
             */
            TokenFreezeAccountTransactionBody.prototype.account = null;

            /**
             * Creates a new TokenFreezeAccountTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenFreezeAccountTransactionBody
             * @static
             * @param {proto.ITokenFreezeAccountTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenFreezeAccountTransactionBody} TokenFreezeAccountTransactionBody instance
             */
            TokenFreezeAccountTransactionBody.create = function create(properties) {
                return new TokenFreezeAccountTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenFreezeAccountTransactionBody message. Does not implicitly {@link proto.TokenFreezeAccountTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenFreezeAccountTransactionBody
             * @static
             * @param {proto.ITokenFreezeAccountTransactionBody} m TokenFreezeAccountTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenFreezeAccountTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenFreezeAccountTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenFreezeAccountTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenFreezeAccountTransactionBody} TokenFreezeAccountTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenFreezeAccountTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenFreezeAccountTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenFreezeAccountTransactionBody;
        })();

        proto.TokenUnfreezeAccountTransactionBody = (function() {

            /**
             * Properties of a TokenUnfreezeAccountTransactionBody.
             * @memberof proto
             * @interface ITokenUnfreezeAccountTransactionBody
             * @property {proto.ITokenID|null} [token] TokenUnfreezeAccountTransactionBody token
             * @property {proto.IAccountID|null} [account] TokenUnfreezeAccountTransactionBody account
             */

            /**
             * Constructs a new TokenUnfreezeAccountTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenUnfreezeAccountTransactionBody.
             * @implements ITokenUnfreezeAccountTransactionBody
             * @constructor
             * @param {proto.ITokenUnfreezeAccountTransactionBody=} [p] Properties to set
             */
            function TokenUnfreezeAccountTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenUnfreezeAccountTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenUnfreezeAccountTransactionBody
             * @instance
             */
            TokenUnfreezeAccountTransactionBody.prototype.token = null;

            /**
             * TokenUnfreezeAccountTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenUnfreezeAccountTransactionBody
             * @instance
             */
            TokenUnfreezeAccountTransactionBody.prototype.account = null;

            /**
             * Creates a new TokenUnfreezeAccountTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenUnfreezeAccountTransactionBody
             * @static
             * @param {proto.ITokenUnfreezeAccountTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenUnfreezeAccountTransactionBody} TokenUnfreezeAccountTransactionBody instance
             */
            TokenUnfreezeAccountTransactionBody.create = function create(properties) {
                return new TokenUnfreezeAccountTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenUnfreezeAccountTransactionBody message. Does not implicitly {@link proto.TokenUnfreezeAccountTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenUnfreezeAccountTransactionBody
             * @static
             * @param {proto.ITokenUnfreezeAccountTransactionBody} m TokenUnfreezeAccountTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenUnfreezeAccountTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenUnfreezeAccountTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenUnfreezeAccountTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenUnfreezeAccountTransactionBody} TokenUnfreezeAccountTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenUnfreezeAccountTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenUnfreezeAccountTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenUnfreezeAccountTransactionBody;
        })();

        proto.TokenGrantKycTransactionBody = (function() {

            /**
             * Properties of a TokenGrantKycTransactionBody.
             * @memberof proto
             * @interface ITokenGrantKycTransactionBody
             * @property {proto.ITokenID|null} [token] TokenGrantKycTransactionBody token
             * @property {proto.IAccountID|null} [account] TokenGrantKycTransactionBody account
             */

            /**
             * Constructs a new TokenGrantKycTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenGrantKycTransactionBody.
             * @implements ITokenGrantKycTransactionBody
             * @constructor
             * @param {proto.ITokenGrantKycTransactionBody=} [p] Properties to set
             */
            function TokenGrantKycTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenGrantKycTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenGrantKycTransactionBody
             * @instance
             */
            TokenGrantKycTransactionBody.prototype.token = null;

            /**
             * TokenGrantKycTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenGrantKycTransactionBody
             * @instance
             */
            TokenGrantKycTransactionBody.prototype.account = null;

            /**
             * Creates a new TokenGrantKycTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenGrantKycTransactionBody
             * @static
             * @param {proto.ITokenGrantKycTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenGrantKycTransactionBody} TokenGrantKycTransactionBody instance
             */
            TokenGrantKycTransactionBody.create = function create(properties) {
                return new TokenGrantKycTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenGrantKycTransactionBody message. Does not implicitly {@link proto.TokenGrantKycTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenGrantKycTransactionBody
             * @static
             * @param {proto.ITokenGrantKycTransactionBody} m TokenGrantKycTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenGrantKycTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenGrantKycTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenGrantKycTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenGrantKycTransactionBody} TokenGrantKycTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenGrantKycTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGrantKycTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenGrantKycTransactionBody;
        })();

        proto.TokenRevokeKycTransactionBody = (function() {

            /**
             * Properties of a TokenRevokeKycTransactionBody.
             * @memberof proto
             * @interface ITokenRevokeKycTransactionBody
             * @property {proto.ITokenID|null} [token] TokenRevokeKycTransactionBody token
             * @property {proto.IAccountID|null} [account] TokenRevokeKycTransactionBody account
             */

            /**
             * Constructs a new TokenRevokeKycTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenRevokeKycTransactionBody.
             * @implements ITokenRevokeKycTransactionBody
             * @constructor
             * @param {proto.ITokenRevokeKycTransactionBody=} [p] Properties to set
             */
            function TokenRevokeKycTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenRevokeKycTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenRevokeKycTransactionBody
             * @instance
             */
            TokenRevokeKycTransactionBody.prototype.token = null;

            /**
             * TokenRevokeKycTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenRevokeKycTransactionBody
             * @instance
             */
            TokenRevokeKycTransactionBody.prototype.account = null;

            /**
             * Creates a new TokenRevokeKycTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenRevokeKycTransactionBody
             * @static
             * @param {proto.ITokenRevokeKycTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenRevokeKycTransactionBody} TokenRevokeKycTransactionBody instance
             */
            TokenRevokeKycTransactionBody.create = function create(properties) {
                return new TokenRevokeKycTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenRevokeKycTransactionBody message. Does not implicitly {@link proto.TokenRevokeKycTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenRevokeKycTransactionBody
             * @static
             * @param {proto.ITokenRevokeKycTransactionBody} m TokenRevokeKycTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenRevokeKycTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenRevokeKycTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenRevokeKycTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenRevokeKycTransactionBody} TokenRevokeKycTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenRevokeKycTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenRevokeKycTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenRevokeKycTransactionBody;
        })();

        proto.TokenDeleteTransactionBody = (function() {

            /**
             * Properties of a TokenDeleteTransactionBody.
             * @memberof proto
             * @interface ITokenDeleteTransactionBody
             * @property {proto.ITokenID|null} [token] TokenDeleteTransactionBody token
             */

            /**
             * Constructs a new TokenDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenDeleteTransactionBody.
             * @implements ITokenDeleteTransactionBody
             * @constructor
             * @param {proto.ITokenDeleteTransactionBody=} [p] Properties to set
             */
            function TokenDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenDeleteTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenDeleteTransactionBody
             * @instance
             */
            TokenDeleteTransactionBody.prototype.token = null;

            /**
             * Creates a new TokenDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenDeleteTransactionBody
             * @static
             * @param {proto.ITokenDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenDeleteTransactionBody} TokenDeleteTransactionBody instance
             */
            TokenDeleteTransactionBody.create = function create(properties) {
                return new TokenDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenDeleteTransactionBody message. Does not implicitly {@link proto.TokenDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenDeleteTransactionBody
             * @static
             * @param {proto.ITokenDeleteTransactionBody} m TokenDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenDeleteTransactionBody} TokenDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenDeleteTransactionBody;
        })();

        proto.TokenUpdateTransactionBody = (function() {

            /**
             * Properties of a TokenUpdateTransactionBody.
             * @memberof proto
             * @interface ITokenUpdateTransactionBody
             * @property {proto.ITokenID|null} [token] TokenUpdateTransactionBody token
             * @property {string|null} [symbol] TokenUpdateTransactionBody symbol
             * @property {string|null} [name] TokenUpdateTransactionBody name
             * @property {proto.IAccountID|null} [treasury] TokenUpdateTransactionBody treasury
             * @property {proto.IKey|null} [adminKey] TokenUpdateTransactionBody adminKey
             * @property {proto.IKey|null} [kycKey] TokenUpdateTransactionBody kycKey
             * @property {proto.IKey|null} [freezeKey] TokenUpdateTransactionBody freezeKey
             * @property {proto.IKey|null} [wipeKey] TokenUpdateTransactionBody wipeKey
             * @property {proto.IKey|null} [supplyKey] TokenUpdateTransactionBody supplyKey
             * @property {proto.IAccountID|null} [autoRenewAccount] TokenUpdateTransactionBody autoRenewAccount
             * @property {proto.IDuration|null} [autoRenewPeriod] TokenUpdateTransactionBody autoRenewPeriod
             * @property {proto.ITimestamp|null} [expiry] TokenUpdateTransactionBody expiry
             * @property {google.protobuf.IStringValue|null} [memo] TokenUpdateTransactionBody memo
             */

            /**
             * Constructs a new TokenUpdateTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenUpdateTransactionBody.
             * @implements ITokenUpdateTransactionBody
             * @constructor
             * @param {proto.ITokenUpdateTransactionBody=} [p] Properties to set
             */
            function TokenUpdateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenUpdateTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.token = null;

            /**
             * TokenUpdateTransactionBody symbol.
             * @member {string} symbol
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.symbol = "";

            /**
             * TokenUpdateTransactionBody name.
             * @member {string} name
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.name = "";

            /**
             * TokenUpdateTransactionBody treasury.
             * @member {proto.IAccountID|null|undefined} treasury
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.treasury = null;

            /**
             * TokenUpdateTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.adminKey = null;

            /**
             * TokenUpdateTransactionBody kycKey.
             * @member {proto.IKey|null|undefined} kycKey
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.kycKey = null;

            /**
             * TokenUpdateTransactionBody freezeKey.
             * @member {proto.IKey|null|undefined} freezeKey
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.freezeKey = null;

            /**
             * TokenUpdateTransactionBody wipeKey.
             * @member {proto.IKey|null|undefined} wipeKey
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.wipeKey = null;

            /**
             * TokenUpdateTransactionBody supplyKey.
             * @member {proto.IKey|null|undefined} supplyKey
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.supplyKey = null;

            /**
             * TokenUpdateTransactionBody autoRenewAccount.
             * @member {proto.IAccountID|null|undefined} autoRenewAccount
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.autoRenewAccount = null;

            /**
             * TokenUpdateTransactionBody autoRenewPeriod.
             * @member {proto.IDuration|null|undefined} autoRenewPeriod
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.autoRenewPeriod = null;

            /**
             * TokenUpdateTransactionBody expiry.
             * @member {proto.ITimestamp|null|undefined} expiry
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.expiry = null;

            /**
             * TokenUpdateTransactionBody memo.
             * @member {google.protobuf.IStringValue|null|undefined} memo
             * @memberof proto.TokenUpdateTransactionBody
             * @instance
             */
            TokenUpdateTransactionBody.prototype.memo = null;

            /**
             * Creates a new TokenUpdateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenUpdateTransactionBody
             * @static
             * @param {proto.ITokenUpdateTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenUpdateTransactionBody} TokenUpdateTransactionBody instance
             */
            TokenUpdateTransactionBody.create = function create(properties) {
                return new TokenUpdateTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenUpdateTransactionBody message. Does not implicitly {@link proto.TokenUpdateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenUpdateTransactionBody
             * @static
             * @param {proto.ITokenUpdateTransactionBody} m TokenUpdateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenUpdateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.symbol != null && Object.hasOwnProperty.call(m, "symbol"))
                    w.uint32(18).string(m.symbol);
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(26).string(m.name);
                if (m.treasury != null && Object.hasOwnProperty.call(m, "treasury"))
                    $root.proto.AccountID.encode(m.treasury, w.uint32(34).fork()).ldelim();
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(42).fork()).ldelim();
                if (m.kycKey != null && Object.hasOwnProperty.call(m, "kycKey"))
                    $root.proto.Key.encode(m.kycKey, w.uint32(50).fork()).ldelim();
                if (m.freezeKey != null && Object.hasOwnProperty.call(m, "freezeKey"))
                    $root.proto.Key.encode(m.freezeKey, w.uint32(58).fork()).ldelim();
                if (m.wipeKey != null && Object.hasOwnProperty.call(m, "wipeKey"))
                    $root.proto.Key.encode(m.wipeKey, w.uint32(66).fork()).ldelim();
                if (m.supplyKey != null && Object.hasOwnProperty.call(m, "supplyKey"))
                    $root.proto.Key.encode(m.supplyKey, w.uint32(74).fork()).ldelim();
                if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, "autoRenewAccount"))
                    $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(82).fork()).ldelim();
                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, "autoRenewPeriod"))
                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(90).fork()).ldelim();
                if (m.expiry != null && Object.hasOwnProperty.call(m, "expiry"))
                    $root.proto.Timestamp.encode(m.expiry, w.uint32(98).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    $root.google.protobuf.StringValue.encode(m.memo, w.uint32(106).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TokenUpdateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenUpdateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenUpdateTransactionBody} TokenUpdateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenUpdateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenUpdateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.symbol = r.string();
                        break;
                    case 3:
                        m.name = r.string();
                        break;
                    case 4:
                        m.treasury = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 5:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 6:
                        m.kycKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 7:
                        m.freezeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 8:
                        m.wipeKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 9:
                        m.supplyKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 10:
                        m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 11:
                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 12:
                        m.expiry = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 13:
                        m.memo = $root.google.protobuf.StringValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenUpdateTransactionBody;
        })();

        proto.TokenMintTransactionBody = (function() {

            /**
             * Properties of a TokenMintTransactionBody.
             * @memberof proto
             * @interface ITokenMintTransactionBody
             * @property {proto.ITokenID|null} [token] TokenMintTransactionBody token
             * @property {Long|null} [amount] TokenMintTransactionBody amount
             */

            /**
             * Constructs a new TokenMintTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenMintTransactionBody.
             * @implements ITokenMintTransactionBody
             * @constructor
             * @param {proto.ITokenMintTransactionBody=} [p] Properties to set
             */
            function TokenMintTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenMintTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenMintTransactionBody
             * @instance
             */
            TokenMintTransactionBody.prototype.token = null;

            /**
             * TokenMintTransactionBody amount.
             * @member {Long} amount
             * @memberof proto.TokenMintTransactionBody
             * @instance
             */
            TokenMintTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new TokenMintTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenMintTransactionBody
             * @static
             * @param {proto.ITokenMintTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenMintTransactionBody} TokenMintTransactionBody instance
             */
            TokenMintTransactionBody.create = function create(properties) {
                return new TokenMintTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenMintTransactionBody message. Does not implicitly {@link proto.TokenMintTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenMintTransactionBody
             * @static
             * @param {proto.ITokenMintTransactionBody} m TokenMintTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenMintTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(16).uint64(m.amount);
                return w;
            };

            /**
             * Decodes a TokenMintTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenMintTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenMintTransactionBody} TokenMintTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenMintTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenMintTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenMintTransactionBody;
        })();

        proto.TokenBurnTransactionBody = (function() {

            /**
             * Properties of a TokenBurnTransactionBody.
             * @memberof proto
             * @interface ITokenBurnTransactionBody
             * @property {proto.ITokenID|null} [token] TokenBurnTransactionBody token
             * @property {Long|null} [amount] TokenBurnTransactionBody amount
             */

            /**
             * Constructs a new TokenBurnTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenBurnTransactionBody.
             * @implements ITokenBurnTransactionBody
             * @constructor
             * @param {proto.ITokenBurnTransactionBody=} [p] Properties to set
             */
            function TokenBurnTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenBurnTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenBurnTransactionBody
             * @instance
             */
            TokenBurnTransactionBody.prototype.token = null;

            /**
             * TokenBurnTransactionBody amount.
             * @member {Long} amount
             * @memberof proto.TokenBurnTransactionBody
             * @instance
             */
            TokenBurnTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new TokenBurnTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenBurnTransactionBody
             * @static
             * @param {proto.ITokenBurnTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenBurnTransactionBody} TokenBurnTransactionBody instance
             */
            TokenBurnTransactionBody.create = function create(properties) {
                return new TokenBurnTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenBurnTransactionBody message. Does not implicitly {@link proto.TokenBurnTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenBurnTransactionBody
             * @static
             * @param {proto.ITokenBurnTransactionBody} m TokenBurnTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenBurnTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(16).uint64(m.amount);
                return w;
            };

            /**
             * Decodes a TokenBurnTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenBurnTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenBurnTransactionBody} TokenBurnTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenBurnTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBurnTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenBurnTransactionBody;
        })();

        proto.TokenWipeAccountTransactionBody = (function() {

            /**
             * Properties of a TokenWipeAccountTransactionBody.
             * @memberof proto
             * @interface ITokenWipeAccountTransactionBody
             * @property {proto.ITokenID|null} [token] TokenWipeAccountTransactionBody token
             * @property {proto.IAccountID|null} [account] TokenWipeAccountTransactionBody account
             * @property {Long|null} [amount] TokenWipeAccountTransactionBody amount
             */

            /**
             * Constructs a new TokenWipeAccountTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenWipeAccountTransactionBody.
             * @implements ITokenWipeAccountTransactionBody
             * @constructor
             * @param {proto.ITokenWipeAccountTransactionBody=} [p] Properties to set
             */
            function TokenWipeAccountTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenWipeAccountTransactionBody token.
             * @member {proto.ITokenID|null|undefined} token
             * @memberof proto.TokenWipeAccountTransactionBody
             * @instance
             */
            TokenWipeAccountTransactionBody.prototype.token = null;

            /**
             * TokenWipeAccountTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenWipeAccountTransactionBody
             * @instance
             */
            TokenWipeAccountTransactionBody.prototype.account = null;

            /**
             * TokenWipeAccountTransactionBody amount.
             * @member {Long} amount
             * @memberof proto.TokenWipeAccountTransactionBody
             * @instance
             */
            TokenWipeAccountTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new TokenWipeAccountTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenWipeAccountTransactionBody
             * @static
             * @param {proto.ITokenWipeAccountTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenWipeAccountTransactionBody} TokenWipeAccountTransactionBody instance
             */
            TokenWipeAccountTransactionBody.create = function create(properties) {
                return new TokenWipeAccountTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenWipeAccountTransactionBody message. Does not implicitly {@link proto.TokenWipeAccountTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenWipeAccountTransactionBody
             * @static
             * @param {proto.ITokenWipeAccountTransactionBody} m TokenWipeAccountTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenWipeAccountTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                    $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();
                if (m.amount != null && Object.hasOwnProperty.call(m, "amount"))
                    w.uint32(24).uint64(m.amount);
                return w;
            };

            /**
             * Decodes a TokenWipeAccountTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenWipeAccountTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenWipeAccountTransactionBody} TokenWipeAccountTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenWipeAccountTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenWipeAccountTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.token = $root.proto.TokenID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.amount = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenWipeAccountTransactionBody;
        })();

        proto.TokenAssociateTransactionBody = (function() {

            /**
             * Properties of a TokenAssociateTransactionBody.
             * @memberof proto
             * @interface ITokenAssociateTransactionBody
             * @property {proto.IAccountID|null} [account] TokenAssociateTransactionBody account
             * @property {Array.<proto.ITokenID>|null} [tokens] TokenAssociateTransactionBody tokens
             */

            /**
             * Constructs a new TokenAssociateTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenAssociateTransactionBody.
             * @implements ITokenAssociateTransactionBody
             * @constructor
             * @param {proto.ITokenAssociateTransactionBody=} [p] Properties to set
             */
            function TokenAssociateTransactionBody(p) {
                this.tokens = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenAssociateTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenAssociateTransactionBody
             * @instance
             */
            TokenAssociateTransactionBody.prototype.account = null;

            /**
             * TokenAssociateTransactionBody tokens.
             * @member {Array.<proto.ITokenID>} tokens
             * @memberof proto.TokenAssociateTransactionBody
             * @instance
             */
            TokenAssociateTransactionBody.prototype.tokens = $util.emptyArray;

            /**
             * Creates a new TokenAssociateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenAssociateTransactionBody
             * @static
             * @param {proto.ITokenAssociateTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenAssociateTransactionBody} TokenAssociateTransactionBody instance
             */
            TokenAssociateTransactionBody.create = function create(properties) {
                return new TokenAssociateTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenAssociateTransactionBody message. Does not implicitly {@link proto.TokenAssociateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenAssociateTransactionBody
             * @static
             * @param {proto.ITokenAssociateTransactionBody} m TokenAssociateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenAssociateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(10).fork()).ldelim();
                if (m.tokens != null && m.tokens.length) {
                    for (var i = 0; i < m.tokens.length; ++i)
                        $root.proto.TokenID.encode(m.tokens[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TokenAssociateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenAssociateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenAssociateTransactionBody} TokenAssociateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenAssociateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenAssociateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.tokens && m.tokens.length))
                            m.tokens = [];
                        m.tokens.push($root.proto.TokenID.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenAssociateTransactionBody;
        })();

        proto.TokenDissociateTransactionBody = (function() {

            /**
             * Properties of a TokenDissociateTransactionBody.
             * @memberof proto
             * @interface ITokenDissociateTransactionBody
             * @property {proto.IAccountID|null} [account] TokenDissociateTransactionBody account
             * @property {Array.<proto.ITokenID>|null} [tokens] TokenDissociateTransactionBody tokens
             */

            /**
             * Constructs a new TokenDissociateTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenDissociateTransactionBody.
             * @implements ITokenDissociateTransactionBody
             * @constructor
             * @param {proto.ITokenDissociateTransactionBody=} [p] Properties to set
             */
            function TokenDissociateTransactionBody(p) {
                this.tokens = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenDissociateTransactionBody account.
             * @member {proto.IAccountID|null|undefined} account
             * @memberof proto.TokenDissociateTransactionBody
             * @instance
             */
            TokenDissociateTransactionBody.prototype.account = null;

            /**
             * TokenDissociateTransactionBody tokens.
             * @member {Array.<proto.ITokenID>} tokens
             * @memberof proto.TokenDissociateTransactionBody
             * @instance
             */
            TokenDissociateTransactionBody.prototype.tokens = $util.emptyArray;

            /**
             * Creates a new TokenDissociateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenDissociateTransactionBody
             * @static
             * @param {proto.ITokenDissociateTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenDissociateTransactionBody} TokenDissociateTransactionBody instance
             */
            TokenDissociateTransactionBody.create = function create(properties) {
                return new TokenDissociateTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenDissociateTransactionBody message. Does not implicitly {@link proto.TokenDissociateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenDissociateTransactionBody
             * @static
             * @param {proto.ITokenDissociateTransactionBody} m TokenDissociateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenDissociateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.account != null && Object.hasOwnProperty.call(m, "account"))
                    $root.proto.AccountID.encode(m.account, w.uint32(10).fork()).ldelim();
                if (m.tokens != null && m.tokens.length) {
                    for (var i = 0; i < m.tokens.length; ++i)
                        $root.proto.TokenID.encode(m.tokens[i], w.uint32(18).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TokenDissociateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenDissociateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenDissociateTransactionBody} TokenDissociateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenDissociateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenDissociateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.account = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        if (!(m.tokens && m.tokens.length))
                            m.tokens = [];
                        m.tokens.push($root.proto.TokenID.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenDissociateTransactionBody;
        })();

        proto.ScheduleDeleteTransactionBody = (function() {

            /**
             * Properties of a ScheduleDeleteTransactionBody.
             * @memberof proto
             * @interface IScheduleDeleteTransactionBody
             * @property {proto.IScheduleID|null} [scheduleID] ScheduleDeleteTransactionBody scheduleID
             */

            /**
             * Constructs a new ScheduleDeleteTransactionBody.
             * @memberof proto
             * @classdesc Represents a ScheduleDeleteTransactionBody.
             * @implements IScheduleDeleteTransactionBody
             * @constructor
             * @param {proto.IScheduleDeleteTransactionBody=} [p] Properties to set
             */
            function ScheduleDeleteTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleDeleteTransactionBody scheduleID.
             * @member {proto.IScheduleID|null|undefined} scheduleID
             * @memberof proto.ScheduleDeleteTransactionBody
             * @instance
             */
            ScheduleDeleteTransactionBody.prototype.scheduleID = null;

            /**
             * Creates a new ScheduleDeleteTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleDeleteTransactionBody
             * @static
             * @param {proto.IScheduleDeleteTransactionBody=} [properties] Properties to set
             * @returns {proto.ScheduleDeleteTransactionBody} ScheduleDeleteTransactionBody instance
             */
            ScheduleDeleteTransactionBody.create = function create(properties) {
                return new ScheduleDeleteTransactionBody(properties);
            };

            /**
             * Encodes the specified ScheduleDeleteTransactionBody message. Does not implicitly {@link proto.ScheduleDeleteTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleDeleteTransactionBody
             * @static
             * @param {proto.IScheduleDeleteTransactionBody} m ScheduleDeleteTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleDeleteTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.scheduleID != null && Object.hasOwnProperty.call(m, "scheduleID"))
                    $root.proto.ScheduleID.encode(m.scheduleID, w.uint32(10).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleDeleteTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleDeleteTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleDeleteTransactionBody} ScheduleDeleteTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleDeleteTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleDeleteTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.scheduleID = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleDeleteTransactionBody;
        })();

        proto.Response = (function() {

            /**
             * Properties of a Response.
             * @memberof proto
             * @interface IResponse
             * @property {proto.IGetByKeyResponse|null} [getByKey] Response getByKey
             * @property {proto.IGetBySolidityIDResponse|null} [getBySolidityID] Response getBySolidityID
             * @property {proto.IContractCallLocalResponse|null} [contractCallLocal] Response contractCallLocal
             * @property {proto.IContractGetBytecodeResponse|null} [contractGetBytecodeResponse] Response contractGetBytecodeResponse
             * @property {proto.IContractGetInfoResponse|null} [contractGetInfo] Response contractGetInfo
             * @property {proto.IContractGetRecordsResponse|null} [contractGetRecordsResponse] Response contractGetRecordsResponse
             * @property {proto.ICryptoGetAccountBalanceResponse|null} [cryptogetAccountBalance] Response cryptogetAccountBalance
             * @property {proto.ICryptoGetAccountRecordsResponse|null} [cryptoGetAccountRecords] Response cryptoGetAccountRecords
             * @property {proto.ICryptoGetInfoResponse|null} [cryptoGetInfo] Response cryptoGetInfo
             * @property {proto.ICryptoGetLiveHashResponse|null} [cryptoGetLiveHash] Response cryptoGetLiveHash
             * @property {proto.ICryptoGetStakersResponse|null} [cryptoGetProxyStakers] Response cryptoGetProxyStakers
             * @property {proto.IFileGetContentsResponse|null} [fileGetContents] Response fileGetContents
             * @property {proto.IFileGetInfoResponse|null} [fileGetInfo] Response fileGetInfo
             * @property {proto.ITransactionGetReceiptResponse|null} [transactionGetReceipt] Response transactionGetReceipt
             * @property {proto.ITransactionGetRecordResponse|null} [transactionGetRecord] Response transactionGetRecord
             * @property {proto.ITransactionGetFastRecordResponse|null} [transactionGetFastRecord] Response transactionGetFastRecord
             * @property {proto.IConsensusGetTopicInfoResponse|null} [consensusGetTopicInfo] Response consensusGetTopicInfo
             * @property {proto.INetworkGetVersionInfoResponse|null} [networkGetVersionInfo] Response networkGetVersionInfo
             * @property {proto.ITokenGetInfoResponse|null} [tokenGetInfo] Response tokenGetInfo
             * @property {proto.IScheduleGetInfoResponse|null} [scheduleGetInfo] Response scheduleGetInfo
             */

            /**
             * Constructs a new Response.
             * @memberof proto
             * @classdesc Represents a Response.
             * @implements IResponse
             * @constructor
             * @param {proto.IResponse=} [p] Properties to set
             */
            function Response(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Response getByKey.
             * @member {proto.IGetByKeyResponse|null|undefined} getByKey
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.getByKey = null;

            /**
             * Response getBySolidityID.
             * @member {proto.IGetBySolidityIDResponse|null|undefined} getBySolidityID
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.getBySolidityID = null;

            /**
             * Response contractCallLocal.
             * @member {proto.IContractCallLocalResponse|null|undefined} contractCallLocal
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.contractCallLocal = null;

            /**
             * Response contractGetBytecodeResponse.
             * @member {proto.IContractGetBytecodeResponse|null|undefined} contractGetBytecodeResponse
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.contractGetBytecodeResponse = null;

            /**
             * Response contractGetInfo.
             * @member {proto.IContractGetInfoResponse|null|undefined} contractGetInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.contractGetInfo = null;

            /**
             * Response contractGetRecordsResponse.
             * @member {proto.IContractGetRecordsResponse|null|undefined} contractGetRecordsResponse
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.contractGetRecordsResponse = null;

            /**
             * Response cryptogetAccountBalance.
             * @member {proto.ICryptoGetAccountBalanceResponse|null|undefined} cryptogetAccountBalance
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.cryptogetAccountBalance = null;

            /**
             * Response cryptoGetAccountRecords.
             * @member {proto.ICryptoGetAccountRecordsResponse|null|undefined} cryptoGetAccountRecords
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.cryptoGetAccountRecords = null;

            /**
             * Response cryptoGetInfo.
             * @member {proto.ICryptoGetInfoResponse|null|undefined} cryptoGetInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.cryptoGetInfo = null;

            /**
             * Response cryptoGetLiveHash.
             * @member {proto.ICryptoGetLiveHashResponse|null|undefined} cryptoGetLiveHash
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.cryptoGetLiveHash = null;

            /**
             * Response cryptoGetProxyStakers.
             * @member {proto.ICryptoGetStakersResponse|null|undefined} cryptoGetProxyStakers
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.cryptoGetProxyStakers = null;

            /**
             * Response fileGetContents.
             * @member {proto.IFileGetContentsResponse|null|undefined} fileGetContents
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.fileGetContents = null;

            /**
             * Response fileGetInfo.
             * @member {proto.IFileGetInfoResponse|null|undefined} fileGetInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.fileGetInfo = null;

            /**
             * Response transactionGetReceipt.
             * @member {proto.ITransactionGetReceiptResponse|null|undefined} transactionGetReceipt
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.transactionGetReceipt = null;

            /**
             * Response transactionGetRecord.
             * @member {proto.ITransactionGetRecordResponse|null|undefined} transactionGetRecord
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.transactionGetRecord = null;

            /**
             * Response transactionGetFastRecord.
             * @member {proto.ITransactionGetFastRecordResponse|null|undefined} transactionGetFastRecord
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.transactionGetFastRecord = null;

            /**
             * Response consensusGetTopicInfo.
             * @member {proto.IConsensusGetTopicInfoResponse|null|undefined} consensusGetTopicInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.consensusGetTopicInfo = null;

            /**
             * Response networkGetVersionInfo.
             * @member {proto.INetworkGetVersionInfoResponse|null|undefined} networkGetVersionInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.networkGetVersionInfo = null;

            /**
             * Response tokenGetInfo.
             * @member {proto.ITokenGetInfoResponse|null|undefined} tokenGetInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.tokenGetInfo = null;

            /**
             * Response scheduleGetInfo.
             * @member {proto.IScheduleGetInfoResponse|null|undefined} scheduleGetInfo
             * @memberof proto.Response
             * @instance
             */
            Response.prototype.scheduleGetInfo = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Response response.
             * @member {"getByKey"|"getBySolidityID"|"contractCallLocal"|"contractGetBytecodeResponse"|"contractGetInfo"|"contractGetRecordsResponse"|"cryptogetAccountBalance"|"cryptoGetAccountRecords"|"cryptoGetInfo"|"cryptoGetLiveHash"|"cryptoGetProxyStakers"|"fileGetContents"|"fileGetInfo"|"transactionGetReceipt"|"transactionGetRecord"|"transactionGetFastRecord"|"consensusGetTopicInfo"|"networkGetVersionInfo"|"tokenGetInfo"|"scheduleGetInfo"|undefined} response
             * @memberof proto.Response
             * @instance
             */
            Object.defineProperty(Response.prototype, "response", {
                get: $util.oneOfGetter($oneOfFields = ["getByKey", "getBySolidityID", "contractCallLocal", "contractGetBytecodeResponse", "contractGetInfo", "contractGetRecordsResponse", "cryptogetAccountBalance", "cryptoGetAccountRecords", "cryptoGetInfo", "cryptoGetLiveHash", "cryptoGetProxyStakers", "fileGetContents", "fileGetInfo", "transactionGetReceipt", "transactionGetRecord", "transactionGetFastRecord", "consensusGetTopicInfo", "networkGetVersionInfo", "tokenGetInfo", "scheduleGetInfo"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Response instance using the specified properties.
             * @function create
             * @memberof proto.Response
             * @static
             * @param {proto.IResponse=} [properties] Properties to set
             * @returns {proto.Response} Response instance
             */
            Response.create = function create(properties) {
                return new Response(properties);
            };

            /**
             * Encodes the specified Response message. Does not implicitly {@link proto.Response.verify|verify} messages.
             * @function encode
             * @memberof proto.Response
             * @static
             * @param {proto.IResponse} m Response message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.getByKey != null && Object.hasOwnProperty.call(m, "getByKey"))
                    $root.proto.GetByKeyResponse.encode(m.getByKey, w.uint32(10).fork()).ldelim();
                if (m.getBySolidityID != null && Object.hasOwnProperty.call(m, "getBySolidityID"))
                    $root.proto.GetBySolidityIDResponse.encode(m.getBySolidityID, w.uint32(18).fork()).ldelim();
                if (m.contractCallLocal != null && Object.hasOwnProperty.call(m, "contractCallLocal"))
                    $root.proto.ContractCallLocalResponse.encode(m.contractCallLocal, w.uint32(26).fork()).ldelim();
                if (m.contractGetInfo != null && Object.hasOwnProperty.call(m, "contractGetInfo"))
                    $root.proto.ContractGetInfoResponse.encode(m.contractGetInfo, w.uint32(34).fork()).ldelim();
                if (m.contractGetBytecodeResponse != null && Object.hasOwnProperty.call(m, "contractGetBytecodeResponse"))
                    $root.proto.ContractGetBytecodeResponse.encode(m.contractGetBytecodeResponse, w.uint32(42).fork()).ldelim();
                if (m.contractGetRecordsResponse != null && Object.hasOwnProperty.call(m, "contractGetRecordsResponse"))
                    $root.proto.ContractGetRecordsResponse.encode(m.contractGetRecordsResponse, w.uint32(50).fork()).ldelim();
                if (m.cryptogetAccountBalance != null && Object.hasOwnProperty.call(m, "cryptogetAccountBalance"))
                    $root.proto.CryptoGetAccountBalanceResponse.encode(m.cryptogetAccountBalance, w.uint32(58).fork()).ldelim();
                if (m.cryptoGetAccountRecords != null && Object.hasOwnProperty.call(m, "cryptoGetAccountRecords"))
                    $root.proto.CryptoGetAccountRecordsResponse.encode(m.cryptoGetAccountRecords, w.uint32(66).fork()).ldelim();
                if (m.cryptoGetInfo != null && Object.hasOwnProperty.call(m, "cryptoGetInfo"))
                    $root.proto.CryptoGetInfoResponse.encode(m.cryptoGetInfo, w.uint32(74).fork()).ldelim();
                if (m.cryptoGetLiveHash != null && Object.hasOwnProperty.call(m, "cryptoGetLiveHash"))
                    $root.proto.CryptoGetLiveHashResponse.encode(m.cryptoGetLiveHash, w.uint32(82).fork()).ldelim();
                if (m.cryptoGetProxyStakers != null && Object.hasOwnProperty.call(m, "cryptoGetProxyStakers"))
                    $root.proto.CryptoGetStakersResponse.encode(m.cryptoGetProxyStakers, w.uint32(90).fork()).ldelim();
                if (m.fileGetContents != null && Object.hasOwnProperty.call(m, "fileGetContents"))
                    $root.proto.FileGetContentsResponse.encode(m.fileGetContents, w.uint32(98).fork()).ldelim();
                if (m.fileGetInfo != null && Object.hasOwnProperty.call(m, "fileGetInfo"))
                    $root.proto.FileGetInfoResponse.encode(m.fileGetInfo, w.uint32(106).fork()).ldelim();
                if (m.transactionGetReceipt != null && Object.hasOwnProperty.call(m, "transactionGetReceipt"))
                    $root.proto.TransactionGetReceiptResponse.encode(m.transactionGetReceipt, w.uint32(114).fork()).ldelim();
                if (m.transactionGetRecord != null && Object.hasOwnProperty.call(m, "transactionGetRecord"))
                    $root.proto.TransactionGetRecordResponse.encode(m.transactionGetRecord, w.uint32(122).fork()).ldelim();
                if (m.transactionGetFastRecord != null && Object.hasOwnProperty.call(m, "transactionGetFastRecord"))
                    $root.proto.TransactionGetFastRecordResponse.encode(m.transactionGetFastRecord, w.uint32(130).fork()).ldelim();
                if (m.consensusGetTopicInfo != null && Object.hasOwnProperty.call(m, "consensusGetTopicInfo"))
                    $root.proto.ConsensusGetTopicInfoResponse.encode(m.consensusGetTopicInfo, w.uint32(1202).fork()).ldelim();
                if (m.networkGetVersionInfo != null && Object.hasOwnProperty.call(m, "networkGetVersionInfo"))
                    $root.proto.NetworkGetVersionInfoResponse.encode(m.networkGetVersionInfo, w.uint32(1210).fork()).ldelim();
                if (m.tokenGetInfo != null && Object.hasOwnProperty.call(m, "tokenGetInfo"))
                    $root.proto.TokenGetInfoResponse.encode(m.tokenGetInfo, w.uint32(1218).fork()).ldelim();
                if (m.scheduleGetInfo != null && Object.hasOwnProperty.call(m, "scheduleGetInfo"))
                    $root.proto.ScheduleGetInfoResponse.encode(m.scheduleGetInfo, w.uint32(1226).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Response();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.getByKey = $root.proto.GetByKeyResponse.decode(r, r.uint32());
                        break;
                    case 2:
                        m.getBySolidityID = $root.proto.GetBySolidityIDResponse.decode(r, r.uint32());
                        break;
                    case 3:
                        m.contractCallLocal = $root.proto.ContractCallLocalResponse.decode(r, r.uint32());
                        break;
                    case 5:
                        m.contractGetBytecodeResponse = $root.proto.ContractGetBytecodeResponse.decode(r, r.uint32());
                        break;
                    case 4:
                        m.contractGetInfo = $root.proto.ContractGetInfoResponse.decode(r, r.uint32());
                        break;
                    case 6:
                        m.contractGetRecordsResponse = $root.proto.ContractGetRecordsResponse.decode(r, r.uint32());
                        break;
                    case 7:
                        m.cryptogetAccountBalance = $root.proto.CryptoGetAccountBalanceResponse.decode(r, r.uint32());
                        break;
                    case 8:
                        m.cryptoGetAccountRecords = $root.proto.CryptoGetAccountRecordsResponse.decode(r, r.uint32());
                        break;
                    case 9:
                        m.cryptoGetInfo = $root.proto.CryptoGetInfoResponse.decode(r, r.uint32());
                        break;
                    case 10:
                        m.cryptoGetLiveHash = $root.proto.CryptoGetLiveHashResponse.decode(r, r.uint32());
                        break;
                    case 11:
                        m.cryptoGetProxyStakers = $root.proto.CryptoGetStakersResponse.decode(r, r.uint32());
                        break;
                    case 12:
                        m.fileGetContents = $root.proto.FileGetContentsResponse.decode(r, r.uint32());
                        break;
                    case 13:
                        m.fileGetInfo = $root.proto.FileGetInfoResponse.decode(r, r.uint32());
                        break;
                    case 14:
                        m.transactionGetReceipt = $root.proto.TransactionGetReceiptResponse.decode(r, r.uint32());
                        break;
                    case 15:
                        m.transactionGetRecord = $root.proto.TransactionGetRecordResponse.decode(r, r.uint32());
                        break;
                    case 16:
                        m.transactionGetFastRecord = $root.proto.TransactionGetFastRecordResponse.decode(r, r.uint32());
                        break;
                    case 150:
                        m.consensusGetTopicInfo = $root.proto.ConsensusGetTopicInfoResponse.decode(r, r.uint32());
                        break;
                    case 151:
                        m.networkGetVersionInfo = $root.proto.NetworkGetVersionInfoResponse.decode(r, r.uint32());
                        break;
                    case 152:
                        m.tokenGetInfo = $root.proto.TokenGetInfoResponse.decode(r, r.uint32());
                        break;
                    case 153:
                        m.scheduleGetInfo = $root.proto.ScheduleGetInfoResponse.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Response;
        })();

        proto.Claim = (function() {

            /**
             * Properties of a Claim.
             * @memberof proto
             * @interface IClaim
             * @property {proto.IAccountID|null} [accountID] Claim accountID
             * @property {Uint8Array|null} [hash] Claim hash
             * @property {proto.IKeyList|null} [keys] Claim keys
             * @property {proto.IDuration|null} [claimDuration] Claim claimDuration
             */

            /**
             * Constructs a new Claim.
             * @memberof proto
             * @classdesc Represents a Claim.
             * @implements IClaim
             * @constructor
             * @param {proto.IClaim=} [p] Properties to set
             */
            function Claim(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Claim accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.Claim
             * @instance
             */
            Claim.prototype.accountID = null;

            /**
             * Claim hash.
             * @member {Uint8Array} hash
             * @memberof proto.Claim
             * @instance
             */
            Claim.prototype.hash = $util.newBuffer([]);

            /**
             * Claim keys.
             * @member {proto.IKeyList|null|undefined} keys
             * @memberof proto.Claim
             * @instance
             */
            Claim.prototype.keys = null;

            /**
             * Claim claimDuration.
             * @member {proto.IDuration|null|undefined} claimDuration
             * @memberof proto.Claim
             * @instance
             */
            Claim.prototype.claimDuration = null;

            /**
             * Creates a new Claim instance using the specified properties.
             * @function create
             * @memberof proto.Claim
             * @static
             * @param {proto.IClaim=} [properties] Properties to set
             * @returns {proto.Claim} Claim instance
             */
            Claim.create = function create(properties) {
                return new Claim(properties);
            };

            /**
             * Encodes the specified Claim message. Does not implicitly {@link proto.Claim.verify|verify} messages.
             * @function encode
             * @memberof proto.Claim
             * @static
             * @param {proto.IClaim} m Claim message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Claim.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(18).bytes(m.hash);
                if (m.keys != null && Object.hasOwnProperty.call(m, "keys"))
                    $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();
                if (m.claimDuration != null && Object.hasOwnProperty.call(m, "claimDuration"))
                    $root.proto.Duration.encode(m.claimDuration, w.uint32(42).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a Claim message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Claim
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Claim} Claim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Claim.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Claim();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.hash = r.bytes();
                        break;
                    case 3:
                        m.keys = $root.proto.KeyList.decode(r, r.uint32());
                        break;
                    case 5:
                        m.claimDuration = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Claim;
        })();

        proto.CryptoAddClaimTransactionBody = (function() {

            /**
             * Properties of a CryptoAddClaimTransactionBody.
             * @memberof proto
             * @interface ICryptoAddClaimTransactionBody
             * @property {proto.IClaim|null} [claim] CryptoAddClaimTransactionBody claim
             */

            /**
             * Constructs a new CryptoAddClaimTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoAddClaimTransactionBody.
             * @implements ICryptoAddClaimTransactionBody
             * @constructor
             * @param {proto.ICryptoAddClaimTransactionBody=} [p] Properties to set
             */
            function CryptoAddClaimTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoAddClaimTransactionBody claim.
             * @member {proto.IClaim|null|undefined} claim
             * @memberof proto.CryptoAddClaimTransactionBody
             * @instance
             */
            CryptoAddClaimTransactionBody.prototype.claim = null;

            /**
             * Creates a new CryptoAddClaimTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoAddClaimTransactionBody
             * @static
             * @param {proto.ICryptoAddClaimTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoAddClaimTransactionBody} CryptoAddClaimTransactionBody instance
             */
            CryptoAddClaimTransactionBody.create = function create(properties) {
                return new CryptoAddClaimTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoAddClaimTransactionBody message. Does not implicitly {@link proto.CryptoAddClaimTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoAddClaimTransactionBody
             * @static
             * @param {proto.ICryptoAddClaimTransactionBody} m CryptoAddClaimTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoAddClaimTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.claim != null && Object.hasOwnProperty.call(m, "claim"))
                    $root.proto.Claim.encode(m.claim, w.uint32(26).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoAddClaimTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoAddClaimTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoAddClaimTransactionBody} CryptoAddClaimTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoAddClaimTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoAddClaimTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 3:
                        m.claim = $root.proto.Claim.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoAddClaimTransactionBody;
        })();

        proto.CryptoDeleteClaimTransactionBody = (function() {

            /**
             * Properties of a CryptoDeleteClaimTransactionBody.
             * @memberof proto
             * @interface ICryptoDeleteClaimTransactionBody
             * @property {proto.IAccountID|null} [accountIDToDeleteFrom] CryptoDeleteClaimTransactionBody accountIDToDeleteFrom
             * @property {Uint8Array|null} [hashToDelete] CryptoDeleteClaimTransactionBody hashToDelete
             */

            /**
             * Constructs a new CryptoDeleteClaimTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoDeleteClaimTransactionBody.
             * @implements ICryptoDeleteClaimTransactionBody
             * @constructor
             * @param {proto.ICryptoDeleteClaimTransactionBody=} [p] Properties to set
             */
            function CryptoDeleteClaimTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoDeleteClaimTransactionBody accountIDToDeleteFrom.
             * @member {proto.IAccountID|null|undefined} accountIDToDeleteFrom
             * @memberof proto.CryptoDeleteClaimTransactionBody
             * @instance
             */
            CryptoDeleteClaimTransactionBody.prototype.accountIDToDeleteFrom = null;

            /**
             * CryptoDeleteClaimTransactionBody hashToDelete.
             * @member {Uint8Array} hashToDelete
             * @memberof proto.CryptoDeleteClaimTransactionBody
             * @instance
             */
            CryptoDeleteClaimTransactionBody.prototype.hashToDelete = $util.newBuffer([]);

            /**
             * Creates a new CryptoDeleteClaimTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoDeleteClaimTransactionBody
             * @static
             * @param {proto.ICryptoDeleteClaimTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoDeleteClaimTransactionBody} CryptoDeleteClaimTransactionBody instance
             */
            CryptoDeleteClaimTransactionBody.create = function create(properties) {
                return new CryptoDeleteClaimTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoDeleteClaimTransactionBody message. Does not implicitly {@link proto.CryptoDeleteClaimTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoDeleteClaimTransactionBody
             * @static
             * @param {proto.ICryptoDeleteClaimTransactionBody} m CryptoDeleteClaimTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoDeleteClaimTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountIDToDeleteFrom != null && Object.hasOwnProperty.call(m, "accountIDToDeleteFrom"))
                    $root.proto.AccountID.encode(m.accountIDToDeleteFrom, w.uint32(10).fork()).ldelim();
                if (m.hashToDelete != null && Object.hasOwnProperty.call(m, "hashToDelete"))
                    w.uint32(18).bytes(m.hashToDelete);
                return w;
            };

            /**
             * Decodes a CryptoDeleteClaimTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoDeleteClaimTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoDeleteClaimTransactionBody} CryptoDeleteClaimTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoDeleteClaimTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteClaimTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountIDToDeleteFrom = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.hashToDelete = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoDeleteClaimTransactionBody;
        })();

        proto.CryptoDeleteLiveHashTransactionBody = (function() {

            /**
             * Properties of a CryptoDeleteLiveHashTransactionBody.
             * @memberof proto
             * @interface ICryptoDeleteLiveHashTransactionBody
             * @property {proto.IAccountID|null} [accountOfLiveHash] CryptoDeleteLiveHashTransactionBody accountOfLiveHash
             * @property {Uint8Array|null} [liveHashToDelete] CryptoDeleteLiveHashTransactionBody liveHashToDelete
             */

            /**
             * Constructs a new CryptoDeleteLiveHashTransactionBody.
             * @memberof proto
             * @classdesc Represents a CryptoDeleteLiveHashTransactionBody.
             * @implements ICryptoDeleteLiveHashTransactionBody
             * @constructor
             * @param {proto.ICryptoDeleteLiveHashTransactionBody=} [p] Properties to set
             */
            function CryptoDeleteLiveHashTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoDeleteLiveHashTransactionBody accountOfLiveHash.
             * @member {proto.IAccountID|null|undefined} accountOfLiveHash
             * @memberof proto.CryptoDeleteLiveHashTransactionBody
             * @instance
             */
            CryptoDeleteLiveHashTransactionBody.prototype.accountOfLiveHash = null;

            /**
             * CryptoDeleteLiveHashTransactionBody liveHashToDelete.
             * @member {Uint8Array} liveHashToDelete
             * @memberof proto.CryptoDeleteLiveHashTransactionBody
             * @instance
             */
            CryptoDeleteLiveHashTransactionBody.prototype.liveHashToDelete = $util.newBuffer([]);

            /**
             * Creates a new CryptoDeleteLiveHashTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.CryptoDeleteLiveHashTransactionBody
             * @static
             * @param {proto.ICryptoDeleteLiveHashTransactionBody=} [properties] Properties to set
             * @returns {proto.CryptoDeleteLiveHashTransactionBody} CryptoDeleteLiveHashTransactionBody instance
             */
            CryptoDeleteLiveHashTransactionBody.create = function create(properties) {
                return new CryptoDeleteLiveHashTransactionBody(properties);
            };

            /**
             * Encodes the specified CryptoDeleteLiveHashTransactionBody message. Does not implicitly {@link proto.CryptoDeleteLiveHashTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoDeleteLiveHashTransactionBody
             * @static
             * @param {proto.ICryptoDeleteLiveHashTransactionBody} m CryptoDeleteLiveHashTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoDeleteLiveHashTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.accountOfLiveHash != null && Object.hasOwnProperty.call(m, "accountOfLiveHash"))
                    $root.proto.AccountID.encode(m.accountOfLiveHash, w.uint32(10).fork()).ldelim();
                if (m.liveHashToDelete != null && Object.hasOwnProperty.call(m, "liveHashToDelete"))
                    w.uint32(18).bytes(m.liveHashToDelete);
                return w;
            };

            /**
             * Decodes a CryptoDeleteLiveHashTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoDeleteLiveHashTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoDeleteLiveHashTransactionBody} CryptoDeleteLiveHashTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoDeleteLiveHashTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteLiveHashTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.accountOfLiveHash = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.liveHashToDelete = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoDeleteLiveHashTransactionBody;
        })();

        proto.CryptoGetClaimQuery = (function() {

            /**
             * Properties of a CryptoGetClaimQuery.
             * @memberof proto
             * @interface ICryptoGetClaimQuery
             * @property {proto.IQueryHeader|null} [header] CryptoGetClaimQuery header
             * @property {proto.IAccountID|null} [accountID] CryptoGetClaimQuery accountID
             * @property {Uint8Array|null} [hash] CryptoGetClaimQuery hash
             */

            /**
             * Constructs a new CryptoGetClaimQuery.
             * @memberof proto
             * @classdesc Represents a CryptoGetClaimQuery.
             * @implements ICryptoGetClaimQuery
             * @constructor
             * @param {proto.ICryptoGetClaimQuery=} [p] Properties to set
             */
            function CryptoGetClaimQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetClaimQuery header.
             * @member {proto.IQueryHeader|null|undefined} header
             * @memberof proto.CryptoGetClaimQuery
             * @instance
             */
            CryptoGetClaimQuery.prototype.header = null;

            /**
             * CryptoGetClaimQuery accountID.
             * @member {proto.IAccountID|null|undefined} accountID
             * @memberof proto.CryptoGetClaimQuery
             * @instance
             */
            CryptoGetClaimQuery.prototype.accountID = null;

            /**
             * CryptoGetClaimQuery hash.
             * @member {Uint8Array} hash
             * @memberof proto.CryptoGetClaimQuery
             * @instance
             */
            CryptoGetClaimQuery.prototype.hash = $util.newBuffer([]);

            /**
             * Creates a new CryptoGetClaimQuery instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetClaimQuery
             * @static
             * @param {proto.ICryptoGetClaimQuery=} [properties] Properties to set
             * @returns {proto.CryptoGetClaimQuery} CryptoGetClaimQuery instance
             */
            CryptoGetClaimQuery.create = function create(properties) {
                return new CryptoGetClaimQuery(properties);
            };

            /**
             * Encodes the specified CryptoGetClaimQuery message. Does not implicitly {@link proto.CryptoGetClaimQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetClaimQuery
             * @static
             * @param {proto.ICryptoGetClaimQuery} m CryptoGetClaimQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetClaimQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.accountID != null && Object.hasOwnProperty.call(m, "accountID"))
                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();
                if (m.hash != null && Object.hasOwnProperty.call(m, "hash"))
                    w.uint32(26).bytes(m.hash);
                return w;
            };

            /**
             * Decodes a CryptoGetClaimQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetClaimQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetClaimQuery} CryptoGetClaimQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetClaimQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetClaimQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.QueryHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.hash = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetClaimQuery;
        })();

        proto.CryptoGetClaimResponse = (function() {

            /**
             * Properties of a CryptoGetClaimResponse.
             * @memberof proto
             * @interface ICryptoGetClaimResponse
             * @property {proto.IResponseHeader|null} [header] CryptoGetClaimResponse header
             * @property {proto.IClaim|null} [claim] CryptoGetClaimResponse claim
             */

            /**
             * Constructs a new CryptoGetClaimResponse.
             * @memberof proto
             * @classdesc Represents a CryptoGetClaimResponse.
             * @implements ICryptoGetClaimResponse
             * @constructor
             * @param {proto.ICryptoGetClaimResponse=} [p] Properties to set
             */
            function CryptoGetClaimResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * CryptoGetClaimResponse header.
             * @member {proto.IResponseHeader|null|undefined} header
             * @memberof proto.CryptoGetClaimResponse
             * @instance
             */
            CryptoGetClaimResponse.prototype.header = null;

            /**
             * CryptoGetClaimResponse claim.
             * @member {proto.IClaim|null|undefined} claim
             * @memberof proto.CryptoGetClaimResponse
             * @instance
             */
            CryptoGetClaimResponse.prototype.claim = null;

            /**
             * Creates a new CryptoGetClaimResponse instance using the specified properties.
             * @function create
             * @memberof proto.CryptoGetClaimResponse
             * @static
             * @param {proto.ICryptoGetClaimResponse=} [properties] Properties to set
             * @returns {proto.CryptoGetClaimResponse} CryptoGetClaimResponse instance
             */
            CryptoGetClaimResponse.create = function create(properties) {
                return new CryptoGetClaimResponse(properties);
            };

            /**
             * Encodes the specified CryptoGetClaimResponse message. Does not implicitly {@link proto.CryptoGetClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.CryptoGetClaimResponse
             * @static
             * @param {proto.ICryptoGetClaimResponse} m CryptoGetClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CryptoGetClaimResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.header != null && Object.hasOwnProperty.call(m, "header"))
                    $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();
                if (m.claim != null && Object.hasOwnProperty.call(m, "claim"))
                    $root.proto.Claim.encode(m.claim, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a CryptoGetClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.CryptoGetClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.CryptoGetClaimResponse} CryptoGetClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CryptoGetClaimResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetClaimResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.header = $root.proto.ResponseHeader.decode(r, r.uint32());
                        break;
                    case 2:
                        m.claim = $root.proto.Claim.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CryptoGetClaimResponse;
        })();

        proto.CryptoService = (function() {

            /**
             * Constructs a new CryptoService service.
             * @memberof proto
             * @classdesc Represents a CryptoService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function CryptoService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (CryptoService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = CryptoService;

            /**
             * Creates new CryptoService service using the specified rpc implementation.
             * @function create
             * @memberof proto.CryptoService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {CryptoService} RPC service. Useful where requests and/or responses are streamed.
             */
            CryptoService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.CryptoService#createAccount}.
             * @memberof proto.CryptoService
             * @typedef createAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createAccount.
             * @function createAccount
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.createAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.createAccount = function createAccount(request, callback) {
                return this.rpcCall(createAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createAccount" });

            /**
             * Calls createAccount.
             * @function createAccount
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#updateAccount}.
             * @memberof proto.CryptoService
             * @typedef updateAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls updateAccount.
             * @function updateAccount
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.updateAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.updateAccount = function updateAccount(request, callback) {
                return this.rpcCall(updateAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "updateAccount" });

            /**
             * Calls updateAccount.
             * @function updateAccount
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#cryptoTransfer}.
             * @memberof proto.CryptoService
             * @typedef cryptoTransferCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls cryptoTransfer.
             * @function cryptoTransfer
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.cryptoTransferCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.cryptoTransfer = function cryptoTransfer(request, callback) {
                return this.rpcCall(cryptoTransfer, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "cryptoTransfer" });

            /**
             * Calls cryptoTransfer.
             * @function cryptoTransfer
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#cryptoDelete}.
             * @memberof proto.CryptoService
             * @typedef cryptoDeleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls cryptoDelete.
             * @function cryptoDelete
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.cryptoDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.cryptoDelete = function cryptoDelete(request, callback) {
                return this.rpcCall(cryptoDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "cryptoDelete" });

            /**
             * Calls cryptoDelete.
             * @function cryptoDelete
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#addLiveHash}.
             * @memberof proto.CryptoService
             * @typedef addLiveHashCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls addLiveHash.
             * @function addLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.addLiveHashCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.addLiveHash = function addLiveHash(request, callback) {
                return this.rpcCall(addLiveHash, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "addLiveHash" });

            /**
             * Calls addLiveHash.
             * @function addLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#deleteLiveHash}.
             * @memberof proto.CryptoService
             * @typedef deleteLiveHashCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteLiveHash.
             * @function deleteLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.CryptoService.deleteLiveHashCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.deleteLiveHash = function deleteLiveHash(request, callback) {
                return this.rpcCall(deleteLiveHash, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteLiveHash" });

            /**
             * Calls deleteLiveHash.
             * @function deleteLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getLiveHash}.
             * @memberof proto.CryptoService
             * @typedef getLiveHashCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getLiveHash.
             * @function getLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getLiveHashCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getLiveHash = function getLiveHash(request, callback) {
                return this.rpcCall(getLiveHash, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getLiveHash" });

            /**
             * Calls getLiveHash.
             * @function getLiveHash
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getAccountRecords}.
             * @memberof proto.CryptoService
             * @typedef getAccountRecordsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getAccountRecords.
             * @function getAccountRecords
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getAccountRecordsCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getAccountRecords = function getAccountRecords(request, callback) {
                return this.rpcCall(getAccountRecords, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getAccountRecords" });

            /**
             * Calls getAccountRecords.
             * @function getAccountRecords
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#cryptoGetBalance}.
             * @memberof proto.CryptoService
             * @typedef cryptoGetBalanceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls cryptoGetBalance.
             * @function cryptoGetBalance
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.cryptoGetBalanceCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.cryptoGetBalance = function cryptoGetBalance(request, callback) {
                return this.rpcCall(cryptoGetBalance, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "cryptoGetBalance" });

            /**
             * Calls cryptoGetBalance.
             * @function cryptoGetBalance
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getAccountInfo}.
             * @memberof proto.CryptoService
             * @typedef getAccountInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getAccountInfo.
             * @function getAccountInfo
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getAccountInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getAccountInfo = function getAccountInfo(request, callback) {
                return this.rpcCall(getAccountInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getAccountInfo" });

            /**
             * Calls getAccountInfo.
             * @function getAccountInfo
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getTransactionReceipts}.
             * @memberof proto.CryptoService
             * @typedef getTransactionReceiptsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getTransactionReceipts.
             * @function getTransactionReceipts
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getTransactionReceiptsCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getTransactionReceipts = function getTransactionReceipts(request, callback) {
                return this.rpcCall(getTransactionReceipts, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getTransactionReceipts" });

            /**
             * Calls getTransactionReceipts.
             * @function getTransactionReceipts
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getFastTransactionRecord}.
             * @memberof proto.CryptoService
             * @typedef getFastTransactionRecordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getFastTransactionRecord.
             * @function getFastTransactionRecord
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getFastTransactionRecordCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getFastTransactionRecord = function getFastTransactionRecord(request, callback) {
                return this.rpcCall(getFastTransactionRecord, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getFastTransactionRecord" });

            /**
             * Calls getFastTransactionRecord.
             * @function getFastTransactionRecord
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getTxRecordByTxID}.
             * @memberof proto.CryptoService
             * @typedef getTxRecordByTxIDCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getTxRecordByTxID.
             * @function getTxRecordByTxID
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getTxRecordByTxIDCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getTxRecordByTxID = function getTxRecordByTxID(request, callback) {
                return this.rpcCall(getTxRecordByTxID, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getTxRecordByTxID" });

            /**
             * Calls getTxRecordByTxID.
             * @function getTxRecordByTxID
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.CryptoService#getStakersByAccountID}.
             * @memberof proto.CryptoService
             * @typedef getStakersByAccountIDCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getStakersByAccountID.
             * @function getStakersByAccountID
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.CryptoService.getStakersByAccountIDCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CryptoService.prototype.getStakersByAccountID = function getStakersByAccountID(request, callback) {
                return this.rpcCall(getStakersByAccountID, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getStakersByAccountID" });

            /**
             * Calls getStakersByAccountID.
             * @function getStakersByAccountID
             * @memberof proto.CryptoService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            return CryptoService;
        })();

        proto.FileService = (function() {

            /**
             * Constructs a new FileService service.
             * @memberof proto
             * @classdesc Represents a FileService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function FileService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (FileService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = FileService;

            /**
             * Creates new FileService service using the specified rpc implementation.
             * @function create
             * @memberof proto.FileService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {FileService} RPC service. Useful where requests and/or responses are streamed.
             */
            FileService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.FileService#createFile}.
             * @memberof proto.FileService
             * @typedef createFileCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createFile.
             * @function createFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.createFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.createFile = function createFile(request, callback) {
                return this.rpcCall(createFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createFile" });

            /**
             * Calls createFile.
             * @function createFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#updateFile}.
             * @memberof proto.FileService
             * @typedef updateFileCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls updateFile.
             * @function updateFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.updateFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.updateFile = function updateFile(request, callback) {
                return this.rpcCall(updateFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "updateFile" });

            /**
             * Calls updateFile.
             * @function updateFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#deleteFile}.
             * @memberof proto.FileService
             * @typedef deleteFileCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteFile.
             * @function deleteFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.deleteFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.deleteFile = function deleteFile(request, callback) {
                return this.rpcCall(deleteFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteFile" });

            /**
             * Calls deleteFile.
             * @function deleteFile
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#appendContent}.
             * @memberof proto.FileService
             * @typedef appendContentCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls appendContent.
             * @function appendContent
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.appendContentCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.appendContent = function appendContent(request, callback) {
                return this.rpcCall(appendContent, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "appendContent" });

            /**
             * Calls appendContent.
             * @function appendContent
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#getFileContent}.
             * @memberof proto.FileService
             * @typedef getFileContentCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getFileContent.
             * @function getFileContent
             * @memberof proto.FileService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.FileService.getFileContentCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.getFileContent = function getFileContent(request, callback) {
                return this.rpcCall(getFileContent, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getFileContent" });

            /**
             * Calls getFileContent.
             * @function getFileContent
             * @memberof proto.FileService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#getFileInfo}.
             * @memberof proto.FileService
             * @typedef getFileInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getFileInfo.
             * @function getFileInfo
             * @memberof proto.FileService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.FileService.getFileInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.getFileInfo = function getFileInfo(request, callback) {
                return this.rpcCall(getFileInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getFileInfo" });

            /**
             * Calls getFileInfo.
             * @function getFileInfo
             * @memberof proto.FileService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#systemDelete}.
             * @memberof proto.FileService
             * @typedef systemDeleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls systemDelete.
             * @function systemDelete
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.systemDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.systemDelete = function systemDelete(request, callback) {
                return this.rpcCall(systemDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "systemDelete" });

            /**
             * Calls systemDelete.
             * @function systemDelete
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.FileService#systemUndelete}.
             * @memberof proto.FileService
             * @typedef systemUndeleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls systemUndelete.
             * @function systemUndelete
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FileService.systemUndeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FileService.prototype.systemUndelete = function systemUndelete(request, callback) {
                return this.rpcCall(systemUndelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "systemUndelete" });

            /**
             * Calls systemUndelete.
             * @function systemUndelete
             * @memberof proto.FileService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            return FileService;
        })();

        proto.FreezeService = (function() {

            /**
             * Constructs a new FreezeService service.
             * @memberof proto
             * @classdesc Represents a FreezeService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function FreezeService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (FreezeService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = FreezeService;

            /**
             * Creates new FreezeService service using the specified rpc implementation.
             * @function create
             * @memberof proto.FreezeService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {FreezeService} RPC service. Useful where requests and/or responses are streamed.
             */
            FreezeService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.FreezeService#freeze}.
             * @memberof proto.FreezeService
             * @typedef freezeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls freeze.
             * @function freeze
             * @memberof proto.FreezeService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.FreezeService.freezeCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(FreezeService.prototype.freeze = function freeze(request, callback) {
                return this.rpcCall(freeze, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "freeze" });

            /**
             * Calls freeze.
             * @function freeze
             * @memberof proto.FreezeService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            return FreezeService;
        })();

        proto.ConsensusTopicQuery = (function() {

            /**
             * Properties of a ConsensusTopicQuery.
             * @memberof proto
             * @interface IConsensusTopicQuery
             * @property {proto.ITopicID|null} [topicID] ConsensusTopicQuery topicID
             * @property {proto.ITimestamp|null} [consensusStartTime] ConsensusTopicQuery consensusStartTime
             * @property {proto.ITimestamp|null} [consensusEndTime] ConsensusTopicQuery consensusEndTime
             * @property {Long|null} [limit] ConsensusTopicQuery limit
             */

            /**
             * Constructs a new ConsensusTopicQuery.
             * @memberof proto
             * @classdesc Represents a ConsensusTopicQuery.
             * @implements IConsensusTopicQuery
             * @constructor
             * @param {proto.IConsensusTopicQuery=} [p] Properties to set
             */
            function ConsensusTopicQuery(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusTopicQuery topicID.
             * @member {proto.ITopicID|null|undefined} topicID
             * @memberof proto.ConsensusTopicQuery
             * @instance
             */
            ConsensusTopicQuery.prototype.topicID = null;

            /**
             * ConsensusTopicQuery consensusStartTime.
             * @member {proto.ITimestamp|null|undefined} consensusStartTime
             * @memberof proto.ConsensusTopicQuery
             * @instance
             */
            ConsensusTopicQuery.prototype.consensusStartTime = null;

            /**
             * ConsensusTopicQuery consensusEndTime.
             * @member {proto.ITimestamp|null|undefined} consensusEndTime
             * @memberof proto.ConsensusTopicQuery
             * @instance
             */
            ConsensusTopicQuery.prototype.consensusEndTime = null;

            /**
             * ConsensusTopicQuery limit.
             * @member {Long} limit
             * @memberof proto.ConsensusTopicQuery
             * @instance
             */
            ConsensusTopicQuery.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new ConsensusTopicQuery instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusTopicQuery
             * @static
             * @param {proto.IConsensusTopicQuery=} [properties] Properties to set
             * @returns {proto.ConsensusTopicQuery} ConsensusTopicQuery instance
             */
            ConsensusTopicQuery.create = function create(properties) {
                return new ConsensusTopicQuery(properties);
            };

            /**
             * Encodes the specified ConsensusTopicQuery message. Does not implicitly {@link proto.ConsensusTopicQuery.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusTopicQuery
             * @static
             * @param {proto.IConsensusTopicQuery} m ConsensusTopicQuery message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusTopicQuery.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
                    $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();
                if (m.consensusStartTime != null && Object.hasOwnProperty.call(m, "consensusStartTime"))
                    $root.proto.Timestamp.encode(m.consensusStartTime, w.uint32(18).fork()).ldelim();
                if (m.consensusEndTime != null && Object.hasOwnProperty.call(m, "consensusEndTime"))
                    $root.proto.Timestamp.encode(m.consensusEndTime, w.uint32(26).fork()).ldelim();
                if (m.limit != null && Object.hasOwnProperty.call(m, "limit"))
                    w.uint32(32).uint64(m.limit);
                return w;
            };

            /**
             * Decodes a ConsensusTopicQuery message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusTopicQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusTopicQuery} ConsensusTopicQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusTopicQuery.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicQuery();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.topicID = $root.proto.TopicID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.consensusStartTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 3:
                        m.consensusEndTime = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 4:
                        m.limit = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusTopicQuery;
        })();

        proto.ConsensusTopicResponse = (function() {

            /**
             * Properties of a ConsensusTopicResponse.
             * @memberof proto
             * @interface IConsensusTopicResponse
             * @property {proto.ITimestamp|null} [consensusTimestamp] ConsensusTopicResponse consensusTimestamp
             * @property {Uint8Array|null} [message] ConsensusTopicResponse message
             * @property {Uint8Array|null} [runningHash] ConsensusTopicResponse runningHash
             * @property {Long|null} [sequenceNumber] ConsensusTopicResponse sequenceNumber
             * @property {Long|null} [runningHashVersion] ConsensusTopicResponse runningHashVersion
             * @property {proto.IConsensusMessageChunkInfo|null} [chunkInfo] ConsensusTopicResponse chunkInfo
             */

            /**
             * Constructs a new ConsensusTopicResponse.
             * @memberof proto
             * @classdesc Represents a ConsensusTopicResponse.
             * @implements IConsensusTopicResponse
             * @constructor
             * @param {proto.IConsensusTopicResponse=} [p] Properties to set
             */
            function ConsensusTopicResponse(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ConsensusTopicResponse consensusTimestamp.
             * @member {proto.ITimestamp|null|undefined} consensusTimestamp
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.consensusTimestamp = null;

            /**
             * ConsensusTopicResponse message.
             * @member {Uint8Array} message
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.message = $util.newBuffer([]);

            /**
             * ConsensusTopicResponse runningHash.
             * @member {Uint8Array} runningHash
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.runningHash = $util.newBuffer([]);

            /**
             * ConsensusTopicResponse sequenceNumber.
             * @member {Long} sequenceNumber
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.sequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ConsensusTopicResponse runningHashVersion.
             * @member {Long} runningHashVersion
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.runningHashVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ConsensusTopicResponse chunkInfo.
             * @member {proto.IConsensusMessageChunkInfo|null|undefined} chunkInfo
             * @memberof proto.ConsensusTopicResponse
             * @instance
             */
            ConsensusTopicResponse.prototype.chunkInfo = null;

            /**
             * Creates a new ConsensusTopicResponse instance using the specified properties.
             * @function create
             * @memberof proto.ConsensusTopicResponse
             * @static
             * @param {proto.IConsensusTopicResponse=} [properties] Properties to set
             * @returns {proto.ConsensusTopicResponse} ConsensusTopicResponse instance
             */
            ConsensusTopicResponse.create = function create(properties) {
                return new ConsensusTopicResponse(properties);
            };

            /**
             * Encodes the specified ConsensusTopicResponse message. Does not implicitly {@link proto.ConsensusTopicResponse.verify|verify} messages.
             * @function encode
             * @memberof proto.ConsensusTopicResponse
             * @static
             * @param {proto.IConsensusTopicResponse} m ConsensusTopicResponse message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusTopicResponse.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.consensusTimestamp != null && Object.hasOwnProperty.call(m, "consensusTimestamp"))
                    $root.proto.Timestamp.encode(m.consensusTimestamp, w.uint32(10).fork()).ldelim();
                if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                    w.uint32(18).bytes(m.message);
                if (m.runningHash != null && Object.hasOwnProperty.call(m, "runningHash"))
                    w.uint32(26).bytes(m.runningHash);
                if (m.sequenceNumber != null && Object.hasOwnProperty.call(m, "sequenceNumber"))
                    w.uint32(32).uint64(m.sequenceNumber);
                if (m.runningHashVersion != null && Object.hasOwnProperty.call(m, "runningHashVersion"))
                    w.uint32(40).uint64(m.runningHashVersion);
                if (m.chunkInfo != null && Object.hasOwnProperty.call(m, "chunkInfo"))
                    $root.proto.ConsensusMessageChunkInfo.encode(m.chunkInfo, w.uint32(50).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ConsensusTopicResponse message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ConsensusTopicResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ConsensusTopicResponse} ConsensusTopicResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusTopicResponse.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicResponse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.consensusTimestamp = $root.proto.Timestamp.decode(r, r.uint32());
                        break;
                    case 2:
                        m.message = r.bytes();
                        break;
                    case 3:
                        m.runningHash = r.bytes();
                        break;
                    case 4:
                        m.sequenceNumber = r.uint64();
                        break;
                    case 5:
                        m.runningHashVersion = r.uint64();
                        break;
                    case 6:
                        m.chunkInfo = $root.proto.ConsensusMessageChunkInfo.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ConsensusTopicResponse;
        })();

        proto.MirrorConsensusService = (function() {

            /**
             * Constructs a new MirrorConsensusService service.
             * @memberof proto
             * @classdesc Represents a MirrorConsensusService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function MirrorConsensusService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (MirrorConsensusService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = MirrorConsensusService;

            /**
             * Creates new MirrorConsensusService service using the specified rpc implementation.
             * @function create
             * @memberof proto.MirrorConsensusService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {MirrorConsensusService} RPC service. Useful where requests and/or responses are streamed.
             */
            MirrorConsensusService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.MirrorConsensusService#subscribeTopic}.
             * @memberof proto.MirrorConsensusService
             * @typedef subscribeTopicCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.ConsensusTopicResponse} [response] ConsensusTopicResponse
             */

            /**
             * Calls subscribeTopic.
             * @function subscribeTopic
             * @memberof proto.MirrorConsensusService
             * @instance
             * @param {proto.IConsensusTopicQuery} request ConsensusTopicQuery message or plain object
             * @param {proto.MirrorConsensusService.subscribeTopicCallback} callback Node-style callback called with the error, if any, and ConsensusTopicResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(MirrorConsensusService.prototype.subscribeTopic = function subscribeTopic(request, callback) {
                return this.rpcCall(subscribeTopic, $root.proto.ConsensusTopicQuery, $root.proto.ConsensusTopicResponse, request, callback);
            }, "name", { value: "subscribeTopic" });

            /**
             * Calls subscribeTopic.
             * @function subscribeTopic
             * @memberof proto.MirrorConsensusService
             * @instance
             * @param {proto.IConsensusTopicQuery} request ConsensusTopicQuery message or plain object
             * @returns {Promise<proto.ConsensusTopicResponse>} Promise
             * @variation 2
             */

            return MirrorConsensusService;
        })();

        proto.NetworkService = (function() {

            /**
             * Constructs a new NetworkService service.
             * @memberof proto
             * @classdesc Represents a NetworkService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function NetworkService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (NetworkService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = NetworkService;

            /**
             * Creates new NetworkService service using the specified rpc implementation.
             * @function create
             * @memberof proto.NetworkService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {NetworkService} RPC service. Useful where requests and/or responses are streamed.
             */
            NetworkService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.NetworkService#getVersionInfo}.
             * @memberof proto.NetworkService
             * @typedef getVersionInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getVersionInfo.
             * @function getVersionInfo
             * @memberof proto.NetworkService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.NetworkService.getVersionInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(NetworkService.prototype.getVersionInfo = function getVersionInfo(request, callback) {
                return this.rpcCall(getVersionInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getVersionInfo" });

            /**
             * Calls getVersionInfo.
             * @function getVersionInfo
             * @memberof proto.NetworkService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.NetworkService#uncheckedSubmit}.
             * @memberof proto.NetworkService
             * @typedef uncheckedSubmitCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls uncheckedSubmit.
             * @function uncheckedSubmit
             * @memberof proto.NetworkService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.NetworkService.uncheckedSubmitCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(NetworkService.prototype.uncheckedSubmit = function uncheckedSubmit(request, callback) {
                return this.rpcCall(uncheckedSubmit, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "uncheckedSubmit" });

            /**
             * Calls uncheckedSubmit.
             * @function uncheckedSubmit
             * @memberof proto.NetworkService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            return NetworkService;
        })();

        proto.ScheduleCreateTransactionBody = (function() {

            /**
             * Properties of a ScheduleCreateTransactionBody.
             * @memberof proto
             * @interface IScheduleCreateTransactionBody
             * @property {proto.ISchedulableTransactionBody|null} [scheduledTransactionBody] ScheduleCreateTransactionBody scheduledTransactionBody
             * @property {string|null} [memo] ScheduleCreateTransactionBody memo
             * @property {proto.IKey|null} [adminKey] ScheduleCreateTransactionBody adminKey
             * @property {proto.IAccountID|null} [payerAccountID] ScheduleCreateTransactionBody payerAccountID
             */

            /**
             * Constructs a new ScheduleCreateTransactionBody.
             * @memberof proto
             * @classdesc Represents a ScheduleCreateTransactionBody.
             * @implements IScheduleCreateTransactionBody
             * @constructor
             * @param {proto.IScheduleCreateTransactionBody=} [p] Properties to set
             */
            function ScheduleCreateTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleCreateTransactionBody scheduledTransactionBody.
             * @member {proto.ISchedulableTransactionBody|null|undefined} scheduledTransactionBody
             * @memberof proto.ScheduleCreateTransactionBody
             * @instance
             */
            ScheduleCreateTransactionBody.prototype.scheduledTransactionBody = null;

            /**
             * ScheduleCreateTransactionBody memo.
             * @member {string} memo
             * @memberof proto.ScheduleCreateTransactionBody
             * @instance
             */
            ScheduleCreateTransactionBody.prototype.memo = "";

            /**
             * ScheduleCreateTransactionBody adminKey.
             * @member {proto.IKey|null|undefined} adminKey
             * @memberof proto.ScheduleCreateTransactionBody
             * @instance
             */
            ScheduleCreateTransactionBody.prototype.adminKey = null;

            /**
             * ScheduleCreateTransactionBody payerAccountID.
             * @member {proto.IAccountID|null|undefined} payerAccountID
             * @memberof proto.ScheduleCreateTransactionBody
             * @instance
             */
            ScheduleCreateTransactionBody.prototype.payerAccountID = null;

            /**
             * Creates a new ScheduleCreateTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleCreateTransactionBody
             * @static
             * @param {proto.IScheduleCreateTransactionBody=} [properties] Properties to set
             * @returns {proto.ScheduleCreateTransactionBody} ScheduleCreateTransactionBody instance
             */
            ScheduleCreateTransactionBody.create = function create(properties) {
                return new ScheduleCreateTransactionBody(properties);
            };

            /**
             * Encodes the specified ScheduleCreateTransactionBody message. Does not implicitly {@link proto.ScheduleCreateTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleCreateTransactionBody
             * @static
             * @param {proto.IScheduleCreateTransactionBody} m ScheduleCreateTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleCreateTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.scheduledTransactionBody != null && Object.hasOwnProperty.call(m, "scheduledTransactionBody"))
                    $root.proto.SchedulableTransactionBody.encode(m.scheduledTransactionBody, w.uint32(10).fork()).ldelim();
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(18).string(m.memo);
                if (m.adminKey != null && Object.hasOwnProperty.call(m, "adminKey"))
                    $root.proto.Key.encode(m.adminKey, w.uint32(26).fork()).ldelim();
                if (m.payerAccountID != null && Object.hasOwnProperty.call(m, "payerAccountID"))
                    $root.proto.AccountID.encode(m.payerAccountID, w.uint32(34).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleCreateTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleCreateTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleCreateTransactionBody} ScheduleCreateTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleCreateTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleCreateTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.scheduledTransactionBody = $root.proto.SchedulableTransactionBody.decode(r, r.uint32());
                        break;
                    case 2:
                        m.memo = r.string();
                        break;
                    case 3:
                        m.adminKey = $root.proto.Key.decode(r, r.uint32());
                        break;
                    case 4:
                        m.payerAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleCreateTransactionBody;
        })();

        proto.ScheduleService = (function() {

            /**
             * Constructs a new ScheduleService service.
             * @memberof proto
             * @classdesc Represents a ScheduleService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function ScheduleService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (ScheduleService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = ScheduleService;

            /**
             * Creates new ScheduleService service using the specified rpc implementation.
             * @function create
             * @memberof proto.ScheduleService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {ScheduleService} RPC service. Useful where requests and/or responses are streamed.
             */
            ScheduleService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.ScheduleService#createSchedule}.
             * @memberof proto.ScheduleService
             * @typedef createScheduleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createSchedule.
             * @function createSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ScheduleService.createScheduleCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ScheduleService.prototype.createSchedule = function createSchedule(request, callback) {
                return this.rpcCall(createSchedule, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createSchedule" });

            /**
             * Calls createSchedule.
             * @function createSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ScheduleService#signSchedule}.
             * @memberof proto.ScheduleService
             * @typedef signScheduleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls signSchedule.
             * @function signSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ScheduleService.signScheduleCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ScheduleService.prototype.signSchedule = function signSchedule(request, callback) {
                return this.rpcCall(signSchedule, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "signSchedule" });

            /**
             * Calls signSchedule.
             * @function signSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ScheduleService#deleteSchedule}.
             * @memberof proto.ScheduleService
             * @typedef deleteScheduleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteSchedule.
             * @function deleteSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.ScheduleService.deleteScheduleCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ScheduleService.prototype.deleteSchedule = function deleteSchedule(request, callback) {
                return this.rpcCall(deleteSchedule, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteSchedule" });

            /**
             * Calls deleteSchedule.
             * @function deleteSchedule
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.ScheduleService#getScheduleInfo}.
             * @memberof proto.ScheduleService
             * @typedef getScheduleInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getScheduleInfo.
             * @function getScheduleInfo
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.ScheduleService.getScheduleInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ScheduleService.prototype.getScheduleInfo = function getScheduleInfo(request, callback) {
                return this.rpcCall(getScheduleInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getScheduleInfo" });

            /**
             * Calls getScheduleInfo.
             * @function getScheduleInfo
             * @memberof proto.ScheduleService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            return ScheduleService;
        })();

        proto.ScheduleSignTransactionBody = (function() {

            /**
             * Properties of a ScheduleSignTransactionBody.
             * @memberof proto
             * @interface IScheduleSignTransactionBody
             * @property {proto.IScheduleID|null} [scheduleID] ScheduleSignTransactionBody scheduleID
             */

            /**
             * Constructs a new ScheduleSignTransactionBody.
             * @memberof proto
             * @classdesc Represents a ScheduleSignTransactionBody.
             * @implements IScheduleSignTransactionBody
             * @constructor
             * @param {proto.IScheduleSignTransactionBody=} [p] Properties to set
             */
            function ScheduleSignTransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ScheduleSignTransactionBody scheduleID.
             * @member {proto.IScheduleID|null|undefined} scheduleID
             * @memberof proto.ScheduleSignTransactionBody
             * @instance
             */
            ScheduleSignTransactionBody.prototype.scheduleID = null;

            /**
             * Creates a new ScheduleSignTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.ScheduleSignTransactionBody
             * @static
             * @param {proto.IScheduleSignTransactionBody=} [properties] Properties to set
             * @returns {proto.ScheduleSignTransactionBody} ScheduleSignTransactionBody instance
             */
            ScheduleSignTransactionBody.create = function create(properties) {
                return new ScheduleSignTransactionBody(properties);
            };

            /**
             * Encodes the specified ScheduleSignTransactionBody message. Does not implicitly {@link proto.ScheduleSignTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.ScheduleSignTransactionBody
             * @static
             * @param {proto.IScheduleSignTransactionBody} m ScheduleSignTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduleSignTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.scheduleID != null && Object.hasOwnProperty.call(m, "scheduleID"))
                    $root.proto.ScheduleID.encode(m.scheduleID, w.uint32(10).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a ScheduleSignTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ScheduleSignTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ScheduleSignTransactionBody} ScheduleSignTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduleSignTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScheduleSignTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.scheduleID = $root.proto.ScheduleID.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ScheduleSignTransactionBody;
        })();

        proto.SmartContractService = (function() {

            /**
             * Constructs a new SmartContractService service.
             * @memberof proto
             * @classdesc Represents a SmartContractService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function SmartContractService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (SmartContractService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = SmartContractService;

            /**
             * Creates new SmartContractService service using the specified rpc implementation.
             * @function create
             * @memberof proto.SmartContractService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {SmartContractService} RPC service. Useful where requests and/or responses are streamed.
             */
            SmartContractService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.SmartContractService#createContract}.
             * @memberof proto.SmartContractService
             * @typedef createContractCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createContract.
             * @function createContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.createContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.createContract = function createContract(request, callback) {
                return this.rpcCall(createContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createContract" });

            /**
             * Calls createContract.
             * @function createContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#updateContract}.
             * @memberof proto.SmartContractService
             * @typedef updateContractCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls updateContract.
             * @function updateContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.updateContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.updateContract = function updateContract(request, callback) {
                return this.rpcCall(updateContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "updateContract" });

            /**
             * Calls updateContract.
             * @function updateContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#contractCallMethod}.
             * @memberof proto.SmartContractService
             * @typedef contractCallMethodCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls contractCallMethod.
             * @function contractCallMethod
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.contractCallMethodCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.contractCallMethod = function contractCallMethod(request, callback) {
                return this.rpcCall(contractCallMethod, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "contractCallMethod" });

            /**
             * Calls contractCallMethod.
             * @function contractCallMethod
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#getContractInfo}.
             * @memberof proto.SmartContractService
             * @typedef getContractInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getContractInfo.
             * @function getContractInfo
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.SmartContractService.getContractInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.getContractInfo = function getContractInfo(request, callback) {
                return this.rpcCall(getContractInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getContractInfo" });

            /**
             * Calls getContractInfo.
             * @function getContractInfo
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#contractCallLocalMethod}.
             * @memberof proto.SmartContractService
             * @typedef contractCallLocalMethodCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls contractCallLocalMethod.
             * @function contractCallLocalMethod
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.SmartContractService.contractCallLocalMethodCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.contractCallLocalMethod = function contractCallLocalMethod(request, callback) {
                return this.rpcCall(contractCallLocalMethod, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "contractCallLocalMethod" });

            /**
             * Calls contractCallLocalMethod.
             * @function contractCallLocalMethod
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#contractGetBytecode}.
             * @memberof proto.SmartContractService
             * @typedef ContractGetBytecodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls ContractGetBytecode.
             * @function contractGetBytecode
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.SmartContractService.ContractGetBytecodeCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.contractGetBytecode = function contractGetBytecode(request, callback) {
                return this.rpcCall(contractGetBytecode, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "ContractGetBytecode" });

            /**
             * Calls ContractGetBytecode.
             * @function contractGetBytecode
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#getBySolidityID}.
             * @memberof proto.SmartContractService
             * @typedef getBySolidityIDCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getBySolidityID.
             * @function getBySolidityID
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.SmartContractService.getBySolidityIDCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.getBySolidityID = function getBySolidityID(request, callback) {
                return this.rpcCall(getBySolidityID, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getBySolidityID" });

            /**
             * Calls getBySolidityID.
             * @function getBySolidityID
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#getTxRecordByContractID}.
             * @memberof proto.SmartContractService
             * @typedef getTxRecordByContractIDCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getTxRecordByContractID.
             * @function getTxRecordByContractID
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.SmartContractService.getTxRecordByContractIDCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.getTxRecordByContractID = function getTxRecordByContractID(request, callback) {
                return this.rpcCall(getTxRecordByContractID, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getTxRecordByContractID" });

            /**
             * Calls getTxRecordByContractID.
             * @function getTxRecordByContractID
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#deleteContract}.
             * @memberof proto.SmartContractService
             * @typedef deleteContractCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteContract.
             * @function deleteContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.deleteContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.deleteContract = function deleteContract(request, callback) {
                return this.rpcCall(deleteContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteContract" });

            /**
             * Calls deleteContract.
             * @function deleteContract
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#systemDelete}.
             * @memberof proto.SmartContractService
             * @typedef systemDeleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls systemDelete.
             * @function systemDelete
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.systemDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.systemDelete = function systemDelete(request, callback) {
                return this.rpcCall(systemDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "systemDelete" });

            /**
             * Calls systemDelete.
             * @function systemDelete
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.SmartContractService#systemUndelete}.
             * @memberof proto.SmartContractService
             * @typedef systemUndeleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls systemUndelete.
             * @function systemUndelete
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.SmartContractService.systemUndeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(SmartContractService.prototype.systemUndelete = function systemUndelete(request, callback) {
                return this.rpcCall(systemUndelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "systemUndelete" });

            /**
             * Calls systemUndelete.
             * @function systemUndelete
             * @memberof proto.SmartContractService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            return SmartContractService;
        })();

        proto.ThrottleGroup = (function() {

            /**
             * Properties of a ThrottleGroup.
             * @memberof proto
             * @interface IThrottleGroup
             * @property {Array.<proto.HederaFunctionality>|null} [operations] ThrottleGroup operations
             * @property {Long|null} [milliOpsPerSec] ThrottleGroup milliOpsPerSec
             */

            /**
             * Constructs a new ThrottleGroup.
             * @memberof proto
             * @classdesc Represents a ThrottleGroup.
             * @implements IThrottleGroup
             * @constructor
             * @param {proto.IThrottleGroup=} [p] Properties to set
             */
            function ThrottleGroup(p) {
                this.operations = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ThrottleGroup operations.
             * @member {Array.<proto.HederaFunctionality>} operations
             * @memberof proto.ThrottleGroup
             * @instance
             */
            ThrottleGroup.prototype.operations = $util.emptyArray;

            /**
             * ThrottleGroup milliOpsPerSec.
             * @member {Long} milliOpsPerSec
             * @memberof proto.ThrottleGroup
             * @instance
             */
            ThrottleGroup.prototype.milliOpsPerSec = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new ThrottleGroup instance using the specified properties.
             * @function create
             * @memberof proto.ThrottleGroup
             * @static
             * @param {proto.IThrottleGroup=} [properties] Properties to set
             * @returns {proto.ThrottleGroup} ThrottleGroup instance
             */
            ThrottleGroup.create = function create(properties) {
                return new ThrottleGroup(properties);
            };

            /**
             * Encodes the specified ThrottleGroup message. Does not implicitly {@link proto.ThrottleGroup.verify|verify} messages.
             * @function encode
             * @memberof proto.ThrottleGroup
             * @static
             * @param {proto.IThrottleGroup} m ThrottleGroup message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThrottleGroup.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.operations != null && m.operations.length) {
                    w.uint32(10).fork();
                    for (var i = 0; i < m.operations.length; ++i)
                        w.int32(m.operations[i]);
                    w.ldelim();
                }
                if (m.milliOpsPerSec != null && Object.hasOwnProperty.call(m, "milliOpsPerSec"))
                    w.uint32(16).uint64(m.milliOpsPerSec);
                return w;
            };

            /**
             * Decodes a ThrottleGroup message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ThrottleGroup
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ThrottleGroup} ThrottleGroup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThrottleGroup.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThrottleGroup();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.operations && m.operations.length))
                            m.operations = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2)
                                m.operations.push(r.int32());
                        } else
                            m.operations.push(r.int32());
                        break;
                    case 2:
                        m.milliOpsPerSec = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ThrottleGroup;
        })();

        proto.ThrottleBucket = (function() {

            /**
             * Properties of a ThrottleBucket.
             * @memberof proto
             * @interface IThrottleBucket
             * @property {string|null} [name] ThrottleBucket name
             * @property {Long|null} [burstPeriodMs] ThrottleBucket burstPeriodMs
             * @property {Array.<proto.IThrottleGroup>|null} [throttleGroups] ThrottleBucket throttleGroups
             */

            /**
             * Constructs a new ThrottleBucket.
             * @memberof proto
             * @classdesc Represents a ThrottleBucket.
             * @implements IThrottleBucket
             * @constructor
             * @param {proto.IThrottleBucket=} [p] Properties to set
             */
            function ThrottleBucket(p) {
                this.throttleGroups = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ThrottleBucket name.
             * @member {string} name
             * @memberof proto.ThrottleBucket
             * @instance
             */
            ThrottleBucket.prototype.name = "";

            /**
             * ThrottleBucket burstPeriodMs.
             * @member {Long} burstPeriodMs
             * @memberof proto.ThrottleBucket
             * @instance
             */
            ThrottleBucket.prototype.burstPeriodMs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ThrottleBucket throttleGroups.
             * @member {Array.<proto.IThrottleGroup>} throttleGroups
             * @memberof proto.ThrottleBucket
             * @instance
             */
            ThrottleBucket.prototype.throttleGroups = $util.emptyArray;

            /**
             * Creates a new ThrottleBucket instance using the specified properties.
             * @function create
             * @memberof proto.ThrottleBucket
             * @static
             * @param {proto.IThrottleBucket=} [properties] Properties to set
             * @returns {proto.ThrottleBucket} ThrottleBucket instance
             */
            ThrottleBucket.create = function create(properties) {
                return new ThrottleBucket(properties);
            };

            /**
             * Encodes the specified ThrottleBucket message. Does not implicitly {@link proto.ThrottleBucket.verify|verify} messages.
             * @function encode
             * @memberof proto.ThrottleBucket
             * @static
             * @param {proto.IThrottleBucket} m ThrottleBucket message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThrottleBucket.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                    w.uint32(10).string(m.name);
                if (m.burstPeriodMs != null && Object.hasOwnProperty.call(m, "burstPeriodMs"))
                    w.uint32(16).uint64(m.burstPeriodMs);
                if (m.throttleGroups != null && m.throttleGroups.length) {
                    for (var i = 0; i < m.throttleGroups.length; ++i)
                        $root.proto.ThrottleGroup.encode(m.throttleGroups[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ThrottleBucket message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ThrottleBucket
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ThrottleBucket} ThrottleBucket
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThrottleBucket.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThrottleBucket();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        m.burstPeriodMs = r.uint64();
                        break;
                    case 3:
                        if (!(m.throttleGroups && m.throttleGroups.length))
                            m.throttleGroups = [];
                        m.throttleGroups.push($root.proto.ThrottleGroup.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ThrottleBucket;
        })();

        proto.ThrottleDefinitions = (function() {

            /**
             * Properties of a ThrottleDefinitions.
             * @memberof proto
             * @interface IThrottleDefinitions
             * @property {Array.<proto.IThrottleBucket>|null} [throttleBuckets] ThrottleDefinitions throttleBuckets
             */

            /**
             * Constructs a new ThrottleDefinitions.
             * @memberof proto
             * @classdesc Represents a ThrottleDefinitions.
             * @implements IThrottleDefinitions
             * @constructor
             * @param {proto.IThrottleDefinitions=} [p] Properties to set
             */
            function ThrottleDefinitions(p) {
                this.throttleBuckets = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * ThrottleDefinitions throttleBuckets.
             * @member {Array.<proto.IThrottleBucket>} throttleBuckets
             * @memberof proto.ThrottleDefinitions
             * @instance
             */
            ThrottleDefinitions.prototype.throttleBuckets = $util.emptyArray;

            /**
             * Creates a new ThrottleDefinitions instance using the specified properties.
             * @function create
             * @memberof proto.ThrottleDefinitions
             * @static
             * @param {proto.IThrottleDefinitions=} [properties] Properties to set
             * @returns {proto.ThrottleDefinitions} ThrottleDefinitions instance
             */
            ThrottleDefinitions.create = function create(properties) {
                return new ThrottleDefinitions(properties);
            };

            /**
             * Encodes the specified ThrottleDefinitions message. Does not implicitly {@link proto.ThrottleDefinitions.verify|verify} messages.
             * @function encode
             * @memberof proto.ThrottleDefinitions
             * @static
             * @param {proto.IThrottleDefinitions} m ThrottleDefinitions message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThrottleDefinitions.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.throttleBuckets != null && m.throttleBuckets.length) {
                    for (var i = 0; i < m.throttleBuckets.length; ++i)
                        $root.proto.ThrottleBucket.encode(m.throttleBuckets[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a ThrottleDefinitions message from the specified reader or buffer.
             * @function decode
             * @memberof proto.ThrottleDefinitions
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.ThrottleDefinitions} ThrottleDefinitions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThrottleDefinitions.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThrottleDefinitions();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.throttleBuckets && m.throttleBuckets.length))
                            m.throttleBuckets = [];
                        m.throttleBuckets.push($root.proto.ThrottleBucket.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ThrottleDefinitions;
        })();

        proto.TokenService = (function() {

            /**
             * Constructs a new TokenService service.
             * @memberof proto
             * @classdesc Represents a TokenService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function TokenService(rpcImpl, requestDelimited, responseDelimited) {
                minimal.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (TokenService.prototype = Object.create(minimal.rpc.Service.prototype)).constructor = TokenService;

            /**
             * Creates new TokenService service using the specified rpc implementation.
             * @function create
             * @memberof proto.TokenService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {TokenService} RPC service. Useful where requests and/or responses are streamed.
             */
            TokenService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link proto.TokenService#createToken}.
             * @memberof proto.TokenService
             * @typedef createTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls createToken.
             * @function createToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.createTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.createToken = function createToken(request, callback) {
                return this.rpcCall(createToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "createToken" });

            /**
             * Calls createToken.
             * @function createToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#updateToken}.
             * @memberof proto.TokenService
             * @typedef updateTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls updateToken.
             * @function updateToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.updateTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.updateToken = function updateToken(request, callback) {
                return this.rpcCall(updateToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "updateToken" });

            /**
             * Calls updateToken.
             * @function updateToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#mintToken}.
             * @memberof proto.TokenService
             * @typedef mintTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls mintToken.
             * @function mintToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.mintTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.mintToken = function mintToken(request, callback) {
                return this.rpcCall(mintToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "mintToken" });

            /**
             * Calls mintToken.
             * @function mintToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#burnToken}.
             * @memberof proto.TokenService
             * @typedef burnTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls burnToken.
             * @function burnToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.burnTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.burnToken = function burnToken(request, callback) {
                return this.rpcCall(burnToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "burnToken" });

            /**
             * Calls burnToken.
             * @function burnToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#deleteToken}.
             * @memberof proto.TokenService
             * @typedef deleteTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls deleteToken.
             * @function deleteToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.deleteTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.deleteToken = function deleteToken(request, callback) {
                return this.rpcCall(deleteToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "deleteToken" });

            /**
             * Calls deleteToken.
             * @function deleteToken
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#wipeTokenAccount}.
             * @memberof proto.TokenService
             * @typedef wipeTokenAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls wipeTokenAccount.
             * @function wipeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.wipeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.wipeTokenAccount = function wipeTokenAccount(request, callback) {
                return this.rpcCall(wipeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "wipeTokenAccount" });

            /**
             * Calls wipeTokenAccount.
             * @function wipeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#freezeTokenAccount}.
             * @memberof proto.TokenService
             * @typedef freezeTokenAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls freezeTokenAccount.
             * @function freezeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.freezeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.freezeTokenAccount = function freezeTokenAccount(request, callback) {
                return this.rpcCall(freezeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "freezeTokenAccount" });

            /**
             * Calls freezeTokenAccount.
             * @function freezeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#unfreezeTokenAccount}.
             * @memberof proto.TokenService
             * @typedef unfreezeTokenAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls unfreezeTokenAccount.
             * @function unfreezeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.unfreezeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.unfreezeTokenAccount = function unfreezeTokenAccount(request, callback) {
                return this.rpcCall(unfreezeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "unfreezeTokenAccount" });

            /**
             * Calls unfreezeTokenAccount.
             * @function unfreezeTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#grantKycToTokenAccount}.
             * @memberof proto.TokenService
             * @typedef grantKycToTokenAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls grantKycToTokenAccount.
             * @function grantKycToTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.grantKycToTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.grantKycToTokenAccount = function grantKycToTokenAccount(request, callback) {
                return this.rpcCall(grantKycToTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "grantKycToTokenAccount" });

            /**
             * Calls grantKycToTokenAccount.
             * @function grantKycToTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#revokeKycFromTokenAccount}.
             * @memberof proto.TokenService
             * @typedef revokeKycFromTokenAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls revokeKycFromTokenAccount.
             * @function revokeKycFromTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.revokeKycFromTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.revokeKycFromTokenAccount = function revokeKycFromTokenAccount(request, callback) {
                return this.rpcCall(revokeKycFromTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "revokeKycFromTokenAccount" });

            /**
             * Calls revokeKycFromTokenAccount.
             * @function revokeKycFromTokenAccount
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#associateTokens}.
             * @memberof proto.TokenService
             * @typedef associateTokensCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls associateTokens.
             * @function associateTokens
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.associateTokensCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.associateTokens = function associateTokens(request, callback) {
                return this.rpcCall(associateTokens, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "associateTokens" });

            /**
             * Calls associateTokens.
             * @function associateTokens
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#dissociateTokens}.
             * @memberof proto.TokenService
             * @typedef dissociateTokensCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.TransactionResponse} [response] TransactionResponse
             */

            /**
             * Calls dissociateTokens.
             * @function dissociateTokens
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @param {proto.TokenService.dissociateTokensCallback} callback Node-style callback called with the error, if any, and TransactionResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.dissociateTokens = function dissociateTokens(request, callback) {
                return this.rpcCall(dissociateTokens, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);
            }, "name", { value: "dissociateTokens" });

            /**
             * Calls dissociateTokens.
             * @function dissociateTokens
             * @memberof proto.TokenService
             * @instance
             * @param {proto.ITransaction} request Transaction message or plain object
             * @returns {Promise<proto.TransactionResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link proto.TokenService#getTokenInfo}.
             * @memberof proto.TokenService
             * @typedef getTokenInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {proto.Response} [response] Response
             */

            /**
             * Calls getTokenInfo.
             * @function getTokenInfo
             * @memberof proto.TokenService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @param {proto.TokenService.getTokenInfoCallback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TokenService.prototype.getTokenInfo = function getTokenInfo(request, callback) {
                return this.rpcCall(getTokenInfo, $root.proto.Query, $root.proto.Response, request, callback);
            }, "name", { value: "getTokenInfo" });

            /**
             * Calls getTokenInfo.
             * @function getTokenInfo
             * @memberof proto.TokenService
             * @instance
             * @param {proto.IQuery} request Query message or plain object
             * @returns {Promise<proto.Response>} Promise
             * @variation 2
             */

            return TokenService;
        })();

        proto.TokenTransfersTransactionBody = (function() {

            /**
             * Properties of a TokenTransfersTransactionBody.
             * @memberof proto
             * @interface ITokenTransfersTransactionBody
             * @property {Array.<proto.ITokenTransferList>|null} [tokenTransfers] TokenTransfersTransactionBody tokenTransfers
             */

            /**
             * Constructs a new TokenTransfersTransactionBody.
             * @memberof proto
             * @classdesc Represents a TokenTransfersTransactionBody.
             * @implements ITokenTransfersTransactionBody
             * @constructor
             * @param {proto.ITokenTransfersTransactionBody=} [p] Properties to set
             */
            function TokenTransfersTransactionBody(p) {
                this.tokenTransfers = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TokenTransfersTransactionBody tokenTransfers.
             * @member {Array.<proto.ITokenTransferList>} tokenTransfers
             * @memberof proto.TokenTransfersTransactionBody
             * @instance
             */
            TokenTransfersTransactionBody.prototype.tokenTransfers = $util.emptyArray;

            /**
             * Creates a new TokenTransfersTransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TokenTransfersTransactionBody
             * @static
             * @param {proto.ITokenTransfersTransactionBody=} [properties] Properties to set
             * @returns {proto.TokenTransfersTransactionBody} TokenTransfersTransactionBody instance
             */
            TokenTransfersTransactionBody.create = function create(properties) {
                return new TokenTransfersTransactionBody(properties);
            };

            /**
             * Encodes the specified TokenTransfersTransactionBody message. Does not implicitly {@link proto.TokenTransfersTransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TokenTransfersTransactionBody
             * @static
             * @param {proto.ITokenTransfersTransactionBody} m TokenTransfersTransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenTransfersTransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.tokenTransfers != null && m.tokenTransfers.length) {
                    for (var i = 0; i < m.tokenTransfers.length; ++i)
                        $root.proto.TokenTransferList.encode(m.tokenTransfers[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TokenTransfersTransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TokenTransfersTransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TokenTransfersTransactionBody} TokenTransfersTransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenTransfersTransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenTransfersTransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.tokenTransfers && m.tokenTransfers.length))
                            m.tokenTransfers = [];
                        m.tokenTransfers.push($root.proto.TokenTransferList.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TokenTransfersTransactionBody;
        })();

        proto.TransactionBody = (function() {

            /**
             * Properties of a TransactionBody.
             * @memberof proto
             * @interface ITransactionBody
             * @property {proto.ITransactionID|null} [transactionID] TransactionBody transactionID
             * @property {proto.IAccountID|null} [nodeAccountID] TransactionBody nodeAccountID
             * @property {Long|null} [transactionFee] TransactionBody transactionFee
             * @property {proto.IDuration|null} [transactionValidDuration] TransactionBody transactionValidDuration
             * @property {boolean|null} [generateRecord] TransactionBody generateRecord
             * @property {string|null} [memo] TransactionBody memo
             * @property {proto.IContractCallTransactionBody|null} [contractCall] TransactionBody contractCall
             * @property {proto.IContractCreateTransactionBody|null} [contractCreateInstance] TransactionBody contractCreateInstance
             * @property {proto.IContractUpdateTransactionBody|null} [contractUpdateInstance] TransactionBody contractUpdateInstance
             * @property {proto.IContractDeleteTransactionBody|null} [contractDeleteInstance] TransactionBody contractDeleteInstance
             * @property {proto.ICryptoAddLiveHashTransactionBody|null} [cryptoAddLiveHash] TransactionBody cryptoAddLiveHash
             * @property {proto.ICryptoCreateTransactionBody|null} [cryptoCreateAccount] TransactionBody cryptoCreateAccount
             * @property {proto.ICryptoDeleteTransactionBody|null} [cryptoDelete] TransactionBody cryptoDelete
             * @property {proto.ICryptoDeleteLiveHashTransactionBody|null} [cryptoDeleteLiveHash] TransactionBody cryptoDeleteLiveHash
             * @property {proto.ICryptoTransferTransactionBody|null} [cryptoTransfer] TransactionBody cryptoTransfer
             * @property {proto.ICryptoUpdateTransactionBody|null} [cryptoUpdateAccount] TransactionBody cryptoUpdateAccount
             * @property {proto.IFileAppendTransactionBody|null} [fileAppend] TransactionBody fileAppend
             * @property {proto.IFileCreateTransactionBody|null} [fileCreate] TransactionBody fileCreate
             * @property {proto.IFileDeleteTransactionBody|null} [fileDelete] TransactionBody fileDelete
             * @property {proto.IFileUpdateTransactionBody|null} [fileUpdate] TransactionBody fileUpdate
             * @property {proto.ISystemDeleteTransactionBody|null} [systemDelete] TransactionBody systemDelete
             * @property {proto.ISystemUndeleteTransactionBody|null} [systemUndelete] TransactionBody systemUndelete
             * @property {proto.IFreezeTransactionBody|null} [freeze] TransactionBody freeze
             * @property {proto.IConsensusCreateTopicTransactionBody|null} [consensusCreateTopic] TransactionBody consensusCreateTopic
             * @property {proto.IConsensusUpdateTopicTransactionBody|null} [consensusUpdateTopic] TransactionBody consensusUpdateTopic
             * @property {proto.IConsensusDeleteTopicTransactionBody|null} [consensusDeleteTopic] TransactionBody consensusDeleteTopic
             * @property {proto.IConsensusSubmitMessageTransactionBody|null} [consensusSubmitMessage] TransactionBody consensusSubmitMessage
             * @property {proto.IUncheckedSubmitBody|null} [uncheckedSubmit] TransactionBody uncheckedSubmit
             * @property {proto.ITokenCreateTransactionBody|null} [tokenCreation] TransactionBody tokenCreation
             * @property {proto.ITokenFreezeAccountTransactionBody|null} [tokenFreeze] TransactionBody tokenFreeze
             * @property {proto.ITokenUnfreezeAccountTransactionBody|null} [tokenUnfreeze] TransactionBody tokenUnfreeze
             * @property {proto.ITokenGrantKycTransactionBody|null} [tokenGrantKyc] TransactionBody tokenGrantKyc
             * @property {proto.ITokenRevokeKycTransactionBody|null} [tokenRevokeKyc] TransactionBody tokenRevokeKyc
             * @property {proto.ITokenDeleteTransactionBody|null} [tokenDeletion] TransactionBody tokenDeletion
             * @property {proto.ITokenUpdateTransactionBody|null} [tokenUpdate] TransactionBody tokenUpdate
             * @property {proto.ITokenMintTransactionBody|null} [tokenMint] TransactionBody tokenMint
             * @property {proto.ITokenBurnTransactionBody|null} [tokenBurn] TransactionBody tokenBurn
             * @property {proto.ITokenWipeAccountTransactionBody|null} [tokenWipe] TransactionBody tokenWipe
             * @property {proto.ITokenAssociateTransactionBody|null} [tokenAssociate] TransactionBody tokenAssociate
             * @property {proto.ITokenDissociateTransactionBody|null} [tokenDissociate] TransactionBody tokenDissociate
             * @property {proto.IScheduleCreateTransactionBody|null} [scheduleCreate] TransactionBody scheduleCreate
             * @property {proto.IScheduleDeleteTransactionBody|null} [scheduleDelete] TransactionBody scheduleDelete
             * @property {proto.IScheduleSignTransactionBody|null} [scheduleSign] TransactionBody scheduleSign
             */

            /**
             * Constructs a new TransactionBody.
             * @memberof proto
             * @classdesc Represents a TransactionBody.
             * @implements ITransactionBody
             * @constructor
             * @param {proto.ITransactionBody=} [p] Properties to set
             */
            function TransactionBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionBody transactionID.
             * @member {proto.ITransactionID|null|undefined} transactionID
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.transactionID = null;

            /**
             * TransactionBody nodeAccountID.
             * @member {proto.IAccountID|null|undefined} nodeAccountID
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.nodeAccountID = null;

            /**
             * TransactionBody transactionFee.
             * @member {Long} transactionFee
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.transactionFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * TransactionBody transactionValidDuration.
             * @member {proto.IDuration|null|undefined} transactionValidDuration
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.transactionValidDuration = null;

            /**
             * TransactionBody generateRecord.
             * @member {boolean} generateRecord
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.generateRecord = false;

            /**
             * TransactionBody memo.
             * @member {string} memo
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.memo = "";

            /**
             * TransactionBody contractCall.
             * @member {proto.IContractCallTransactionBody|null|undefined} contractCall
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.contractCall = null;

            /**
             * TransactionBody contractCreateInstance.
             * @member {proto.IContractCreateTransactionBody|null|undefined} contractCreateInstance
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.contractCreateInstance = null;

            /**
             * TransactionBody contractUpdateInstance.
             * @member {proto.IContractUpdateTransactionBody|null|undefined} contractUpdateInstance
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.contractUpdateInstance = null;

            /**
             * TransactionBody contractDeleteInstance.
             * @member {proto.IContractDeleteTransactionBody|null|undefined} contractDeleteInstance
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.contractDeleteInstance = null;

            /**
             * TransactionBody cryptoAddLiveHash.
             * @member {proto.ICryptoAddLiveHashTransactionBody|null|undefined} cryptoAddLiveHash
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoAddLiveHash = null;

            /**
             * TransactionBody cryptoCreateAccount.
             * @member {proto.ICryptoCreateTransactionBody|null|undefined} cryptoCreateAccount
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoCreateAccount = null;

            /**
             * TransactionBody cryptoDelete.
             * @member {proto.ICryptoDeleteTransactionBody|null|undefined} cryptoDelete
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoDelete = null;

            /**
             * TransactionBody cryptoDeleteLiveHash.
             * @member {proto.ICryptoDeleteLiveHashTransactionBody|null|undefined} cryptoDeleteLiveHash
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoDeleteLiveHash = null;

            /**
             * TransactionBody cryptoTransfer.
             * @member {proto.ICryptoTransferTransactionBody|null|undefined} cryptoTransfer
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoTransfer = null;

            /**
             * TransactionBody cryptoUpdateAccount.
             * @member {proto.ICryptoUpdateTransactionBody|null|undefined} cryptoUpdateAccount
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.cryptoUpdateAccount = null;

            /**
             * TransactionBody fileAppend.
             * @member {proto.IFileAppendTransactionBody|null|undefined} fileAppend
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.fileAppend = null;

            /**
             * TransactionBody fileCreate.
             * @member {proto.IFileCreateTransactionBody|null|undefined} fileCreate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.fileCreate = null;

            /**
             * TransactionBody fileDelete.
             * @member {proto.IFileDeleteTransactionBody|null|undefined} fileDelete
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.fileDelete = null;

            /**
             * TransactionBody fileUpdate.
             * @member {proto.IFileUpdateTransactionBody|null|undefined} fileUpdate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.fileUpdate = null;

            /**
             * TransactionBody systemDelete.
             * @member {proto.ISystemDeleteTransactionBody|null|undefined} systemDelete
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.systemDelete = null;

            /**
             * TransactionBody systemUndelete.
             * @member {proto.ISystemUndeleteTransactionBody|null|undefined} systemUndelete
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.systemUndelete = null;

            /**
             * TransactionBody freeze.
             * @member {proto.IFreezeTransactionBody|null|undefined} freeze
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.freeze = null;

            /**
             * TransactionBody consensusCreateTopic.
             * @member {proto.IConsensusCreateTopicTransactionBody|null|undefined} consensusCreateTopic
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.consensusCreateTopic = null;

            /**
             * TransactionBody consensusUpdateTopic.
             * @member {proto.IConsensusUpdateTopicTransactionBody|null|undefined} consensusUpdateTopic
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.consensusUpdateTopic = null;

            /**
             * TransactionBody consensusDeleteTopic.
             * @member {proto.IConsensusDeleteTopicTransactionBody|null|undefined} consensusDeleteTopic
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.consensusDeleteTopic = null;

            /**
             * TransactionBody consensusSubmitMessage.
             * @member {proto.IConsensusSubmitMessageTransactionBody|null|undefined} consensusSubmitMessage
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.consensusSubmitMessage = null;

            /**
             * TransactionBody uncheckedSubmit.
             * @member {proto.IUncheckedSubmitBody|null|undefined} uncheckedSubmit
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.uncheckedSubmit = null;

            /**
             * TransactionBody tokenCreation.
             * @member {proto.ITokenCreateTransactionBody|null|undefined} tokenCreation
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenCreation = null;

            /**
             * TransactionBody tokenFreeze.
             * @member {proto.ITokenFreezeAccountTransactionBody|null|undefined} tokenFreeze
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenFreeze = null;

            /**
             * TransactionBody tokenUnfreeze.
             * @member {proto.ITokenUnfreezeAccountTransactionBody|null|undefined} tokenUnfreeze
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenUnfreeze = null;

            /**
             * TransactionBody tokenGrantKyc.
             * @member {proto.ITokenGrantKycTransactionBody|null|undefined} tokenGrantKyc
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenGrantKyc = null;

            /**
             * TransactionBody tokenRevokeKyc.
             * @member {proto.ITokenRevokeKycTransactionBody|null|undefined} tokenRevokeKyc
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenRevokeKyc = null;

            /**
             * TransactionBody tokenDeletion.
             * @member {proto.ITokenDeleteTransactionBody|null|undefined} tokenDeletion
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenDeletion = null;

            /**
             * TransactionBody tokenUpdate.
             * @member {proto.ITokenUpdateTransactionBody|null|undefined} tokenUpdate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenUpdate = null;

            /**
             * TransactionBody tokenMint.
             * @member {proto.ITokenMintTransactionBody|null|undefined} tokenMint
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenMint = null;

            /**
             * TransactionBody tokenBurn.
             * @member {proto.ITokenBurnTransactionBody|null|undefined} tokenBurn
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenBurn = null;

            /**
             * TransactionBody tokenWipe.
             * @member {proto.ITokenWipeAccountTransactionBody|null|undefined} tokenWipe
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenWipe = null;

            /**
             * TransactionBody tokenAssociate.
             * @member {proto.ITokenAssociateTransactionBody|null|undefined} tokenAssociate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenAssociate = null;

            /**
             * TransactionBody tokenDissociate.
             * @member {proto.ITokenDissociateTransactionBody|null|undefined} tokenDissociate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.tokenDissociate = null;

            /**
             * TransactionBody scheduleCreate.
             * @member {proto.IScheduleCreateTransactionBody|null|undefined} scheduleCreate
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.scheduleCreate = null;

            /**
             * TransactionBody scheduleDelete.
             * @member {proto.IScheduleDeleteTransactionBody|null|undefined} scheduleDelete
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.scheduleDelete = null;

            /**
             * TransactionBody scheduleSign.
             * @member {proto.IScheduleSignTransactionBody|null|undefined} scheduleSign
             * @memberof proto.TransactionBody
             * @instance
             */
            TransactionBody.prototype.scheduleSign = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * TransactionBody data.
             * @member {"contractCall"|"contractCreateInstance"|"contractUpdateInstance"|"contractDeleteInstance"|"cryptoAddLiveHash"|"cryptoCreateAccount"|"cryptoDelete"|"cryptoDeleteLiveHash"|"cryptoTransfer"|"cryptoUpdateAccount"|"fileAppend"|"fileCreate"|"fileDelete"|"fileUpdate"|"systemDelete"|"systemUndelete"|"freeze"|"consensusCreateTopic"|"consensusUpdateTopic"|"consensusDeleteTopic"|"consensusSubmitMessage"|"uncheckedSubmit"|"tokenCreation"|"tokenFreeze"|"tokenUnfreeze"|"tokenGrantKyc"|"tokenRevokeKyc"|"tokenDeletion"|"tokenUpdate"|"tokenMint"|"tokenBurn"|"tokenWipe"|"tokenAssociate"|"tokenDissociate"|"scheduleCreate"|"scheduleDelete"|"scheduleSign"|undefined} data
             * @memberof proto.TransactionBody
             * @instance
             */
            Object.defineProperty(TransactionBody.prototype, "data", {
                get: $util.oneOfGetter($oneOfFields = ["contractCall", "contractCreateInstance", "contractUpdateInstance", "contractDeleteInstance", "cryptoAddLiveHash", "cryptoCreateAccount", "cryptoDelete", "cryptoDeleteLiveHash", "cryptoTransfer", "cryptoUpdateAccount", "fileAppend", "fileCreate", "fileDelete", "fileUpdate", "systemDelete", "systemUndelete", "freeze", "consensusCreateTopic", "consensusUpdateTopic", "consensusDeleteTopic", "consensusSubmitMessage", "uncheckedSubmit", "tokenCreation", "tokenFreeze", "tokenUnfreeze", "tokenGrantKyc", "tokenRevokeKyc", "tokenDeletion", "tokenUpdate", "tokenMint", "tokenBurn", "tokenWipe", "tokenAssociate", "tokenDissociate", "scheduleCreate", "scheduleDelete", "scheduleSign"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new TransactionBody instance using the specified properties.
             * @function create
             * @memberof proto.TransactionBody
             * @static
             * @param {proto.ITransactionBody=} [properties] Properties to set
             * @returns {proto.TransactionBody} TransactionBody instance
             */
            TransactionBody.create = function create(properties) {
                return new TransactionBody(properties);
            };

            /**
             * Encodes the specified TransactionBody message. Does not implicitly {@link proto.TransactionBody.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionBody
             * @static
             * @param {proto.ITransactionBody} m TransactionBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionID != null && Object.hasOwnProperty.call(m, "transactionID"))
                    $root.proto.TransactionID.encode(m.transactionID, w.uint32(10).fork()).ldelim();
                if (m.nodeAccountID != null && Object.hasOwnProperty.call(m, "nodeAccountID"))
                    $root.proto.AccountID.encode(m.nodeAccountID, w.uint32(18).fork()).ldelim();
                if (m.transactionFee != null && Object.hasOwnProperty.call(m, "transactionFee"))
                    w.uint32(24).uint64(m.transactionFee);
                if (m.transactionValidDuration != null && Object.hasOwnProperty.call(m, "transactionValidDuration"))
                    $root.proto.Duration.encode(m.transactionValidDuration, w.uint32(34).fork()).ldelim();
                if (m.generateRecord != null && Object.hasOwnProperty.call(m, "generateRecord"))
                    w.uint32(40).bool(m.generateRecord);
                if (m.memo != null && Object.hasOwnProperty.call(m, "memo"))
                    w.uint32(50).string(m.memo);
                if (m.contractCall != null && Object.hasOwnProperty.call(m, "contractCall"))
                    $root.proto.ContractCallTransactionBody.encode(m.contractCall, w.uint32(58).fork()).ldelim();
                if (m.contractCreateInstance != null && Object.hasOwnProperty.call(m, "contractCreateInstance"))
                    $root.proto.ContractCreateTransactionBody.encode(m.contractCreateInstance, w.uint32(66).fork()).ldelim();
                if (m.contractUpdateInstance != null && Object.hasOwnProperty.call(m, "contractUpdateInstance"))
                    $root.proto.ContractUpdateTransactionBody.encode(m.contractUpdateInstance, w.uint32(74).fork()).ldelim();
                if (m.cryptoAddLiveHash != null && Object.hasOwnProperty.call(m, "cryptoAddLiveHash"))
                    $root.proto.CryptoAddLiveHashTransactionBody.encode(m.cryptoAddLiveHash, w.uint32(82).fork()).ldelim();
                if (m.cryptoCreateAccount != null && Object.hasOwnProperty.call(m, "cryptoCreateAccount"))
                    $root.proto.CryptoCreateTransactionBody.encode(m.cryptoCreateAccount, w.uint32(90).fork()).ldelim();
                if (m.cryptoDelete != null && Object.hasOwnProperty.call(m, "cryptoDelete"))
                    $root.proto.CryptoDeleteTransactionBody.encode(m.cryptoDelete, w.uint32(98).fork()).ldelim();
                if (m.cryptoDeleteLiveHash != null && Object.hasOwnProperty.call(m, "cryptoDeleteLiveHash"))
                    $root.proto.CryptoDeleteLiveHashTransactionBody.encode(m.cryptoDeleteLiveHash, w.uint32(106).fork()).ldelim();
                if (m.cryptoTransfer != null && Object.hasOwnProperty.call(m, "cryptoTransfer"))
                    $root.proto.CryptoTransferTransactionBody.encode(m.cryptoTransfer, w.uint32(114).fork()).ldelim();
                if (m.cryptoUpdateAccount != null && Object.hasOwnProperty.call(m, "cryptoUpdateAccount"))
                    $root.proto.CryptoUpdateTransactionBody.encode(m.cryptoUpdateAccount, w.uint32(122).fork()).ldelim();
                if (m.fileAppend != null && Object.hasOwnProperty.call(m, "fileAppend"))
                    $root.proto.FileAppendTransactionBody.encode(m.fileAppend, w.uint32(130).fork()).ldelim();
                if (m.fileCreate != null && Object.hasOwnProperty.call(m, "fileCreate"))
                    $root.proto.FileCreateTransactionBody.encode(m.fileCreate, w.uint32(138).fork()).ldelim();
                if (m.fileDelete != null && Object.hasOwnProperty.call(m, "fileDelete"))
                    $root.proto.FileDeleteTransactionBody.encode(m.fileDelete, w.uint32(146).fork()).ldelim();
                if (m.fileUpdate != null && Object.hasOwnProperty.call(m, "fileUpdate"))
                    $root.proto.FileUpdateTransactionBody.encode(m.fileUpdate, w.uint32(154).fork()).ldelim();
                if (m.systemDelete != null && Object.hasOwnProperty.call(m, "systemDelete"))
                    $root.proto.SystemDeleteTransactionBody.encode(m.systemDelete, w.uint32(162).fork()).ldelim();
                if (m.systemUndelete != null && Object.hasOwnProperty.call(m, "systemUndelete"))
                    $root.proto.SystemUndeleteTransactionBody.encode(m.systemUndelete, w.uint32(170).fork()).ldelim();
                if (m.contractDeleteInstance != null && Object.hasOwnProperty.call(m, "contractDeleteInstance"))
                    $root.proto.ContractDeleteTransactionBody.encode(m.contractDeleteInstance, w.uint32(178).fork()).ldelim();
                if (m.freeze != null && Object.hasOwnProperty.call(m, "freeze"))
                    $root.proto.FreezeTransactionBody.encode(m.freeze, w.uint32(186).fork()).ldelim();
                if (m.consensusCreateTopic != null && Object.hasOwnProperty.call(m, "consensusCreateTopic"))
                    $root.proto.ConsensusCreateTopicTransactionBody.encode(m.consensusCreateTopic, w.uint32(194).fork()).ldelim();
                if (m.consensusUpdateTopic != null && Object.hasOwnProperty.call(m, "consensusUpdateTopic"))
                    $root.proto.ConsensusUpdateTopicTransactionBody.encode(m.consensusUpdateTopic, w.uint32(202).fork()).ldelim();
                if (m.consensusDeleteTopic != null && Object.hasOwnProperty.call(m, "consensusDeleteTopic"))
                    $root.proto.ConsensusDeleteTopicTransactionBody.encode(m.consensusDeleteTopic, w.uint32(210).fork()).ldelim();
                if (m.consensusSubmitMessage != null && Object.hasOwnProperty.call(m, "consensusSubmitMessage"))
                    $root.proto.ConsensusSubmitMessageTransactionBody.encode(m.consensusSubmitMessage, w.uint32(218).fork()).ldelim();
                if (m.uncheckedSubmit != null && Object.hasOwnProperty.call(m, "uncheckedSubmit"))
                    $root.proto.UncheckedSubmitBody.encode(m.uncheckedSubmit, w.uint32(226).fork()).ldelim();
                if (m.tokenCreation != null && Object.hasOwnProperty.call(m, "tokenCreation"))
                    $root.proto.TokenCreateTransactionBody.encode(m.tokenCreation, w.uint32(234).fork()).ldelim();
                if (m.tokenFreeze != null && Object.hasOwnProperty.call(m, "tokenFreeze"))
                    $root.proto.TokenFreezeAccountTransactionBody.encode(m.tokenFreeze, w.uint32(250).fork()).ldelim();
                if (m.tokenUnfreeze != null && Object.hasOwnProperty.call(m, "tokenUnfreeze"))
                    $root.proto.TokenUnfreezeAccountTransactionBody.encode(m.tokenUnfreeze, w.uint32(258).fork()).ldelim();
                if (m.tokenGrantKyc != null && Object.hasOwnProperty.call(m, "tokenGrantKyc"))
                    $root.proto.TokenGrantKycTransactionBody.encode(m.tokenGrantKyc, w.uint32(266).fork()).ldelim();
                if (m.tokenRevokeKyc != null && Object.hasOwnProperty.call(m, "tokenRevokeKyc"))
                    $root.proto.TokenRevokeKycTransactionBody.encode(m.tokenRevokeKyc, w.uint32(274).fork()).ldelim();
                if (m.tokenDeletion != null && Object.hasOwnProperty.call(m, "tokenDeletion"))
                    $root.proto.TokenDeleteTransactionBody.encode(m.tokenDeletion, w.uint32(282).fork()).ldelim();
                if (m.tokenUpdate != null && Object.hasOwnProperty.call(m, "tokenUpdate"))
                    $root.proto.TokenUpdateTransactionBody.encode(m.tokenUpdate, w.uint32(290).fork()).ldelim();
                if (m.tokenMint != null && Object.hasOwnProperty.call(m, "tokenMint"))
                    $root.proto.TokenMintTransactionBody.encode(m.tokenMint, w.uint32(298).fork()).ldelim();
                if (m.tokenBurn != null && Object.hasOwnProperty.call(m, "tokenBurn"))
                    $root.proto.TokenBurnTransactionBody.encode(m.tokenBurn, w.uint32(306).fork()).ldelim();
                if (m.tokenWipe != null && Object.hasOwnProperty.call(m, "tokenWipe"))
                    $root.proto.TokenWipeAccountTransactionBody.encode(m.tokenWipe, w.uint32(314).fork()).ldelim();
                if (m.tokenAssociate != null && Object.hasOwnProperty.call(m, "tokenAssociate"))
                    $root.proto.TokenAssociateTransactionBody.encode(m.tokenAssociate, w.uint32(322).fork()).ldelim();
                if (m.tokenDissociate != null && Object.hasOwnProperty.call(m, "tokenDissociate"))
                    $root.proto.TokenDissociateTransactionBody.encode(m.tokenDissociate, w.uint32(330).fork()).ldelim();
                if (m.scheduleCreate != null && Object.hasOwnProperty.call(m, "scheduleCreate"))
                    $root.proto.ScheduleCreateTransactionBody.encode(m.scheduleCreate, w.uint32(338).fork()).ldelim();
                if (m.scheduleDelete != null && Object.hasOwnProperty.call(m, "scheduleDelete"))
                    $root.proto.ScheduleDeleteTransactionBody.encode(m.scheduleDelete, w.uint32(346).fork()).ldelim();
                if (m.scheduleSign != null && Object.hasOwnProperty.call(m, "scheduleSign"))
                    $root.proto.ScheduleSignTransactionBody.encode(m.scheduleSign, w.uint32(354).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a TransactionBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionBody} TransactionBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());
                        break;
                    case 2:
                        m.nodeAccountID = $root.proto.AccountID.decode(r, r.uint32());
                        break;
                    case 3:
                        m.transactionFee = r.uint64();
                        break;
                    case 4:
                        m.transactionValidDuration = $root.proto.Duration.decode(r, r.uint32());
                        break;
                    case 5:
                        m.generateRecord = r.bool();
                        break;
                    case 6:
                        m.memo = r.string();
                        break;
                    case 7:
                        m.contractCall = $root.proto.ContractCallTransactionBody.decode(r, r.uint32());
                        break;
                    case 8:
                        m.contractCreateInstance = $root.proto.ContractCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 9:
                        m.contractUpdateInstance = $root.proto.ContractUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 22:
                        m.contractDeleteInstance = $root.proto.ContractDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 10:
                        m.cryptoAddLiveHash = $root.proto.CryptoAddLiveHashTransactionBody.decode(r, r.uint32());
                        break;
                    case 11:
                        m.cryptoCreateAccount = $root.proto.CryptoCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 12:
                        m.cryptoDelete = $root.proto.CryptoDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 13:
                        m.cryptoDeleteLiveHash = $root.proto.CryptoDeleteLiveHashTransactionBody.decode(r, r.uint32());
                        break;
                    case 14:
                        m.cryptoTransfer = $root.proto.CryptoTransferTransactionBody.decode(r, r.uint32());
                        break;
                    case 15:
                        m.cryptoUpdateAccount = $root.proto.CryptoUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 16:
                        m.fileAppend = $root.proto.FileAppendTransactionBody.decode(r, r.uint32());
                        break;
                    case 17:
                        m.fileCreate = $root.proto.FileCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 18:
                        m.fileDelete = $root.proto.FileDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 19:
                        m.fileUpdate = $root.proto.FileUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 20:
                        m.systemDelete = $root.proto.SystemDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 21:
                        m.systemUndelete = $root.proto.SystemUndeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 23:
                        m.freeze = $root.proto.FreezeTransactionBody.decode(r, r.uint32());
                        break;
                    case 24:
                        m.consensusCreateTopic = $root.proto.ConsensusCreateTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 25:
                        m.consensusUpdateTopic = $root.proto.ConsensusUpdateTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 26:
                        m.consensusDeleteTopic = $root.proto.ConsensusDeleteTopicTransactionBody.decode(r, r.uint32());
                        break;
                    case 27:
                        m.consensusSubmitMessage = $root.proto.ConsensusSubmitMessageTransactionBody.decode(r, r.uint32());
                        break;
                    case 28:
                        m.uncheckedSubmit = $root.proto.UncheckedSubmitBody.decode(r, r.uint32());
                        break;
                    case 29:
                        m.tokenCreation = $root.proto.TokenCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 31:
                        m.tokenFreeze = $root.proto.TokenFreezeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 32:
                        m.tokenUnfreeze = $root.proto.TokenUnfreezeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 33:
                        m.tokenGrantKyc = $root.proto.TokenGrantKycTransactionBody.decode(r, r.uint32());
                        break;
                    case 34:
                        m.tokenRevokeKyc = $root.proto.TokenRevokeKycTransactionBody.decode(r, r.uint32());
                        break;
                    case 35:
                        m.tokenDeletion = $root.proto.TokenDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 36:
                        m.tokenUpdate = $root.proto.TokenUpdateTransactionBody.decode(r, r.uint32());
                        break;
                    case 37:
                        m.tokenMint = $root.proto.TokenMintTransactionBody.decode(r, r.uint32());
                        break;
                    case 38:
                        m.tokenBurn = $root.proto.TokenBurnTransactionBody.decode(r, r.uint32());
                        break;
                    case 39:
                        m.tokenWipe = $root.proto.TokenWipeAccountTransactionBody.decode(r, r.uint32());
                        break;
                    case 40:
                        m.tokenAssociate = $root.proto.TokenAssociateTransactionBody.decode(r, r.uint32());
                        break;
                    case 41:
                        m.tokenDissociate = $root.proto.TokenDissociateTransactionBody.decode(r, r.uint32());
                        break;
                    case 42:
                        m.scheduleCreate = $root.proto.ScheduleCreateTransactionBody.decode(r, r.uint32());
                        break;
                    case 43:
                        m.scheduleDelete = $root.proto.ScheduleDeleteTransactionBody.decode(r, r.uint32());
                        break;
                    case 44:
                        m.scheduleSign = $root.proto.ScheduleSignTransactionBody.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionBody;
        })();

        proto.UncheckedSubmitBody = (function() {

            /**
             * Properties of an UncheckedSubmitBody.
             * @memberof proto
             * @interface IUncheckedSubmitBody
             * @property {Uint8Array|null} [transactionBytes] UncheckedSubmitBody transactionBytes
             */

            /**
             * Constructs a new UncheckedSubmitBody.
             * @memberof proto
             * @classdesc Represents an UncheckedSubmitBody.
             * @implements IUncheckedSubmitBody
             * @constructor
             * @param {proto.IUncheckedSubmitBody=} [p] Properties to set
             */
            function UncheckedSubmitBody(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * UncheckedSubmitBody transactionBytes.
             * @member {Uint8Array} transactionBytes
             * @memberof proto.UncheckedSubmitBody
             * @instance
             */
            UncheckedSubmitBody.prototype.transactionBytes = $util.newBuffer([]);

            /**
             * Creates a new UncheckedSubmitBody instance using the specified properties.
             * @function create
             * @memberof proto.UncheckedSubmitBody
             * @static
             * @param {proto.IUncheckedSubmitBody=} [properties] Properties to set
             * @returns {proto.UncheckedSubmitBody} UncheckedSubmitBody instance
             */
            UncheckedSubmitBody.create = function create(properties) {
                return new UncheckedSubmitBody(properties);
            };

            /**
             * Encodes the specified UncheckedSubmitBody message. Does not implicitly {@link proto.UncheckedSubmitBody.verify|verify} messages.
             * @function encode
             * @memberof proto.UncheckedSubmitBody
             * @static
             * @param {proto.IUncheckedSubmitBody} m UncheckedSubmitBody message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UncheckedSubmitBody.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionBytes != null && Object.hasOwnProperty.call(m, "transactionBytes"))
                    w.uint32(10).bytes(m.transactionBytes);
                return w;
            };

            /**
             * Decodes an UncheckedSubmitBody message from the specified reader or buffer.
             * @function decode
             * @memberof proto.UncheckedSubmitBody
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.UncheckedSubmitBody} UncheckedSubmitBody
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UncheckedSubmitBody.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UncheckedSubmitBody();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.transactionBytes = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return UncheckedSubmitBody;
        })();

        proto.SignedTransaction = (function() {

            /**
             * Properties of a SignedTransaction.
             * @memberof proto
             * @interface ISignedTransaction
             * @property {Uint8Array|null} [bodyBytes] SignedTransaction bodyBytes
             * @property {proto.ISignatureMap|null} [sigMap] SignedTransaction sigMap
             */

            /**
             * Constructs a new SignedTransaction.
             * @memberof proto
             * @classdesc Represents a SignedTransaction.
             * @implements ISignedTransaction
             * @constructor
             * @param {proto.ISignedTransaction=} [p] Properties to set
             */
            function SignedTransaction(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * SignedTransaction bodyBytes.
             * @member {Uint8Array} bodyBytes
             * @memberof proto.SignedTransaction
             * @instance
             */
            SignedTransaction.prototype.bodyBytes = $util.newBuffer([]);

            /**
             * SignedTransaction sigMap.
             * @member {proto.ISignatureMap|null|undefined} sigMap
             * @memberof proto.SignedTransaction
             * @instance
             */
            SignedTransaction.prototype.sigMap = null;

            /**
             * Creates a new SignedTransaction instance using the specified properties.
             * @function create
             * @memberof proto.SignedTransaction
             * @static
             * @param {proto.ISignedTransaction=} [properties] Properties to set
             * @returns {proto.SignedTransaction} SignedTransaction instance
             */
            SignedTransaction.create = function create(properties) {
                return new SignedTransaction(properties);
            };

            /**
             * Encodes the specified SignedTransaction message. Does not implicitly {@link proto.SignedTransaction.verify|verify} messages.
             * @function encode
             * @memberof proto.SignedTransaction
             * @static
             * @param {proto.ISignedTransaction} m SignedTransaction message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedTransaction.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.bodyBytes != null && Object.hasOwnProperty.call(m, "bodyBytes"))
                    w.uint32(10).bytes(m.bodyBytes);
                if (m.sigMap != null && Object.hasOwnProperty.call(m, "sigMap"))
                    $root.proto.SignatureMap.encode(m.sigMap, w.uint32(18).fork()).ldelim();
                return w;
            };

            /**
             * Decodes a SignedTransaction message from the specified reader or buffer.
             * @function decode
             * @memberof proto.SignedTransaction
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.SignedTransaction} SignedTransaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedTransaction.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignedTransaction();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.bodyBytes = r.bytes();
                        break;
                    case 2:
                        m.sigMap = $root.proto.SignatureMap.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SignedTransaction;
        })();

        proto.TransactionList = (function() {

            /**
             * Properties of a TransactionList.
             * @memberof proto
             * @interface ITransactionList
             * @property {Array.<proto.ITransaction>|null} [transactionList] TransactionList transactionList
             */

            /**
             * Constructs a new TransactionList.
             * @memberof proto
             * @classdesc Represents a TransactionList.
             * @implements ITransactionList
             * @constructor
             * @param {proto.ITransactionList=} [p] Properties to set
             */
            function TransactionList(p) {
                this.transactionList = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * TransactionList transactionList.
             * @member {Array.<proto.ITransaction>} transactionList
             * @memberof proto.TransactionList
             * @instance
             */
            TransactionList.prototype.transactionList = $util.emptyArray;

            /**
             * Creates a new TransactionList instance using the specified properties.
             * @function create
             * @memberof proto.TransactionList
             * @static
             * @param {proto.ITransactionList=} [properties] Properties to set
             * @returns {proto.TransactionList} TransactionList instance
             */
            TransactionList.create = function create(properties) {
                return new TransactionList(properties);
            };

            /**
             * Encodes the specified TransactionList message. Does not implicitly {@link proto.TransactionList.verify|verify} messages.
             * @function encode
             * @memberof proto.TransactionList
             * @static
             * @param {proto.ITransactionList} m TransactionList message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionList.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.transactionList != null && m.transactionList.length) {
                    for (var i = 0; i < m.transactionList.length; ++i)
                        $root.proto.Transaction.encode(m.transactionList[i], w.uint32(10).fork()).ldelim();
                }
                return w;
            };

            /**
             * Decodes a TransactionList message from the specified reader or buffer.
             * @function decode
             * @memberof proto.TransactionList
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.TransactionList} TransactionList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionList.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.transactionList && m.transactionList.length))
                            m.transactionList = [];
                        m.transactionList.push($root.proto.Transaction.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return TransactionList;
        })();

        proto.DoubleValue = (function() {

            /**
             * Properties of a DoubleValue.
             * @memberof proto
             * @interface IDoubleValue
             * @property {number|null} [value] DoubleValue value
             */

            /**
             * Constructs a new DoubleValue.
             * @memberof proto
             * @classdesc Represents a DoubleValue.
             * @implements IDoubleValue
             * @constructor
             * @param {proto.IDoubleValue=} [p] Properties to set
             */
            function DoubleValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * DoubleValue value.
             * @member {number} value
             * @memberof proto.DoubleValue
             * @instance
             */
            DoubleValue.prototype.value = 0;

            /**
             * Creates a new DoubleValue instance using the specified properties.
             * @function create
             * @memberof proto.DoubleValue
             * @static
             * @param {proto.IDoubleValue=} [properties] Properties to set
             * @returns {proto.DoubleValue} DoubleValue instance
             */
            DoubleValue.create = function create(properties) {
                return new DoubleValue(properties);
            };

            /**
             * Encodes the specified DoubleValue message. Does not implicitly {@link proto.DoubleValue.verify|verify} messages.
             * @function encode
             * @memberof proto.DoubleValue
             * @static
             * @param {proto.IDoubleValue} m DoubleValue message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(9).double(m.value);
                return w;
            };

            /**
             * Decodes a DoubleValue message from the specified reader or buffer.
             * @function decode
             * @memberof proto.DoubleValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.DoubleValue} DoubleValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DoubleValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.double();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return DoubleValue;
        })();

        proto.FloatValue = (function() {

            /**
             * Properties of a FloatValue.
             * @memberof proto
             * @interface IFloatValue
             * @property {number|null} [value] FloatValue value
             */

            /**
             * Constructs a new FloatValue.
             * @memberof proto
             * @classdesc Represents a FloatValue.
             * @implements IFloatValue
             * @constructor
             * @param {proto.IFloatValue=} [p] Properties to set
             */
            function FloatValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * FloatValue value.
             * @member {number} value
             * @memberof proto.FloatValue
             * @instance
             */
            FloatValue.prototype.value = 0;

            /**
             * Creates a new FloatValue instance using the specified properties.
             * @function create
             * @memberof proto.FloatValue
             * @static
             * @param {proto.IFloatValue=} [properties] Properties to set
             * @returns {proto.FloatValue} FloatValue instance
             */
            FloatValue.create = function create(properties) {
                return new FloatValue(properties);
            };

            /**
             * Encodes the specified FloatValue message. Does not implicitly {@link proto.FloatValue.verify|verify} messages.
             * @function encode
             * @memberof proto.FloatValue
             * @static
             * @param {proto.IFloatValue} m FloatValue message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(13).float(m.value);
                return w;
            };

            /**
             * Decodes a FloatValue message from the specified reader or buffer.
             * @function decode
             * @memberof proto.FloatValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.FloatValue} FloatValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FloatValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.float();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FloatValue;
        })();

        proto.Int64Value = (function() {

            /**
             * Properties of an Int64Value.
             * @memberof proto
             * @interface IInt64Value
             * @property {Long|null} [value] Int64Value value
             */

            /**
             * Constructs a new Int64Value.
             * @memberof proto
             * @classdesc Represents an Int64Value.
             * @implements IInt64Value
             * @constructor
             * @param {proto.IInt64Value=} [p] Properties to set
             */
            function Int64Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Int64Value value.
             * @member {Long} value
             * @memberof proto.Int64Value
             * @instance
             */
            Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Int64Value instance using the specified properties.
             * @function create
             * @memberof proto.Int64Value
             * @static
             * @param {proto.IInt64Value=} [properties] Properties to set
             * @returns {proto.Int64Value} Int64Value instance
             */
            Int64Value.create = function create(properties) {
                return new Int64Value(properties);
            };

            /**
             * Encodes the specified Int64Value message. Does not implicitly {@link proto.Int64Value.verify|verify} messages.
             * @function encode
             * @memberof proto.Int64Value
             * @static
             * @param {proto.IInt64Value} m Int64Value message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(8).int64(m.value);
                return w;
            };

            /**
             * Decodes an Int64Value message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Int64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Int64Value} Int64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Int64Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Int64Value;
        })();

        proto.UInt64Value = (function() {

            /**
             * Properties of a UInt64Value.
             * @memberof proto
             * @interface IUInt64Value
             * @property {Long|null} [value] UInt64Value value
             */

            /**
             * Constructs a new UInt64Value.
             * @memberof proto
             * @classdesc Represents a UInt64Value.
             * @implements IUInt64Value
             * @constructor
             * @param {proto.IUInt64Value=} [p] Properties to set
             */
            function UInt64Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * UInt64Value value.
             * @member {Long} value
             * @memberof proto.UInt64Value
             * @instance
             */
            UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new UInt64Value instance using the specified properties.
             * @function create
             * @memberof proto.UInt64Value
             * @static
             * @param {proto.IUInt64Value=} [properties] Properties to set
             * @returns {proto.UInt64Value} UInt64Value instance
             */
            UInt64Value.create = function create(properties) {
                return new UInt64Value(properties);
            };

            /**
             * Encodes the specified UInt64Value message. Does not implicitly {@link proto.UInt64Value.verify|verify} messages.
             * @function encode
             * @memberof proto.UInt64Value
             * @static
             * @param {proto.IUInt64Value} m UInt64Value message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(8).uint64(m.value);
                return w;
            };

            /**
             * Decodes a UInt64Value message from the specified reader or buffer.
             * @function decode
             * @memberof proto.UInt64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.UInt64Value} UInt64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UInt64Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return UInt64Value;
        })();

        proto.Int32Value = (function() {

            /**
             * Properties of an Int32Value.
             * @memberof proto
             * @interface IInt32Value
             * @property {number|null} [value] Int32Value value
             */

            /**
             * Constructs a new Int32Value.
             * @memberof proto
             * @classdesc Represents an Int32Value.
             * @implements IInt32Value
             * @constructor
             * @param {proto.IInt32Value=} [p] Properties to set
             */
            function Int32Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * Int32Value value.
             * @member {number} value
             * @memberof proto.Int32Value
             * @instance
             */
            Int32Value.prototype.value = 0;

            /**
             * Creates a new Int32Value instance using the specified properties.
             * @function create
             * @memberof proto.Int32Value
             * @static
             * @param {proto.IInt32Value=} [properties] Properties to set
             * @returns {proto.Int32Value} Int32Value instance
             */
            Int32Value.create = function create(properties) {
                return new Int32Value(properties);
            };

            /**
             * Encodes the specified Int32Value message. Does not implicitly {@link proto.Int32Value.verify|verify} messages.
             * @function encode
             * @memberof proto.Int32Value
             * @static
             * @param {proto.IInt32Value} m Int32Value message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(8).int32(m.value);
                return w;
            };

            /**
             * Decodes an Int32Value message from the specified reader or buffer.
             * @function decode
             * @memberof proto.Int32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.Int32Value} Int32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Int32Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Int32Value;
        })();

        proto.UInt32Value = (function() {

            /**
             * Properties of a UInt32Value.
             * @memberof proto
             * @interface IUInt32Value
             * @property {number|null} [value] UInt32Value value
             */

            /**
             * Constructs a new UInt32Value.
             * @memberof proto
             * @classdesc Represents a UInt32Value.
             * @implements IUInt32Value
             * @constructor
             * @param {proto.IUInt32Value=} [p] Properties to set
             */
            function UInt32Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * UInt32Value value.
             * @member {number} value
             * @memberof proto.UInt32Value
             * @instance
             */
            UInt32Value.prototype.value = 0;

            /**
             * Creates a new UInt32Value instance using the specified properties.
             * @function create
             * @memberof proto.UInt32Value
             * @static
             * @param {proto.IUInt32Value=} [properties] Properties to set
             * @returns {proto.UInt32Value} UInt32Value instance
             */
            UInt32Value.create = function create(properties) {
                return new UInt32Value(properties);
            };

            /**
             * Encodes the specified UInt32Value message. Does not implicitly {@link proto.UInt32Value.verify|verify} messages.
             * @function encode
             * @memberof proto.UInt32Value
             * @static
             * @param {proto.IUInt32Value} m UInt32Value message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(8).uint32(m.value);
                return w;
            };

            /**
             * Decodes a UInt32Value message from the specified reader or buffer.
             * @function decode
             * @memberof proto.UInt32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.UInt32Value} UInt32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UInt32Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.uint32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return UInt32Value;
        })();

        proto.BoolValue = (function() {

            /**
             * Properties of a BoolValue.
             * @memberof proto
             * @interface IBoolValue
             * @property {boolean|null} [value] BoolValue value
             */

            /**
             * Constructs a new BoolValue.
             * @memberof proto
             * @classdesc Represents a BoolValue.
             * @implements IBoolValue
             * @constructor
             * @param {proto.IBoolValue=} [p] Properties to set
             */
            function BoolValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BoolValue value.
             * @member {boolean} value
             * @memberof proto.BoolValue
             * @instance
             */
            BoolValue.prototype.value = false;

            /**
             * Creates a new BoolValue instance using the specified properties.
             * @function create
             * @memberof proto.BoolValue
             * @static
             * @param {proto.IBoolValue=} [properties] Properties to set
             * @returns {proto.BoolValue} BoolValue instance
             */
            BoolValue.create = function create(properties) {
                return new BoolValue(properties);
            };

            /**
             * Encodes the specified BoolValue message. Does not implicitly {@link proto.BoolValue.verify|verify} messages.
             * @function encode
             * @memberof proto.BoolValue
             * @static
             * @param {proto.IBoolValue} m BoolValue message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(8).bool(m.value);
                return w;
            };

            /**
             * Decodes a BoolValue message from the specified reader or buffer.
             * @function decode
             * @memberof proto.BoolValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.BoolValue} BoolValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BoolValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return BoolValue;
        })();

        proto.StringValue = (function() {

            /**
             * Properties of a StringValue.
             * @memberof proto
             * @interface IStringValue
             * @property {string|null} [value] StringValue value
             */

            /**
             * Constructs a new StringValue.
             * @memberof proto
             * @classdesc Represents a StringValue.
             * @implements IStringValue
             * @constructor
             * @param {proto.IStringValue=} [p] Properties to set
             */
            function StringValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * StringValue value.
             * @member {string} value
             * @memberof proto.StringValue
             * @instance
             */
            StringValue.prototype.value = "";

            /**
             * Creates a new StringValue instance using the specified properties.
             * @function create
             * @memberof proto.StringValue
             * @static
             * @param {proto.IStringValue=} [properties] Properties to set
             * @returns {proto.StringValue} StringValue instance
             */
            StringValue.create = function create(properties) {
                return new StringValue(properties);
            };

            /**
             * Encodes the specified StringValue message. Does not implicitly {@link proto.StringValue.verify|verify} messages.
             * @function encode
             * @memberof proto.StringValue
             * @static
             * @param {proto.IStringValue} m StringValue message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(10).string(m.value);
                return w;
            };

            /**
             * Decodes a StringValue message from the specified reader or buffer.
             * @function decode
             * @memberof proto.StringValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.StringValue} StringValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.StringValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return StringValue;
        })();

        proto.BytesValue = (function() {

            /**
             * Properties of a BytesValue.
             * @memberof proto
             * @interface IBytesValue
             * @property {Uint8Array|null} [value] BytesValue value
             */

            /**
             * Constructs a new BytesValue.
             * @memberof proto
             * @classdesc Represents a BytesValue.
             * @implements IBytesValue
             * @constructor
             * @param {proto.IBytesValue=} [p] Properties to set
             */
            function BytesValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            /**
             * BytesValue value.
             * @member {Uint8Array} value
             * @memberof proto.BytesValue
             * @instance
             */
            BytesValue.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new BytesValue instance using the specified properties.
             * @function create
             * @memberof proto.BytesValue
             * @static
             * @param {proto.IBytesValue=} [properties] Properties to set
             * @returns {proto.BytesValue} BytesValue instance
             */
            BytesValue.create = function create(properties) {
                return new BytesValue(properties);
            };

            /**
             * Encodes the specified BytesValue message. Does not implicitly {@link proto.BytesValue.verify|verify} messages.
             * @function encode
             * @memberof proto.BytesValue
             * @static
             * @param {proto.IBytesValue} m BytesValue message or plain object to encode
             * @param {$protobuf.Writer} [w] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                    w.uint32(10).bytes(m.value);
                return w;
            };

            /**
             * Decodes a BytesValue message from the specified reader or buffer.
             * @function decode
             * @memberof proto.BytesValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
             * @param {number} [l] Message length if known beforehand
             * @returns {proto.BytesValue} BytesValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BytesValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return BytesValue;
        })();

        return proto;
    })();

    $root.google = (() => {

        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        const google = {};

        google.protobuf = (function() {

            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            const protobuf = {};

            protobuf.DoubleValue = (function() {

                /**
                 * Properties of a DoubleValue.
                 * @memberof google.protobuf
                 * @interface IDoubleValue
                 * @property {number|null} [value] DoubleValue value
                 */

                /**
                 * Constructs a new DoubleValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a DoubleValue.
                 * @implements IDoubleValue
                 * @constructor
                 * @param {google.protobuf.IDoubleValue=} [p] Properties to set
                 */
                function DoubleValue(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * DoubleValue value.
                 * @member {number} value
                 * @memberof google.protobuf.DoubleValue
                 * @instance
                 */
                DoubleValue.prototype.value = 0;

                /**
                 * Creates a new DoubleValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
                 * @returns {google.protobuf.DoubleValue} DoubleValue instance
                 */
                DoubleValue.create = function create(properties) {
                    return new DoubleValue(properties);
                };

                /**
                 * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue} m DoubleValue message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DoubleValue.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(9).double(m.value);
                    return w;
                };

                /**
                 * Decodes a DoubleValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DoubleValue.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DoubleValue();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.double();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return DoubleValue;
            })();

            protobuf.FloatValue = (function() {

                /**
                 * Properties of a FloatValue.
                 * @memberof google.protobuf
                 * @interface IFloatValue
                 * @property {number|null} [value] FloatValue value
                 */

                /**
                 * Constructs a new FloatValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a FloatValue.
                 * @implements IFloatValue
                 * @constructor
                 * @param {google.protobuf.IFloatValue=} [p] Properties to set
                 */
                function FloatValue(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * FloatValue value.
                 * @member {number} value
                 * @memberof google.protobuf.FloatValue
                 * @instance
                 */
                FloatValue.prototype.value = 0;

                /**
                 * Creates a new FloatValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set
                 * @returns {google.protobuf.FloatValue} FloatValue instance
                 */
                FloatValue.create = function create(properties) {
                    return new FloatValue(properties);
                };

                /**
                 * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue} m FloatValue message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FloatValue.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(13).float(m.value);
                    return w;
                };

                /**
                 * Decodes a FloatValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.FloatValue} FloatValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FloatValue.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FloatValue();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.float();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return FloatValue;
            })();

            protobuf.Int64Value = (function() {

                /**
                 * Properties of an Int64Value.
                 * @memberof google.protobuf
                 * @interface IInt64Value
                 * @property {Long|null} [value] Int64Value value
                 */

                /**
                 * Constructs a new Int64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int64Value.
                 * @implements IInt64Value
                 * @constructor
                 * @param {google.protobuf.IInt64Value=} [p] Properties to set
                 */
                function Int64Value(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Int64Value value.
                 * @member {Long} value
                 * @memberof google.protobuf.Int64Value
                 * @instance
                 */
                Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new Int64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int64Value} Int64Value instance
                 */
                Int64Value.create = function create(properties) {
                    return new Int64Value(properties);
                };

                /**
                 * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value} m Int64Value message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Value.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).int64(m.value);
                    return w;
                };

                /**
                 * Decodes an Int64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.Int64Value} Int64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Value.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int64Value();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return Int64Value;
            })();

            protobuf.UInt64Value = (function() {

                /**
                 * Properties of a UInt64Value.
                 * @memberof google.protobuf
                 * @interface IUInt64Value
                 * @property {Long|null} [value] UInt64Value value
                 */

                /**
                 * Constructs a new UInt64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt64Value.
                 * @implements IUInt64Value
                 * @constructor
                 * @param {google.protobuf.IUInt64Value=} [p] Properties to set
                 */
                function UInt64Value(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * UInt64Value value.
                 * @member {Long} value
                 * @memberof google.protobuf.UInt64Value
                 * @instance
                 */
                UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Creates a new UInt64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt64Value} UInt64Value instance
                 */
                UInt64Value.create = function create(properties) {
                    return new UInt64Value(properties);
                };

                /**
                 * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value} m UInt64Value message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt64Value.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).uint64(m.value);
                    return w;
                };

                /**
                 * Decodes a UInt64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt64Value.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt64Value();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return UInt64Value;
            })();

            protobuf.Int32Value = (function() {

                /**
                 * Properties of an Int32Value.
                 * @memberof google.protobuf
                 * @interface IInt32Value
                 * @property {number|null} [value] Int32Value value
                 */

                /**
                 * Constructs a new Int32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int32Value.
                 * @implements IInt32Value
                 * @constructor
                 * @param {google.protobuf.IInt32Value=} [p] Properties to set
                 */
                function Int32Value(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * Int32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.Int32Value
                 * @instance
                 */
                Int32Value.prototype.value = 0;

                /**
                 * Creates a new Int32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int32Value} Int32Value instance
                 */
                Int32Value.create = function create(properties) {
                    return new Int32Value(properties);
                };

                /**
                 * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value} m Int32Value message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int32Value.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).int32(m.value);
                    return w;
                };

                /**
                 * Decodes an Int32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.Int32Value} Int32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int32Value.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int32Value();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return Int32Value;
            })();

            protobuf.UInt32Value = (function() {

                /**
                 * Properties of a UInt32Value.
                 * @memberof google.protobuf
                 * @interface IUInt32Value
                 * @property {number|null} [value] UInt32Value value
                 */

                /**
                 * Constructs a new UInt32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt32Value.
                 * @implements IUInt32Value
                 * @constructor
                 * @param {google.protobuf.IUInt32Value=} [p] Properties to set
                 */
                function UInt32Value(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * UInt32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.UInt32Value
                 * @instance
                 */
                UInt32Value.prototype.value = 0;

                /**
                 * Creates a new UInt32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt32Value} UInt32Value instance
                 */
                UInt32Value.create = function create(properties) {
                    return new UInt32Value(properties);
                };

                /**
                 * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value} m UInt32Value message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt32Value.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).uint32(m.value);
                    return w;
                };

                /**
                 * Decodes a UInt32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt32Value.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt32Value();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return UInt32Value;
            })();

            protobuf.BoolValue = (function() {

                /**
                 * Properties of a BoolValue.
                 * @memberof google.protobuf
                 * @interface IBoolValue
                 * @property {boolean|null} [value] BoolValue value
                 */

                /**
                 * Constructs a new BoolValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BoolValue.
                 * @implements IBoolValue
                 * @constructor
                 * @param {google.protobuf.IBoolValue=} [p] Properties to set
                 */
                function BoolValue(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BoolValue value.
                 * @member {boolean} value
                 * @memberof google.protobuf.BoolValue
                 * @instance
                 */
                BoolValue.prototype.value = false;

                /**
                 * Creates a new BoolValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set
                 * @returns {google.protobuf.BoolValue} BoolValue instance
                 */
                BoolValue.create = function create(properties) {
                    return new BoolValue(properties);
                };

                /**
                 * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue} m BoolValue message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BoolValue.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(8).bool(m.value);
                    return w;
                };

                /**
                 * Decodes a BoolValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.BoolValue} BoolValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BoolValue.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BoolValue();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BoolValue;
            })();

            protobuf.StringValue = (function() {

                /**
                 * Properties of a StringValue.
                 * @memberof google.protobuf
                 * @interface IStringValue
                 * @property {string|null} [value] StringValue value
                 */

                /**
                 * Constructs a new StringValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a StringValue.
                 * @implements IStringValue
                 * @constructor
                 * @param {google.protobuf.IStringValue=} [p] Properties to set
                 */
                function StringValue(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * StringValue value.
                 * @member {string} value
                 * @memberof google.protobuf.StringValue
                 * @instance
                 */
                StringValue.prototype.value = "";

                /**
                 * Creates a new StringValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue=} [properties] Properties to set
                 * @returns {google.protobuf.StringValue} StringValue instance
                 */
                StringValue.create = function create(properties) {
                    return new StringValue(properties);
                };

                /**
                 * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue} m StringValue message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StringValue.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(10).string(m.value);
                    return w;
                };

                /**
                 * Decodes a StringValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.StringValue} StringValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StringValue.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.StringValue();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return StringValue;
            })();

            protobuf.BytesValue = (function() {

                /**
                 * Properties of a BytesValue.
                 * @memberof google.protobuf
                 * @interface IBytesValue
                 * @property {Uint8Array|null} [value] BytesValue value
                 */

                /**
                 * Constructs a new BytesValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BytesValue.
                 * @implements IBytesValue
                 * @constructor
                 * @param {google.protobuf.IBytesValue=} [p] Properties to set
                 */
                function BytesValue(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                /**
                 * BytesValue value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.BytesValue
                 * @instance
                 */
                BytesValue.prototype.value = $util.newBuffer([]);

                /**
                 * Creates a new BytesValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set
                 * @returns {google.protobuf.BytesValue} BytesValue instance
                 */
                BytesValue.create = function create(properties) {
                    return new BytesValue(properties);
                };

                /**
                 * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue} m BytesValue message or plain object to encode
                 * @param {$protobuf.Writer} [w] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BytesValue.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                        w.uint32(10).bytes(m.value);
                    return w;
                };

                /**
                 * Decodes a BytesValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
                 * @param {number} [l] Message length if known beforehand
                 * @returns {google.protobuf.BytesValue} BytesValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BytesValue.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BytesValue();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.value = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BytesValue;
            })();

            return protobuf;
        })();

        return google;
    })();

    const ConsensusService = proto.ConsensusService;
    const CryptoService = proto.CryptoService;
    const FileService = proto.FileService;
    const FreezeService = proto.FreezeService;
    const NetworkService = proto.NetworkService;
    const SmartContractService = proto.SmartContractService;
    const TokenService = proto.TokenService;
    const ScheduleService = proto.ScheduleService;

    const AccountID = proto.AccountID;
    const ContractGetInfoResponse = proto.ContractGetInfoResponse;
    const ContractID = proto.ContractID;
    const CryptoGetInfoResponse = proto.CryptoGetInfoResponse;
    const FileGetInfoResponse = proto.FileGetInfoResponse;
    const FileID = proto.FileID;
    const NetworkGetVersionInfoResponse = proto.NetworkGetVersionInfoResponse;
    const Query$1 = proto.Query;
    const ResponseCodeEnum = proto.ResponseCodeEnum;
    const ResponseType = proto.ResponseType;
    const SemanticVersion$1 = proto.SemanticVersion;
    const TokenID = proto.TokenID;
    const TopicID = proto.TopicID;
    const Transaction$1 = proto.Transaction;
    const SignedTransaction = proto.SignedTransaction;
    const TransactionList = proto.TransactionList;
    const TransactionBody = proto.TransactionBody;
    const TransactionID = proto.TransactionID;
    const TransactionReceipt$1 = proto.TransactionReceipt;
    const TransactionRecord$1 = proto.TransactionRecord;
    const ScheduleID = proto.ScheduleID;
    const SchedulableTransactionBody = proto.SchedulableTransactionBody;

    /**
     * The ID for a crypto-currency account on Hedera.
     */
    class AccountId {
        /**
         * @param {number | Long | import("../EntityIdHelper").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            const [shard_num, realm_num, account_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = account_num;
        }

        /**
         * @param {string} text
         * @returns {AccountId}
         */
        static fromString(text) {
            return new AccountId(...fromString(text));
        }

        /**
         * @internal
         * @param {proto.IAccountID} id
         * @returns {AccountId}
         */
        static _fromProtobuf(id) {
            return new AccountId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.accountNum != null ? id.accountNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {AccountId}
         */
        static fromBytes(bytes) {
            return AccountId._fromProtobuf(AccountID.decode(bytes));
        }

        /**
         * @param {string} address
         * @returns {AccountId}
         */
        static fromSolidityAddress(address) {
            return new AccountId(...fromSolidityAddress(address));
        }

        /**
         * @internal
         * @override
         * @returns {proto.IAccountID}
         */
        _toProtobuf() {
            return {
                accountNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return AccountID.encode(this._toProtobuf()).finish();
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @param {this} other
         * @returns {boolean}
         */
        equals(other) {
            return (
                this.shard.eq(other.shard) &&
                this.realm.eq(other.realm) &&
                this.num.eq(other.num)
            );
        }
    }

    /**
     * @typedef {{low: number, high: number, unsigned: boolean}} LongObject
     */

    /**
     * @param {Long | number | string | LongObject | BigNumber} value
     * @returns {Long}
     */
    function valueToLong(value) {
        if (bignumber.isBigNumber(value)) {
            return long.fromString(value.toString());
        } else if (value instanceof long) {
            return value;
        } else {
            return long.fromValue(value);
        }
    }

    class HbarUnit {
        /**
         * @internal
         * @param {string} name
         * @param {string} symbol
         * @param {BigNumber} tinybar
         */
        constructor(name, symbol, tinybar) {
            /**
             * @internal
             * @readonly
             */
            this._name = name;

            /**
             * @internal
             * @readonly
             */
            this._symbol = symbol;

            /**
             * @internal
             * @readonly
             */
            this._tinybar = tinybar;

            Object.freeze(this);
        }
    }

    HbarUnit.Tinybar = new HbarUnit("tinybar", "tℏ", new bignumber(1));

    HbarUnit.Microbar = new HbarUnit("microbar", "μℏ", new bignumber(100));

    HbarUnit.Millibar = new HbarUnit("millibar", "mℏ", new bignumber(100000));

    HbarUnit.Hbar = new HbarUnit("hbar", "ℏ", new bignumber("100000000"));

    HbarUnit.Kilobar = new HbarUnit(
        "kilobar",
        "kℏ",
        new bignumber(1000).multipliedBy(new bignumber("100000000"))
    );

    HbarUnit.Megabar = new HbarUnit(
        "megabar",
        "Mℏ",
        new bignumber(1000000).multipliedBy(new bignumber("100000000"))
    );

    HbarUnit.Gigabar = new HbarUnit(
        "gigabar",
        "Gℏ",
        new bignumber("1000000000").multipliedBy(new bignumber("100000000"))
    );

    /**
     * @typedef {import("./long.js").LongObject} LongObject
     */

    class Hbar {
        /**
         * @param {number | string | Long | LongObject | BigNumber} amount
         * @param {HbarUnit=} unit
         */
        constructor(amount, unit = HbarUnit.Hbar) {
            if (unit === HbarUnit.Tinybar) {
                this._valueInTinybar = valueToLong(amount);
            } else {
                /** @type {BigNumber} */
                let bigAmount;

                if (amount instanceof long) {
                    bigAmount = new bignumber(amount.toString(10));
                } else if (long.isLong(amount)) {
                    bigAmount = new bignumber(long.fromValue(amount).toString(10));
                } else if (
                    bignumber.isBigNumber(amount) ||
                    typeof amount === "string" ||
                    typeof amount === "number"
                ) {
                    bigAmount = new bignumber(amount);
                } else {
                    bigAmount = new bignumber(0);
                }

                /**
                 * @type {Long}
                 */
                this._valueInTinybar = long.fromString(
                    bigAmount.multipliedBy(unit._tinybar).toFixed()
                );
            }
        }

        /**
         * @param {number | Long | BigNumber} amount
         * @param {HbarUnit} unit
         * @returns {Hbar}
         */
        static from(amount, unit) {
            return new Hbar(amount, unit);
        }

        /**
         * @param {number | Long} amount
         * @returns {Hbar}
         */
        static fromTinybars(amount) {
            return new Hbar(amount, HbarUnit.Tinybar);
        }

        /**
         * @param {string} str
         * @param {HbarUnit=} unit
         * @returns {Hbar}
         */
        static fromString(str, unit = HbarUnit.Hbar) {
            return new Hbar(new bignumber(str), unit);
        }

        /**
         * @param {HbarUnit} unit
         * @returns {BigNumber}
         */
        to(unit) {
            return new bignumber(this._valueInTinybar.toString()).dividedBy(
                unit._tinybar
            );
        }

        /**
         * @returns {Long}
         */
        toTinybars() {
            return this._valueInTinybar;
        }

        /**
         * @returns {Hbar}
         */
        negated() {
            return Hbar.fromTinybars(this._valueInTinybar.negate());
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            if (
                this._valueInTinybar.lessThan(10000) &&
                this._valueInTinybar.greaterThan(-10000)
            ) {
                return `${this._valueInTinybar.toString()} ${
                HbarUnit.Tinybar._symbol
            }`;
            }

            return `${this.to(HbarUnit.Hbar).toString()} ${HbarUnit.Hbar._symbol}`;
        }
    }

    /**
     * @typedef {import("./Status.js").default} Status
     * @typedef {import("./transaction/TransactionId.js").default} TransactionId
     */

    class StatusError extends Error {
        /**
         * @param {object} props
         * @param {Status} props.status
         * @param {TransactionId} props.transactionId
         * @param {string} message
         */
        constructor(props, message) {
            super(message);

            this.name = "StatusError";

            this.status = props.status;

            this.transactionId = props.transactionId;

            this.message = message;

            if (typeof Error.captureStackTrace !== "undefined") {
                Error.captureStackTrace(this, StatusError);
            }
        }
    }

    /**
     * @typedef {import("./Status.js").default} Status
     * @typedef {import("./transaction/TransactionId.js").default} TransactionId
     */

    class PrecheckStatusError extends StatusError {
        /**
         * @param {object} props
         * @param {Status} props.status
         * @param {TransactionId} props.transactionId
         */
        constructor(props) {
            super(
                props,
                `transaction ${props.transactionId.toString()} failed precheck with status ${props.status.toString()}`
            );
        }
    }

    /**
     * @typedef {import("./GrpcStatus.js").default} GrpcStatus
     */

    /**
     * Describes how the gRPC request failed.
     *
     * Exists in order for the Hedera JavaScript SDK to produce the same error type for gRPC errors regardless of
     * operating in node or the browser.
     *
     * Definition taken from <https://grpc.github.io/grpc/node/grpc.html#~ServiceError>.
     */
    class GrpcServiceError extends Error {
        /**
         * @param {GrpcStatus} status
         */
        constructor(status) {
            super(`gRPC service failed with status: ${status.toString()}`);

            /**
             * @readonly
             */
            this.status = status;

            this.name = "GrpcServiceError";

            if (typeof Error.captureStackTrace !== "undefined") {
                Error.captureStackTrace(this, GrpcServiceError);
            }
        }
    }

    class GrpcStatus {
        /**
         * @hideconstructor
         * @internal
         * @param {number} code
         */
        constructor(code) {
            /** @readonly */
            this._code = code;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {number} code
         * @returns {GrpcStatus}
         */
        static _fromValue(code) {
            switch (code) {
                case 0:
                    return GrpcStatus.Ok;
                case 1:
                    return GrpcStatus.Cancelled;
                case 2:
                    return GrpcStatus.Unknown;
                case 3:
                    return GrpcStatus.InvalidArgument;
                case 4:
                    return GrpcStatus.DeadlineExceeded;
                case 5:
                    return GrpcStatus.NotFound;
                case 6:
                    return GrpcStatus.AlreadyExists;
                case 7:
                    return GrpcStatus.PermissionDenied;
                case 16:
                    return GrpcStatus.Unauthenticated;
                case 8:
                    return GrpcStatus.ResourceExhausted;
                case 9:
                    return GrpcStatus.FailedPrecondition;
                case 10:
                    return GrpcStatus.Aborted;
                case 11:
                    return GrpcStatus.OutOfRange;
                case 12:
                    return GrpcStatus.Unimplemented;
                case 13:
                    return GrpcStatus.Internal;
                case 14:
                    return GrpcStatus.Unavailable;
                case 15:
                    return GrpcStatus.DataLoss;
                default:
                    throw new Error(
                        "(BUG) non-exhaustive GrpcStatus switch statement"
                    );
            }
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            switch (this) {
                case GrpcStatus.Ok:
                    return "OK";
                case GrpcStatus.Cancelled:
                    return "CANCELLED";
                case GrpcStatus.Unknown:
                    return "UNKNOWN";
                case GrpcStatus.InvalidArgument:
                    return "INVALID_ARGUMENT";
                case GrpcStatus.DeadlineExceeded:
                    return "DEADLINE_EXCEEDED";
                case GrpcStatus.NotFound:
                    return "NOT_FOUND";
                case GrpcStatus.AlreadyExists:
                    return "ALREADY_EXISTS";
                case GrpcStatus.PermissionDenied:
                    return "PERMISSION_DENIED";
                case GrpcStatus.Unauthenticated:
                    return "UNAUTHENTICATED";
                case GrpcStatus.ResourceExhausted:
                    return "RESOURCE_EXHAUSTED";
                case GrpcStatus.FailedPrecondition:
                    return "FAILED_PRECONDITION";
                case GrpcStatus.Aborted:
                    return "ABORTED";
                case GrpcStatus.OutOfRange:
                    return "OUT_OF_RANGE";
                case GrpcStatus.Unimplemented:
                    return "UNIMPLEMENTED";
                case GrpcStatus.Internal:
                    return "INTERNAL";
                case GrpcStatus.Unavailable:
                    return "UNAVAILABLE";
                case GrpcStatus.DataLoss:
                    return "DATA_LOSS";

                default:
                    return `UNKNOWN (${this._code})`;
            }
        }

        /**
         * @returns {number}
         */
        valueOf() {
            return this._code;
        }
    }

    GrpcStatus.Ok = new GrpcStatus(0);
    GrpcStatus.Cancelled = new GrpcStatus(1);
    GrpcStatus.Unknown = new GrpcStatus(2);
    GrpcStatus.InvalidArgument = new GrpcStatus(3);
    GrpcStatus.DeadlineExceeded = new GrpcStatus(4);
    GrpcStatus.NotFound = new GrpcStatus(5);
    GrpcStatus.AlreadyExists = new GrpcStatus(6);
    GrpcStatus.PermissionDenied = new GrpcStatus(7);
    GrpcStatus.Unauthenticated = new GrpcStatus(16);
    GrpcStatus.ResourceExhausted = new GrpcStatus(8);
    GrpcStatus.FailedPrecondition = new GrpcStatus(9);
    GrpcStatus.Aborted = new GrpcStatus(10);
    GrpcStatus.OutOfRange = new GrpcStatus(11);
    GrpcStatus.Unimplemented = new GrpcStatus(12);
    GrpcStatus.Internal = new GrpcStatus(13);
    GrpcStatus.Unavailable = new GrpcStatus(14);
    GrpcStatus.DataLoss = new GrpcStatus(15);

    /**
     * @typedef {import("./account/AccountId.js").default} AccountId
     * @typedef {import("./channel/Channel.js").default} Channel
     * @typedef {import("./transaction/TransactionId.js").default} TransactionId
     */

    /**
     * @abstract
     * @internal
     * @template RequestT
     * @template ResponseT
     * @template OutputT
     */
    class Executable {
        constructor() {
            /**
             * The number of times we can retry the grpc call
             *
             * @private
             * @type {number}
             */
            this._maxRetries = 10;

            /**
             * The index of the next transaction to be executed.
             *
             * @protected
             * @type {number}
             */
            this._nextNodeIndex = 0;

            /**
             * List of node account IDs for each transaction that has been
             * built.
             *
             * @internal
             * @type {AccountId[]}
             */
            this._nodeIds = [];
        }

        /**
         * @returns {?AccountId[]}
         */
        get nodeAccountIds() {
            return this._nodeIds.length != 0 ? this._nodeIds : null;
        }

        /**
         * @param {AccountId[]} nodeIds
         * @returns {this}
         */
        setNodeAccountIds(nodeIds) {
            this._nodeIds = nodeIds;

            return this;
        }

        /**
         * @returns {number}
         */
        get maxRetries() {
            return this._maxRetries;
        }

        /**
         * @param {number} maxRetries
         * @returns {this}
         */
        setMaxRetries(maxRetries) {
            this._maxRetries = maxRetries;

            return this;
        }

        /**
         * @abstract
         * @protected
         * @param {import("./client/Client.js").default<Channel, *>} client
         * @returns {Promise<void>}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _beforeExecute(client) {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @protected
         * @returns {RequestT}
         */
        _makeRequest() {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @internal
         * @param {ResponseT} response
         * @returns {Status}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _mapResponseStatus(response) {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @protected
         * @param {ResponseT} response
         * @param {AccountId} nodeAccountId
         * @param {RequestT} request
         * @returns {Promise<OutputT>}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _mapResponse(response, nodeAccountId, request) {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @internal
         * @param {Channel} channel
         * @param {RequestT} request
         * @returns {Promise<ResponseT>}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _execute(channel, request) {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @protected
         * @returns {AccountId}
         */
        _getNodeAccountId() {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @protected
         * @returns {TransactionId}
         */
        _getTransactionId() {
            throw new Error("not implemented");
        }

        /**
         * @protected
         * @returns {void}
         */
        _advanceRequest() {
            // each time we move our cursor to the next transaction
            // wrapping around to ensure we are cycling
            this._nextNodeIndex = (this._nextNodeIndex + 1) % this._nodeIds.length;
        }

        /**
         * @protected
         * @param {Status} responseStatus
         * @param {ResponseT} response
         * @returns {boolean}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _shouldRetry(responseStatus, response) {
            return (
                responseStatus === Status.Busy ||
                responseStatus === Status.PlatformTransactionNotCreated
            );
        }

        /**
         * @protected
         * @param {GrpcServiceError} error
         * @returns {boolean}
         */
        _shouldRetryExceptionally(error) {
            return (
                error.status === GrpcStatus.Unavailable ||
                error.status === GrpcStatus.ResourceExhausted ||
                error.status === GrpcStatus.Internal
            );
        }

        /**
         * @template {Channel} ChannelT
         * @template MirrorChannelT
         * @param {import("./client/Client.js").default<ChannelT, MirrorChannelT>} client
         * @returns {Promise<OutputT>}
         */
        async execute(client) {
            await this._beforeExecute(client);

            for (let attempt = 1 /* loop forever */; ; attempt += 1) {
                const nodeAccountId = this._getNodeAccountId();
                const node = client._network.networkNodes.get(
                    nodeAccountId.toString()
                );

                if (node == null) {
                    throw new Error(
                        `NodeAccountId not recognized: ${nodeAccountId.toString()}`
                    );
                }

                node.inUse();

                const channel = node.channel;
                const request = this._makeRequest();

                // advance the internal index
                // non-free queries and transactions map to more than 1 actual transaction and this will cause
                // the next invocation of makeRequest to return the _next_ transaction
                this._advanceRequest();

                let response;

                if (!node.isHealthy()) {
                    await node.wait();
                }

                try {
                    response = await this._execute(channel, request);
                } catch (err) {
                    if (
                        err instanceof GrpcServiceError &&
                        this._shouldRetryExceptionally(err) &&
                        attempt <= this._maxRetries
                    ) {
                        node.increaseDelay();
                        continue;
                    }

                    throw err;
                }

                node.decreaseDelay();

                const responseStatus = this._mapResponseStatus(response);

                if (
                    this._shouldRetry(responseStatus, response) &&
                    attempt <= this._maxRetries
                ) {
                    await delayForAttempt(attempt);
                    continue;
                }

                if (responseStatus !== Status.Ok) {
                    throw new PrecheckStatusError({
                        status: responseStatus,
                        transactionId: this._getTransactionId(),
                    });
                }

                return this._mapResponse(response, nodeAccountId, request);
            }
        }
    }

    /**
     * @param {number} attempt
     * @returns {Promise<void>}
     */
    function delayForAttempt(attempt) {
        // 0.1s, 0.2s, 0.4s, 0.8s, ...
        const ms = Math.floor(50 * Math.pow(2, attempt));
        return new Promise((resolve) => setTimeout(resolve, ms));
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
     */

    class Timestamp {
        /**
         * @param {Long | number} seconds
         * @param {Long | number} nanos
         */
        constructor(seconds, nanos) {
            /**
             * @readonly
             * @type {Long}
             */
            this.seconds =
                seconds instanceof long ? seconds : long.fromNumber(seconds);

            /**
             * @readonly
             * @type {Long}
             */
            this.nanos = nanos instanceof long ? nanos : long.fromNumber(nanos);

            Object.freeze(this);
        }

        /**
         * @returns {Timestamp}
         */
        static generate() {
            const jitter = Math.floor(Math.random() * 5000) + 8000;
            const now = Date.now() - jitter;
            const seconds = Math.floor(now / 1000);
            const nanos =
                Math.floor(now % 1000) * 1000000 +
                Math.floor(Math.random() * 1000000);

            return new Timestamp(seconds, nanos);
        }

        /**
         * @param {string | number | Date} date
         * @returns {Timestamp}
         */
        static fromDate(date) {
            let ms;

            if (typeof date === "number") {
                ms = date;
            } else if (typeof date === "string") {
                ms = Date.parse(date);
            } else if (date instanceof Date) {
                ms = date.getTime();
            } else {
                throw new TypeError(
                    `invalid type '${typeof date}' for 'data', expected 'Date'`
                );
            }

            const seconds = Math.floor(ms / 1000);
            const nanos = Math.floor(ms % 1000) * 1000000;

            return new Timestamp(seconds, nanos);
        }

        /**
         * @returns {Date}
         */
        toDate() {
            return new Date(
                this.seconds.toInt() * 1000 +
                    Math.floor(this.nanos.toInt() / 1000000)
            );
        }

        /**
         * @internal
         * @returns {proto.ITimestamp}
         */
        _toProtobuf() {
            return {
                seconds: this.seconds,
                nanos: this.nanos.toInt(),
            };
        }

        /**
         * @internal
         * @param {proto.ITimestamp} timestamp
         * @returns {Timestamp}
         */
        static _fromProtobuf(timestamp) {
            return new Timestamp(
                timestamp.seconds instanceof long
                    ? timestamp.seconds.toInt()
                    : timestamp.seconds != null
                    ? timestamp.seconds
                    : 0,

                timestamp.nanos != null ? timestamp.nanos : 0
            );
        }
    }

    /**
     * The client-generated ID for a transaction.
     *
     * This is used for retrieving receipts and records for a transaction, for appending to a file
     * right after creating it, for instantiating a smart contract with bytecode in a file just created,
     * and internally by the network for detecting when duplicate transactions are submitted.
     */
    class TransactionId {
        /**
         * Don't use this method directly.
         * Use `TransactionId.[generate|withNonce|withValidStart]()` instead.
         *
         * @param {?AccountId} accountId
         * @param {?Timestamp} validStart
         * @param {?boolean} scheduled
         */
        constructor(accountId, validStart, scheduled = false) {
            /**
             * The Account ID that paid for this transaction.
             *
             * @readonly
             */
            this.accountId = accountId;

            /**
             * The time from when this transaction is valid.
             *
             * When a transaction is submitted there is additionally a validDuration (defaults to 120s)
             * and together they define a time window that a transaction may be processed in.
             *
             * @readonly
             */
            this.validStart = validStart;

            this.scheduled = scheduled;

            Object.freeze(this);
        }

        /**
         * @param {AccountId} accountId
         * @param {Timestamp} validStart
         * @returns {TransactionId}
         */
        static withValidStart(accountId, validStart) {
            return new TransactionId(accountId, validStart, null);
        }

        /**
         * Generates a new transaction ID for the given account ID.
         *
         * Note that transaction IDs are made of the valid start of the transaction and the account
         * that will be charged the transaction fees for the transaction.
         *
         * @param {AccountId | string} id
         * @returns {TransactionId}
         */
        static generate(id) {
            return new TransactionId(
                typeof id === "string" ? AccountId.fromString(id) : id,
                Timestamp.generate()
            );
        }

        /**
         * @param {string} wholeId
         * @returns {TransactionId}
         */
        static fromString(wholeId) {
            let [id, scheduled] = wholeId.split("?");

            const [account, time] = id.split("@");
            const [seconds, nanos] = time
                .split(".")
                .map((value) => long.fromValue(value));

            return new TransactionId(
                AccountId.fromString(account),
                new Timestamp(seconds, nanos),
                scheduled === "scheduled"
            );
        }

        /**
         * @param {boolean} scheduled
         * @returns {this}
         */
        setScheduled(scheduled) {
            this.scheduled = scheduled;
            return this;
        }

        /**
         * @returns {string}
         */
        toString() {
            if (this.accountId != null && this.validStart != null) {
                return `${this.accountId.toString()}@${this.validStart.seconds.toString()}.${this.validStart.nanos.toString()}${
                this.scheduled ? "?scheduled" : ""
            }`;
            } else {
                throw new Error(
                    "Neither `nonce` or `accountId` and `validStart` are set"
                );
            }
        }

        /**
         * @internal
         * @param {proto.ITransactionID} id
         * @returns {TransactionId}
         */
        static _fromProtobuf(id) {
            if (id.accountID != null && id.transactionValidStart != null) {
                return new TransactionId(
                    AccountId._fromProtobuf(id.accountID),
                    Timestamp._fromProtobuf(id.transactionValidStart),
                    id.scheduled
                );
            } else {
                throw new Error(
                    "Neither `nonce` or `accountID` and `transactionValidStart` are set"
                );
            }
        }

        /**
         * @internal
         * @returns {proto.ITransactionID}
         */
        _toProtobuf() {
            return {
                accountID:
                    this.accountId != null ? this.accountId._toProtobuf() : null,
                transactionValidStart:
                    this.validStart != null ? this.validStart._toProtobuf() : null,
                scheduled: this.scheduled,
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {TransactionId}
         */
        static fromBytes(bytes) {
            return TransactionId._fromProtobuf(TransactionID.decode(bytes));
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return TransactionID.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @typedef {import("./Hbar.js").default} Hbar
     */

    class MaxQueryPaymentExceeded extends Error {
        /**
         * @param {Hbar} queryCost
         * @param {Hbar} maxQueryPayment
         */
        constructor(queryCost, maxQueryPayment) {
            super();

            this.message = `query cost of ${queryCost.toString()} HBAR exceeds max set on client: ${maxQueryPayment.toString()} HBAR`;
            this.name = "MaxQueryPaymentExceededError";
            this.queryCost = queryCost;
            this.maxQueryPayment = maxQueryPayment;
        }
    }

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
     */

    /**
     * @typedef {import("../client/Client.js").ClientOperator} ClientOperator
     */

    /**
     * @type {Map<ProtoQuery["query"], (query: proto.IQuery) => Query<*>>}
     */
    const QUERY_REGISTRY = new Map();

    /**
     * Base class for all queries that can be submitted to Hedera.
     *
     * @abstract
     * @template OutputT
     * @augments {Executable<proto.IQuery, proto.IResponse, OutputT>}
     */
    class Query extends Executable {
        constructor() {
            super();

            /** @type {?TransactionId} */
            this._paymentTransactionId = null;

            /** @type {proto.ITransaction[]} */
            this._paymentTransactions = [];

            /** @type {?Hbar} */
            this._queryPayment = null;

            /** @type {?Hbar} */
            this._maxQueryPayment = null;
        }

        /**
         * @template T
         * @param {Uint8Array} bytes
         * @returns {Query<T>}
         */
        static fromBytes(bytes) {
            const query = Query$1.decode(bytes);

            if (query.query == null) {
                throw new Error("(BUG) query.query was not set in the protobuf");
            }

            const fromProtobuf = /** @type {(query: proto.IQuery) => Query<T>} */ (QUERY_REGISTRY.get(
                query.query
            ));

            if (fromProtobuf == null) {
                throw new Error(
                    `(BUG) Query.fromBytes() not implemented for type ${query.query}`
                );
            }

            return fromProtobuf(query);
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return Query$1.encode(this._makeRequest()).finish();
        }

        /**
         * Set an explicit payment amount for this query.
         *
         * The client will submit exactly this amount for the payment of this query. Hedera
         * will not return any remainder.
         *
         * @param {Hbar} queryPayment
         * @returns {this}
         */
        setQueryPayment(queryPayment) {
            this._queryPayment = queryPayment;

            return this;
        }

        /**
         * Set the maximum payment allowable for this query.
         *
         * @param {Hbar} maxQueryPayment
         * @returns {this}
         */
        setMaxQueryPayment(maxQueryPayment) {
            this._maxQueryPayment = maxQueryPayment;

            return this;
        }

        /**
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        getCost(client) {
            if (COST_QUERY.length != 1) {
                throw new Error("CostQuery has not been loaded yet");
            }

            return COST_QUERY[0](this).execute(client);
        }

        /**
         * @param {TransactionId} paymentTransactionId
         * @returns {this}
         */
        setPaymentTransactionId(paymentTransactionId) {
            this._paymentTransactionId = paymentTransactionId;
            return this;
        }

        /**
         * @returns {?TransactionId}
         */
        get paymentTransactionId() {
            return this._paymentTransactionId;
        }

        /**
         * @returns {TransactionId}
         */
        _getTransactionId() {
            if (this._paymentTransactionId == null) {
                throw new Error(
                    "Query.PaymentTransactionId was not set duration execution"
                );
            }

            return this._paymentTransactionId;
        }

        /**
         * @protected
         * @returns {boolean}
         */
        _isPaymentRequired() {
            return true;
        }

        /**
         * @template MirrorChannelT
         * @param {import("../client/Client.js").default<Channel, MirrorChannelT>} client
         * @returns {Promise<void>}
         */
        async _beforeExecute(client) {
            if (this._paymentTransactions.length > 0) {
                return;
            }

            if (this._nodeIds.length == 0) {
                this._nodeIds = client._network.getNodeAccountIdsForExecute();
            }

            const operator = client._operator;

            if (this._paymentTransactionId == null) {
                if (this._isPaymentRequired()) {
                    if (operator != null) {
                        this._paymentTransactionId = TransactionId.generate(
                            operator.accountId
                        );
                    } else {
                        throw new Error(
                            "`client` must have an `operator` or an explicit payment transaction must be provided"
                        );
                    }
                } else {
                    this._paymentTransactionId = TransactionId.generate(
                        new AccountId(0)
                    );
                }
            }

            let cost =
                this._queryPayment != null
                    ? this._queryPayment
                    : client.maxQueryPayment;

            if (
                this._paymentTransactions.length !== 0 ||
                !this._isPaymentRequired()
            ) {
                cost = new Hbar(0);
            } else {
                if (this._queryPayment == null) {
                    const actualCost = await this.getCost(client);

                    if (
                        cost.toTinybars().toInt() < actualCost.toTinybars().toInt()
                    ) {
                        throw new MaxQueryPaymentExceeded(cost, actualCost);
                    }

                    cost = actualCost;
                }
            }

            for (const node of this._nodeIds) {
                this._paymentTransactions.push(
                    await _makePaymentTransaction(
                        /** @type {import("../transaction/TransactionId.js").default} */ (this
                            ._paymentTransactionId),
                        node,
                        operator,
                        /** @type {Hbar} */ (cost)
                    )
                );
            }
        }

        /**
         * @abstract
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _mapResponseHeader(response) {
            throw new Error("not implemented");
        }

        /**
         * @protected
         * @returns {proto.IQueryHeader}
         */
        _makeRequestHeader() {
            /** @type {proto.IQueryHeader} */
            let header = {};

            if (this._isPaymentRequired() && this._paymentTransactions.length > 0) {
                header = {
                    responseType: ResponseType.ANSWER_ONLY,
                    payment: this._paymentTransactions[this._nextNodeIndex],
                };
            }

            return header;
        }

        /**
         * @abstract
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _onMakeRequest(header) {
            throw new Error("not implemented");
        }

        /**
         * @override
         * @internal
         * @returns {proto.IQuery}
         */
        _makeRequest() {
            /** @type {proto.IQueryHeader} */
            let header = {};

            if (this._isPaymentRequired() && this._paymentTransactions != null) {
                header = {
                    payment: this._paymentTransactions[this._nextNodeIndex],
                    responseType: ResponseType.ANSWER_ONLY,
                };
            }

            return this._onMakeRequest(header);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Status}
         */
        _mapResponseStatus(response) {
            const { nodeTransactionPrecheckCode } = this._mapResponseHeader(
                response
            );

            return Status._fromCode(
                nodeTransactionPrecheckCode != null
                    ? nodeTransactionPrecheckCode
                    : ResponseCodeEnum.OK
            );
        }

        /**
         * @returns {AccountId}
         */
        _getNodeAccountId() {
            if (this._nodeIds.length > 0) {
                // if there are payment transactions,
                // we need to use the node of the current payment transaction
                return this._nodeIds[this._nextNodeIndex];
            } else {
                throw new Error(
                    "(BUG) nodeAccountIds were not set for query before executing"
                );
            }
        }

        /**
         * @override
         * @protected
         * @returns {void}
         */
        _advanceRequest() {
            if (this._isPaymentRequired() && this._paymentTransactions.length > 0) {
                // each time we move our cursor to the next transaction
                // wrapping around to ensure we are cycling
                super._nextNodeIndex =
                    (this._nextNodeIndex + 1) % this._paymentTransactions.length;
            }
        }
    }

    /**
     * @param {TransactionId} paymentTransactionId
     * @param {AccountId} nodeId
     * @param {?ClientOperator} operator
     * @param {Hbar} paymentAmount
     * @returns {Promise<proto.ITransaction>}
     */
    async function _makePaymentTransaction(
        paymentTransactionId,
        nodeId,
        operator,
        paymentAmount
    ) {
        const accountAmounts = [];

        if (operator != null) {
            accountAmounts.push({
                accountID: operator.accountId._toProtobuf(),
                amount: paymentAmount.negated().toTinybars(),
            });
            accountAmounts.push({
                accountID: nodeId._toProtobuf(),
                amount: paymentAmount.toTinybars(),
            });
        } else {
            accountAmounts.push({
                accountID: new AccountId(0)._toProtobuf(),
                amount: paymentAmount.negated().toTinybars(),
            });
            accountAmounts.push({
                accountID: nodeId._toProtobuf(),
                amount: paymentAmount.toTinybars(),
            });
        }
        /**
         * @type {proto.ITransactionBody}
         */
        const body = {
            transactionID: paymentTransactionId._toProtobuf(),
            nodeAccountID: nodeId._toProtobuf(),
            transactionFee: new Hbar(1).toTinybars(),
            transactionValidDuration: {
                seconds: long.fromNumber(120),
            },
            cryptoTransfer: {
                transfers: {
                    accountAmounts,
                },
            },
        };

        /** @type {proto.ISignedTransaction} */
        const signedTransaction = {
            bodyBytes: TransactionBody.encode(body).finish(),
        };

        if (operator != null) {
            const signature = await operator.transactionSigner(
                /** @type {Uint8Array} */ (signedTransaction.bodyBytes)
            );

            signedTransaction.sigMap = {
                sigPair: [
                    {
                        pubKeyPrefix: operator.publicKey.toBytes(),
                        ed25519: signature,
                    },
                ],
            };
        }

        return {
            signedTransactionBytes: SignedTransaction.encode(
                signedTransaction
            ).finish(),
        };
    }

    /**
     * @type {((query: Query<*>) => import("./CostQuery.js").default<*>)[]}
     */
    const COST_QUERY = [];

    /**
     * The ID for a crypto-currency contract on Hedera.
     */
    class ContractId extends Key {
        /**
         * @param {number | Long | import("../EntityIdHelper").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            super();

            const [shard_num, realm_num, contract_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = contract_num;
        }

        /**
         * @param {string} text
         * @returns {ContractId}
         */
        static fromString(text) {
            return new ContractId(...fromString(text));
        }

        /**
         * @internal
         * @param {proto.IContractID} id
         * @returns {ContractId}
         */
        static _fromProtobuf(id) {
            return new ContractId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.contractNum != null ? id.contractNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {ContractId}
         */
        static fromBytes(bytes) {
            return ContractId._fromProtobuf(ContractID.decode(bytes));
        }

        /**
         * @param {string} address
         * @returns {ContractId}
         */
        static fromSolidityAddress(address) {
            const [shard, realm, contract] = fromSolidityAddress(address);
            return new ContractId(shard, realm, contract);
        }

        /**
         * @override
         * @internal
         * @returns {proto.IContractID}
         */
        _toProtobuf() {
            return {
                contractNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return ContractID.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @typedef {import("long").Long} Long
     */

    /**
     * The ID for a crypto-currency token on Hedera.
     *
     * @augments {EntityId<proto.ITokenID>}
     */
    class TokenId {
        /**
         * @param {number | Long | import("../EntityIdHelper.js").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            const [shard_num, realm_num, token_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = token_num;
        }

        /**
         * @param {string} text
         * @returns {TokenId}
         */
        static fromString(text) {
            return new TokenId(...fromString(text));
        }

        /**
         * @internal
         * @param {proto.ITokenID} id
         * @returns {TokenId}
         */
        static _fromProtobuf(id) {
            return new TokenId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.tokenNum != null ? id.tokenNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {TokenId}
         */
        static fromBytes(bytes) {
            return TokenId._fromProtobuf(TokenID.decode(bytes));
        }

        /**
         * @param {string} address
         * @returns {TokenId}
         */
        static fromSolidityAddress(address) {
            return new TokenId(...fromSolidityAddress(address));
        }

        /**
         * @internal
         * @override
         * @returns {proto.ITokenID}
         */
        _toProtobuf() {
            return {
                tokenNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return TokenID.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @abstract
     * @template {{ toString(): string }} KeyT
     * @template {{ toString(): string }} ValueT
     */
    class ObjectMap {
        /**
         * @param {(s: string) => KeyT} fromString
         */
        constructor(fromString) {
            /** @type {Map<string, ValueT>} */
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this._map = new Map();

            /** @type {Map<KeyT, ValueT>} */
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this.__map = new Map();

            this._fromString = fromString;
        }

        /**
         * @param {KeyT | string} key
         * @returns {?ValueT}
         */
        get(key) {
            const k = typeof key === "string" ? key : key.toString();

            const value = this._map.get(k);
            return value != null ? value : null;
        }

        /**
         * @internal
         * @param {KeyT} key
         * @param {ValueT} value
         */
        _set(key, value) {
            const k = typeof key === "string" ? key : key.toString();

            this._map.set(k, value);
            this.__map.set(typeof k === "string" ? this._fromString(k) : k, value);
        }

        /**
         * @returns {IterableIterator<ValueT>}
         */
        values() {
            return this._map.values();
        }

        /**
         * @returns {number}
         */
        get size() {
            return this._map.size;
        }

        /**
         * @returns {IterableIterator<KeyT>}
         */
        keys() {
            return this.__map.keys();
        }

        /**
         * @returns {IterableIterator<[KeyT, ValueT]>}
         */
        [Symbol.iterator]() {
            return this.__map[Symbol.iterator]();
        }

        /**
         * @returns {string}
         */
        toString() {
            /** @type {Object.<string, string>} */
            const map = {};

            for (const [key, value] of this._map) {
                map[key] = value.toString();
            }

            return JSON.stringify(map);
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITokenBalance} proto.ITokenBalance
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @augments {ObjectMap<TokenId, Long>}
     */
    class TokenBalanceMap extends ObjectMap {
        constructor() {
            super((s) => TokenId.fromString(s));
        }

        /**
         * @param {proto.ITokenBalance[]} balances
         * @returns {TokenBalanceMap}
         */
        static _fromProtobuf(balances) {
            const tokenBalances = new TokenBalanceMap();

            for (const balance of balances) {
                const tokenId = TokenId._fromProtobuf(
                    /** @type {proto.ITokenID} */ (balance.tokenId)
                );

                tokenBalances._set(
                    tokenId,
                    long.fromValue(/** @type {Long} */ (balance.balance))
                );
            }

            return tokenBalances;
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse
     * @typedef {import("@hashgraph/proto").IKey} proto.IKey
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("long")} Long
     */

    class AccountBalance {
        /**
         * @private
         * @param {object} props
         * @param {Hbar} props.hbars
         * @param {?TokenBalanceMap} props.tokens
         */
        constructor(props) {
            /**
             * The account ID for which this balancermation applies.
             *
             * @readonly
             */
            this.hbars = props.hbars;

            /** @readonly */
            this.tokens = props.tokens;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.ICryptoGetAccountBalanceResponse} balance
         * @returns {AccountBalance}
         */
        static _fromProtobuf(balance) {
            return new AccountBalance({
                hbars: Hbar.fromTinybars(/** @type {Long} */ (balance.balance)),
                tokens: TokenBalanceMap._fromProtobuf(
                    balance.tokenBalances != null ? balance.tokenBalances : []
                ),
            });
        }

        /**
         * @returns {proto.ICryptoGetAccountBalanceResponse}
         */
        _toProtobuf() {
            const list = [];
            for (const [key, value] of this.tokens != null ? this.tokens : []) {
                list.push({
                    token: key._toProtobuf(),
                    balance: value,
                });
            }

            return {
                balance: this.hbars.toTinybars(),
                tokenBalances: list,
            };
        }

        /**
         * @returns {string}
         */
        toString() {
            let finalToken = "";
            if (this.tokens != null) {
                for (const [key, value] of this.tokens._map) {
                    finalToken =
                        finalToken +
                        JSON.stringify({
                            tokenId: key.toString(),
                            balance: value.toString(),
                        });
                }
            }

            return JSON.stringify({
                hbars: this.hbars.toString(),
                tokens: finalToken,
            });
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ICryptoGetAccountBalanceQuery} proto.ICryptoGetAccountBalanceQuery
     * @typedef {import("@hashgraph/proto").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * Get the balance of a Hedera™ crypto-currency account.
     *
     * This returns only the balance, so its a smaller and faster reply
     * than AccountInfoQuery.
     *
     * This query is free.
     *
     * @augments {Query<AccountBalance>}
     */
    class AccountBalanceQuery extends Query {
        /**
         * @param {object} [props]
         * @param {AccountId | string} [props.accountId]
         * @param {ContractId | string} [props.contractId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?AccountId}
             * @private
             */
            this._accountId = null;

            /**
             * @type {?ContractId}
             * @private
             */
            this._contractId = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {AccountBalanceQuery}
         */
        static _fromProtobuf(query) {
            const balance = /** @type {proto.ICryptoGetAccountBalanceQuery} */ (query.cryptogetAccountBalance);

            return new AccountBalanceQuery({
                accountId:
                    balance.accountID != null
                        ? AccountId._fromProtobuf(balance.accountID)
                        : undefined,
                contractId:
                    balance.contractID != null
                        ? ContractId._fromProtobuf(balance.contractID)
                        : undefined,
            });
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account ID for which the balance is being requested.
         *
         * This is mutually exclusive with `setContractId`.
         *
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Set the contract ID for which the balance is being requested.
         *
         * This is mutually exclusive with `setAccountId`.
         *
         * @param {ContractId | string} contractId
         * @returns {this}
         */
        setContractId(contractId) {
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @protected
         * @override
         * @returns {boolean}
         */
        _isPaymentRequired() {
            return false;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.cryptoGetBalance(request);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const cryptogetAccountBalance = /** @type {proto.ICryptoGetAccountBalanceResponse} */ (response.cryptogetAccountBalance);
            return /** @type {proto.IResponseHeader} */ (cryptogetAccountBalance.header);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Promise<AccountBalance>}
         */
        _mapResponse(response) {
            const cryptogetAccountBalance = /** @type {proto.ICryptoGetAccountBalanceResponse} */ (response.cryptogetAccountBalance);
            return Promise.resolve(
                AccountBalance._fromProtobuf(cryptogetAccountBalance)
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                cryptogetAccountBalance: {
                    header,
                    accountID:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                    contractID:
                        this._contractId != null
                            ? this._contractId._toProtobuf()
                            : null,
                },
            };
        }
    }

    QUERY_REGISTRY.set(
        "cryptogetAccountBalance",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        AccountBalanceQuery._fromProtobuf
    );

    /**
     * @typedef {import("./Status.js").default} Status
     * @typedef {import("./transaction/TransactionId.js").default} TransactionId
     * @typedef {import("./transaction/TransactionReceipt.js").default} TransactionReceipt
     */

    class ReceiptStatusError extends StatusError {
        /**
         * @param {object} props
         * @param {TransactionReceipt} props.transactionReceipt
         * @param {Status} props.status
         * @param {TransactionId} props.transactionId
         */
        constructor(props) {
            super(
                props,
                `receipt for transaction ${props.transactionId.toString()} contained error status ${props.status.toString()}`
            );

            /**
             * @type {TransactionReceipt}
             * @readonly
             */
            this.transactionReceipt = props.transactionReceipt;
        }
    }

    /**
     * @typedef {import("long")} Long
     */

    /**
     * The ID for a crypto-currency file on Hedera.
     */
    class FileId {
        /**
         * @param {number | Long | import("../EntityIdHelper").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            const [shard_num, realm_num, file_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = file_num;
        }

        /**
         * @param {string} text
         * @returns {FileId}
         */
        static fromString(text) {
            return new FileId(...fromString(text));
        }

        /**
         * @internal
         * @param {proto.IFileID} id
         * @returns {FileId}
         */
        static _fromProtobuf(id) {
            return new FileId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.fileNum != null ? id.fileNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {FileId}
         */
        static fromBytes(bytes) {
            return FileId._fromProtobuf(FileID.decode(bytes));
        }

        /**
         * @override
         * @internal
         * @returns {proto.IFileID}
         */
        _toProtobuf() {
            return {
                fileNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return FileID.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @typedef {import("long").Long} Long
     */

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITopicID} proto.ITopicID
     */

    /**
     * Unique identifier for a topic (used by the consensus service).
     */
    class TopicId {
        /**
         * @param {number | Long | import("../EntityIdHelper.js").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            const [shard_num, realm_num, topic_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = topic_num;
        }

        /**
         * @param {string} text
         * @returns {TopicId}
         */
        static fromString(text) {
            return new TopicId(...fromString(text));
        }

        /**
         * @param {proto.ITopicID} id
         * @returns {TopicId}
         */
        static _fromProtobuf(id) {
            return new TopicId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.topicNum != null ? id.topicNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {TopicId}
         */
        static fromBytes(bytes) {
            return TopicId._fromProtobuf(TopicID.decode(bytes));
        }

        /**
         * @override
         * @returns {proto.ITopicID}
         */
        _toProtobuf() {
            return {
                topicNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return TopicID.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @typedef {import("long").Long} Long
     */

    /**
     *
     * @augments {EntityId<proto.IScheduleID>}
     */

    class ScheduleId {
        /**
         * @param {number | Long | import("../EntityIdHelper.js").IEntityId} props
         * @param {(number | Long)=} realm
         * @param {(number | Long)=} num
         */
        constructor(props, realm, num) {
            const [shard_num, realm_num, schedule_num] = constructor(
                props,
                realm,
                num
            );

            this.shard = shard_num;
            this.realm = realm_num;
            this.num = schedule_num;
        }

        /**
         * @param {string} text
         * @returns {ScheduleId}
         */
        static fromString(text) {
            return new ScheduleId(...fromString(text));
        }

        /**
         * @internal
         * @param {proto.IScheduleID} id
         * @returns {ScheduleId}
         */
        static _fromProtobuf(id) {
            return new ScheduleId({
                shard: id.shardNum != null ? id.shardNum : 0,
                realm: id.realmNum != null ? id.realmNum : 0,
                num: id.scheduleNum != null ? id.scheduleNum : 0,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {ScheduleId}
         */
        static fromBytes(bytes) {
            return ScheduleId._fromProtobuf(ScheduleID.decode(bytes));
        }

        /**
         * @param {string} address
         * @returns {ScheduleId}
         */
        static fromSolidityAddress(address) {
            return new ScheduleId(...fromSolidityAddress(address));
        }

        /**
         * @internal
         * @override
         * @returns {proto.ScheduleID}
         */
        _toProtobuf() {
            return {
                scheduleNum: this.num,
                shardNum: this.shard,
                realmNum: this.realm,
            };
        }

        /**
         * @override
         * @returns {string}
         */
        toString() {
            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return ScheduleID.encode(this._toProtobuf()).finish();
        }
    }

    class ExchangeRate {
        /**
         * @private
         * @param {object} props
         * @param {number} props.hbars
         * @param {number} props.cents
         * @param {Date} props.expirationTime
         */
        constructor(props) {
            /**
             * Denotes Hbar equivalent to cents (USD)
             *
             * @readonly
             * @type {number}
             */
            this.hbars = props.hbars;

            /**
             * Denotes cents (USD) equivalent to Hbar
             *
             * @readonly
             * @type {number}
             */
            this.cents = props.cents;

            /**
             * Expiration time of this exchange rate
             *
             * @readonly
             * @type {Date}
             */
            this.expirationTime = props.expirationTime;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {import("@hashgraph/proto").IExchangeRate} rate
         * @returns {ExchangeRate}
         */
        static _fromProtobuf(rate) {
            return new ExchangeRate({
                hbars: /** @type {number} */ (rate.hbarEquiv),
                cents: /** @type {number} */ (rate.centEquiv),
                expirationTime: new Date(
                    rate.expirationTime != null
                        ? rate.expirationTime.seconds != null
                            ? rate.expirationTime.seconds instanceof long
                                ? rate.expirationTime.seconds.toInt()
                                : rate.expirationTime.seconds
                            : 0 * 1000
                        : 0 * 1000
                ),
            });
        }

        /**
         * @internal
         * @returns {import("@hashgraph/proto").IExchangeRate}
         */
        _toProtobuf() {
            return {
                hbarEquiv: this.hbars,
                centEquiv: this.cents,
                expirationTime: {
                    seconds: long.fromNumber(this.expirationTime.getSeconds()),
                },
            };
        }
    }

    /**
     * The consensus result for a transaction, which might not be currently known,
     * or may succeed or fail.
     */
    class TransactionReceipt {
        /**
         * @private
         * @param {object} props
         * @param {Status} props.status
         * @param {?AccountId} props.accountId
         * @param {?FileId} props.fileId
         * @param {?ContractId} props.contractId
         * @param {?TopicId} props.topicId
         * @param {?TokenId} props.tokenId
         * @param {?ScheduleId} props.scheduleId
         * @param {?ExchangeRate} props.exchangeRate
         * @param {?Long} props.topicSequenceNumber
         * @param {?Uint8Array} props.topicRunningHash
         * @param {?Long} props.totalSupply
         * @param {?TransactionId} props.scheduledTransactionId
         */
        constructor(props) {
            /**
             * Whether the transaction succeeded or failed (or is unknown).
             *
             * @readonly
             */
            this.status = props.status;

            /**
             * The account ID, if a new account was created.
             *
             * @readonly
             */
            this.accountId = props.accountId;

            /**
             * The file ID, if a new file was created.
             *
             * @readonly
             */
            this.fileId = props.fileId;

            /**
             * The contract ID, if a new contract was created.
             *
             * @readonly
             */
            this.contractId = props.contractId;

            /**
             * The topic ID, if a new topic was created.
             *
             * @readonly
             */
            this.topicId = props.topicId;

            /**
             * The token ID, if a new token was created.
             *
             * @readonly
             */
            this.tokenId = props.tokenId;

            /**
             * The schedule ID, if a new schedule was created.
             *
             * @readonly
             */
            this.scheduleId = props.scheduleId;

            /**
             * The exchange rate of Hbars to cents (USD).
             *
             * @readonly
             */
            this.exchangeRate = props.exchangeRate;

            /**
             * Updated sequence number for a consensus service topic.
             *
             * @readonly
             */
            this.topicSequenceNumber = props.topicSequenceNumber;

            /**
             * Updated running hash for a consensus service topic.
             *
             * @readonly
             */
            this.topicRunningHash = props.topicRunningHash;

            /**
             * Updated total supply for a token
             *
             * @readonly
             */
            this.totalSupply = props.totalSupply;

            this.scheduledTransactionId = props.scheduledTransactionId;

            Object.freeze(this);
        }

        /**
         * @internal
         * @returns {proto.ITransactionReceipt}
         */
        _toProtobuf() {
            return {
                status: this.status.valueOf(),

                accountID:
                    this.accountId != null ? this.accountId._toProtobuf() : null,
                fileID: this.fileId != null ? this.fileId._toProtobuf() : null,
                contractID:
                    this.contractId != null ? this.contractId._toProtobuf() : null,
                topicID: this.topicId != null ? this.topicId._toProtobuf() : null,
                tokenID: this.topicId != null ? this.topicId._toProtobuf() : null,
                scheduleID:
                    this.topicId != null ? this.topicId._toProtobuf() : null,

                topicRunningHash:
                    this.topicRunningHash == null ? null : this.topicRunningHash,

                topicSequenceNumber: this.topicSequenceNumber,

                exchangeRate: {
                    nextRate: null,
                    currentRate:
                        this.exchangeRate != null
                            ? this.exchangeRate._toProtobuf()
                            : null,
                },

                scheduledTransactionID:
                    this.scheduledTransactionId != null
                        ? this.scheduledTransactionId._toProtobuf()
                        : null,
            };
        }

        /**
         * @internal
         * @param {proto.ITransactionReceipt} receipt
         * @returns {TransactionReceipt}
         */
        static _fromProtobuf(receipt) {
            const exchangeRateSet = /** @type {proto.IExchangeRateSet} */ (receipt.exchangeRate);

            return new TransactionReceipt({
                status: Status._fromCode(
                    receipt.status != null ? receipt.status : 0
                ),

                accountId:
                    receipt.accountID != null
                        ? AccountId._fromProtobuf(receipt.accountID)
                        : null,

                fileId:
                    receipt.fileID != null
                        ? FileId._fromProtobuf(receipt.fileID)
                        : null,

                contractId:
                    receipt.contractID != null
                        ? ContractId._fromProtobuf(receipt.contractID)
                        : null,

                topicId:
                    receipt.topicID != null
                        ? TopicId._fromProtobuf(receipt.topicID)
                        : null,

                tokenId:
                    receipt.tokenID != null
                        ? TokenId._fromProtobuf(receipt.tokenID)
                        : null,

                scheduleId:
                    receipt.scheduleID != null
                        ? ScheduleId._fromProtobuf(receipt.scheduleID)
                        : null,

                exchangeRate:
                    receipt.exchangeRate != null
                        ? ExchangeRate._fromProtobuf(
                              /** @type {proto.IExchangeRate} */
                              (exchangeRateSet.currentRate)
                          )
                        : null,

                topicSequenceNumber:
                    receipt.topicSequenceNumber == null
                        ? null
                        : long.fromValue(receipt.topicSequenceNumber),

                topicRunningHash:
                    receipt.topicRunningHash != null
                        ? receipt.topicRunningHash
                        : null,

                totalSupply:
                    receipt.newTotalSupply != null ? receipt.newTotalSupply : null,

                scheduledTransactionId:
                    receipt.scheduledTransactionID != null
                        ? TransactionId._fromProtobuf(
                              receipt.scheduledTransactionID
                          )
                        : null,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {TransactionReceipt}
         */
        static fromBytes(bytes) {
            return TransactionReceipt._fromProtobuf(
                TransactionReceipt$1.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return TransactionReceipt$1.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
     * @typedef {import("@hashgraph/proto").ITransactionGetReceiptQuery} proto.ITransactionGetReceiptQuery
     * @typedef {import("@hashgraph/proto").ITransactionGetReceiptResponse} proto.ITransactionGetReceiptResponse
     * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
     */

    /**
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<TransactionReceipt>}
     */
    class TransactionReceiptQuery extends Query {
        /**
         * @param {object} [props]
         * @param {TransactionId | string} [props.transactionId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TransactionId}
             */
            this._transactionId = null;

            if (props.transactionId != null) {
                this.setTransactionId(props.transactionId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {TransactionReceiptQuery}
         */
        static _fromProtobuf(query) {
            const receipt = /** @type {proto.ITransactionGetReceiptQuery} */ (query.transactionGetReceipt);

            return new TransactionReceiptQuery({
                transactionId: receipt.transactionID
                    ? TransactionId._fromProtobuf(receipt.transactionID)
                    : undefined,
            });
        }

        /**
         * @returns {?TransactionId}
         */
        get transactionId() {
            return this._transactionId;
        }

        /**
         * Set the transaction ID for which the receipt is being requested.
         *
         * @param {TransactionId | string} transactionId
         * @returns {this}
         */
        setTransactionId(transactionId) {
            this._transactionId =
                transactionId instanceof TransactionId
                    ? transactionId
                    : TransactionId.fromString(transactionId);

            return this;
        }

        /**
         * @override
         * @protected
         * @returns {boolean}
         */
        _isPaymentRequired() {
            return false;
        }

        /**
         * @override
         * @protected
         * @param {Status} responseStatus
         * @param {proto.IResponse} response
         * @returns {boolean}
         */
        _shouldRetry(responseStatus, response) {
            switch (responseStatus) {
                case Status.Busy:
                case Status.Unknown:
                case Status.ReceiptNotFound:
                    return true;
                case Status.Ok:
                    // Do nothing
                    break;

                default:
                    return false;
            }

            const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);
            const receipt = /** @type {proto.ITransactionReceipt} */ (transactionGetReceipt.receipt);
            const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (receipt.status);
            const receiptStatus = Status._fromCode(receiptStatusCode);

            switch (receiptStatus) {
                case Status.Ok:
                case Status.Busy:
                case Status.Unknown:
                case Status.ReceiptNotFound:
                    return true;
                // looks like its either success or some other error
            }

            return false;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.getTransactionReceipts(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);
            return /** @type {proto.IResponseHeader} */ (transactionGetReceipt.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @param {AccountId} nodeAccountId
         * @param {proto.IQuery} request
         * @returns {Promise<TransactionReceipt>}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _mapResponse(response, nodeAccountId, request) {
            const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);
            const receipt = /** @type {proto.ITransactionReceipt} */ (transactionGetReceipt.receipt);

            return Promise.resolve(TransactionReceipt._fromProtobuf(receipt));
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                transactionGetReceipt: {
                    header,
                    transactionID:
                        this._transactionId != null
                            ? this._transactionId._toProtobuf()
                            : null,
                },
            };
        }
    }

    QUERY_REGISTRY.set(
        "transactionGetReceipt",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TransactionReceiptQuery._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IAccountAmount} proto.IAccountAmount
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("long")} Long
     */

    /**
     * An account, and the amount that it sends or receives during a cryptocurrency transfer.
     */
    class Transfer {
        /**
         * @internal
         * @param {object} props
         * @param {AccountId | string} props.accountId
         * @param {number | string | Long | BigNumber | Hbar} props.amount
         */
        constructor(props) {
            /**
             * The Account ID that sends or receives cryptocurrency.
             *
             * @readonly
             */
            this.accountId =
                props.accountId instanceof AccountId
                    ? props.accountId
                    : AccountId.fromString(props.accountId);

            /**
             * The amount of tinybars that the account sends(negative) or receives(positive).
             *
             * @readonly
             */
            this.amount =
                props.amount instanceof Hbar
                    ? props.amount
                    : new Hbar(props.amount);

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IAccountAmount} transfer
         * @returns {Transfer}
         */
        static _fromProtobuf(transfer) {
            return new Transfer({
                accountId: AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (transfer.accountID)
                ),
                amount: Hbar.fromTinybars(
                    transfer.amount != null ? transfer.amount : 0
                ),
            });
        }

        /**
         * @internal
         * @returns {proto.IAccountAmount}
         */
        _toProtobuf() {
            return {
                accountID: this.accountId._toProtobuf(),
                amount: this.amount.toTinybars(),
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IContractLoginfo} proto.IContractLoginfo
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     */

    /**
     * The log information for an event returned by a smart contract function call. One function call
     * may return several such events.
     */
    class ContractLogInfo {
        /**
         * @param {object} props
         * @param {ContractId} props.contractId
         * @param {Uint8Array} props.bloom
         * @param {Uint8Array[]} props.topics
         * @param {Uint8Array} props.data
         */
        constructor(props) {
            /**
             * Address of a contract that emitted the event.
             *
             * @readonly
             */
            this.contractId = props.contractId;

            /**
             * Bloom filter for a particular log.
             *
             * @readonly
             */
            this.bloom = props.bloom;

            /**
             * Topics of a particular event.
             *
             * @readonly
             */
            this.topics = props.topics;

            /**
             * Event data.
             *
             * @readonly
             */
            this.data = props.data;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IContractLoginfo} info
         * @returns {ContractLogInfo}
         */
        static _fromProtobuf(info) {
            return new ContractLogInfo({
                contractId: ContractId._fromProtobuf(
                    /** @type {proto.IContractID} */ (info.contractID)
                ),
                bloom: info.bloom != null ? info.bloom : new Uint8Array(),
                topics: info.topic != null ? info.topic : [],
                data: info.data != null ? info.data : new Uint8Array(),
            });
        }

        /**
         * @internal
         * @returns {proto.IContractLoginfo}
         */
        _toProtobuf() {
            return {
                contractID: this.contractId._toProtobuf(),
                bloom: this.bloom,
                topic: this.topics,
                data: this.data,
            };
        }
    }

    /**
     * @param {Uint8Array} data
     * @returns {string}
     */
    function decode(data) {
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        return new TextDecoder().decode(data);
    }

    /**
     * @param {string} text
     * @returns {Uint8Array}
     */
    function encode(text) {
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        return new TextEncoder().encode(text);
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IContractFunctionResult} proto.IContractFunctionResult
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     */
    /**
     * The result returned by a call to a smart contract function. This is part of the response to
     * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance
     * transaction. The ContractCreateInstance transaction record has the results of the call to
     * the constructor.
     */
    class ContractFunctionResult {
        /**
         * Constructor isn't part of the stable API
         *
         * @param {object} result
         * @param {?ContractId} result.contractId
         * @param {?string} result.errorMessage
         * @param {Uint8Array} result.bloom
         * @param {Long} result.gasUsed
         * @param {ContractLogInfo[]} result.logs
         * @param {Uint8Array} result.bytes
         */
        constructor(result) {
            /**
             * The smart contract instance whose function was called.
             */
            this.contractId = result.contractId;

            this.bytes = result.bytes;

            /**
             * Message In case there was an error during smart contract execution.
             */
            this.errorMessage = result.errorMessage;

            /**
             * Bloom filter for record
             */
            this.bloom = result.bloom;

            /**
             * Units of gas used  to execute contract.
             */
            this.gasUsed = result.gasUsed;

            /**
             * The log info for events returned by the function.
             */
            this.logs = result.logs;
        }

        /**
         * @param {proto.IContractFunctionResult} result
         * @returns {ContractFunctionResult}
         */
        static _fromProtobuf(result) {
            const contractId = /** @type {proto.IContractID | null} */ (result.contractID);
            const gas = /** @type {Long | number} */ (result.gasUsed);

            return new ContractFunctionResult({
                bytes: /** @type {Uint8Array} */ (result.contractCallResult),
                contractId:
                    contractId != null
                        ? ContractId._fromProtobuf(contractId)
                        : null,
                errorMessage:
                    result.errorMessage != null ? result.errorMessage : null,
                bloom: /** @type {Uint8Array} */ (result.bloom),
                gasUsed: gas instanceof long ? gas : long.fromValue(gas),
                logs: (result.logInfo != null ? result.logInfo : []).map((info) =>
                    ContractLogInfo._fromProtobuf(info)
                ),
            });
        }

        /**
         * @returns {Uint8Array}
         */
        asBytes() {
            return this.bytes;
        }

        /**
         * @param {number} [index]
         * @returns {string}
         */
        getString(index) {
            return decode(this.getBytes(index));
        }

        /**
         * @private
         * @param {number} [index]
         * @returns {Uint8Array}
         */
        getBytes(index) {
            // Len should never be larger than Number.MAX
            // index * 32 is the position of the lenth
            // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array
            // Arrays in solidity cannot be longer than 1024:
            // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html
            const offset = this.getInt32(index);
            const len = new DataView(
                this.bytes.buffer,
                this.bytes.byteOffset + offset + 28,
                4
            ).getInt32(0);

            return this.bytes.subarray(offset + 32, offset + 32 + len);
        }

        /**
         * @param {number} [index]
         * @returns {Uint8Array}
         */
        getBytes32(index) {
            return this.bytes.subarray(
                (index != null ? index : 0) * 32,
                (index != null ? index : 0) * 32 + 32
            );
        }

        /**
         * @param {number} [index]
         * @returns {boolean}
         */
        getBool(index) {
            return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;
        }

        /**
         * @param {number} [index]
         * @returns {number}
         */
        getInt8(index) {
            return this.bytes[(index != null ? index : 0) * 32 + 31];
        }

        /**
         * @param {number} [index]
         * @returns {number}
         */
        getInt32(index) {
            // .getInt32() interprets as big-endian
            // Using DataView instead of Uint32Array because the latter interprets
            // using platform endianness which is little-endian on x86
            return new DataView(
                this.bytes.buffer,
                this.bytes.byteOffset + (index != null ? index : 0) * 32 + 28,
                4
            ).getInt32(0);
        }

        /**
         * @param {number} [index]
         * @returns {BigNumber}
         */
        getInt64(index) {
            return new bignumber(
                encode$1(
                    this._getBytes32(index != null ? index : 0).subarray(24, 32)
                ),
                16
            );
        }

        /**
         * @param {number} [index]
         * @returns {BigNumber}
         */
        getInt256(index) {
            return new bignumber(
                encode$1(this._getBytes32(index != null ? index : 0)),
                16
            );
        }

        /**
         * @param {number} [index]
         * @returns {number}
         */
        getUint8(index) {
            return this.bytes[(index != null ? index : 0) * 32 + 31];
        }

        /**
         * @param {number} [index]
         * @returns {number}
         */
        getUint32(index) {
            // .getUint32() interprets as big-endian
            // Using DataView instead of Uint32Array because the latter interprets
            // using platform endianness which is little-endian on x86
            return new DataView(
                this.bytes.buffer,
                this.bytes.byteOffset + (index != null ? index : 0) * 32 + 28,
                4
            ).getUint32(0);
        }

        /**
         * @param {number} [index]
         * @returns {BigNumber}
         */
        getUint64(index) {
            return new bignumber(
                encode$1(this._getBytes32(index).subarray(24, 32)),
                16
            );
        }

        /**
         * @param {number} [index]
         * @returns {BigNumber}
         */
        getUint256(index) {
            return new bignumber(encode$1(this._getBytes32(index)), 16);
        }

        /**
         * @param {number} [index]
         * @returns {string}
         */
        getAddress(index) {
            return encode$1(
                this.bytes.subarray(
                    (index != null ? index : 0) * 32 + 12,
                    (index != null ? index : 0) * 32 + 32
                )
            );
        }

        /**
         * @param {number} [index]
         * @returns {Uint8Array}
         */
        _getBytes32(index) {
            return this.bytes.subarray(
                (index != null ? index : 0) * 32,
                (index != null ? index : 0) * 32 + 32
            );
        }
    }

    /**
     * @augments {ObjectMap<AccountId, Long>}
     */
    class TokenTransferAccountMap extends ObjectMap {
        constructor() {
            super((s) => AccountId.fromString(s));
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITokenTransferList} proto.ITokenTransferList
     * @typedef {import("@hashgraph/proto").IAccountAmount} proto.IAccountAmount
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @augments {ObjectMap<TokenId, TokenTransferAccountMap>}
     */
    class TokenTransferMap extends ObjectMap {
        constructor() {
            super((s) => TokenId.fromString(s));
        }

        /**
         * @internal
         * @param {TokenId} tokenId
         * @param {AccountId} accountId
         * @param {Long} amount
         */
        __set(tokenId, accountId, amount) {
            const token = tokenId.toString();

            let _map = this._map.get(token);
            if (_map == null) {
                _map = new TokenTransferAccountMap();
                this._map.set(token, _map);
                this.__map.set(tokenId, _map);
            }

            _map._set(accountId, amount);
        }

        /**
         * @param {proto.ITokenTransferList[]} transfers
         * @returns {TokenTransferMap}
         */
        static _fromProtobuf(transfers) {
            const tokenTransfersMap = new TokenTransferMap();

            for (const transfer of transfers) {
                const token = TokenId._fromProtobuf(
                    /** @type {proto.ITokenID} */ (transfer.token)
                );

                for (const aa of transfer.transfers != null
                    ? transfer.transfers
                    : []) {
                    const account = AccountId._fromProtobuf(
                        /** @type {proto.IAccountID} */ (aa.accountID)
                    );

                    tokenTransfersMap.__set(
                        token,
                        account,
                        /** @type {Long} */ (aa.amount)
                    );
                }
            }

            return tokenTransfersMap;
        }

        /**
         * @returns {proto.ITokenTransferList[]}
         */
        _toProtobuf() {
            /** @type {proto.ITokenTransferList[]} */
            const tokenTransferList = [];

            for (const [tokenId, value] of this) {
                /** @type {proto.IAccountAmount[]} */
                const transfers = [];

                for (const [accountId, amount] of value) {
                    transfers.push({
                        accountID: accountId._toProtobuf(),
                        amount: amount,
                    });
                }

                tokenTransferList.push({
                    token: tokenId._toProtobuf(),
                    transfers: transfers,
                });
            }

            return tokenTransferList;
        }
    }

    /**
     * Response when the client sends the node TransactionGetRecordResponse.
     */
    class TransactionRecord {
        /**
         * @private
         * @param {object} props
         * @param {ContractFunctionResult} [props.contractFunctionResult]
         * @param {TransactionReceipt} props.receipt
         * @param {Uint8Array} props.transactionHash
         * @param {Timestamp} props.consensusTimestampstamp
         * @param {TransactionId} props.transactionId
         * @param {string} props.transactionMemo
         * @param {Hbar} props.transactionFee
         * @param {Transfer[]} props.transfers
         * @param {TokenTransferMap} props.tokenTransfers
         * @param {?ScheduleId} props.scheduleRef
         */
        constructor(props) {
            /**
             * The status (reach consensus, or failed, or is unknown) and the ID of
             * any new account/file/instance created.
             *
             * @readonly
             */
            this.receipt = props.receipt;

            /**
             * The hash of the Transaction that executed (not the hash of any Transaction that failed
             * for having a duplicate TransactionID).
             *
             * @readonly
             */
            this.transactionHash = props.transactionHash;

            /**
             * The consensus timestamp (or null if didn't reach consensus yet).
             *
             * @readonly
             */
            this.consensusTimestampstamp = props.consensusTimestampstamp;

            /**
             * The ID of the transaction this record represents.
             *
             * @readonly
             */
            this.transactionId = props.transactionId;

            /**
             * The memo that was submitted as part of the transaction (max 100 bytes).
             *
             * @readonly
             */
            this.transactionMemo = props.transactionMemo;

            /**
             * The actual transaction fee charged,
             * not the original transactionFee value from TransactionBody.
             *
             * @readonly
             */
            this.transactionFee = props.transactionFee;

            /**
             * All hbar transfers as a result of this transaction, such as fees, or transfers performed
             * by the transaction, or by a smart contract it calls, or by the creation of threshold
             * records that it triggers.
             *
             * @readonly
             */
            this.transfers = props.transfers;

            /**
             * Record of the value returned by the smart contract function or constructor.
             *
             * @readonly
             */
            this.contractFunctionResult =
                props.contractFunctionResult != null
                    ? props.contractFunctionResult
                    : null;

            /**
             * All the token transfers from this account
             *
             * @readonly
             */
            this.tokenTransfers = props.tokenTransfers;

            this.scheduleRef = props.scheduleRef;

            Object.freeze(this);
        }

        /**
         * @internal
         * @returns {proto.ITransactionRecord}
         */
        _toProtobuf() {
            return {
                receipt: this.receipt._toProtobuf(),

                transactionHash:
                    this.transactionHash != null ? this.transactionHash : null,
                consensusTimestamp:
                    this.consensusTimestampstamp != null
                        ? this.consensusTimestampstamp._toProtobuf()
                        : null,
                transactionID:
                    this.transactionId != null
                        ? this.transactionId._toProtobuf()
                        : null,
                memo: this.transactionMemo != null ? this.transactionMemo : null,

                transactionFee:
                    this.transactionFee != null
                        ? this.transactionFee.toTinybars()
                        : null,

                contractCallResult:
                    this.contractFunctionResult != null
                        ? this.contractFunctionResult
                        : null,

                contractCreateResult:
                    this.contractFunctionResult != null
                        ? this.contractFunctionResult
                        : null,

                transferList:
                    this.transfers != null
                        ? {
                              accountAmounts: this.transfers.map((transfer) =>
                                  transfer._toProtobuf()
                              ),
                          }
                        : null,
                tokenTransferLists: this.tokenTransfers._toProtobuf(),
                scheduleRef:
                    this.scheduleRef != null
                        ? this.scheduleRef._toProtobuf()
                        : null,
            };
        }

        /**
         * @internal
         * @param {proto.ITransactionRecord} record
         * @returns {TransactionRecord}
         */
        static _fromProtobuf(record) {
            const contractFunctionResult =
                record.contractCallResult != null
                    ? ContractFunctionResult._fromProtobuf(
                          record.contractCallResult
                      )
                    : record.contractCreateResult != null
                    ? ContractFunctionResult._fromProtobuf(
                          record.contractCreateResult
                      )
                    : undefined;

            return new TransactionRecord({
                receipt: TransactionReceipt._fromProtobuf(
                    /** @type {proto.ITransactionReceipt} */ (record.receipt)
                ),
                transactionHash:
                    record.transactionHash != null
                        ? record.transactionHash
                        : new Uint8Array(),
                consensusTimestampstamp: Timestamp._fromProtobuf(
                    /** @type {proto.ITimestamp} */
                    (record.consensusTimestamp)
                ),
                transactionId: TransactionId._fromProtobuf(
                    /** @type {proto.ITransactionID} */ (record.transactionID)
                ),
                transactionMemo: record.memo != null ? record.memo : "",
                transactionFee: Hbar.fromTinybars(
                    record.transactionFee != null ? record.transactionFee : 0
                ),
                transfers: (record.transferList != null
                    ? record.transferList.accountAmounts != null
                        ? record.transferList.accountAmounts
                        : []
                    : []
                ).map((aa) => Transfer._fromProtobuf(aa)),
                contractFunctionResult,
                tokenTransfers: TokenTransferMap._fromProtobuf(
                    record.tokenTransferLists != null
                        ? record.tokenTransferLists
                        : []
                ),
                scheduleRef:
                    record.scheduleRef != null
                        ? ScheduleId._fromProtobuf(record.scheduleRef)
                        : null,
            });
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {TransactionRecord}
         */
        static fromBytes(bytes) {
            return TransactionRecord._fromProtobuf(
                TransactionRecord$1.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return TransactionRecord$1.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").ITransactionRecord} proto.ITransactionRecord
     * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
     * @typedef {import("@hashgraph/proto").ITransactionGetRecordResponse} proto.ITransactionGetRecordResponse
     * @typedef {import("@hashgraph/proto").ITransactionGetRecordQuery} proto.ITransactionGetRecordQuery
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<TransactionRecord>}
     */
    class TransactionRecordQuery extends Query {
        /**
         * @param {object} [props]
         * @param {TransactionId} [props.transactionId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TransactionId}
             */
            this._transactionId = null;

            if (props.transactionId != null) {
                this.setTransactionId(props.transactionId);
            }
        }

        /**
         * @returns {?TransactionId}
         */
        get transactionId() {
            return this._transactionId;
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {TransactionRecordQuery}
         */
        static _fromProtobuf(query) {
            const record = /** @type {proto.ITransactionGetRecordQuery} */ (query.transactionGetRecord);

            return new TransactionRecordQuery({
                transactionId: record.transactionID
                    ? TransactionId._fromProtobuf(record.transactionID)
                    : undefined,
            });
        }

        /**
         * Set the transaction ID for which the record is being requested.
         *
         * @param {TransactionId} transactionId
         * @returns {TransactionRecordQuery}
         */
        setTransactionId(transactionId) {
            this._transactionId = transactionId;
            return this;
        }

        /**
         * @override
         * @protected
         * @param {Status} responseStatus
         * @param {proto.IResponse} response
         * @returns {boolean}
         */
        _shouldRetry(responseStatus, response) {
            switch (responseStatus) {
                case Status.Busy:
                case Status.Unknown:
                case Status.ReceiptNotFound:
                case Status.RecordNotFound:
                    return true;
                // continue to checking receipt status
            }

            if (responseStatus != Status.Ok) {
                return false;
            }

            const transactionGetRecord = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);
            const record = /** @type {proto.ITransactionRecord} */ (transactionGetRecord.transactionRecord);
            const receipt = /** @type {proto.ITransactionReceipt} */ (record.receipt);
            const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (receipt.status);
            const receiptStatus = Status._fromCode(receiptStatusCode);

            switch (receiptStatus) {
                case Status.Ok:
                case Status.Busy:
                case Status.Unknown:
                case Status.ReceiptNotFound:
                case Status.RecordNotFound:
                    return true;
                // looks like its either success or some other error
            }

            return false;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.getTxRecordByTxID(request);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const transactionGetRecord = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);
            return /** @type {proto.IResponseHeader} */ (transactionGetRecord.header);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Promise<TransactionRecord>}
         */
        _mapResponse(response) {
            const record = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);

            return Promise.resolve(
                TransactionRecord._fromProtobuf(
                    /** @type {proto.ITransactionRecord} */ (record.transactionRecord)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                transactionGetRecord: {
                    header,
                    transactionID:
                        this._transactionId != null
                            ? this._transactionId._toProtobuf()
                            : null,
                },
            };
        }
    }

    QUERY_REGISTRY.set(
        "transactionGetRecord",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TransactionRecordQuery._fromProtobuf
    );

    /**
     * @typedef {import("../client/Client.js").default<*, *>} Client
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("./TransactionId.js").default} TransactionId
     * @typedef {import("./TransactionReceipt.js").default} TransactionReceipt
     * @typedef {import("./TransactionRecord.js").default} TransactionRecord
     */

    class TransactionResponse {
        /**
         * @internal
         * @param {object} props
         * @param {AccountId} props.nodeId
         * @param {Uint8Array} props.transactionHash
         * @param {TransactionId} props.transactionId
         */
        constructor(props) {
            /** @readonly */
            this.nodeId = props.nodeId;

            /** @readonly */
            this.transactionHash = props.transactionHash;

            /** @readonly */
            this.transactionId = props.transactionId;

            Object.freeze(this);
        }

        /**
         * @param {Client} client
         * @returns {Promise<TransactionReceipt>}
         */
        async getReceipt(client) {
            const receipt = await new TransactionReceiptQuery()
                .setTransactionId(this.transactionId)
                .setNodeAccountIds([this.nodeId])
                .execute(client);

            if (receipt.status !== Status.Success) {
                throw new ReceiptStatusError({
                    transactionReceipt: receipt,
                    status: receipt.status,
                    transactionId: this.transactionId,
                });
            }

            return receipt;
        }

        /**
         * @param {Client} client
         * @returns {Promise<TransactionRecord>}
         */
        async getRecord(client) {
            await this.getReceipt(client);

            return new TransactionRecordQuery()
                .setTransactionId(this.transactionId)
                .setNodeAccountIds([this.nodeId])
                .execute(client);
        }
    }

    /**
     * @param {Uint8Array} data
     * @returns {Promise<Uint8Array>}
     */
    async function digest(data) {
        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest
        return new Uint8Array(await crypto.subtle.digest("SHA-384", data));
    }

    /**
     * @augments {ObjectMap<AccountId, Uint8Array>}
     */
    class TransactionHashMap extends ObjectMap {
        constructor() {
            super((s) => AccountId.fromString(s));
        }

        /**
         * @param {import("./Transaction.js").default} transaction
         * @returns {Promise<TransactionHashMap>}
         */
        static async _fromTransaction(transaction) {
            const hashes = new TransactionHashMap();

            for (let i = 0; i < transaction._nodeIds.length; i++) {
                const nodeAccountId = transaction._nodeIds[i];
                const tx = transaction._transactions[i];
                const hash = await digest(
                    /** @type {Uint8Array} */ (tx.signedTransactionBytes)
                );

                hashes._set(nodeAccountId, hash);
            }

            return hashes;
        }
    }

    /**
     * @augments {ObjectMap<PublicKey, Uint8Array>}
     */
    class NodeAccountIdSignatureMap extends ObjectMap {
        constructor() {
            super((s) => PublicKey.fromString(s));
        }

        /**
         * @param {import("@hashgraph/proto").ISignatureMap} sigMap
         * @returns {NodeAccountIdSignatureMap}
         */
        static _fromTransactionSigMap(sigMap) {
            const signatures = new NodeAccountIdSignatureMap();

            const sigPairs = sigMap.sigPair != null ? sigMap.sigPair : [];

            for (const sigPair of sigPairs) {
                if (sigPair.pubKeyPrefix != null && sigPair.ed25519 != null) {
                    signatures._set(
                        PublicKey.fromBytes(sigPair.pubKeyPrefix),
                        sigPair.ed25519
                    );
                }
            }

            return signatures;
        }
    }

    /**
     * @augments {ObjectMap<AccountId, NodeAccountIdSignatureMap>}
     */
    class SignatureMap extends ObjectMap {
        constructor() {
            super((s) => AccountId.fromString(s));
        }

        /**
         * @param {import("./Transaction.js").default} transaction
         * @returns {SignatureMap}
         */
        static _fromTransaction(transaction) {
            const signatures = new SignatureMap();

            transaction._buildTransactions(transaction._nodeIds.length);

            for (let i = 0; i < transaction._nodeIds.length; i++) {
                const sigMap = transaction._signedTransactions[i].sigMap;

                if (sigMap != null) {
                    signatures._set(
                        transaction._nodeIds[i],
                        NodeAccountIdSignatureMap._fromTransactionSigMap(sigMap)
                    );
                }
            }

            return signatures;
        }
    }

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     */

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").ITransactionList} proto.ITransactionList
     * @typedef {import("@hashgraph/proto").ITransactionID} proto.ITransactionID
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ISchedulableTransactionBody} proto.ISchedulableTransactionBody
     */

    /**
     * @typedef {import("../schedule/ScheduleCreateTransaction.js").default} ScheduleCreateTransaction
     * @typedef {import("@hashgraph/cryptography").PrivateKey} PrivateKey
     * @typedef {import("@hashgraph/cryptography").PublicKey} PublicKey
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    // 90 days (in seconds)
    const DEFAULT_AUTO_RENEW_PERIOD = long.fromValue(7776000);

    // maximum value of i64 (so there is never a record generated)
    const DEFAULT_RECORD_THRESHOLD = Hbar.fromTinybars(
        long.fromString("9223372036854775807")
    );

    // 120 seconds
    const DEFAULT_TRANSACTION_VALID_DURATION = 120;

    const CHUNK_SIZE = 1024;

    /**
     * @type {Map<NonNullable<proto.TransactionBody["data"]>, (transactions: proto.ITransaction[], signedTransactions: proto.ISignedTransaction[], transactionIds: TransactionId[], nodeIds: AccountId[], bodies: proto.TransactionBody[]) => Transaction>}
     */
    const TRANSACTION_REGISTRY = new Map();

    /**
     * Base class for all transactions that may be submitted to Hedera.
     *
     * @abstract
     * @augments {Executable<proto.ITransaction, proto.ITransactionResponse, TransactionResponse>}
     */
    class Transaction extends Executable {
        // A SDK transaction is composed of multiple, raw protobuf transactions.
        // These should be functionally identicasl, with the exception of pointing to
        // different nodes.

        // When retrying a transaction after a network error or retry-able
        // status response, we try a different transaction and thus a different node.

        constructor() {
            super();

            /**
             * List of proto transactions that have been built from this SDK
             * transaction. Each one should share the same transaction ID.
             *
             * @internal
             * @type {proto.ITransaction[]}
             */
            this._transactions = [];

            /**
             * List of proto transactions that have been built from this SDK
             * transaction. Each one should share the same transaction ID.
             *
             * @internal
             * @type {proto.ISignedTransaction[]}
             */
            this._signedTransactions = [];

            /**
             * Set of public keys (as string) who have signed this transaction so
             * we do not allow them to sign it again.
             *
             * @private
             * @type {Set<string>}
             */
            this._signerPublicKeys = new Set();

            /**
             * @protected
             * @type {number}
             */
            this._nextTransactionIndex = 0;

            /**
             * @private
             * @type {number}
             */
            this._transactionValidDuration = DEFAULT_TRANSACTION_VALID_DURATION;

            /**
             * @private
             * @type {Hbar}
             */
            this._maxTransactionFee = new Hbar(2);

            /**
             * @private
             * @type {string}
             */
            this._transactionMemo = "";

            /**
             * @protected
             * @type {TransactionId[]}
             */
            this._transactionIds = [];
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {Transaction}
         */
        static fromBytes(bytes) {
            const signedTransactions = [];
            const transactionIds = [];
            const nodeIds = [];

            /** @type {string[]} */
            const transactionIdStrings = [];

            /** @type {string[]} */
            const nodeIdStrings = [];

            const bodies = [];

            const list = TransactionList.decode(bytes).transactionList;

            if (list.length == 0) {
                const transaction = Transaction$1.decode(bytes);

                if (transaction.signedTransactionBytes.length != 0) {
                    list.push(transaction);
                } else {
                    list.push({
                        signedTransactionBytes: SignedTransaction.encode({
                            bodyBytes: transaction.bodyBytes,
                            sigMap: transaction.sigMap,
                        }).finish(),
                    });
                }
            }

            for (const transaction of list) {
                if (transaction.signedTransactionBytes == null) {
                    throw new Error("Transaction.signedTransactionBytes are null");
                }

                const signedTransaction = SignedTransaction.decode(
                    transaction.signedTransactionBytes
                );
                signedTransactions.push(signedTransaction);

                const body = TransactionBody.decode(
                    signedTransaction.bodyBytes
                );

                if (body.data == null) {
                    throw new Error("(BUG) body.data was not set in the protobuf");
                }

                bodies.push(body);

                if (body.transactionID != null) {
                    const transactionId = TransactionId._fromProtobuf(
                        /** @type {proto.ITransactionID} */ (body.transactionID)
                    );

                    if (!transactionIdStrings.includes(transactionId.toString())) {
                        transactionIds.push(transactionId);
                        transactionIdStrings.push(transactionId.toString());
                    }
                }

                if (body.nodeAccountID != null) {
                    const nodeAccountId = AccountId._fromProtobuf(
                        /** @type {proto.IAccountID} */ (body.nodeAccountID)
                    );

                    if (!nodeIdStrings.includes(nodeAccountId.toString())) {
                        nodeIds.push(nodeAccountId);
                        nodeIdStrings.push(nodeAccountId.toString());
                    }
                }
            }

            const body = bodies[0];

            if (body == null || body.data == null) {
                throw new Error(
                    "No transaction found in bytes or failed to decode TransactionBody"
                );
            }

            const fromProtobuf = TRANSACTION_REGISTRY.get(body.data);

            if (fromProtobuf == null) {
                throw new Error(
                    `(BUG) Transaction.fromBytes() not implemented for type ${body.data}`
                );
            }

            return fromProtobuf(
                list,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {ScheduleCreateTransaction}
         */
        schedule() {
            this._requireNotFrozen();

            if (SCHEDULE_CREATE_TRANSACTION.length != 1) {
                throw new Error(
                    "ScheduleCreateTransaction has not been loaded yet"
                );
            }

            return SCHEDULE_CREATE_TRANSACTION[0]()._setScheduledTransaction(this);
        }

        /**
         * @template {Transaction} TransactionT
         * @param {TransactionT} transaction
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TransactionT}
         */
        static _fromProtobufTransactions(
            transaction,
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];

            const zero = new AccountId(0);
            for (let i = 0; i < nodeIds.length; i++) {
                if (nodeIds[i].equals(zero)) {
                    nodeIds.splice(i--, 1);
                }
            }

            transaction._transactions = transactions;
            transaction._signedTransactions = signedTransactions;
            transaction._transactionIds = transactionIds;
            transaction._nodeIds = nodeIds;
            transaction._nextNodeIndex = 0;
            transaction._nextTransactionIndex = 0;
            transaction._transactionValidDuration =
                body.transactionValidDuration != null
                    ? /** @type {Long} */ (body.transactionValidDuration
                          .seconds).toInt()
                    : DEFAULT_TRANSACTION_VALID_DURATION;
            transaction._maxTransactionFee =
                body.transactionFee != null
                    ? Hbar.fromTinybars(body.transactionFee)
                    : new Hbar(0);
            transaction._transactionMemo = body.memo != null ? body.memo : "";

            for (let i = 0; i < nodeIds.length; i++) {
                const signedTransaction = signedTransactions[i];
                if (
                    signedTransaction.sigMap != null &&
                    signedTransaction.sigMap.sigPair != null
                ) {
                    for (const sigPair of signedTransaction.sigMap.sigPair) {
                        transaction._signerPublicKeys.add(
                            encode$1(
                                /** @type {Uint8Array} */ (sigPair.pubKeyPrefix)
                            )
                        );
                    }
                }
            }

            return transaction;
        }

        /**
         * @override
         * @param {AccountId[]} nodeIds
         * @returns {this}
         */
        setNodeAccountIds(nodeIds) {
            this._requireNotFrozen();
            super.setNodeAccountIds(nodeIds);
            return this;
        }

        /**
         * @returns {number}
         */
        get transactionValidDuration() {
            return this._transactionValidDuration;
        }

        /**
         * Sets the duration (in seconds) that this transaction is valid for.
         *
         * This is defaulted to 120 seconds (from the time its executed).
         *
         * @param {number} validDuration
         * @returns {this}
         */
        setTransactionValidDuration(validDuration) {
            this._requireNotFrozen();
            this._transactionValidDuration = validDuration;

            return this;
        }

        /**
         * @returns {?Hbar}
         */
        get maxTransactionFee() {
            return this._maxTransactionFee;
        }

        /**
         * Set the maximum transaction fee the operator (paying account)
         * is willing to pay.
         *
         * @param {number | string | Long | BigNumber | Hbar} maxTransactionFee
         * @returns {this}
         */
        setMaxTransactionFee(maxTransactionFee) {
            this._requireNotFrozen();
            this._maxTransactionFee =
                maxTransactionFee instanceof Hbar
                    ? maxTransactionFee
                    : new Hbar(maxTransactionFee);

            return this;
        }

        /**
         * @returns {string}
         */
        get transactionMemo() {
            return this._transactionMemo;
        }

        /**
         * Set a note or description to be recorded in the transaction
         * record (maximum length of 100 bytes).
         *
         * @param {string} transactionMemo
         * @returns {this}
         */
        setTransactionMemo(transactionMemo) {
            this._requireNotFrozen();
            this._transactionMemo = transactionMemo;

            return this;
        }

        /**
         * @returns {TransactionId}
         */
        get transactionId() {
            if (this._transactionIds.length === 0) {
                throw new Error(
                    "transaction must have been frozen before getting the transaction ID, try calling `freeze`"
                );
            }

            return this._transactionIds[this._nextTransactionIndex];
        }

        /**
         * Set the ID for this transaction.
         *
         * The transaction ID includes the operator's account ( the account paying the transaction
         * fee). If two transactions have the same transaction ID, they won't both have an effect. One
         * will complete normally and the other will fail with a duplicate transaction status.
         *
         * Normally, you should not use this method. Just before a transaction is executed, a
         * transaction ID will be generated from the operator on the client.
         *
         * @param {TransactionId} transactionId
         * @returns {this}
         */
        setTransactionId(transactionId) {
            this._requireNotFrozen();
            this._transactionIds = [transactionId];

            return this;
        }

        /**
         * @param {PrivateKey} privateKey
         * @returns {Promise<this>}
         */
        sign(privateKey) {
            return this.signWith(privateKey.publicKey, (message) =>
                Promise.resolve(privateKey.sign(message))
            );
        }

        /**
         * @param {PublicKey} publicKey
         * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner
         * @returns {Promise<this>}
         */
        async signWith(publicKey, transactionSigner) {
            const publicKeyData = publicKey.toBytes();

            // note: this omits the DER prefix on purpose because Hedera doesn't
            // support that in the protobuf. this means that we would fail
            // to re-inflate [this._signerPublicKeys] during [fromBytes] if we used DER
            // prefixes here
            const publicKeyHex = encode$1(publicKeyData);

            if (this._signerPublicKeys.has(publicKeyHex)) {
                // this public key has already signed this transaction
                return this;
            }

            this._transactions = [];

            for (const signedTransaction of this._signedTransactions) {
                const bodyBytes = /** @type {Uint8Array} */ (signedTransaction.bodyBytes);
                const signature = await transactionSigner(bodyBytes);

                if (signedTransaction.sigMap == null) {
                    signedTransaction.sigMap = {};
                }

                if (signedTransaction.sigMap.sigPair == null) {
                    signedTransaction.sigMap.sigPair = [];
                }

                signedTransaction.sigMap.sigPair.push({
                    pubKeyPrefix: publicKeyData,
                    ed25519: signature,
                });
            }

            this._signerPublicKeys.add(publicKeyHex);

            return this;
        }

        /**
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<this>}
         */
        signWithOperator(client) {
            const operator = client._operator;

            if (operator == null) {
                throw new Error(
                    "`client` must have an operator to sign with the operator"
                );
            }

            if (!this._isFrozen()) {
                this.freezeWith(client);
            }

            return this.signWith(operator.publicKey, operator.transactionSigner);
        }
        /**
         * @internal
         * @protected
         */
        _requireOneNodeAccountId() {
            if (this._nodeIds.length != 1) {
                throw "transaction did not have exactly one node ID set";
            }
        }

        /**
         * @param {PublicKey} publicKey
         * @param {Uint8Array} signature
         * @returns {this}
         */
        addSignature(publicKey, signature) {
            this._requireOneNodeAccountId();
            if (!this.isFrozen()) {
                this.freeze();
            }
            const publicKeyData = publicKey.toBytes();
            const publicKeyHex = encode$1(publicKeyData);

            if (this._signerPublicKeys.has(publicKeyHex)) {
                // this public key has already signed this transaction
                return this;
            }

            this._transactions = [];

            for (const transaction of this._signedTransactions) {
                if (transaction.sigMap == null) {
                    transaction.sigMap = {};
                }

                if (transaction.sigMap.sigPair == null) {
                    transaction.sigMap.sigPair = [];
                }

                transaction.sigMap.sigPair.push({
                    pubKeyPrefix: publicKeyData,
                    ed25519: signature,
                });
            }

            this._signerPublicKeys.add(publicKeyHex);

            return this;
        }

        /**
         * @returns {SignatureMap}
         */
        getSignatures() {
            return SignatureMap._fromTransaction(this);
        }

        /**
         * Freeze this transaction from future modification to prepare for
         * signing or serialization.
         *
         * @returns {this}
         */
        freeze() {
            return this.freezeWith(null);
        }

        /**
         * Freeze this transaction from further modification to prepare for
         * signing or serialization.
         *
         * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3
         * nodes to prepare this transaction for.
         *
         * @param {?import("../client/Client.js").default<Channel, *>} client
         * @returns {this}
         */
        freezeWith(client) {
            if (client != null && this._maxTransactionFee == null) {
                this._maxTransactionFee = client.maxTransactionFee;
            }

            if (client != null && this._transactionIds.length === 0) {
                const operator = client._operator;

                if (operator == null) {
                    throw new Error(
                        "`client` must have an `operator` or `transactionId` must be set"
                    );
                }

                this.setTransactionId(TransactionId.generate(operator.accountId));
            }

            if (this._transactionIds.length === 0) {
                throw new Error(
                    "`transactionId` must be set or `client` must be provided with `freezeWith`"
                );
            }

            if (this._nodeIds.length > 0) ; else if (client != null) {
                this._nodeIds = client._network.getNodeAccountIdsForExecute();
            } else {
                throw new Error(
                    "`nodeAccountId` must be set or `client` must be provided with `freezeWith`"
                );
            }

            this._signedTransactions = this._nodeIds.map((nodeId) =>
                this._makeSignedTransaction(nodeId)
            );

            return this;
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            this._requireFrozen();

            this._buildTransactions(this._signedTransactions.length);

            return TransactionList.encode({
                transactionList: this._transactions,
            }).finish();
        }

        /**
         * @returns {Promise<Uint8Array>}
         */
        getTransactionHash() {
            this._requireFrozen();

            this._buildTransactions(1);

            return digest(
                /** @type {Uint8Array} */ (this._transactions[0]
                    .signedTransactionBytes)
            );
        }

        /**
         * @returns {Promise<TransactionHashMap>}
         */
        getTransactionHashPerNode() {
            this._requireFrozen();
            this._buildTransactions(this._signedTransactions.length);
            return TransactionHashMap._fromTransaction(this);
        }

        isFrozen() {
            return this._signedTransactions.length > 0;
        }

        /**
         * @returns {TransactionId}
         */
        _getTransactionId() {
            return this.transactionId;
        }

        /**
         * @override
         * @protected
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<void>}
         */
        async _beforeExecute(client) {
            if (!this._isFrozen()) {
                this.freezeWith(client);
            }

            // on execute, sign each transaction with the operator, if present
            // and we are signing a transaction that used the default transaction ID

            const transactionId = this.transactionId;
            const operatorAccountId = client.operatorAccountId;

            if (
                operatorAccountId != null &&
                transactionId.accountId != null &&
                operatorAccountId.equals(transactionId.accountId)
            ) {
                await this.signWithOperator(client);
            }
        }

        /**
         * @override
         * @internal
         * @returns {proto.ITransaction}
         */
        _makeRequest() {
            const index =
                this._nextTransactionIndex * this._nodeIds.length +
                this._nextNodeIndex;
            this._buildTransactions(index + 1);
            return this._transactions[index];
        }

        /**
         * @param {number} untilIndex
         * @internal
         */
        _buildTransactions(untilIndex) {
            for (let i = this._transactions.length; i < untilIndex; i++) {
                this._transactions.push({
                    signedTransactionBytes: SignedTransaction.encode(
                        this._signedTransactions[i]
                    ).finish(),
                });
            }
        }

        /**
         * @override
         * @internal
         * @param {proto.ITransactionResponse} response
         * @returns {Status}
         */
        _mapResponseStatus(response) {
            const { nodeTransactionPrecheckCode } = response;

            return nodeTransactionPrecheckCode == null
                ? Status.Ok
                : Status._fromCode(nodeTransactionPrecheckCode);
        }

        /**
         * @override
         * @protected
         * @param {proto.ITransactionResponse} response
         * @param {AccountId} nodeId
         * @param {proto.ITransaction} request
         * @returns {Promise<TransactionResponse>}
         */
        async _mapResponse(response, nodeId, request) {
            const transactionHash = await digest(
                /** @type {Uint8Array} */ (request.signedTransactionBytes)
            );
            const transactionId = this.transactionId;

            this._nextTransactionIndex =
                (this._nextTransactionIndex + 1) % this._transactionIds.length;

            return new TransactionResponse({
                nodeId,
                transactionHash,
                transactionId,
            });
        }

        /**
         * @override
         * @returns {AccountId}
         */
        _getNodeAccountId() {
            if (this._nodeIds.length === 0) {
                throw new Error(
                    "(BUG) Transaction::_getNodeAccountId called before transaction has been frozen"
                );
            }

            return this._nodeIds[this._nextNodeIndex % this._nodeIds.length];
        }

        /**
         * @internal
         * @param {?AccountId} nodeId
         * @returns {proto.ISignedTransaction}
         */
        _makeSignedTransaction(nodeId) {
            const body = this._makeTransactionBody(nodeId);
            const bodyBytes = TransactionBody.encode(body).finish();

            return {
                bodyBytes,
                sigMap: {
                    sigPair: [],
                },
            };
        }

        /**
         * @private
         * @param {?AccountId} nodeId
         * @returns {proto.ITransactionBody}
         */
        _makeTransactionBody(nodeId) {
            return {
                [this._getTransactionDataCase()]: this._makeTransactionData(),
                transactionFee:
                    this._maxTransactionFee != null
                        ? this._maxTransactionFee.toTinybars()
                        : null,
                memo: this._transactionMemo,
                transactionID:
                    this._transactionIds[this._nextTransactionIndex] != null
                        ? this._transactionIds[
                              this._nextTransactionIndex
                          ]._toProtobuf()
                        : null,
                nodeAccountID: nodeId != null ? nodeId._toProtobuf() : null,
                transactionValidDuration: {
                    seconds: long.fromNumber(this._transactionValidDuration),
                },
            };
        }

        /**
         * @abstract
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            throw new Error("not implemented");
        }

        /**
         * @internal
         * @returns {proto.ISchedulableTransactionBody}
         */
        _getScheduledTransactionBody() {
            return {
                memo: this.transactionMemo,
                transactionFee:
                    this.maxTransactionFee != null
                        ? this.maxTransactionFee.toTinybars()
                        : null,
                [this._getTransactionDataCase()]: this._makeTransactionData(),
            };
        }

        /**
         * @abstract
         * @protected
         * @returns {object}
         */
        _makeTransactionData() {
            throw new Error("not implemented");
        }

        /**
         * @protected
         * @returns {boolean}
         */
        _isFrozen() {
            return this._signedTransactions.length > 0;
        }

        /**
         * @internal
         */
        _requireNotFrozen() {
            if (this._isFrozen()) {
                throw new Error(
                    "transaction is immutable; it has at least one signature or has been explicitly frozen"
                );
            }
        }

        /**
         * @private
         */
        _requireFrozen() {
            if (!this._isFrozen()) {
                throw new Error(
                    "transaction must have been frozen before calculating the hash will be stable, try calling `freeze`"
                );
            }
        }
    }

    /**
     * @type {(() => ScheduleCreateTransaction)[]}
     */
    const SCHEDULE_CREATE_TRANSACTION = [];

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IKey} proto.IKey
     * @typedef {import("@hashgraph/proto").IKeyList} proto.IKeyList
     * @typedef {import("@hashgraph/proto").IThresholdKey} proto.IThresholdKey
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     */

    /**
     * @param {Key} key
     * @returns {proto.IKey}
     */
    function keyToProtobuf(key) {
        if (key instanceof PrivateKey) {
            key = key.publicKey;
        }

        if (key instanceof PublicKey) {
            return {
                ed25519: key.toBytes(),
            };
        }

        if (key instanceof KeyList) {
            if (key.threshold == null) {
                return {
                    keyList: keyListToProtobuf(key),
                };
            } else {
                return {
                    thresholdKey: {
                        threshold: key.threshold,
                        keys: keyListToProtobuf(key),
                    },
                };
            }
        }

        if (key instanceof ContractId) {
            return {
                contractID: key._toProtobuf(),
            };
        }

        throw new Error(
            `(BUG) keyToProtobuf: unsupported key type: ${key.constructor.name}`
        );
    }

    /**
     * @param {KeyList} list
     * @returns {proto.IKeyList}
     */
    function keyListToProtobuf(list) {
        const keys = [];

        for (const key of list) {
            keys.push(keyToProtobuf(key));
        }

        return {
            keys,
        };
    }

    /**
     * @param {proto.IKey} key
     * @returns {KeyList | PublicKey | ContractId}
     */
    function keyFromProtobuf(key) {
        if (key.contractID != null) {
            return ContractId._fromProtobuf(key.contractID);
        }

        if (key.ed25519 != null && key.ed25519.byteLength > 0) {
            return PublicKey.fromBytes(key.ed25519);
        }

        if (key.thresholdKey != null && key.thresholdKey.threshold != null) {
            const kl =
                key.thresholdKey.keys != null
                    ? keyListFromProtobuf(key.thresholdKey.keys)
                    : new KeyList();

            kl.setThreshold(key.thresholdKey.threshold);

            return kl;
        }

        if (key.keyList != null) {
            return keyListFromProtobuf(key.keyList);
        }

        throw new Error(
            `(BUG) keyFromProtobuf: not implemented key case: ${JSON.stringify(
            key
        )}`
        );
    }

    /**
     * @param {proto.IKeyList} keys
     * @returns {KeyList}
     */
    function keyListFromProtobuf(keys) {
        if (keys.keys == null) {
            return new KeyList();
        }

        return KeyList.from(keys.keys, keyFromProtobuf);
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IDuration} proto.IDuration
     */

    class Duration {
        /**
         * @param {Long | number} seconds
         */
        constructor(seconds) {
            /**
             * @readonly
             * @type {Long}
             */
            this.seconds =
                seconds instanceof long ? seconds : long.fromNumber(seconds);

            Object.freeze(this);
        }

        /**
         * @internal
         * @returns {proto.IDuration}
         */
        _toProtobuf() {
            return {
                seconds: this.seconds,
            };
        }

        /**
         * @internal
         * @param {proto.IDuration} duration
         * @returns {Duration}
         */
        static _fromProtobuf(duration) {
            return new Duration(/** @type {Long} */ (duration.seconds));
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoCreateTransactionBody} proto.ICryptoCreateTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../Timestamp.js").default} Timestamp
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Create a new Hedera™ crypto-currency account.
     */
    class AccountCreateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {Key} [props.key]
         * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]
         * @param {boolean} [props.receiverSignatureRequired]
         * @param {AccountId} [props.proxyAccountId]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {string} [props.accountMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Key}
             */
            this._key = null;

            /**
             * @private
             * @type {?Hbar}
             */
            this._initialBalance = null;

            /**
             * @private
             * @type {Hbar}
             */
            this._sendRecordThreshold = DEFAULT_RECORD_THRESHOLD;

            /**
             * @private
             * @type {Hbar}
             */
            this._receiveRecordThreshold = DEFAULT_RECORD_THRESHOLD;

            /**
             * @private
             * @type {boolean}
             */
            this._receiverSignatureRequired = false;

            /**
             * @private
             * @type {?AccountId}
             */
            this._proxyAccountId = null;

            /**
             * @private
             * @type {Duration}
             */
            this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);

            /**
             * @private
             * @type {?string}
             */
            this._accountMemo = null;

            if (props.key != null) {
                this.setKey(props.key);
            }

            if (props.receiverSignatureRequired != null) {
                this.setReceiverSignatureRequired(props.receiverSignatureRequired);
            }

            if (props.initialBalance != null) {
                this.setInitialBalance(props.initialBalance);
            }

            if (props.proxyAccountId != null) {
                this.setProxyAccountId(props.proxyAccountId);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.accountMemo != null) {
                this.setAccountMemo(props.accountMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {AccountCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.ICryptoCreateTransactionBody} */ (body.cryptoCreateAccount);

            return Transaction._fromProtobufTransactions(
                new AccountCreateTransaction({
                    key:
                        create.key != null
                            ? keyFromProtobuf(create.key)
                            : undefined,
                    initialBalance:
                        create.initialBalance != null
                            ? create.initialBalance
                            : undefined,
                    receiverSignatureRequired:
                        create.receiverSigRequired != null
                            ? create.receiverSigRequired
                            : undefined,
                    proxyAccountId:
                        create.proxyAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (create.proxyAccountID)
                              )
                            : undefined,
                    autoRenewPeriod:
                        create.autoRenewPeriod != null
                            ? create.autoRenewPeriod.seconds != null
                                ? create.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    accountMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?Key}
         */
        get key() {
            return this._key;
        }

        /**
         * Set the key for this account.
         *
         * This is the key that must sign each transfer out of the account.
         *
         * If `receiverSignatureRequired` is true, then the key must also sign
         * any transfer into the account.
         *
         * @param {Key} key
         * @returns {this}
         */
        setKey(key) {
            this._requireNotFrozen();
            this._key = key;

            return this;
        }

        /**
         * @returns {?Hbar}
         */
        get initialBalance() {
            return this._initialBalance;
        }

        /**
         * Set the initial amount to transfer into this account.
         *
         * @param {number | string | Long | BigNumber | Hbar} initialBalance
         * @returns {this}
         */
        setInitialBalance(initialBalance) {
            this._requireNotFrozen();
            this._initialBalance =
                initialBalance instanceof Hbar
                    ? initialBalance
                    : new Hbar(initialBalance);

            return this;
        }

        /**
         * @returns {boolean}
         */
        get receiverSignatureRequired() {
            return this._receiverSignatureRequired;
        }

        /**
         * Set to true to require the key for this account to sign any transfer of
         * hbars to this account.
         *
         * @param {boolean} receiverSignatureRequired
         * @returns {this}
         */
        setReceiverSignatureRequired(receiverSignatureRequired) {
            this._requireNotFrozen();
            this._receiverSignatureRequired = receiverSignatureRequired;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get proxyAccountId() {
            return this._proxyAccountId;
        }

        /**
         * Set the ID of the account to which this account is proxy staked.
         *
         * @param {AccountId} proxyAccountId
         * @returns {this}
         */
        setProxyAccountId(proxyAccountId) {
            this._requireNotFrozen();
            this._proxyAccountId = proxyAccountId;

            return this;
        }

        /**
         * @returns {Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * Set the auto renew period for this account.
         *
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?string}
         */
        get accountMemo() {
            return this._accountMemo;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setAccountMemo(memo) {
            this._requireNotFrozen();
            this._accountMemo = memo;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.createAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoCreateAccount";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoCreateTransactionBody}
         */
        _makeTransactionData() {
            return {
                key: this._key != null ? keyToProtobuf(this._key) : null,
                initialBalance:
                    this._initialBalance != null
                        ? this._initialBalance.toTinybars()
                        : null,
                autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),
                proxyAccountID:
                    this._proxyAccountId != null
                        ? this._proxyAccountId._toProtobuf()
                        : null,
                receiveRecordThreshold: this._receiveRecordThreshold.toTinybars(),
                sendRecordThreshold: this._sendRecordThreshold.toTinybars(),
                receiverSigRequired: this._receiverSignatureRequired,
                memo: this._accountMemo,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoCreateAccount",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        AccountCreateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoDeleteTransactionBody} proto.ICryptoDeleteTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Marks an account as deleted, moving all its current hbars to another account.
     *
     * It will remain in the ledger, marked as deleted, until it expires.
     * Transfers into it a deleted account fail. But a deleted account can still have its
     * expiration extended in the normal way.
     */
    class AccountDeleteTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {AccountId} [props.accountId]
         * @param {AccountId} [props.transferAccountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._transferAccountId = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }

            if (props.transferAccountId != null) {
                this.setTransferAccountId(props.transferAccountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {AccountDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const accountDelete = /** @type {proto.ICryptoDeleteTransactionBody} */ (body.cryptoDelete);

            return Transaction._fromProtobufTransactions(
                new AccountDeleteTransaction({
                    accountId:
                        accountDelete.deleteAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (accountDelete.deleteAccountID)
                              )
                            : undefined,
                    transferAccountId:
                        accountDelete.transferAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (accountDelete.transferAccountID)
                              )
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account ID which is being deleted in this transaction.
         *
         * @param {AccountId | string} accountId
         * @returns {AccountDeleteTransaction}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get transferAccountId() {
            return this._transferAccountId;
        }

        /**
         * Set the account ID which will receive all remaining hbars.
         *
         * @param {AccountId | string} transferAccountId
         * @returns {AccountDeleteTransaction}
         */
        setTransferAccountId(transferAccountId) {
            this._requireNotFrozen();
            this._transferAccountId =
                transferAccountId instanceof AccountId
                    ? transferAccountId
                    : AccountId.fromString(transferAccountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.cryptoDelete(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoDelete";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                deleteAccountID:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
                transferAccountID:
                    this._transferAccountId != null
                        ? this._transferAccountId._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoDelete",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        AccountDeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").ILiveHash} proto.ILiveHash
     * @typedef {import("@hashgraph/proto").IDuration} proto.IDuration
     */

    /**
     * Response when the client sends the node CryptoGetInfoQuery.
     */
    class LiveHash {
        /**
         * @private
         * @param {object} props
         * @param {AccountId} props.accountId
         * @param {Uint8Array} props.hash
         * @param {KeyList} props.keys
         * @param {Duration} props.duration
         */
        constructor(props) {
            /** @readonly */
            this.accountId = props.accountId;

            /** @readonly */
            this.hash = props.hash;

            /** @readonly */
            this.keys = props.keys;

            /** @readonly */
            this.duration = props.duration;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.ILiveHash} liveHash
         * @returns {LiveHash}
         */
        static _fromProtobuf(liveHash) {
            const liveHash_ = /** @type {proto.ILiveHash} */ (liveHash);

            return new LiveHash({
                accountId: AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (liveHash_.accountId)
                ),
                hash: liveHash_.hash != null ? liveHash_.hash : new Uint8Array(),
                keys:
                    liveHash_.keys != null
                        ? keyListFromProtobuf(liveHash_.keys)
                        : new KeyList(),
                duration: Duration._fromProtobuf(
                    /** @type {proto.IDuration} */ (liveHash_.duration)
                ),
            });
        }

        /**
         * @internal
         * @returns {proto.ILiveHash}
         */
        _toProtobuf() {
            return {
                accountId: this.accountId._toProtobuf(),
                hash: this.hash,
                keys: keyListToProtobuf(this.keys),
                duration: this.duration._toProtobuf(),
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITokenRelationship} proto.ITokenRelationship
     * @typedef {import("@hashgraph/proto").TokenKycStatus} proto.TokenKycStatus
     * @typedef {import("@hashgraph/proto").TokenFreezeStatus} proto.TokenFreezeStatus
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * Token's information related to the given Account
     */
    class TokenRelationship {
        /**
         * @param {object} props
         * @param {TokenId} props.tokenId
         * @param {string} props.symbol
         * @param {Long} props.balance
         * @param {boolean | null} props.isKycGranted
         * @param {boolean | null} props.isFrozen
         */
        constructor(props) {
            /**
             * The ID of the token
             *
             * @readonly
             */
            this.tokenId = props.tokenId;
            /**
             * The Symbol of the token
             *
             * @readonly
             */
            this.symbol = props.symbol;
            /**
             * The balance that the Account holds in the smallest denomination
             *
             * @readonly
             */
            this.balance = props.balance;

            /**
             * The KYC status of the account (KycNotApplicable, Granted or Revoked). If the token does
             * not have KYC key, KycNotApplicable is returned
             *
             * @readonly
             */
            this.isKycGranted = props.isKycGranted;

            /**
             * The Freeze status of the account (FreezeNotApplicable, Frozen or Unfrozen). If the token
             * does not have Freeze key, FreezeNotApplicable is returned
             *
             * @readonly
             */
            this.isFrozen = props.isFrozen;

            Object.freeze(this);
        }

        /**
         * @param {proto.ITokenRelationship} relationship
         * @returns {TokenRelationship}
         */
        static _fromProtobuf(relationship) {
            const tokenId = TokenId._fromProtobuf(
                /** @type {proto.ITokenID} */ (relationship.tokenId)
            );
            const isKycGranted =
                relationship.kycStatus == null || relationship.kycStatus === 0
                    ? null
                    : relationship.kycStatus === 1;
            const isFrozen =
                relationship.freezeStatus == null || relationship.freezeStatus === 0
                    ? null
                    : relationship.freezeStatus === 1;

            return new TokenRelationship({
                tokenId,
                symbol: /** @type {string} */ (relationship.symbol),
                balance:
                    relationship.balance != null
                        ? relationship.balance instanceof long
                            ? relationship.balance
                            : long.fromValue(relationship.balance)
                        : long.ZERO,
                isKycGranted,
                isFrozen,
            });
        }

        /**
         * @returns {proto.ITokenRelationship}
         */
        _toProtobuf() {
            return {
                tokenId: this.tokenId._toProtobuf(),
                symbol: this.symbol,
                balance: this.balance,
                kycStatus:
                    this.isKycGranted == null ? 0 : this.isKycGranted ? 1 : 2,
                freezeStatus: this.isFrozen == null ? 0 : this.isFrozen ? 1 : 2,
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITokenRelationship} proto.ITokenRelationship
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("long")} Long
     */

    /**
     * @augments {ObjectMap<TokenId, TokenRelationship>}
     */
    class TokenRelationshipMap extends ObjectMap {
        constructor() {
            super((s) => TokenId.fromString(s));
        }

        /**
         * @param {proto.ITokenRelationship[]} relationships
         * @returns {TokenRelationshipMap}
         */
        static _fromProtobuf(relationships) {
            const tokenRelationships = new TokenRelationshipMap();

            for (const relationship of relationships) {
                const tokenId = TokenId._fromProtobuf(
                    /** @type {proto.ITokenID} */ (relationship.tokenId)
                );

                tokenRelationships._set(
                    tokenId,
                    TokenRelationship._fromProtobuf(relationship)
                );
            }

            return tokenRelationships;
        }

        /**
         * @returns {proto.ITokenRelationship[]}
         */
        _toProtobuf() {
            const list = [];

            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, relationship] of this) {
                list.push(relationship._toProtobuf());
            }

            return list;
        }
    }

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     */

    /**
     * Current information about an account, including the balance.
     */
    class AccountInfo {
        /**
         * @private
         * @param {object} props
         * @param {AccountId} props.accountId
         * @param {?string} props.contractAccountId
         * @param {boolean} props.isDeleted
         * @param {?AccountId} props.proxyAccountId
         * @param {Hbar} props.proxyReceived
         * @param {Key} props.key
         * @param {Hbar} props.balance
         * @param {Hbar} props.sendRecordThreshold
         * @param {Hbar} props.receiveRecordThreshold
         * @param {boolean} props.isReceiverSignatureRequired
         * @param {Timestamp} props.expirationTime
         * @param {Duration} props.autoRenewPeriod
         * @param {LiveHash[]} props.liveHashes
         * @param {TokenRelationshipMap} props.tokenRelationships
         * @param {string} props.accountMemo
         */
        constructor(props) {
            /**
             * The account ID for which this information applies.
             *
             * @readonly
             */
            this.accountId = props.accountId;

            /**
             * The Contract Account ID comprising of both the contract instance and the cryptocurrency
             * account owned by the contract instance, in the format used by Solidity.
             *
             * @readonly
             */
            this.contractAccountId = props.contractAccountId;

            /**
             * If true, then this account has been deleted, it will disappear when it expires, and
             * all transactions for it will fail except the transaction to extend its expiration date.
             *
             * @readonly
             */
            this.isDeleted = props.isDeleted;

            /**
             * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,
             * or is an invalid account, or is an account that isn't a node, then this account is
             * automatically proxy staked to a node chosen by the network, but without earning payments.
             * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently
             * running a node, then it will behave as if proxyAccountID was null.
             *
             * @readonly
             */
            this.proxyAccountId = props.proxyAccountId;

            /**
             * The total number of tinybars proxy staked to this account.
             *
             * @readonly
             */
            this.proxyReceived = props.proxyReceived;

            /**
             * The key for the account, which must sign in order to transfer out, or to modify the account
             * in any way other than extending its expiration date.
             *
             * @readonly
             */
            this.key = props.key;

            /**
             * The current balance of account.
             *
             * @readonly
             */
            this.balance = props.balance;

            /**
             * The threshold amount (in tinybars) for which an account record is created (and this account
             * charged for them) for any send/withdraw transaction.
             *
             * @readonly
             */
            this.sendRecordThreshold = props.sendRecordThreshold;

            /**
             * The threshold amount (in tinybars) for which an account record is created
             * (and this account charged for them) for any transaction above this amount.
             *
             * @readonly
             */
            this.receiveRecordThreshold = props.receiveRecordThreshold;

            /**
             * If true, no transaction can transfer to this account unless signed by this account's key.
             *
             * @readonly
             */
            this.isReceiverSignatureRequired = props.isReceiverSignatureRequired;

            /**
             * The TimeStamp time at which this account is set to expire.
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            /**
             * The duration for expiration time will extend every this many seconds. If there are
             * insufficient funds, then it extends as long as possible. If it is empty when it
             * expires, then it is deleted.
             *
             * @readonly
             */
            this.autoRenewPeriod = props.autoRenewPeriod;

            /** @readonly */
            this.liveHashes = props.liveHashes;

            /** @readonly */
            this.tokenRelationships = props.tokenRelationships;

            this.accountMemo = props.accountMemo;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IAccountInfo} info
         * @returns {AccountInfo}
         */
        static _fromProtobuf(info) {
            return new AccountInfo({
                accountId: AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (info.accountID)
                ),
                contractAccountId:
                    info.contractAccountID != null ? info.contractAccountID : null,
                isDeleted: info.deleted != null ? info.deleted : false,
                key: keyFromProtobuf(/** @type {proto.IKey} */ (info.key)),
                balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),
                sendRecordThreshold: Hbar.fromTinybars(
                    info.generateSendRecordThreshold != null
                        ? info.generateSendRecordThreshold
                        : 0
                ),
                receiveRecordThreshold: Hbar.fromTinybars(
                    info.generateReceiveRecordThreshold != null
                        ? info.generateReceiveRecordThreshold
                        : 0
                ),
                isReceiverSignatureRequired:
                    info.receiverSigRequired != null
                        ? info.receiverSigRequired
                        : false,
                expirationTime: Timestamp._fromProtobuf(
                    /** @type {proto.ITimestamp} */ (info.expirationTime)
                ),
                autoRenewPeriod:
                    info.autoRenewPeriod != null
                        ? new Duration(
                              /** @type {Long} */ (info.autoRenewPeriod.seconds)
                          )
                        : new Duration(0),
                proxyAccountId:
                    info.proxyAccountID != null &&
                    long.fromValue(
                        /** @type {Long | number} */ (info.proxyAccountID.shardNum)
                    ).toInt() !== 0 &&
                    long.fromValue(
                        /** @type {Long | number} */ (info.proxyAccountID.realmNum)
                    ).toInt() !== 0 &&
                    long.fromValue(
                        /** @type {Long | number} */ (info.proxyAccountID
                            .accountNum)
                    ).toInt() !== 0
                        ? AccountId._fromProtobuf(info.proxyAccountID)
                        : null,
                proxyReceived: Hbar.fromTinybars(
                    info.proxyReceived != null ? info.proxyReceived : 0
                ),
                liveHashes: (info.liveHashes != null
                    ? info.liveHashes
                    : []
                ).map((hash) => LiveHash._fromProtobuf(hash)),
                tokenRelationships: TokenRelationshipMap._fromProtobuf(
                    info.tokenRelationships != null ? info.tokenRelationships : []
                ),
                accountMemo: info.memo != null ? info.memo : "",
            });
        }

        /**
         * @returns {proto.IAccountInfo}
         */
        _toProtobuf() {
            return {
                accountID: this.accountId._toProtobuf(),
                contractAccountID: this.contractAccountId,
                deleted: this.isDeleted,
                proxyAccountID:
                    this.proxyAccountId != null
                        ? this.proxyAccountId._toProtobuf()
                        : null,
                proxyReceived: this.proxyReceived.toTinybars(),
                key: keyToProtobuf(this.key),
                balance: this.balance.toTinybars(),
                generateSendRecordThreshold: this.sendRecordThreshold.toTinybars(),
                generateReceiveRecordThreshold: this.receiveRecordThreshold.toTinybars(),
                receiverSigRequired: this.isReceiverSignatureRequired,
                expirationTime: this.expirationTime._toProtobuf(),
                autoRenewPeriod: this.autoRenewPeriod._toProtobuf(),
                liveHashes: this.liveHashes.map((hash) => hash._toProtobuf()),
                tokenRelationships:
                    this.tokenRelationships != null
                        ? this.tokenRelationships._toProtobuf()
                        : null,
                memo: this.accountMemo,
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {AccountInfo}
         */
        static fromBytes(bytes) {
            return AccountInfo._fromProtobuf(
                CryptoGetInfoResponse.AccountInfo.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return CryptoGetInfoResponse.AccountInfo.encode(
                this._toProtobuf()
            ).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IAccountInfo} proto.IAccountInfo
     * @typedef {import("@hashgraph/proto").ICryptoGetInfoQuery} proto.ICryptoGetInfoQuery
     * @typedef {import("@hashgraph/proto").ICryptoGetInfoResponse} proto.ICryptoGetInfoResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<AccountInfo>}
     */
    class AccountInfoQuery extends Query {
        /**
         * @param {object} props
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;
            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {AccountInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.ICryptoGetInfoQuery} */ (query.cryptoGetInfo);

            return new AccountInfoQuery({
                accountId:
                    info.accountID != null
                        ? AccountId._fromProtobuf(info.accountID)
                        : undefined,
            });
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account ID for which the info is being requested.
         *
         * @param {AccountId | string} accountId
         * @returns {AccountInfoQuery}
         */
        setAccountId(accountId) {
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.getAccountInfo(request);
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const cryptoGetInfo = /** @type {proto.ICryptoGetInfoResponse} */ (response.cryptoGetInfo);
            return /** @type {proto.IResponseHeader} */ (cryptoGetInfo.header);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Promise<AccountInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.ICryptoGetInfoResponse} */ (response.cryptoGetInfo);

            return Promise.resolve(
                AccountInfo._fromProtobuf(
                    /** @type {proto.IAccountInfo} */ (info.accountInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                cryptoGetInfo: {
                    header,
                    accountID:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("cryptoGetInfo", AccountInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ICryptoGetAccountRecordsQuery} proto.ICryptoGetAccountRecordsQuery
     * @typedef {import("@hashgraph/proto").ICryptoGetAccountRecordsResponse} proto.ICryptoGetAccountRecordsResponse
     * @typedef {import("@hashgraph/proto").ITransactionRecord} proto.ITransactionRecord
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * Get all the records for an account for any transfers into it and out of it,
     * that were above the threshold, during the last 25 hours.
     *
     * @augments {Query<TransactionRecord[]>}
     */
    class AccountRecordsQuery extends Query {
        /**
         * @param {object} [props]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?AccountId}
             * @private
             */
            this._accountId = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {AccountRecordsQuery}
         */
        static _fromProtobuf(query) {
            const records = /** @type {proto.ICryptoGetAccountRecordsQuery} */ (query.cryptoGetAccountRecords);

            return new AccountRecordsQuery({
                accountId:
                    records.accountID != null
                        ? AccountId._fromProtobuf(records.accountID)
                        : undefined,
            });
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account ID for which the records are being requested.
         *
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.getAccountRecords(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const cryptoGetAccountRecords = /** @type {proto.ICryptoGetAccountRecordsResponse} */ (response.cryptoGetAccountRecords);
            return /** @type {proto.IResponseHeader} */ (cryptoGetAccountRecords.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<TransactionRecord[]>}
         */
        _mapResponse(response) {
            const cryptoGetAccountRecords = /** @type {proto.ICryptoGetAccountRecordsResponse} */ (response.cryptoGetAccountRecords);
            const records = /** @type {proto.ITransactionRecord[]} */ (cryptoGetAccountRecords.records);

            return Promise.resolve(
                records.map((record) => TransactionRecord._fromProtobuf(record))
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                cryptoGetAccountRecords: {
                    header,
                    accountID:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                },
            };
        }
    }

    QUERY_REGISTRY.set(
        "cryptoGetAccountRecords",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        AccountRecordsQuery._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IProxyStaker} proto.IProxyStaker
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     */

    /**
     * An account, and the amount that it sends or receives during a cryptocurrency transfer.
     */
    class ProxyStaker {
        /**
         * @private
         * @param {object} props
         * @param {AccountId} props.accountId
         * @param {number | string | Long | BigNumber | Hbar} props.amount
         */
        constructor(props) {
            /**
             * The Account ID that sends or receives cryptocurrency.
             *
             * @readonly
             */
            this.accountId = props.accountId;

            /**
             * The amount of tinybars that the account sends(negative)
             * or receives(positive).
             *
             * @readonly
             */
            this.amount =
                props.amount instanceof Hbar
                    ? props.amount
                    : new Hbar(props.amount);

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IProxyStaker} transfer
         * @returns {ProxyStaker}
         */
        static _fromProtobuf(transfer) {
            return new ProxyStaker({
                accountId: AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (transfer.accountID)
                ),
                amount: Hbar.fromTinybars(
                    transfer.amount != null ? transfer.amount : 0
                ),
            });
        }

        /**
         * @internal
         * @returns {proto.IProxyStaker}
         */
        _toProtobuf() {
            return {
                accountID: this.accountId._toProtobuf(),
                amount: this.amount.toTinybars(),
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ICryptoGetStakersQuery} proto.ICryptoGetStakersQuery
     * @typedef {import("@hashgraph/proto").ICryptoGetStakersResponse} proto.ICryptoGetStakersResponse
     * @typedef {import("@hashgraph/proto").IAllProxyStakers} proto.IAllProxyStakers
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * Get all the accounts that are proxy staking to this account.
     * For each of them, give the amount currently staked.
     *
     * This is not yet implemented, but will be in a future version of the API.
     *
     * @augments {Query<ProxyStaker[]>}
     */
    class AccountStakersQuery extends Query {
        /**
         * @param {object} [props]
         * @param {(AccountId | string)=} props.accountId
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?AccountId}
             * @private
             */
            this._accountId = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {AccountStakersQuery}
         */
        static _fromProtobuf(query) {
            const stakers = /** @type {proto.ICryptoGetStakersQuery} */ (query.cryptoGetProxyStakers);

            return new AccountStakersQuery({
                accountId:
                    stakers.accountID != null
                        ? AccountId._fromProtobuf(stakers.accountID)
                        : undefined,
            });
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account ID for which the stakers are being requested.
         *
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.getStakersByAccountID(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const cryptoGetProxyStakers = /** @type {proto.ICryptoGetStakersResponse} */ (response.cryptoGetProxyStakers);
            return /** @type {proto.IResponseHeader} */ (cryptoGetProxyStakers.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<ProxyStaker[]>}
         */
        _mapResponse(response) {
            const cryptoGetProxyStakers = /** @type {proto.ICryptoGetStakersResponse} */ (response.cryptoGetProxyStakers);
            const stakers = /** @type {proto.IAllProxyStakers} */ (cryptoGetProxyStakers.stakers);

            return Promise.resolve(
                (stakers.proxyStaker != null
                    ? stakers.proxyStaker
                    : []
                ).map((staker) => ProxyStaker._fromProtobuf(staker))
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                cryptoGetProxyStakers: {
                    header,
                    accountID:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                },
            };
        }
    }

    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("cryptoGetProxyStakers", AccountStakersQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoUpdateTransactionBody} proto.ICryptoUpdateTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Change properties for the given account.
     */
    class AccountUpdateTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {AccountId} [props.accountId]
         * @param {Key} [props.key]
         * @param {boolean} [props.receiverSignatureRequired]
         * @param {AccountId} [props.proxyAccountId]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {string} [props.accountMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            /**
             * @private
             * @type {?Key}
             */
            this._key = null;

            /**
             * @private
             * @type {boolean}
             */
            this._receiverSignatureRequired = false;

            /**
             * @private
             * @type {?AccountId}
             */
            this._proxyAccountId = null;

            /**
             * @private
             * @type {?Duration}
             */
            this._autoRenewPeriod = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            /**
             * @private
             * @type {?string}
             */
            this._accountMemo = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }

            if (props.key != null) {
                this.setKey(props.key);
            }

            if (props.receiverSignatureRequired != null) {
                this.setReceiverSignatureRequired(props.receiverSignatureRequired);
            }

            if (props.proxyAccountId != null) {
                this.setProxyAccountId(props.proxyAccountId);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.accountMemo != null) {
                this.setAccountMemo(props.accountMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {AccountUpdateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const update = /** @type {proto.ICryptoUpdateTransactionBody} */ (body.cryptoUpdateAccount);

            return Transaction._fromProtobufTransactions(
                new AccountUpdateTransaction({
                    accountId:
                        update.accountIDToUpdate != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (update.accountIDToUpdate)
                              )
                            : undefined,
                    key:
                        update.key != null
                            ? keyFromProtobuf(update.key)
                            : undefined,
                    receiverSignatureRequired:
                        update.receiverSigRequired != null
                            ? update.receiverSigRequired
                            : undefined,
                    proxyAccountId:
                        update.proxyAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (update.proxyAccountID)
                              )
                            : undefined,
                    autoRenewPeriod:
                        update.autoRenewPeriod != null
                            ? update.autoRenewPeriod.seconds != null
                                ? update.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    expirationTime:
                        update.expirationTime != null
                            ? Timestamp._fromProtobuf(update.expirationTime)
                            : undefined,
                    accountMemo:
                        update.memo != null
                            ? update.memo.value != null
                                ? update.memo.value
                                : undefined
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Sets the account ID which is being updated in this transaction.
         *
         * @param {AccountId | string} accountId
         * @returns {AccountUpdateTransaction}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @returns {?Key}
         */
        get key() {
            return this._key;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setKey(key) {
            this._requireNotFrozen();
            this._key = key;

            return this;
        }

        /**
         * @returns {boolean}
         */
        get receiverSignatureRequired() {
            return this._receiverSignatureRequired;
        }

        /**
         * @param {boolean} receiverSignatureRequired
         * @returns {this}
         */
        setReceiverSignatureRequired(receiverSignatureRequired) {
            this._requireNotFrozen();
            this._receiverSignatureRequired = receiverSignatureRequired;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get proxyAccountId() {
            return this._proxyAccountId;
        }

        /**
         * @param {AccountId} proxyAccountId
         * @returns {this}
         */
        setProxyAccountId(proxyAccountId) {
            this._requireNotFrozen();
            this._proxyAccountId = proxyAccountId;

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * @param {Timestamp | Date} expirationTime
         * @returns {this}
         */
        setExpirationTime(expirationTime) {
            this._requireNotFrozen();
            this._expirationTime =
                expirationTime instanceof Date
                    ? Timestamp.fromDate(expirationTime)
                    : expirationTime;

            return this;
        }

        /**
         * @returns {?string}
         */
        get accountMemo() {
            return this._accountMemo;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setAccountMemo(memo) {
            this._requireNotFrozen();
            this._accountMemo = memo;

            return this;
        }

        /**
         * @returns {this}
         */
        clearAccountMemo() {
            this._requireNotFrozen();
            this._accountMemo = null;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.updateAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoUpdateAccount";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoUpdateTransactionBody}
         */
        _makeTransactionData() {
            return {
                accountIDToUpdate:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
                key: this._key != null ? keyToProtobuf(this._key) : null,
                expirationTime:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
                proxyAccountID:
                    this._proxyAccountId != null
                        ? this._proxyAccountId._toProtobuf()
                        : null,
                autoRenewPeriod:
                    this._autoRenewPeriod != null
                        ? this._autoRenewPeriod._toProtobuf()
                        : null,
                receiverSigRequiredWrapper:
                    this._receiverSignatureRequired == null
                        ? null
                        : {
                              value: this._receiverSignatureRequired,
                          },
                memo:
                    this._accountMemo != null
                        ? {
                              value: this._accountMemo,
                          }
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoUpdateAccount",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        AccountUpdateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IContractGetBytecodeQuery} proto.IContractGetBytecodeQuery
     * @typedef {import("@hashgraph/proto").IContractGetBytecodeResponse} proto.IContractGetBytecodeResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<Uint8Array>}
     */
    class ContractByteCodeQuery extends Query {
        /**
         * @param {object} props
         * @param {ContractId | string} [props.contractId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?ContractId}
             * @private
             */
            this._contractId = null;
            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {ContractByteCodeQuery}
         */
        static _fromProtobuf(query) {
            const bytecode = /** @type {proto.IContractGetBytecodeQuery} */ (query.contractGetBytecode);

            return new ContractByteCodeQuery({
                contractId:
                    bytecode.contractID != null
                        ? ContractId._fromProtobuf(bytecode.contractID)
                        : undefined,
            });
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Set the contract ID for which the info is being requested.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractByteCodeQuery}
         */
        setContractId(contractId) {
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.contractGetBytecode(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const contractGetBytecodeResponse = /** @type {proto.IContractGetBytecodeResponse} */ (response.contractGetBytecodeResponse);
            return /** @type {proto.IResponseHeader} */ (contractGetBytecodeResponse.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<Uint8Array>}
         */
        _mapResponse(response) {
            const contractGetBytecodeResponse = /** @type {proto.IContractGetBytecodeResponse} */ (response.contractGetBytecodeResponse);

            return Promise.resolve(
                contractGetBytecodeResponse.bytecode != null
                    ? contractGetBytecodeResponse.bytecode
                    : new Uint8Array()
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                contractGetBytecode: {
                    header,
                    contractID:
                        this._contractId != null
                            ? this._contractId._toProtobuf()
                            : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("contractGetBytecode", ContractByteCodeQuery._fromProtobuf);

    // Originally sourced from:
    // https://github.com/MaiaVictor/eth-lib/blob/da0971f5b09964d9c8449975fa87933f0c9fef35/src/hash.js
    //  - added type declarations
    //  - switched to es6 module syntax

    /** @type {number[]} */
    const KECCAK_PADDING = [1, 256, 65536, 16777216];

    /** @type {number[]} */
    const SHIFT = [0, 8, 16, 24];

    /** @type {number[]} */
    const RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648,
    ];

    /**
     * @typedef {object} Keccak
     * @property {number[]} blocks
     * @property {number} blockCount
     * @property {number} outputBlocks
     * @property {number[]} s
     * @property {number} start
     * @property {number} block
     * @property {boolean} reset
     * @property {?number} lastByteIndex
     */

    /**
     * @param {number} bits
     * @returns {Keccak}
     */
    function createKeccakState(bits) {
        return {
            blocks: [],
            reset: true,
            block: 0,
            start: 0,
            lastByteIndex: null,
            blockCount: (1600 - (bits << 1)) >> 5,
            outputBlocks: bits >> 5,
            s: zeroFill(50),
        };
    }

    /**
     * @param {number} n
     * @returns {number[]}
     */
    function zeroFill(n) {
        /** @type {number[]} */
        let arr = Array(n);

        for (let i = 0; i < n; ++i) arr[i] = 0;

        return arr;
    }

    /**
     * @param {Keccak} state
     * @param {string} message
     * @returns {Uint8Array}
     */
    function update(state, message) {
        var length = message.length,
            blocks = state.blocks,
            byteCount = state.blockCount << 2,
            blockCount = state.blockCount,
            outputBlocks = state.outputBlocks,
            s = state.s,
            index = 0,
            i = 0,
            code;

        // update
        while (index < length) {
            if (state.reset) {
                state.reset = false;
                blocks[0] = state.block;
                for (i = 1; i < blockCount + 1; ++i) {
                    blocks[i] = 0;
                }
            }
            for (i = state.start; index < length && i < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 0x80) {
                    blocks[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |=
                        (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else {
                    code =
                        0x10000 +
                        (((code & 0x3ff) << 10) |
                            (message.charCodeAt(++index) & 0x3ff));
                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |=
                        (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |=
                        (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                }
            }
            state.lastByteIndex = i;
            if (i >= byteCount) {
                state.start = i - byteCount;
                state.block = blocks[blockCount];
                for (i = 0; i < blockCount; ++i) {
                    s[i] ^= blocks[i];
                }
                f(s);
                state.reset = true;
            } else {
                state.start = i;
            }
        }

        // finalize
        i = /** @type {number} */ (state.lastByteIndex);
        blocks[i >> 2] |= KECCAK_PADDING[i & 3];

        if (state.lastByteIndex === byteCount) {
            blocks[0] = blocks[blockCount];
            for (i = 1; i < blockCount + 1; ++i) {
                blocks[i] = 0;
            }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
        }

        f(s);

        const buffer = new ArrayBuffer(outputBlocks * 4);
        const view = new DataView(buffer);

        i = 0;
        var j = 0;

        while (j < outputBlocks) {
            for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                view.setInt32(i * 4, s[i], true);
            }

            if (j % blockCount === 0) {
                f(s);
                i = 0;
            }
        }

        return new Uint8Array(buffer);
    }

    /**
     * @param {number[]} s
     */
    function f(s) {
        var h,
            l,
            n,
            c0,
            c1,
            c2,
            c3,
            c4,
            c5,
            c6,
            c7,
            c8,
            c9,
            b0,
            b1,
            b2,
            b3,
            b4,
            b5,
            b6,
            b7,
            b8,
            b9,
            b10,
            b11,
            b12,
            b13,
            b14,
            b15,
            b16,
            b17,
            b18,
            b19,
            b20,
            b21,
            b22,
            b23,
            b24,
            b25,
            b26,
            b27,
            b28,
            b29,
            b30,
            b31,
            b32,
            b33,
            b34,
            b35,
            b36,
            b37,
            b38,
            b39,
            b40,
            b41,
            b42,
            b43,
            b44,
            b45,
            b46,
            b47,
            b48,
            b49;

        for (n = 0; n < 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

            h = c8 ^ ((c2 << 1) | (c3 >>> 31));
            l = c9 ^ ((c3 << 1) | (c2 >>> 31));
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ ((c4 << 1) | (c5 >>> 31));
            l = c1 ^ ((c5 << 1) | (c4 >>> 31));
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ ((c6 << 1) | (c7 >>> 31));
            l = c3 ^ ((c7 << 1) | (c6 >>> 31));
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ ((c8 << 1) | (c9 >>> 31));
            l = c5 ^ ((c9 << 1) | (c8 >>> 31));
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ ((c0 << 1) | (c1 >>> 31));
            l = c7 ^ ((c1 << 1) | (c0 >>> 31));
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;

            b0 = s[0];
            b1 = s[1];
            b32 = (s[11] << 4) | (s[10] >>> 28);
            b33 = (s[10] << 4) | (s[11] >>> 28);
            b14 = (s[20] << 3) | (s[21] >>> 29);
            b15 = (s[21] << 3) | (s[20] >>> 29);
            b46 = (s[31] << 9) | (s[30] >>> 23);
            b47 = (s[30] << 9) | (s[31] >>> 23);
            b28 = (s[40] << 18) | (s[41] >>> 14);
            b29 = (s[41] << 18) | (s[40] >>> 14);
            b20 = (s[2] << 1) | (s[3] >>> 31);
            b21 = (s[3] << 1) | (s[2] >>> 31);
            b2 = (s[13] << 12) | (s[12] >>> 20);
            b3 = (s[12] << 12) | (s[13] >>> 20);
            b34 = (s[22] << 10) | (s[23] >>> 22);
            b35 = (s[23] << 10) | (s[22] >>> 22);
            b16 = (s[33] << 13) | (s[32] >>> 19);
            b17 = (s[32] << 13) | (s[33] >>> 19);
            b48 = (s[42] << 2) | (s[43] >>> 30);
            b49 = (s[43] << 2) | (s[42] >>> 30);
            b40 = (s[5] << 30) | (s[4] >>> 2);
            b41 = (s[4] << 30) | (s[5] >>> 2);
            b22 = (s[14] << 6) | (s[15] >>> 26);
            b23 = (s[15] << 6) | (s[14] >>> 26);
            b4 = (s[25] << 11) | (s[24] >>> 21);
            b5 = (s[24] << 11) | (s[25] >>> 21);
            b36 = (s[34] << 15) | (s[35] >>> 17);
            b37 = (s[35] << 15) | (s[34] >>> 17);
            b18 = (s[45] << 29) | (s[44] >>> 3);
            b19 = (s[44] << 29) | (s[45] >>> 3);
            b10 = (s[6] << 28) | (s[7] >>> 4);
            b11 = (s[7] << 28) | (s[6] >>> 4);
            b42 = (s[17] << 23) | (s[16] >>> 9);
            b43 = (s[16] << 23) | (s[17] >>> 9);
            b24 = (s[26] << 25) | (s[27] >>> 7);
            b25 = (s[27] << 25) | (s[26] >>> 7);
            b6 = (s[36] << 21) | (s[37] >>> 11);
            b7 = (s[37] << 21) | (s[36] >>> 11);
            b38 = (s[47] << 24) | (s[46] >>> 8);
            b39 = (s[46] << 24) | (s[47] >>> 8);
            b30 = (s[8] << 27) | (s[9] >>> 5);
            b31 = (s[9] << 27) | (s[8] >>> 5);
            b12 = (s[18] << 20) | (s[19] >>> 12);
            b13 = (s[19] << 20) | (s[18] >>> 12);
            b44 = (s[29] << 7) | (s[28] >>> 25);
            b45 = (s[28] << 7) | (s[29] >>> 25);
            b26 = (s[38] << 8) | (s[39] >>> 24);
            b27 = (s[39] << 8) | (s[38] >>> 24);
            b8 = (s[48] << 14) | (s[49] >>> 18);
            b9 = (s[49] << 14) | (s[48] >>> 18);

            s[0] = b0 ^ (~b2 & b4);
            s[1] = b1 ^ (~b3 & b5);
            s[10] = b10 ^ (~b12 & b14);
            s[11] = b11 ^ (~b13 & b15);
            s[20] = b20 ^ (~b22 & b24);
            s[21] = b21 ^ (~b23 & b25);
            s[30] = b30 ^ (~b32 & b34);
            s[31] = b31 ^ (~b33 & b35);
            s[40] = b40 ^ (~b42 & b44);
            s[41] = b41 ^ (~b43 & b45);
            s[2] = b2 ^ (~b4 & b6);
            s[3] = b3 ^ (~b5 & b7);
            s[12] = b12 ^ (~b14 & b16);
            s[13] = b13 ^ (~b15 & b17);
            s[22] = b22 ^ (~b24 & b26);
            s[23] = b23 ^ (~b25 & b27);
            s[32] = b32 ^ (~b34 & b36);
            s[33] = b33 ^ (~b35 & b37);
            s[42] = b42 ^ (~b44 & b46);
            s[43] = b43 ^ (~b45 & b47);
            s[4] = b4 ^ (~b6 & b8);
            s[5] = b5 ^ (~b7 & b9);
            s[14] = b14 ^ (~b16 & b18);
            s[15] = b15 ^ (~b17 & b19);
            s[24] = b24 ^ (~b26 & b28);
            s[25] = b25 ^ (~b27 & b29);
            s[34] = b34 ^ (~b36 & b38);
            s[35] = b35 ^ (~b37 & b39);
            s[44] = b44 ^ (~b46 & b48);
            s[45] = b45 ^ (~b47 & b49);
            s[6] = b6 ^ (~b8 & b0);
            s[7] = b7 ^ (~b9 & b1);
            s[16] = b16 ^ (~b18 & b10);
            s[17] = b17 ^ (~b19 & b11);
            s[26] = b26 ^ (~b28 & b20);
            s[27] = b27 ^ (~b29 & b21);
            s[36] = b36 ^ (~b38 & b30);
            s[37] = b37 ^ (~b39 & b31);
            s[46] = b46 ^ (~b48 & b40);
            s[47] = b47 ^ (~b49 & b41);
            s[8] = b8 ^ (~b0 & b2);
            s[9] = b9 ^ (~b1 & b3);
            s[18] = b18 ^ (~b10 & b12);
            s[19] = b19 ^ (~b11 & b13);
            s[28] = b28 ^ (~b20 & b22);
            s[29] = b29 ^ (~b21 & b23);
            s[38] = b38 ^ (~b30 & b32);
            s[39] = b39 ^ (~b31 & b33);
            s[48] = b48 ^ (~b40 & b42);
            s[49] = b49 ^ (~b41 & b43);

            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
        }
    }

    /**
     * @param {number} bits
     * @returns {(message: string) => Uint8Array}
     */
    function createKeccak(bits) {
        return function (message) {
            return update(createKeccakState(bits), message);
        };
    }

    const keccak256 = createKeccak(256);

    /**
     * @enum {number}
     */
    const ArgumentType = {
        uint8: 0,
        int8: 1,
        uint16: 2,
        int16: 3,
        uint32: 4,
        int32: 5,
        uint64: 6,
        int64: 7,
        uint256: 8,
        int256: 9,
        string: 10,
        bool: 11,
        bytes: 12,
        bytes32: 13,
        address: 14,
        func: 15,
    };

    /**
     * @typedef {object} Argument
     * @property {boolean} dynamic
     * @property {Uint8Array} value
     */

    /**
     * @typedef {object} SolidityType
     * @property {ArgumentType} ty
     * @property {boolean} array
     */

    class ContractFunctionSelector {
        /**
         * @param {string} [name]
         */
        constructor(name) {
            /**
             * @type {?string}
             */
            this.name = null;

            /**
             * @type {string}
             */
            this._params = "";

            /**
             * @type {SolidityType[]}
             */
            this._paramTypes = [];

            if (name != null) {
                this._name = name;
            }
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addString() {
            return this._addParam({ ty: ArgumentType.string, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addStringArray() {
            return this._addParam({ ty: ArgumentType.string, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addBytes() {
            return this._addParam({ ty: ArgumentType.bytes, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addBytes32() {
            return this._addParam({ ty: ArgumentType.bytes32, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addBytesArray() {
            return this._addParam({ ty: ArgumentType.bytes, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addBytes32Array() {
            return this._addParam({ ty: ArgumentType.bytes32, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt8() {
            return this._addParam({ ty: ArgumentType.int8, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt32() {
            return this._addParam({ ty: ArgumentType.int32, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt64() {
            return this._addParam({ ty: ArgumentType.int64, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt256() {
            return this._addParam({ ty: ArgumentType.int256, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt8Array() {
            return this._addParam({ ty: ArgumentType.int8, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt32Array() {
            return this._addParam({ ty: ArgumentType.int32, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt64Array() {
            return this._addParam({ ty: ArgumentType.int64, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addInt256Array() {
            return this._addParam({ ty: ArgumentType.int256, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint8() {
            return this._addParam({ ty: ArgumentType.uint8, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint32() {
            return this._addParam({ ty: ArgumentType.uint32, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint64() {
            return this._addParam({ ty: ArgumentType.uint64, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint256() {
            return this._addParam({ ty: ArgumentType.uint256, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint8Array() {
            return this._addParam({ ty: ArgumentType.uint8, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint32Array() {
            return this._addParam({ ty: ArgumentType.uint32, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint64Array() {
            return this._addParam({ ty: ArgumentType.uint64, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addUint256Array() {
            return this._addParam({ ty: ArgumentType.uint256, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addBool() {
            return this._addParam({ ty: ArgumentType.bool, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addAddress() {
            return this._addParam({ ty: ArgumentType.address, array: false });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addAddressArray() {
            return this._addParam({ ty: ArgumentType.address, array: true });
        }

        /**
         * @returns {ContractFunctionSelector}
         */
        addFunction() {
            return this._addParam({ ty: ArgumentType.func, array: false });
        }

        /**
         * @param {SolidityType} ty
         * @returns {ContractFunctionSelector}
         */
        _addParam(ty) {
            if (this._paramTypes.length > 0) {
                this._params += ",";
            }

            this._params += solidityTypeToString(ty);
            this._paramTypes.push(ty);

            return this;
        }

        /**
         * @param {string} [name]
         * @returns {Uint8Array}
         */
        _build(name) {
            if (name != null) {
                this._name = name;
            } else if (this._name == null) {
                throw new Error("`name` required for ContractFunctionSelector");
            }

            return new Uint8Array(keccak256(this.toString()).slice(0, 4));
        }

        /**
         * @returns {string}
         */
        toString() {
            return `${this._name != null ? this._name.toString() : ""}(${
            this._params
        })`;
        }
    }

    /**
     * @param {SolidityType} ty
     * @returns {string}
     */
    function solidityTypeToString(ty) {
        let s = "";
        switch (ty.ty) {
            case ArgumentType.uint8:
                s = "uint8";
                break;
            case ArgumentType.int8:
                s = "int8";
                break;
            case ArgumentType.uint16:
                s = "uint16";
                break;
            case ArgumentType.int16:
                s = "int16";
                break;
            case ArgumentType.uint32:
                s = "uint32";
                break;
            case ArgumentType.int32:
                s = "int32";
                break;
            case ArgumentType.uint64:
                s = "uint64";
                break;
            case ArgumentType.int64:
                s = "int64";
                break;
            case ArgumentType.uint256:
                s = "uint256";
                break;
            case ArgumentType.int256:
                s = "int256";
                break;
            case ArgumentType.string:
                s = "string";
                break;
            case ArgumentType.bool:
                s = "bool";
                break;
            case ArgumentType.bytes:
                s = "bytes";
                break;
            case ArgumentType.bytes32:
                s = "bytes32";
                break;
            case ArgumentType.address:
                s = "address";
                break;
            case ArgumentType.func:
                s = "function";
                break;
            default:
                s = "";
                break;
        }

        if (ty.array) {
            s += "[]";
        }

        return s;
    }

    class ContractFunctionParameters {
        constructor() {
            /**
             * @type {ContractFunctionSelector}
             */
            this._selector = new ContractFunctionSelector();

            /**
             * @type {import("./ContractFunctionSelector.js").Argument[]}
             */
            this._arguments = [];
        }

        /**
         * @param {string} value
         * @returns {ContractFunctionParameters}
         */
        addString(value) {
            this._selector.addString();

            return this._addParam(value, true);
        }

        /**
         * @param {string[]} value
         * @returns {ContractFunctionParameters}
         */
        addStringArray(value) {
            this._selector.addStringArray();

            return this._addParam(value, true);
        }

        /**
         * @param {Uint8Array} value
         * @returns {ContractFunctionParameters}
         */
        addBytes(value) {
            this._selector.addBytes();

            return this._addParam(value, true);
        }

        /**
         * @param {Uint8Array} value
         * @returns {ContractFunctionParameters}
         */
        addBytes32(value) {
            if (value.length !== 32) {
                throw new Error(
                    `addBytes32 expected array to be of length 32, but received ${value.length}`
                );
            }

            this._selector.addBytes32();
            return this._addParam(value, false);
        }

        /**
         * @param {Uint8Array[]} value
         * @returns {ContractFunctionParameters}
         */
        addBytesArray(value) {
            this._selector.addBytesArray();

            return this._addParam(value, true);
        }

        /**
         * @param {Uint8Array[]} value
         * @returns {ContractFunctionParameters}
         */
        addBytes32Array(value) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, entry] of value.entries()) {
                if (entry.length !== 32) {
                    throw new Error(
                        `addBytes32 expected array to be of length 32, but received ${entry.length}`
                    );
                }
            }

            this._selector.addBytes32Array();

            return this._addParam(value, true);
        }

        /**
         * @param {boolean} value
         * @returns {ContractFunctionParameters}
         */
        addBool(value) {
            this._selector.addBool();

            return this._addParam(value, false);
        }

        /**
         * @param {number} value
         * @returns {ContractFunctionParameters}
         */
        addInt8(value) {
            this._selector.addInt8();

            return this._addParam(value, false);
        }

        /**
         * @param {number} value
         * @returns {ContractFunctionParameters}
         */
        addInt32(value) {
            this._selector.addInt32();

            return this._addParam(value, false);
        }

        /**
         * @param {BigNumber} value
         * @returns {ContractFunctionParameters}
         */
        addInt64(value) {
            this._selector.addInt64();

            return this._addParam(value, false);
        }

        /**
         * @param {BigNumber} value
         * @returns {ContractFunctionParameters}
         */
        addInt256(value) {
            this._selector.addInt256();

            return this._addParam(value, false);
        }

        /**
         * @param {number[]} value
         * @returns {ContractFunctionParameters}
         */
        addInt8Array(value) {
            this._selector.addInt8Array();

            return this._addParam(value, true);
        }

        /**
         * @param {number[]} value
         * @returns {ContractFunctionParameters}
         */
        addInt32Array(value) {
            this._selector.addInt32Array();

            return this._addParam(value, true);
        }

        /**
         * @param {BigNumber[]} value
         * @returns {ContractFunctionParameters}
         */
        addInt64Array(value) {
            this._selector.addInt64Array();

            return this._addParam(value, true);
        }

        /**
         * @param {BigNumber[]} value
         * @returns {ContractFunctionParameters}
         */
        addInt256Array(value) {
            this._selector.addInt256Array();

            return this._addParam(value, true);
        }

        /**
         * @param {number} value
         * @returns {ContractFunctionParameters}
         */
        addUint8(value) {
            this._selector.addUint8();

            return this._addParam(value, false);
        }

        /**
         * @param {number} value
         * @returns {ContractFunctionParameters}
         */
        addUint32(value) {
            this._selector.addUint32();

            return this._addParam(value, false);
        }

        /**
         * @param {BigNumber} value
         * @returns {ContractFunctionParameters}
         */
        addUint64(value) {
            this._selector.addUint64();

            return this._addParam(value, false);
        }

        /**
         * @param {BigNumber} value
         * @returns {ContractFunctionParameters}
         */
        addUint256(value) {
            this._selector.addUint256();

            return this._addParam(value, false);
        }

        /**
         * @param {number[]} value
         * @returns {ContractFunctionParameters}
         */
        addUint8Array(value) {
            this._selector.addUint8Array();

            return this._addParam(value, true);
        }

        /**
         * @param {number[]} value
         * @returns {ContractFunctionParameters}
         */
        addUint32Array(value) {
            this._selector.addUint32Array();

            return this._addParam(value, true);
        }

        /**
         * @param {BigNumber[]} value
         * @returns {ContractFunctionParameters}
         */
        addUint64Array(value) {
            this._selector.addUint64Array();

            return this._addParam(value, true);
        }

        /**
         * @param {BigNumber[]} value
         * @returns {ContractFunctionParameters}
         */
        addUint256Array(value) {
            this._selector.addUint256Array();

            return this._addParam(value, true);
        }

        /**
         * @param {string} value
         * @returns {ContractFunctionParameters}
         */
        addAddress(value) {
            // Allow `0x` prefix
            if (value.length !== 40 && value.length !== 42) {
                throw new Error(
                    "`address` type requires parameter to be 40 or 42 characters"
                );
            }

            const par =
                value.length === 40
                    ? decode$1(value)
                    : decode$1(value.substring(2));

            this._selector.addAddress();

            return this._addParam(par, false);
        }

        /**
         * @param {string[]} value
         * @returns {ContractFunctionParameters}
         */
        addAddressArray(value) {
            /**
             * @type {Uint8Array[]}
             */
            const par = [];

            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, entry] of value.entries()) {
                if (entry.length !== 40 && entry.length !== 42) {
                    throw new Error(
                        "`address` type requires parameter to be 40 or 42 characters"
                    );
                }

                const buf =
                    entry.length === 40
                        ? decode$1(entry)
                        : decode$1(entry.substring(2));

                par.push(buf);
            }

            this._selector.addAddressArray();

            return this._addParam(par, true);
        }

        /**
         * @param {string} address
         * @param {ContractFunctionSelector} selector
         * @returns {ContractFunctionParameters}
         */
        addFunction(address, selector) {
            const addressParam = decode$1(address);
            const functionSelector = selector._build();

            if (addressParam.length !== 20) {
                throw new Error(
                    "`function` type requires parameter `address` to be exactly 20 bytes"
                );
            }

            this._selector.addFunction();

            const proto = new Uint8Array(24);
            proto.set(addressParam, 0);
            proto.set(functionSelector, 20);

            return this._addParam(proto, false);
        }

        /**
         * @internal
         * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param
         * @param {boolean} dynamic
         * @returns {ContractFunctionParameters}
         */
        _addParam(param, dynamic) {
            const index = this._selector._paramTypes.length - 1;
            const value = argumentToBytes(param, this._selector._paramTypes[index]);

            this._arguments.push({ dynamic, value });

            return this;
        }

        /**
         * @internal
         * @param {string=} name
         * @returns {Uint8Array}
         */
        _build(name) {
            const includeId = name != null;
            const nameOffset = includeId ? 4 : 0;

            const length =
                this._arguments.length === 0
                    ? nameOffset
                    : this._arguments.length * 32 +
                      this._arguments
                          .map((arg) => (arg.dynamic ? arg.value.length : 0))
                          .reduce((sum, value) => sum + value) +
                      nameOffset;

            const func = new Uint8Array(length);

            if (includeId) {
                func.set(this._selector._build(name), 0);
            }

            let offset = 32 * this._arguments.length;

            for (const [i, { dynamic, value }] of this._arguments.entries()) {
                if (dynamic) {
                    const view = new DataView(
                        func.buffer,
                        nameOffset + i * 32 + 28
                    );
                    view.setUint32(0, offset);
                    func.set(value, view.getUint32(0) + nameOffset);
                    offset += value.length;
                } else {
                    func.set(value, nameOffset + i * 32);
                }
            }

            return func;
        }
    }

    /**
     * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param
     * @param {import("./ContractFunctionSelector.js").SolidityType} ty
     * @returns {Uint8Array}
     */
    function argumentToBytes(param, ty) {
        let value = new Uint8Array(32);
        let valueView = new DataView(value.buffer, 0);
        /** @type {Uint8Array} */
        let par;

        if (ty.array) {
            if (!Array.isArray(param)) {
                throw new TypeError(
                    "SolidityType indicates type is array, but parameter is not an array"
                );
            }

            /**
             * @type {Uint8Array[]}
             */
            const values = [];

            // Generic over any type of array
            // Destructuring required so the first variable must be assigned
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, p] of param.entries()) {
                const arg = argumentToBytes(p, { ty: ty.ty, array: false });
                values.push(arg);
            }

            const totalLengthOfValues = values
                .map((a) => a.length)
                .reduce((total, current) => total + current);

            switch (ty.ty) {
                case ArgumentType.uint8:
                case ArgumentType.int8:
                case ArgumentType.uint16:
                case ArgumentType.int16:
                case ArgumentType.uint32:
                case ArgumentType.int32:
                case ArgumentType.uint64:
                case ArgumentType.int64:
                case ArgumentType.uint256:
                case ArgumentType.int256:
                case ArgumentType.bool:
                case ArgumentType.bytes32:
                case ArgumentType.address:
                case ArgumentType.func:
                    value = new Uint8Array(totalLengthOfValues + 32);
                    break;
                case ArgumentType.bytes:
                case ArgumentType.string:
                    value = new Uint8Array(
                        values.length * 32 + totalLengthOfValues + 32
                    );
                    break;
                default:
                    throw new TypeError(
                        `Expected param type to be ArgumentType, but received ${ty.ty}`
                    );
            }

            valueView = new DataView(value.buffer, 28);
            valueView.setUint32(0, values.length);

            let offset = 32 * values.length;

            for (const [i, e] of values.entries()) {
                switch (ty.ty) {
                    case ArgumentType.uint8:
                    case ArgumentType.int8:
                    case ArgumentType.uint16:
                    case ArgumentType.int16:
                    case ArgumentType.uint32:
                    case ArgumentType.int32:
                    case ArgumentType.uint64:
                    case ArgumentType.int64:
                    case ArgumentType.uint256:
                    case ArgumentType.int256:
                    case ArgumentType.bool:
                    case ArgumentType.bytes32:
                    case ArgumentType.address:
                    case ArgumentType.func:
                        value.set(e, i * 32 + 32);
                        break;
                    case ArgumentType.bytes:
                    case ArgumentType.string:
                        // eslint-disable-next-line no-case-declarations
                        const view = new DataView(value.buffer, (i + 1) * 32 + 28);
                        view.setUint32(0, offset);
                        value.set(e, view.getUint32(0) + 32);
                        offset += e.length;
                        break;
                    default:
                        throw new TypeError(
                            `Expected param type to be ArgumentType, but received ${ty.ty}`
                        );
                }
            }

            return value;
        }

        switch (ty.ty) {
            case ArgumentType.uint8:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    31,
                    valueView.setUint8.bind(valueView)
                );
                return value;
            case ArgumentType.int8:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    31,
                    valueView.setInt8.bind(valueView)
                );
                return value;
            case ArgumentType.uint16:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    30,
                    valueView.setUint16.bind(valueView)
                );
                return value;
            case ArgumentType.int16:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    30,
                    valueView.setInt16.bind(valueView)
                );
                return value;
            case ArgumentType.uint32:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    28,
                    valueView.setUint32.bind(valueView)
                );
                return value;
            case ArgumentType.int32:
                numberToBytes(
                    /** @type {number | BigNumber } */ (param),
                    28,
                    valueView.setInt32.bind(valueView)
                );
                return value;
            // int64, uint64, and int256 both expect the parameter to be an Uint8Array instead of number
            case ArgumentType.uint64:
            case ArgumentType.int64:
                if (bignumber.isBigNumber(param)) {
                    // eslint-disable-next-line no-case-declarations
                    let par = param.toString(16);
                    if (par.length > 16) {
                        throw new TypeError(
                            "uint64/int64 requires BigNumber to be less than or equal to 8 bytes"
                        );
                    } else if (!param.isInteger()) {
                        throw new TypeError(
                            "uint64/int64 requires BigNumber to be an integer"
                        );
                    }

                    if (par.length % 2 === 1) {
                        par = `0${par}`;
                    }

                    // eslint-disable-next-line no-case-declarations
                    const buf = decode$1(par);
                    value.set(buf, 32 - buf.length);
                }
                return value;
            case ArgumentType.int256:
            case ArgumentType.uint256:
                if (bignumber.isBigNumber(param)) {
                    let par = param.toString(16);
                    if (par.length % 2 === 1) {
                        par = `0${par}`;
                    }

                    const buf = decode$1(par);
                    value.set(buf, 32 - buf.length);
                }
                return value;
            case ArgumentType.address:
                value.set(/** @type {Uint8Array} */ (param), 32 - 20);
                return value;
            case ArgumentType.bool:
                value[31] = /** @type {boolean} */ (param) ? 1 : 0;
                return value;
            case ArgumentType.func:
                value.set(/** @type {Uint8Array} */ (param), 32 - 24);
                return value;
            case ArgumentType.bytes32:
                value.set(/** @type {Uint8Array} */ (param), 0);
                return value;
            // Bytes should have not the length already encoded
            // JS String type is encoded as UTF-16 whilst Solidity `string` type is UTF-8 encoded.
            // So if will assume is already correctly updated to being a Uint8Array of UTF-8 string
            case ArgumentType.bytes:
            case ArgumentType.string:
                // If value is of type string, encode it in UTF-8 format and conver it to Uint8Array
                // Required because JS Strings are UTF-16
                // eslint-disable-next-line no-case-declarations
                par =
                    param instanceof Uint8Array
                        ? param
                        : encode(/** @type {string} */ (param));

                // Resize value to a 32 byte boundary if needed
                if (
                    Math.floor(par.length / 32) >= 0 &&
                    Math.floor(par.length % 32) !== 0
                ) {
                    value = new Uint8Array(
                        (Math.floor(par.length / 32) + 1) * 32 + 32
                    );
                } else {
                    value = new Uint8Array(64);
                }

                value.set(par, 32);

                valueView = new DataView(value.buffer, 28);
                valueView.setUint32(0, par.length);
                return value;
            default:
                throw new Error(`Unsupported argument type: ${ty.toString()}`);
        }
    }

    /**
     * @param {number | BigNumber} param
     * @param {number} byteoffset
     * @param {(byteOffset: number, value: number) => void} func
     * @returns {void}
     */
    function numberToBytes(param, byteoffset, func) {
        const value = bignumber.isBigNumber(param) ? param.toNumber() : param;

        func(byteoffset, value);
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IContractCallLocalQuery} proto.IContractCallLocalQuery
     * @typedef {import("@hashgraph/proto").IContractCallLocalResponse} proto.IContractCallLocalResponse
     * @typedef {import("@hashgraph/proto").IContractFunctionResult} proto.IContractFunctionResult
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @typedef {object} FunctionParameters
     * @property {ContractFunctionParameters} parameters
     * @property {string} name
     */

    /**
     * @augments {Query<ContractFunctionResult>}
     */
    class ContractCallQuery extends Query {
        /**
         * @param {object} [props]
         * @param {ContractId | string} [props.contractId]
         * @param {number | Long} [props.gas]
         * @param {FunctionParameters | Uint8Array} [props.functionParameters]
         * @param {number | Long} [props.maxResultSize]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;
            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }

            /**
             * @private
             * @type {?Long}
             */
            this._gas = null;
            if (props.gas != null) {
                this.setGas(props.gas);
            }

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._functionParameters = null;
            if (props.functionParameters != null) {
                if (props.functionParameters instanceof Uint8Array) {
                    this.setFunctionParameters(props.functionParameters);
                } else {
                    this.setFunction(
                        props.functionParameters.name,
                        props.functionParameters.parameters
                    );
                }
            }

            /**
             * @private
             * @type {?Long}
             */
            this._maxResultSize = null;
            if (props.maxResultSize != null) {
                this.setMaxResultSize(props.maxResultSize);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {ContractCallQuery}
         */
        static _fromProtobuf(query) {
            const call = /** @type {proto.IContractCallLocalQuery} */ (query.contractCallLocal);

            return new ContractCallQuery({
                contractId:
                    call.contractID != null
                        ? ContractId._fromProtobuf(call.contractID)
                        : undefined,
                gas: call.gas != null ? call.gas : undefined,
                functionParameters:
                    call.functionParameters != null
                        ? call.functionParameters
                        : undefined,
                maxResultSize:
                    call.maxResultSize != null ? call.maxResultSize : undefined,
            });
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Set the contract ID for which the call is being requested.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractCallQuery}
         */
        setContractId(contractId) {
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get gas() {
            return this._gas;
        }

        /**
         * @param {number | Long} gas
         * @returns {ContractCallQuery}
         */
        setGas(gas) {
            this._gas = gas instanceof long ? gas : long.fromValue(gas);
            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get functionParameters() {
            return this._functionParameters;
        }

        /**
         * @param {Uint8Array} params
         * @returns {ContractCallQuery}
         */
        setFunctionParameters(params) {
            this._functionParameters = params;
            return this;
        }

        /**
         * @param {string} name
         * @param {?ContractFunctionParameters} [params]
         * @returns {ContractCallQuery}
         */
        setFunction(name, params) {
            this._functionParameters = (params != null
                ? params
                : new ContractFunctionParameters()
            )._build(name);

            return this;
        }

        /**
         * @param {number | Long} size
         * @returns {ContractCallQuery}
         */
        setMaxResultSize(size) {
            this._maxResultSize =
                size instanceof long ? size : long.fromValue(size);
            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.contractCallLocalMethod(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const contractCallLocal = /** @type {proto.IContractCallLocalResponse} */ (response.contractCallLocal);
            return /** @type {proto.IResponseHeader} */ (contractCallLocal.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<ContractFunctionResult>}
         */
        _mapResponse(response) {
            const call =
                /**
                 *@type {proto.IContractCallLocalResponse}
                 */
                (response.contractCallLocal);

            return Promise.resolve(
                ContractFunctionResult._fromProtobuf(
                    /**
                     * @type {proto.IContractFunctionResult}
                     */
                    (call.functionResult)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                contractCallLocal: {
                    header,
                    contractID:
                        this._contractId != null
                            ? this._contractId._toProtobuf()
                            : null,
                    gas: this._gas,
                    functionParameters: this._functionParameters,
                    maxResultSize: this._maxResultSize,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("contractCallLocal", ContractCallQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IContractCreateTransactionBody} proto.IContractCreateTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class ContractCreateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.bytecodeFileId]
         * @param {Key} [props.adminKey]
         * @param {number | Long} [props.gas]
         * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]
         * @param {AccountId | string} [props.proxyAccountId]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {Uint8Array} [props.constructorParameters]
         * @param {string} [props.contractMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._bytecodeFileId = null;

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?Long}
             */
            this._gas = null;

            /**
             * @private
             * @type {?Hbar}
             */
            this._initialBalance = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._proxyAccountId = null;

            /**
             * @private
             * @type {Duration}
             */
            this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._constructorParameters = null;

            /**
             * @private
             * @type {?string}
             */
            this._contractMemo = null;

            this.setMaxTransactionFee(new Hbar(20));

            if (props.bytecodeFileId != null) {
                this.setBytecodeFileId(props.bytecodeFileId);
            }

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.gas != null) {
                this.setGas(props.gas);
            }

            if (props.initialBalance != null) {
                this.setInitialBalance(props.initialBalance);
            }

            if (props.proxyAccountId != null) {
                this.setProxyAccountId(props.proxyAccountId);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.constructorParameters != null) {
                this.setConstructorParameters(props.constructorParameters);
            }

            if (props.contractMemo != null) {
                this.setContractMemo(props.contractMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ContractCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.IContractCreateTransactionBody} */ (body.contractCreateInstance);

            return Transaction._fromProtobufTransactions(
                new ContractCreateTransaction({
                    bytecodeFileId:
                        create.fileID != null
                            ? FileId._fromProtobuf(
                                  /** @type {proto.IFileID} */ (create.fileID)
                              )
                            : undefined,
                    adminKey:
                        create.adminKey != null
                            ? keyFromProtobuf(create.adminKey)
                            : undefined,
                    gas: create.gas != null ? create.gas : undefined,
                    initialBalance:
                        create.initialBalance != null
                            ? create.initialBalance
                            : undefined,
                    proxyAccountId:
                        create.proxyAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (create.proxyAccountID)
                              )
                            : undefined,
                    autoRenewPeriod:
                        create.autoRenewPeriod != null
                            ? create.autoRenewPeriod.seconds != null
                                ? create.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    constructorParameters:
                        create.constructorParameters != null
                            ? create.constructorParameters
                            : undefined,
                    contractMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?FileId}
         */
        get bytecodeFileId() {
            return this._bytecodeFileId;
        }

        /**
         * @param {FileId | string} bytecodeFileId
         * @returns {this}
         */
        setBytecodeFileId(bytecodeFileId) {
            this._requireNotFrozen();
            this._bytecodeFileId =
                bytecodeFileId instanceof FileId
                    ? bytecodeFileId
                    : FileId.fromString(bytecodeFileId);

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} adminKey
         * @returns {this}
         */
        setAdminKey(adminKey) {
            this._requireNotFrozen();
            this._adminKey = adminKey;

            return this;
        }

        /**
         * @returns {?Long}
         */
        get gas() {
            return this._gas;
        }

        /**
         * @param {number | Long} gas
         * @returns {this}
         */
        setGas(gas) {
            this._requireNotFrozen();
            this._gas = gas instanceof long ? gas : long.fromValue(gas);

            return this;
        }

        /**
         * @returns {?Hbar}
         */
        get initialBalance() {
            return this._initialBalance;
        }

        /**
         * Set the initial amount to transfer into this contract.
         *
         * @param {number | string | Long | BigNumber | Hbar} initialBalance
         * @returns {this}
         */
        setInitialBalance(initialBalance) {
            this._requireNotFrozen();
            this._initialBalance =
                initialBalance instanceof Hbar
                    ? initialBalance
                    : new Hbar(initialBalance);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get proxyAccountId() {
            return this._proxyAccountId;
        }

        /**
         * @param {AccountId | string} proxyAccountId
         * @returns {this}
         */
        setProxyAccountId(proxyAccountId) {
            this._requireNotFrozen();
            this._proxyAccountId =
                proxyAccountId instanceof AccountId
                    ? proxyAccountId
                    : AccountId.fromString(proxyAccountId);

            return this;
        }

        /**
         * @returns {Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get constructorParameters() {
            return this._constructorParameters;
        }

        /**
         * @param {Uint8Array | ContractFunctionParameters} constructorParameters
         * @returns {this}
         */
        setConstructorParameters(constructorParameters) {
            this._requireNotFrozen();
            this._constructorParameters =
                constructorParameters instanceof ContractFunctionParameters
                    ? constructorParameters._build()
                    : constructorParameters;

            return this;
        }

        /**
         * @returns {?string}
         */
        get contractMemo() {
            return this._contractMemo;
        }

        /**
         * @param {string} contractMemo
         * @returns {this}
         */
        setContractMemo(contractMemo) {
            this._requireNotFrozen();
            this._contractMemo = contractMemo;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.createContract(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "contractCreateInstance";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IContractCreateTransactionBody}
         */
        _makeTransactionData() {
            return {
                fileID:
                    this._bytecodeFileId != null
                        ? this._bytecodeFileId._toProtobuf()
                        : null,
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                gas: this._gas,
                initialBalance:
                    this._initialBalance != null
                        ? this._initialBalance.toTinybars()
                        : null,
                proxyAccountID:
                    this._proxyAccountId != null
                        ? this._proxyAccountId._toProtobuf()
                        : null,
                autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),
                constructorParameters: this._constructorParameters,
                memo: this._contractMemo,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "contractCreateInstance",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ContractCreateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IContractDeleteTransactionBody} proto.IContractDeleteTransactionBody
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class ContractDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {ContractId | string} [props.contractId]
         * @param {ContractId | string} [props.transferContractId]
         * @param {AccountId | string} [props.transferAccountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._transferAccountId = null;

            /**
             * @private
             * @type {?ContractId}
             */
            this._transferContractId = null;

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }

            if (props.transferAccountId != null) {
                this.setTransferAccountId(props.transferAccountId);
            }

            if (props.transferContractId != null) {
                this.setTransferContractId(props.transferContractId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ContractDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const contractDelete = /** @type {proto.IContractDeleteTransactionBody} */ (body.contractDeleteInstance);

            return Transaction._fromProtobufTransactions(
                new ContractDeleteTransaction({
                    contractId:
                        contractDelete.contractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (contractDelete.contractID)
                              )
                            : undefined,
                    transferAccountId:
                        contractDelete.transferAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (contractDelete.transferAccountID)
                              )
                            : undefined,
                    transferContractId:
                        contractDelete.transferContractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (contractDelete.transferContractID)
                              )
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Sets the contract ID which is being deleted in this transaction.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractDeleteTransaction}
         */
        setContractId(contractId) {
            this._requireNotFrozen();
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @returns {?ContractId}
         */
        get transferContractId() {
            return this._transferContractId;
        }

        /**
         * Sets the contract ID which will receive all remaining hbars.
         *
         * @param {ContractId | string} transferContractId
         * @returns {ContractDeleteTransaction}
         */
        setTransferContractId(transferContractId) {
            this._requireNotFrozen();
            this._transferContractId =
                transferContractId instanceof ContractId
                    ? transferContractId
                    : ContractId.fromString(transferContractId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get transferAccountId() {
            return this._transferAccountId;
        }

        /**
         * Sets the account ID which will receive all remaining hbars.
         *
         * @param {AccountId | string} transferAccountId
         * @returns {ContractDeleteTransaction}
         */
        setTransferAccountId(transferAccountId) {
            this._requireNotFrozen();
            this._transferAccountId =
                transferAccountId instanceof AccountId
                    ? transferAccountId
                    : AccountId.fromString(transferAccountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.deleteContract(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "contractDeleteInstance";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IContractDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                contractID:
                    this._contractId != null
                        ? this._contractId._toProtobuf()
                        : null,
                transferAccountID: this._transferAccountId
                    ? this._transferAccountId._toProtobuf()
                    : null,
                transferContractID:
                    this._transferContractId != null
                        ? this._transferContractId._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "contractDeleteInstance",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ContractDeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IContractCallTransactionBody} proto.IContractCallTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * @typedef {object} FunctionParameters
     * @property {string} name
     * @property {ContractFunctionParameters} parameters
     */

    class ContractExecuteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {ContractId | string} [props.contractId]
         * @param {number | Long} [props.gas]
         * @param {number | string | Long | BigNumber | Hbar} [props.amount]
         * @param {Uint8Array} [props.functionParameters]
         * @param {FunctionParameters} [props.function]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;

            /**
             * @private
             * @type {?Long}
             */
            this._gas = null;

            /**
             * @private
             * @type {?Hbar}
             */
            this._amount = null;

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._functionParameters = null;

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }

            if (props.gas != null) {
                this.setGas(props.gas);
            }

            if (props.amount != null) {
                this.setPayableAmount(props.amount);
            }

            if (props.functionParameters != null) {
                this.setFunctionParameters(props.functionParameters);
            } else if (props.function != null) {
                this.setFunction(props.function.name, props.function.parameters);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ContractExecuteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const call = /** @type {proto.IContractCallTransactionBody} */ (body.contractCall);

            return Transaction._fromProtobufTransactions(
                new ContractExecuteTransaction({
                    contractId:
                        call.contractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (call.contractID)
                              )
                            : undefined,
                    gas: call.gas != null ? call.gas : undefined,
                    amount: call.amount ? call.amount : undefined,
                    functionParameters:
                        call.functionParameters != null
                            ? call.functionParameters
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Sets the contract ID which is being executed in this transaction.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractExecuteTransaction}
         */
        setContractId(contractId) {
            this._requireNotFrozen();
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get gas() {
            return this._gas;
        }

        /**
         * Sets the contract ID which is being executed in this transaction.
         *
         * @param {number | Long} gas
         * @returns {ContractExecuteTransaction}
         */
        setGas(gas) {
            this._requireNotFrozen();
            this._gas = gas instanceof long ? gas : long.fromValue(gas);

            return this;
        }

        /**
         * @returns {?Hbar}
         */
        get payableAmount() {
            return this._amount;
        }

        /**
         * Sets the contract ID which is being executed in this transaction.
         *
         * @param {number | string | Long | BigNumber | Hbar} amount
         * @returns {ContractExecuteTransaction}
         */
        setPayableAmount(amount) {
            this._requireNotFrozen();
            this._amount = amount instanceof Hbar ? amount : new Hbar(amount);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get functionParameters() {
            return this._functionParameters;
        }

        /**
         * @param {Uint8Array} functionParameters
         */
        setFunctionParameters(functionParameters) {
            this._requireNotFrozen();
            this._functionParameters = functionParameters;
        }

        /**
         * @param {string} name
         * @param {ContractFunctionParameters} [functionParameters]
         * @returns {this}
         */
        setFunction(name, functionParameters) {
            this._requireNotFrozen();
            this._functionParameters =
                functionParameters != null
                    ? functionParameters._build(name)
                    : new ContractFunctionParameters()._build(name);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.contractCallMethod(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "contractCall";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IContractCallTransactionBody}
         */
        _makeTransactionData() {
            return {
                contractID:
                    this._contractId != null
                        ? this._contractId._toProtobuf()
                        : null,
                gas: this._gas,
                amount: this._amount != null ? this._amount.toTinybars() : null,
                functionParameters: this._functionParameters,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "contractCall",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ContractExecuteTransaction._fromProtobuf
    );

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     */

    /**
     * Response when the client sends the node CryptoGetInfoQuery.
     */
    class ContractInfo {
        /**
         * @private
         * @param {object} props
         * @param {ContractId} props.contractId
         * @param {AccountId} props.accountId
         * @param {string} props.contractAccountId
         * @param {?Key} props.adminKey
         * @param {Timestamp} props.expirationTime
         * @param {Duration} props.autoRenewPeriod
         * @param {Long} props.storage
         * @param {string} props.contractMemo
         * @param {Hbar} props.balance
         * @param {boolean} props.isDeleted
         * @param {TokenRelationshipMap} props.tokenRelationships
         */
        constructor(props) {
            /**
             * ID of the contract instance, in the format used in transactions.
             *
             * @readonly
             */
            this.contractId = props.contractId;

            /**
             * ID of the cryptocurrency account owned by the contract instance,
             * in the format used in transactions.
             *
             * @readonly
             */
            this.accountId = props.accountId;

            /**
             * ID of both the contract instance and the cryptocurrency account owned by the contract
             * instance, in the format used by Solidity.
             *
             * @readonly
             */
            this.contractAccountId = props.contractAccountId;

            /**
             * The state of the instance and its fields can be modified arbitrarily if this key signs a
             * transaction to modify it. If this is null, then such modifications are not possible,
             * and there is no administrator that can override the normal operation of this smart
             * contract instance. Note that if it is created with no admin keys, then there is no
             * administrator to authorize changing the admin keys, so there can never be any admin keys
             * for that instance.
             *
             * @readonly
             */
            this.adminKey = props.adminKey != null ? props.adminKey : null;

            /**
             * The current time at which this contract instance (and its account) is set to expire.
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            /**
             * The expiration time will extend every this many seconds. If there are insufficient funds,
             * then it extends as long as possible. If the account is empty when it expires,
             * then it is deleted.
             *
             * @readonly
             */
            this.autoRenewPeriod = props.autoRenewPeriod;

            /**
             * Number of bytes of storage being used by this instance (which affects the cost to
             * extend the expiration time).
             *
             * @readonly
             */
            this.storage = props.storage;

            /**
             * The memo associated with the contract (max 100 bytes).
             *
             * @readonly
             */
            this.contractMemo = props.contractMemo;

            /**
             * The current balance of the contract.
             *
             * @readonly
             */
            this.balance = props.balance;

            /**
             * Whether the contract has been deleted
             *
             * @readonly
             */
            this.isDeleted = props.isDeleted;

            /**
             * The tokens associated to the contract
             *
             * @readonly
             */
            this.tokenRelationships = props.tokenRelationships;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IContractInfo} info
         * @returns {ContractInfo}
         */
        static _fromProtobuf(info) {
            const autoRenewPeriod = /** @type {Long | number} */ (
                /** @type {proto.IDuration} */ (info.autoRenewPeriod).seconds
            );

            return new ContractInfo({
                contractId: ContractId._fromProtobuf(
                    /** @type {proto.IContractID} */ (info.contractID)
                ),
                accountId: AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (info.accountID)
                ),
                contractAccountId:
                    info.contractAccountID != null ? info.contractAccountID : "",
                adminKey:
                    info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,
                expirationTime: Timestamp._fromProtobuf(
                    /** @type {proto.ITimestamp} */ (info.expirationTime)
                ),
                autoRenewPeriod: new Duration(autoRenewPeriod),
                storage:
                    info.storage != null
                        ? info.storage instanceof long
                            ? info.storage
                            : long.fromValue(info.storage)
                        : long.ZERO,
                contractMemo: info.memo != null ? info.memo : "",
                balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),
                isDeleted: /** @type {boolean} */ (info.deleted),
                tokenRelationships: TokenRelationshipMap._fromProtobuf(
                    info.tokenRelationships != null ? info.tokenRelationships : []
                ),
            });
        }

        /**
         * @internal
         * @returns {proto.IContractInfo}
         */
        _toProtobuf() {
            return {
                contractID: this.contractId._toProtobuf(),
                accountID: this.accountId._toProtobuf(),
                contractAccountID: this.contractAccountId,
                adminKey:
                    this.adminKey != null ? keyToProtobuf(this.adminKey) : null,
                expirationTime: this.expirationTime._toProtobuf(),
                autoRenewPeriod:
                    this.autoRenewPeriod != null
                        ? this.autoRenewPeriod._toProtobuf()
                        : null,
                storage: this.storage,
                memo: this.contractMemo,
                balance: this.balance.toTinybars(),
                deleted: this.isDeleted,
                tokenRelationships:
                    this.tokenRelationships != null
                        ? this.tokenRelationships._toProtobuf()
                        : null,
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {ContractInfo}
         */
        static fromBytes(bytes) {
            return ContractInfo._fromProtobuf(
                ContractGetInfoResponse.ContractInfo.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return ContractGetInfoResponse.ContractInfo.encode(
                this._toProtobuf()
            ).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IContractGetInfoQuery} proto.IContractGetInfoQuery
     * @typedef {import("@hashgraph/proto").IContractGetInfoResponse} proto.IContractGetInfoResponse
     * @typedef {import("@hashgraph/proto").IContractInfo} proto.IContractInfo
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<ContractInfo>}
     */
    class ContractInfoQuery extends Query {
        /**
         * @param {object} [props]
         * @param {ContractId | string} [props.contractId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?ContractId}
             * @private
             */
            this._contractId = null;
            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {ContractInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.IContractGetInfoQuery} */ (query.contractGetInfo);

            return new ContractInfoQuery({
                contractId:
                    info.contractID != null
                        ? ContractId._fromProtobuf(info.contractID)
                        : undefined,
            });
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Set the contract ID for which the info is being requested.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractInfoQuery}
         */
        setContractId(contractId) {
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.getContractInfo(request);
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const contractGetInfo = /** @type {proto.IContractGetInfoResponse} */ (response.contractGetInfo);
            return /** @type {proto.IResponseHeader} */ (contractGetInfo.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<ContractInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.IContractGetInfoResponse} */ (response.contractGetInfo);

            return Promise.resolve(
                ContractInfo._fromProtobuf(
                    /** @type {proto.IContractInfo} */ (info.contractInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                contractGetInfo: {
                    header,
                    contractID:
                        this._contractId != null
                            ? this._contractId._toProtobuf()
                            : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("contractGetInfo", ContractInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IContractUpdateTransactionBody} proto.IContractUpdateTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class ContractUpdateTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {ContractId | string} [props.contractId]
         * @param {FileId | string} [props.bytecodeFileId]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {Key} [props.adminKey]
         * @param {AccountId | string} [props.proxyAccountId]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {string} [props.contractMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._proxyAccountId = null;

            /**
             * @private
             * @type {?Duration}
             */
            this._autoRenewPeriod = null;

            /**
             * @private
             * @type {?FileId}
             */
            this._bytecodeFileId = null;

            /**
             * @private
             * @type {?string}
             */
            this._contractMemo = null;

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.proxyAccountId != null) {
                this.setProxyAccountId(props.proxyAccountId);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.bytecodeFileId != null) {
                this.setBytecodeFileId(props.bytecodeFileId);
            }

            if (props.contractMemo != null) {
                this.setContractMemo(props.contractMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ContractUpdateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const update = /** @type {proto.IContractUpdateTransactionBody} */ (body.contractUpdateInstance);

            return Transaction._fromProtobufTransactions(
                new ContractUpdateTransaction({
                    contractId:
                        update.contractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (update.contractID)
                              )
                            : undefined,
                    bytecodeFileId:
                        update.fileID != null
                            ? FileId._fromProtobuf(
                                  /** @type {proto.IFileID} */ (update.fileID)
                              )
                            : undefined,
                    expirationTime:
                        update.expirationTime != null
                            ? Timestamp._fromProtobuf(update.expirationTime)
                            : undefined,
                    adminKey:
                        update.adminKey != null
                            ? keyFromProtobuf(update.adminKey)
                            : undefined,
                    proxyAccountId:
                        update.proxyAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (update.proxyAccountID)
                              )
                            : undefined,
                    autoRenewPeriod:
                        update.autoRenewPeriod != null
                            ? update.autoRenewPeriod.seconds != null
                                ? update.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    contractMemo:
                        update.memoWrapper != null
                            ? update.memoWrapper.value != null
                                ? update.memoWrapper.value
                                : undefined
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * Sets the contract ID which is being deleted in this transaction.
         *
         * @param {ContractId | string} contractId
         * @returns {ContractUpdateTransaction}
         */
        setContractId(contractId) {
            this._requireNotFrozen();
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * Sets the contract ID which is being deleted in this transaction.
         *
         * @param {Timestamp | Date} expirationTime
         * @returns {ContractUpdateTransaction}
         */
        setExpirationTime(expirationTime) {
            this._requireNotFrozen();
            this._expirationTime =
                expirationTime instanceof Timestamp
                    ? expirationTime
                    : Timestamp.fromDate(expirationTime);

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} adminKey
         * @returns {this}
         */
        setAdminKey(adminKey) {
            this._requireNotFrozen();
            this._adminKey = adminKey;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get proxyAccountId() {
            return this._proxyAccountId;
        }

        /**
         * @param {AccountId | string} proxyAccountId
         * @returns {this}
         */
        setProxyAccountId(proxyAccountId) {
            this._requireNotFrozen();
            this._proxyAccountId =
                proxyAccountId instanceof AccountId
                    ? proxyAccountId
                    : AccountId.fromString(proxyAccountId);

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?FileId}
         */
        get bytecodeFileId() {
            return this._bytecodeFileId;
        }

        /**
         * @param {FileId | string} bytecodeFileId
         * @returns {this}
         */
        setBytecodeFileId(bytecodeFileId) {
            this._requireNotFrozen();
            this._bytecodeFileId =
                bytecodeFileId instanceof FileId
                    ? bytecodeFileId
                    : FileId.fromString(bytecodeFileId);

            return this;
        }

        /**
         * @returns {?string}
         */
        get contractMemo() {
            return this._contractMemo;
        }

        /**
         * @param {string} contractMemo
         * @returns {this}
         */
        setContractMemo(contractMemo) {
            this._requireNotFrozen();
            this._contractMemo = contractMemo;

            return this;
        }

        /**
         * @returns {this}
         */
        clearContractMemo() {
            this._requireNotFrozen();
            this._contractMemo = null;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.smartContract.updateContract(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "contractUpdateInstance";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IContractUpdateTransactionBody}
         */
        _makeTransactionData() {
            return {
                contractID:
                    this._contractId != null
                        ? this._contractId._toProtobuf()
                        : null,
                expirationTime:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                proxyAccountID:
                    this._proxyAccountId != null
                        ? this._proxyAccountId._toProtobuf()
                        : null,
                autoRenewPeriod:
                    this._autoRenewPeriod != null
                        ? this._autoRenewPeriod._toProtobuf()
                        : null,
                fileID: this._bytecodeFileId
                    ? this._bytecodeFileId._toProtobuf()
                    : null,
                memoWrapper:
                    this._contractMemo != null
                        ? {
                              value: this._contractMemo,
                          }
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "contractUpdateInstance",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ContractUpdateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IFileAppendTransactionBody} proto.IFileAppendTransactionBody
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionResponse.js").default} TransactionResponse
     * @typedef {import("../schedule/ScheduleCreateTransaction.js").default} ScheduleCreateTransaction
     */

    /**
     * A transaction specifically to append data to a file on the network.
     *
     * If a file has multiple keys, all keys must sign to modify its contents.
     */
    class FileAppendTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         * @param {Uint8Array | string} [props.contents]
         * @param {number} [props.maxChunks]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._fileId = null;

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._contents = null;

            /**
             * @private
             * @type {number}
             */
            this._maxChunks = 20;

            this.setMaxTransactionFee(new Hbar(5));

            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }

            if (props.contents != null) {
                this.setContents(props.contents);
            }

            if (props.maxChunks != null) {
                this.setMaxChunks(props.maxChunks);
            }

            /** @type {number} */
            this._startIndex = 0;

            /** @type {TransactionId[]} */
            this._transactionIds = [];
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {FileAppendTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const append = /** @type {proto.IFileAppendTransactionBody} */ (body.fileAppend);

            let contents;
            for (let i = 0; i < bodies.length; i += nodeIds.length) {
                const fileAppend = /** @type {proto.IFileAppendTransactionBody} */ (bodies[
                    i
                ].fileAppend);
                if (fileAppend.contents == null) {
                    break;
                }

                if (contents == null) {
                    contents = new Uint8Array(
                        /** @type {Uint8Array} */ (fileAppend.contents)
                    );
                    continue;
                }

                /** @type {Uint8Array} */
                const concat = new Uint8Array(
                    contents.length +
                        /** @type {Uint8Array} */ (fileAppend.contents).length
                );
                concat.set(contents, 0);
                concat.set(
                    /** @type {Uint8Array} */ (fileAppend.contents),
                    contents.length
                );
                contents = concat;
            }

            return Transaction._fromProtobufTransactions(
                new FileAppendTransaction({
                    fileId:
                        append.fileID != null
                            ? FileId._fromProtobuf(
                                  /** @type {proto.IFileID} */ (append.fileID)
                              )
                            : undefined,
                    contents: contents,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @param {TransactionId} transactionId
         * @returns {this}
         */
        setTransactionId(transactionId) {
            this._requireNotFrozen();

            if (
                transactionId.accountId == null ||
                transactionId.validStart == null
            ) {
                throw new Error(
                    "`FileAppendTransaction` does not support `TransactionId` built from `nonce`"
                );
            }

            this._transactionIds = [transactionId];

            return this;
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * Set the keys which must sign any transactions modifying this file. Required.
         *
         * All keys must sign to modify the file's contents or keys. No key is required
         * to sign for extending the expiration time (except the one for the operator account
         * paying for the transaction). Only one key must sign to delete the file, however.
         *
         * To require more than one key to sign to delete a file, add them to a
         * KeyList and pass that here.
         *
         * The network currently requires a file to have at least one key (or key list or threshold key)
         * but this requirement may be lifted in the future.
         *
         * @param {FileId | string} fileId
         * @returns {this}
         */
        setFileId(fileId) {
            this._requireNotFrozen();
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get contents() {
            return this._contents;
        }

        /**
         * Set the given byte array as the file's contents.
         *
         * This may be omitted to append an empty file.
         *
         * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the
         * network; if you exceed this you may receive a HederaPreCheckStatusException
         * with Status#TransactionOversize.
         *
         * In this case, you will need to break the data into chunks of less than ~6KiB and execute this
         * transaction with the first chunk and then use FileAppendTransaction with
         * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.
         *
         * @param {Uint8Array | string} contents
         * @returns {this}
         */
        setContents(contents) {
            this._requireNotFrozen();
            this._contents =
                contents instanceof Uint8Array ? contents : encode(contents);

            return this;
        }

        /**
         * @returns {?number}
         */
        get maxChunks() {
            return this._maxChunks;
        }

        /**
         * @param {number} maxChunks
         * @returns {this}
         */
        setMaxChunks(maxChunks) {
            this._requireNotFrozen();
            this._maxChunks = maxChunks;
            return this;
        }

        /**
         * Freeze this transaction from further modification to prepare for
         * signing or serialization.
         *
         * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3
         * nodes to prepare this transaction for.
         *
         * @param {?import("../client/Client.js").default<Channel, *>} client
         * @returns {this}
         */
        freezeWith(client) {
            super.freezeWith(client);

            if (this._contents == null) {
                return this;
            }

            const chunks = Math.floor(
                (this._contents.length + (CHUNK_SIZE - 1)) / CHUNK_SIZE
            );

            if (chunks > this._maxChunks) {
                throw new Error(
                    `Contents with size ${this._contents.length} too long for ${this._maxChunks} chunks`
                );
            }

            let nextTransactionId = this.transactionId;

            super._transactions = [];
            super._transactionIds = [];
            super._signedTransactions = [];
            super._nextTransactionIndex = 0;

            for (let chunk = 0; chunk < chunks; chunk++) {
                this._startIndex = chunk * CHUNK_SIZE;

                this._transactionIds.push(nextTransactionId);

                for (const nodeAccountId of this._nodeIds) {
                    this._signedTransactions.push(
                        this._makeSignedTransaction(nodeAccountId)
                    );
                }

                nextTransactionId = new TransactionId(
                    /** @type {AccountId} */ (nextTransactionId.accountId),
                    new Timestamp(
                        /** @type {Timestamp} */ (nextTransactionId.validStart).seconds,
                        /** @type {Timestamp} */ (nextTransactionId.validStart).nanos.add(
                            1
                        )
                    )
                );

                super._nextTransactionIndex = this._nextTransactionIndex + 1;
            }

            this._startIndex = 0;
            super._nextTransactionIndex = 0;

            return this;
        }

        /**
         * @returns {ScheduleCreateTransaction}
         */
        schedule() {
            this._requireNotFrozen();

            if (this._contents != null && this._contents.length > CHUNK_SIZE) {
                throw new Error(
                    `cannot scheduled \`FileAppendTransaction\` with message over ${CHUNK_SIZE} bytes`
                );
            }

            return super.schedule();
        }

        /**
         * @param {import("../client/Client.js").default<*, *>} client
         * @returns {Promise<TransactionResponse>}
         */
        async execute(client) {
            return (await this.executeAll(client))[0];
        }

        /**
         * @param {import("../client/Client.js").default<*, *>} client
         * @returns {Promise<TransactionResponse[]>}
         */
        async executeAll(client) {
            if (!super._isFrozen()) {
                this.freezeWith(client);
            }

            // on execute, sign each transaction with the operator, if present
            // and we are signing a transaction that used the default transaction ID

            const transactionId = this.transactionId;
            const operatorAccountId = client.operatorAccountId;

            if (
                operatorAccountId != null &&
                operatorAccountId.equals(
                    /** @type {AccountId} */ (transactionId.accountId)
                )
            ) {
                await super.signWithOperator(client);
            }

            const responses = [];
            for (let i = 0; i < this._transactionIds.length; i++) {
                const response = await super.execute(client);
                await response.getReceipt(client);
                responses.push(response);
            }

            return responses;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.file.appendContent(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "fileAppend";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IFileAppendTransactionBody}
         */
        _makeTransactionData() {
            const length = this._contents != null ? this._contents.length : 0;
            let endIndex = this._startIndex + CHUNK_SIZE;
            if (endIndex > length) {
                endIndex = length;
            }

            return {
                fileID: this._fileId != null ? this._fileId._toProtobuf() : null,
                contents:
                    this._contents != null
                        ? this._contents.slice(this._startIndex, endIndex)
                        : null,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("fileAppend", FileAppendTransaction._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IFileGetContentsQuery} proto.IFileGetContentsQuery
     * @typedef {import("@hashgraph/proto").IFileGetContentsResponse} proto.IFileGetContentsResponse
     * @typedef {import("@hashgraph/proto").IFileContents} proto.IFileContents
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<Uint8Array>}
     */
    class FileContentsQuery extends Query {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?FileId}
             * @private
             */
            this._fileId = null;
            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {FileContentsQuery}
         */
        static _fromProtobuf(query) {
            const contents = /** @type {proto.IFileGetContentsQuery} */ (query.fileGetContents);

            return new FileContentsQuery({
                fileId:
                    contents.fileID != null
                        ? FileId._fromProtobuf(contents.fileID)
                        : undefined,
            });
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.file.getFileContent(request);
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * Set the file ID for which the info is being requested.
         *
         * @param {FileId | string} fileId
         * @returns {FileContentsQuery}
         */
        setFileId(fileId) {
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const fileGetContents = /** @type {proto.IFileGetContentsResponse} */ (response.fileGetContents);
            return /** @type {proto.IResponseHeader} */ (fileGetContents.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<Uint8Array>}
         */
        _mapResponse(response) {
            const fileContentsResponse = /** @type {proto.IFileGetContentsResponse} */ (response.fileGetContents);
            const fileConents = /** @type {proto.IFileContents} */ (fileContentsResponse.fileContents);
            const contents = /** @type {Uint8Array} */ (fileConents.contents);

            return Promise.resolve(contents);
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                fileGetContents: {
                    header,
                    fileID:
                        this._fileId != null ? this._fileId._toProtobuf() : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("fileGetContents", FileContentsQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IFileCreateTransactionBody} proto.IFileCreateTransactionBody
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Create a new Hedera™ crypto-currency file.
     */
    class FileCreateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {Key[] | KeyList} [props.keys]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {Uint8Array | string} [props.contents]
         * @param {string} [props.fileMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Key[]}
             */
            this._keys = null;

            /**
             * @private
             * @type {Timestamp}
             */
            this._expirationTime = Timestamp.fromDate(
                Date.now() + DEFAULT_AUTO_RENEW_PERIOD.toInt() * 1000
            );

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._contents = null;

            /**
             * @private
             * @type {?string}
             */
            this._fileMemo = null;

            this.setMaxTransactionFee(new Hbar(5));

            if (props.keys != null) {
                this.setKeys(props.keys);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.contents != null) {
                this.setContents(props.contents);
            }

            if (props.fileMemo != null) {
                this.setFileMemo(props.fileMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {FileCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.IFileCreateTransactionBody} */ (body.fileCreate);

            return Transaction._fromProtobufTransactions(
                new FileCreateTransaction({
                    keys:
                        create.keys != null
                            ? create.keys.keys != null
                                ? create.keys.keys.map((key) =>
                                      keyFromProtobuf(key)
                                  )
                                : undefined
                            : undefined,
                    expirationTime:
                        create.expirationTime != null
                            ? Timestamp._fromProtobuf(create.expirationTime)
                            : undefined,
                    contents: create.contents != null ? create.contents : undefined,
                    fileMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?Key[]}
         */
        get keys() {
            return this._keys;
        }

        /**
         * Set the keys which must sign any transactions modifying this file. Required.
         *
         * All keys must sign to modify the file's contents or keys. No key is required
         * to sign for extending the expiration time (except the one for the operator account
         * paying for the transaction). Only one key must sign to delete the file, however.
         *
         * To require more than one key to sign to delete a file, add them to a
         * KeyList and pass that here.
         *
         * The network currently requires a file to have at least one key (or key list or threshold key)
         * but this requirement may be lifted in the future.
         *
         * @param {Key[] | KeyList} keys
         * @returns {this}
         */
        setKeys(keys) {
            this._requireNotFrozen();
            if (keys instanceof KeyList && keys.threshold != null) {
                throw new Error("Cannot set threshold key as file key");
            }

            this._keys = keys instanceof KeyList ? keys.toArray() : keys;

            return this;
        }

        /**
         * @returns {Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * Set the instant at which this file will expire, after which its contents will no longer be
         * available.
         *
         * Defaults to 1/4 of a Julian year from the instant FileCreateTransaction
         * was invoked.
         *
         * May be extended using FileUpdateTransaction#setExpirationTime(Timestamp).
         *
         * @param {Timestamp | Date} expirationTime
         * @returns {this}
         */
        setExpirationTime(expirationTime) {
            this._requireNotFrozen();
            this._expirationTime =
                expirationTime instanceof Timestamp
                    ? expirationTime
                    : Timestamp.fromDate(expirationTime);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get contents() {
            return this._contents;
        }

        /**
         * Set the given byte array as the file's contents.
         *
         * This may be omitted to create an empty file.
         *
         * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the
         * network; if you exceed this you may receive a HederaPreCheckStatusException
         * with Status#TransactionOversize.
         *
         * In this case, you will need to break the data into chunks of less than ~6KiB and execute this
         * transaction with the first chunk and then use FileAppendTransaction with
         * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.
         *
         * @param {Uint8Array | string} contents
         * @returns {this}
         */
        setContents(contents) {
            this._requireNotFrozen();
            this._contents =
                contents instanceof Uint8Array ? contents : encode(contents);

            return this;
        }

        /**
         * @returns {?string}
         */
        get fileMemo() {
            return this._fileMemo;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setFileMemo(memo) {
            this._requireNotFrozen();
            this._fileMemo = memo;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.file.createFile(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "fileCreate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IFileCreateTransactionBody}
         */
        _makeTransactionData() {
            return {
                keys:
                    this._keys != null
                        ? {
                              keys: this._keys.map((key) => keyToProtobuf(key)),
                          }
                        : null,
                expirationTime: this._expirationTime._toProtobuf(),
                contents: this._contents,
                memo: this._fileMemo,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("fileCreate", FileCreateTransaction._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IFileDeleteTransactionBody} proto.IFileDeleteTransactionBody
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * A transaction to delete a file on the Hedera network.
     *
     * When deleted, a file's contents are truncated to zero length and it can no longer be updated
     * or appended to, or its expiration time extended. FileContentsQuery and FileInfoQuery
     * will throw HederaPreCheckStatusException with a status of Status#FileDeleted.
     *
     * Only one of the file's keys needs to sign to delete the file, unless the key you have is part
     * of a KeyList.
     */
    class FileDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._fileId = null;

            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {FileDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const fileDelete = /** @type {proto.IFileDeleteTransactionBody} */ (body.fileDelete);

            return Transaction._fromProtobufTransactions(
                new FileDeleteTransaction({
                    fileId:
                        fileDelete.fileID != null
                            ? FileId._fromProtobuf(fileDelete.fileID)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * Set the file ID which is being deleted in this transaction.
         *
         * @param {FileId | string} fileId
         * @returns {FileDeleteTransaction}
         */
        setFileId(fileId) {
            this._requireNotFrozen();
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.file.deleteFile(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "fileDelete";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IFileDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                fileID: this._fileId != null ? this._fileId._toProtobuf() : null,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("fileDelete", FileDeleteTransaction._fromProtobuf);

    /**
     * Response when the client sends the node CryptoGetInfoQuery.
     */
    class FileInfo {
        /**
         * @private
         * @param {object} props
         * @param {FileId} props.fileId
         * @param {Long} props.size
         * @param {Timestamp} props.expirationTime
         * @param {boolean} props.isDeleted
         * @param {KeyList} props.keys
         * @param {string} props.fileMemo
         */
        constructor(props) {
            /**
             * The ID of the file for which information is requested.
             *
             * @readonly
             */
            this.fileId = props.fileId;

            /**
             * Number of bytes in contents.
             *
             * @readonly
             */
            this.size = props.size;

            /**
             * The current time at which this account is set to expire.
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            /**
             * True if deleted but not yet expired.
             *
             * @readonly
             */
            this.isDeleted = props.isDeleted;

            /**
             * One of these keys must sign in order to delete the file.
             * All of these keys must sign in order to update the file.
             *
             * @readonly
             */
            this.keys = props.keys;

            this.fileMemo = props.fileMemo;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IFileInfo} info
         * @returns {FileInfo}
         */
        static _fromProtobuf(info) {
            const size = /** @type {Long | number} */ (info.size);

            return new FileInfo({
                fileId: FileId._fromProtobuf(
                    /** @type {proto.IFileID} */ (info.fileID)
                ),
                size: size instanceof long ? size : long.fromValue(size),
                expirationTime: Timestamp._fromProtobuf(
                    /** @type {proto.ITimestamp} */ (info.expirationTime)
                ),
                isDeleted: /** @type {boolean} */ (info.deleted),
                keys:
                    info.keys != null
                        ? keyListFromProtobuf(info.keys)
                        : new KeyList(),
                fileMemo: info.memo != null ? info.memo : "",
            });
        }

        /**
         * @internal
         * @returns {proto.IFileInfo}
         */
        _toProtobuf() {
            return {
                fileID: this.fileId._toProtobuf(),
                size: this.size,
                expirationTime: this.expirationTime._toProtobuf(),
                deleted: this.isDeleted,
                keys: keyListToProtobuf(this.keys),
                memo: this.fileMemo,
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {FileInfo}
         */
        static fromBytes(bytes) {
            return FileInfo._fromProtobuf(
                FileGetInfoResponse.FileInfo.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return FileGetInfoResponse.FileInfo.encode(
                this._toProtobuf()
            ).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IFileGetInfoQuery} proto.IFileGetInfoQuery
     * @typedef {import("@hashgraph/proto").IFileGetInfoResponse} proto.IFileGetInfoResponse
     * @typedef {import("@hashgraph/proto").IFileInfo} proto.IFileInfo
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<FileInfo>}
     */
    class FileInfoQuery extends Query {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?FileId}
             * @private
             */
            this._fileId = null;
            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {FileInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.IFileGetInfoQuery} */ (query.fileGetInfo);

            return new FileInfoQuery({
                fileId:
                    info.fileID != null
                        ? FileId._fromProtobuf(info.fileID)
                        : undefined,
            });
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * Set the file ID for which the info is being requested.
         *
         * @param {FileId | string} fileId
         * @returns {FileInfoQuery}
         */
        setFileId(fileId) {
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.file.getFileInfo(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const fileGetInfo = /** @type {proto.IFileGetInfoResponse} */ (response.fileGetInfo);
            return /** @type {proto.IResponseHeader} */ (fileGetInfo.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<FileInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.IFileGetInfoResponse} */ (response.fileGetInfo);

            return Promise.resolve(
                FileInfo._fromProtobuf(
                    /** @type {proto.IFileInfo} */ (info.fileInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                fileGetInfo: {
                    header,
                    fileID:
                        this._fileId != null ? this._fileId._toProtobuf() : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("fileGetInfo", FileInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IFileUpdateTransactionBody} proto.IFileUpdateTransactionBody
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Update a new Hedera™ crypto-currency file.
     */
    class FileUpdateTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {FileId | string} [props.fileId]
         * @param {Key[] | KeyList} [props.keys]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {Uint8Array | string} [props.contents]
         * @param {string} [props.fileMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._fileId = null;

            /**
             * @private
             * @type {?Key[]}
             */
            this._keys = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._contents = null;

            /**
             * @private
             * @type {?string}
             */
            this._fileMemo = null;

            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }

            if (props.keys != null) {
                this.setKeys(props.keys);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.contents != null) {
                this.setContents(props.contents);
            }

            if (props.fileMemo != null) {
                this.setFileMemo(props.fileMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {FileUpdateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const update = /** @type {proto.IFileUpdateTransactionBody} */ (body.fileUpdate);

            return Transaction._fromProtobufTransactions(
                new FileUpdateTransaction({
                    fileId:
                        update.fileID != null
                            ? FileId._fromProtobuf(update.fileID)
                            : undefined,
                    keys:
                        update.keys != null
                            ? update.keys.keys != null
                                ? update.keys.keys.map((key) =>
                                      keyFromProtobuf(key)
                                  )
                                : undefined
                            : undefined,
                    expirationTime:
                        update.expirationTime != null
                            ? Timestamp._fromProtobuf(update.expirationTime)
                            : undefined,
                    contents: update.contents != null ? update.contents : undefined,
                    fileMemo:
                        update.memo != null
                            ? update.memo.value != null
                                ? update.memo.value
                                : undefined
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * Set the keys which must sign any transactions modifying this file. Required.
         *
         * All keys must sign to modify the file's contents or keys. No key is required
         * to sign for extending the expiration time (except the one for the operator account
         * paying for the transaction). Only one key must sign to delete the file, however.
         *
         * To require more than one key to sign to delete a file, add them to a
         * KeyList and pass that here.
         *
         * The network currently requires a file to have at least one key (or key list or threshold key)
         * but this requirement may be lifted in the future.
         *
         * @param {FileId | string} fileId
         * @returns {this}
         */
        setFileId(fileId) {
            this._requireNotFrozen();
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @returns {?Key[]}
         */
        get keys() {
            return this._keys;
        }

        /**
         * Set the keys which must sign any transactions modifying this file. Required.
         *
         * All keys must sign to modify the file's contents or keys. No key is required
         * to sign for extending the expiration time (except the one for the operator account
         * paying for the transaction). Only one key must sign to delete the file, however.
         *
         * To require more than one key to sign to delete a file, add them to a
         * KeyList and pass that here.
         *
         * The network currently requires a file to have at least one key (or key list or threshold key)
         * but this requirement may be lifted in the future.
         *
         * @param {Key[] | KeyList} keys
         * @returns {this}
         */
        setKeys(keys) {
            this._requireNotFrozen();
            if (keys instanceof KeyList && keys.threshold != null) {
                throw new Error("Cannot set threshold key as file key");
            }

            this._keys = keys instanceof KeyList ? keys.toArray() : keys;

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * Set the instant at which this file will expire, after which its contents will no longer be
         * available.
         *
         * Defaults to 1/4 of a Julian year from the instant FileUpdateTransaction
         * was invoked.
         *
         * May be extended using FileUpdateTransaction#setExpirationTime(Timestamp).
         *
         * @param {Timestamp | Date} expirationTime
         * @returns {this}
         */
        setExpirationTime(expirationTime) {
            this._requireNotFrozen();
            this._expirationTime =
                expirationTime instanceof Timestamp
                    ? expirationTime
                    : Timestamp.fromDate(expirationTime);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get contents() {
            return this._contents;
        }

        /**
         * Set the given byte array as the file's contents.
         *
         * This may be omitted to update an empty file.
         *
         * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the
         * network; if you exceed this you may receive a HederaPreCheckStatusException
         * with Status#TransactionOversize.
         *
         * In this case, you will need to break the data into chunks of less than ~6KiB and execute this
         * transaction with the first chunk and then use FileAppendTransaction with
         * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.
         *
         * @param {Uint8Array | string} contents
         * @returns {this}
         */
        setContents(contents) {
            this._requireNotFrozen();
            this._contents =
                contents instanceof Uint8Array ? contents : encode(contents);

            return this;
        }

        /**
         * @returns {?string}
         */
        get fileMemo() {
            return this._fileMemo;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setFileMemo(memo) {
            this._requireNotFrozen();
            this._fileMemo = memo;

            return this;
        }

        /**
         * @returns {this}
         */
        clearFileMemo() {
            this._requireNotFrozen();
            this._fileMemo = null;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.file.updateFile(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "fileUpdate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IFileUpdateTransactionBody}
         */
        _makeTransactionData() {
            return {
                fileID: this._fileId != null ? this._fileId._toProtobuf() : null,
                keys:
                    this._keys != null
                        ? {
                              keys: this._keys.map((key) => keyToProtobuf(key)),
                          }
                        : null,
                expirationTime:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
                contents: this._contents,
                memo:
                    this._fileMemo != null
                        ? {
                              value: this._fileMemo,
                          }
                        : null,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("fileUpdate", FileUpdateTransaction._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IFreezeTransactionBody} proto.IFreezeTransactionBody
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * @typedef {object} HourMinute
     * @property {number} hour
     * @property {number} minute
     */

    class FreezeTransaction extends Transaction {
        /**
         * @param {Object} [props]
         * @param {HourMinute} [props.startTime]
         * @param {HourMinute} [props.endTime]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?HourMinute}
             */
            this._startTime = null;

            /**
             * @private
             * @type {?HourMinute}
             */
            this._endTime = null;

            if (props.startTime != null) {
                this.setStartTime(props.startTime.hour, props.startTime.minute);
            }

            if (props.endTime != null) {
                this.setEndTime(props.endTime.hour, props.endTime.minute);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {FreezeTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const freeze = /** @type {proto.IFreezeTransactionBody} */ (body.freeze);

            return Transaction._fromProtobufTransactions(
                new FreezeTransaction({
                    startTime:
                        freeze.startHour != null && freeze.startMin != null
                            ? {
                                  hour: freeze.startHour,
                                  minute: freeze.startMin,
                              }
                            : undefined,
                    endTime:
                        freeze.endHour != null && freeze.endMin != null
                            ? {
                                  hour: freeze.endHour,
                                  minute: freeze.endMin,
                              }
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?HourMinute}
         */
        get startTime() {
            return this._startTime;
        }

        /**
         * @param {number | string} startHourOrString
         * @param {?number} startMinute
         * @returns {FreezeTransaction}
         */
        setStartTime(startHourOrString, startMinute) {
            this._requireNotFrozen();
            if (typeof startHourOrString === "string") {
                const split = startHourOrString.split(":");
                this._startTime = {
                    hour: Number(split[0]),
                    minute: Number(split[1]),
                };
            } else {
                this._startTime = {
                    hour: startHourOrString,
                    minute: /** @type {number} */ (startMinute),
                };
            }

            return this;
        }

        /**
         * @returns {?HourMinute}
         */
        get endTime() {
            return this._endTime;
        }

        /**
         * @param {number | string} endHourOrString
         * @param {?number} endMinute
         * @returns {FreezeTransaction}
         */
        setEndTime(endHourOrString, endMinute) {
            this._requireNotFrozen();
            if (typeof endHourOrString === "string") {
                const split = endHourOrString.split(":");
                this._endTime = {
                    hour: Number(split[0]),
                    minute: Number(split[1]),
                };
            } else {
                this._endTime = {
                    hour: endHourOrString,
                    minute: /** @type {number} */ (endMinute),
                };
            }

            return this;
        }

        /**
         * @override
         * @protected
         * @param {Channel} channel
         * @returns {(transaction: proto.ITransaction) => Promise<proto.ITransactionResponse>}
         */
        _getMethod(channel) {
            return (transaction) => channel.freeze.freeze(transaction);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "freeze";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IFreezeTransactionBody}
         */
        _makeTransactionData() {
            return {
                startHour: this._startTime != null ? this._startTime.hour : null,
                startMin: this._startTime != null ? this._startTime.minute : null,
                endHour: this._endTime != null ? this._endTime.hour : null,
                endMin: this._endTime != null ? this._endTime.minute : null,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("freeze", FreezeTransaction._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoAddLiveHashTransactionBody} proto.ICryptoAddLiveHashTransactionBody
     * @typedef {import("@hashgraph/proto").ILiveHash} proto.ILiveHash
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class LiveHashAddTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {Uint8Array} [props.hash]
         * @param {Key[]} [props.keys]
         * @param {Duration | Long | number} [props.duration]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._hash = null;

            /**
             * @private
             * @type {?Key[]}
             */
            this._keys = null;

            /**
             * @private
             * @type {?Duration}
             */
            this._duration = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.hash != null) {
                this.setHash(props.hash);
            }

            if (props.keys != null) {
                this.setKeys(props.keys);
            }

            if (props.duration != null) {
                this.setDuration(props.duration);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {LiveHashAddTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const hashes = /** @type {proto.ICryptoAddLiveHashTransactionBody} */ (body.cryptoAddLiveHash);
            const liveHash_ = /** @type {proto.ILiveHash} */ (hashes.liveHash);

            return Transaction._fromProtobufTransactions(
                new LiveHashAddTransaction({
                    hash: liveHash_.hash != null ? liveHash_.hash : undefined,
                    keys:
                        liveHash_.keys != null
                            ? liveHash_.keys.keys != null
                                ? liveHash_.keys.keys.map((key) =>
                                      keyFromProtobuf(key)
                                  )
                                : undefined
                            : undefined,
                    duration:
                        liveHash_.duration != null
                            ? liveHash_.duration.seconds != null
                                ? liveHash_.duration.seconds
                                : undefined
                            : undefined,
                    accountId:
                        liveHash_.accountId != null
                            ? AccountId._fromProtobuf(liveHash_.accountId)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?Uint8Array}
         */
        get hash() {
            return this._hash;
        }

        /**
         * @param {Uint8Array} hash
         * @returns {LiveHashAddTransaction}
         */
        setHash(hash) {
            this._requireNotFrozen();
            this._hash = hash;

            return this;
        }

        /**
         * @returns {?Key[]}
         */
        get keys() {
            return this._keys;
        }

        /**
         * @param {Key[] | KeyList} keys
         * @returns {LiveHashAddTransaction}
         */
        setKeys(keys) {
            this._requireNotFrozen();
            this._keys = keys instanceof KeyList ? keys.toArray() : keys;

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get duration() {
            return this._duration;
        }

        /**
         * @param {Duration | Long | number} duration
         * @returns {LiveHashAddTransaction}
         */
        setDuration(duration) {
            this._requireNotFrozen();
            this._duration =
                duration instanceof Duration ? duration : new Duration(duration);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {LiveHashAddTransaction}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.addLiveHash(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoAddLiveHash";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoAddLiveHashTransactionBody}
         */
        _makeTransactionData() {
            return {
                liveHash: {
                    hash: this._hash,
                    keys:
                        this._keys != null
                            ? {
                                  keys: this._keys.map((key) => keyToProtobuf(key)),
                              }
                            : undefined,
                    duration:
                        this._duration != null
                            ? this._duration._toProtobuf()
                            : null,
                    accountId:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                },
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoAddLiveHash",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        LiveHashAddTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoDeleteLiveHashTransactionBody} proto.ICryptoDeleteLiveHashTransactionBody
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class LiveHashDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {Uint8Array} [props.hash]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._hash = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.hash != null) {
                this.setHash(props.hash);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {LiveHashDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const hashes = /** @type {proto.ICryptoDeleteLiveHashTransactionBody} */ (body.cryptoDeleteLiveHash);

            return Transaction._fromProtobufTransactions(
                new LiveHashDeleteTransaction({
                    hash:
                        hashes.liveHashToDelete != null
                            ? hashes.liveHashToDelete
                            : undefined,
                    accountId:
                        hashes.accountOfLiveHash != null
                            ? AccountId._fromProtobuf(hashes.accountOfLiveHash)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?Uint8Array}
         */
        get hash() {
            return this._hash;
        }

        /**
         * @param {Uint8Array} hash
         * @returns {LiveHashDeleteTransaction}
         */
        setHash(hash) {
            this._requireNotFrozen();
            this._hash = hash;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {LiveHashDeleteTransaction}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.deleteLiveHash(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoDeleteLiveHash";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoDeleteLiveHashTransactionBody}
         */
        _makeTransactionData() {
            return {
                liveHashToDelete: this._hash,
                accountOfLiveHash:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoDeleteLiveHash",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        LiveHashDeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ICryptoGetLiveHashQuery} proto.ICryptoGetLiveHashQuery
     * @typedef {import("@hashgraph/proto").ICryptoGetLiveHashResponse} proto.ICryptoGetLiveHashResponse
     * @typedef {import("@hashgraph/proto").ILiveHash} proto.ILiveHash
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<LiveHash>}
     */
    class LiveHashQuery extends Query {
        /**
         * @param {object} [props]
         * @param {AccountId | string} [props.accountId]
         * @param {Uint8Array} [props.hash]
         */
        constructor(props = {}) {
            super();

            /**
             * @type {?AccountId}
             * @private
             */
            this._accountId = null;

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }

            /**
             * @type {?Uint8Array}
             * @private
             */
            this._hash = null;

            if (props.hash != null) {
                this.setHash(props.hash);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {LiveHashQuery}
         */
        static _fromProtobuf(query) {
            const hash = /** @type {proto.ICryptoGetLiveHashQuery} */ (query.cryptoGetLiveHash);

            return new LiveHashQuery({
                accountId:
                    hash.accountID != null
                        ? AccountId._fromProtobuf(hash.accountID)
                        : undefined,
                hash: hash.hash != null ? hash.hash : undefined,
            });
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * Set the account to which the livehash is associated.
         *
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get liveHash() {
            return this._hash;
        }

        /**
         * Set the SHA-384 data in the livehash.
         *
         * @param {Uint8Array} hash
         * @returns {this}
         */
        setHash(hash) {
            this._hash = hash;

            return this;
        }

        /**
         * @protected
         * @override
         * @param {Channel} channel
         * @returns {(query: proto.IQuery) => Promise<proto.IResponse>}
         */
        _getMethod(channel) {
            return (query) => channel.crypto.getLiveHash(query);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const cryptoGetLiveHash = /** @type {proto.ICryptoGetLiveHashResponse} */ (response.cryptoGetLiveHash);
            return /** @type {proto.IResponseHeader} */ (cryptoGetLiveHash.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<LiveHash>}
         */
        _mapResponse(response) {
            const hashes = /** @type {proto.ICryptoGetLiveHashResponse} */ (response.cryptoGetLiveHash);

            return Promise.resolve(
                LiveHash._fromProtobuf(
                    /** @type {proto.ILiveHash} */ (hashes.liveHash)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                cryptoGetLiveHash: {
                    header,
                    accountID:
                        this._accountId != null
                            ? this._accountId._toProtobuf()
                            : null,
                    hash: this._hash,
                },
            };
        }
    }

    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("cryptoGetLiveHash", LiveHashQuery._fromProtobuf);

    class SemanticVersion {
        /**
         * @private
         * @param {object} props
         * @param {number} props.major
         * @param {number} props.minor
         * @param {number} props.patch
         */
        constructor(props) {
            /** @readonly */
            this.major = props.major;
            /** @readonly */
            this.minor = props.minor;
            /** @readonly */
            this.patch = props.patch;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.ISemanticVersion} version
         * @returns {SemanticVersion}
         */
        static _fromProtobuf(version) {
            return new SemanticVersion({
                major: /** @type {number} */ (version.major),
                minor: /** @type {number} */ (version.minor),
                patch: /** @type {number} */ (version.patch),
            });
        }

        /**
         * @internal
         * @returns {proto.ISemanticVersion}
         */
        _toProtobuf() {
            return {
                major: this.major,
                minor: this.minor,
                patch: this.patch,
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {SemanticVersion}
         */
        static fromBytes(bytes) {
            return SemanticVersion._fromProtobuf(
                SemanticVersion$1.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return SemanticVersion$1.encode(this._toProtobuf()).finish();
        }
    }

    /**
     * Response when the client sends the node CryptoGetVersionInfoQuery.
     */
    class NetworkVersionInfo {
        /**
         * @private
         * @param {object} props
         * @param {SemanticVersion} props.protobufVersion
         * @param {SemanticVersion} props.servicesVesion
         *
         */
        constructor(props) {
            /**
             * The account ID for which this information applies.
             *
             * @readonly
             */
            this.protobufVersion = props.protobufVersion;

            /**
             * The account ID for which this information applies.
             *
             * @readonly
             */
            this.servicesVesion = props.servicesVesion;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.INetworkGetVersionInfoResponse} info
         * @returns {NetworkVersionInfo}
         */
        static _fromProtobuf(info) {
            return new NetworkVersionInfo({
                protobufVersion: SemanticVersion._fromProtobuf(
                    /** @type {proto.ISemanticVersion} */
                    (info.hapiProtoVersion)
                ),
                servicesVesion: SemanticVersion._fromProtobuf(
                    /** @type {proto.ISemanticVersion} */
                    (info.hederaServicesVersion)
                ),
            });
        }

        /**
         * @internal
         * @returns {proto.INetworkGetVersionInfoResponse}
         */
        _toProtobuf() {
            return {
                hapiProtoVersion: this.protobufVersion._toProtobuf(),
                hederaServicesVersion: this.servicesVesion._toProtobuf(),
            };
        }

        /**
         * @param {Uint8Array} bytes
         * @returns {NetworkVersionInfo}
         */
        static fromBytes(bytes) {
            return NetworkVersionInfo._fromProtobuf(
                NetworkGetVersionInfoResponse.decode(bytes)
            );
        }

        /**
         * @returns {Uint8Array}
         */
        toBytes() {
            return NetworkGetVersionInfoResponse.encode(
                this._toProtobuf()
            ).finish();
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").INetworkGetVersionInfoQuery} proto.INetworkGetVersionInfoQuery
     * @typedef {import("@hashgraph/proto").INetworkGetVersionInfoResponse} proto.INetworkGetVersionInfoResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<NetworkVersionInfo>}
     */
    class NetworkVersionInfoQuery extends Query {
        constructor() {
            super();
        }

        /**
         * @param {proto.IQuery} query
         * @returns {NetworkVersionInfoQuery}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        static _fromProtobuf(query) {
            return new NetworkVersionInfoQuery();
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.network.getVersionInfo(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const networkGetVersionInfo = /** @type {proto.INetworkGetVersionInfoResponse} */ (response.networkGetVersionInfo);
            return /** @type {proto.IResponseHeader} */ (networkGetVersionInfo.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<NetworkVersionInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.INetworkGetVersionInfoResponse} */ (response.networkGetVersionInfo);
            return Promise.resolve(NetworkVersionInfo._fromProtobuf(info));
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                networkGetVersionInfo: {
                    header,
                },
            };
        }
    }

    QUERY_REGISTRY.set(
        "networkGetVersionInfo",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        NetworkVersionInfoQuery._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IScheduleCreateTransactionBody} proto.IScheduleCreateTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").ISignatureMap} proto.ISignatureMap
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("@hashgraph/cryptography").PublicKey} PublicKey
     * @typedef {import("@hashgraph/cryptography").PrivateKey} PrivateKey
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../client/Client.js").default<*, *>} Client
     * @typedef {import("../Timestamp.js").default} Timestamp
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Create a new Hedera™ crypto-currency account.
     */
    class ScheduleCreateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {Key} [props.adminKey]
         * @param {AccountId} [props.payerAccountID]
         * @param {string} [props.scheduleMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?Transaction}
             */
            this._scheduledTransaction = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._payerAccountId = null;

            /**
             * @private
             * @type {?string}
             */
            this._scheduleMemo = null;

            /**
             * @private
             * @type {Set<string>}
             */
            this._scheduledSignerPublicKeys = new Set();

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.payerAccountID != null) {
                this.setPayerAccountId(props.payerAccountID);
            }

            if (props.scheduleMemo != null) {
                this.setScheduleMemo(props.scheduleMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ScheduleCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.IScheduleCreateTransactionBody} */ (body.scheduleCreate);

            return Transaction._fromProtobufTransactions(
                new ScheduleCreateTransaction({
                    adminKey:
                        create.adminKey != null
                            ? keyFromProtobuf(create.adminKey)
                            : undefined,
                    payerAccountID:
                        create.payerAccountID != null
                            ? AccountId._fromProtobuf(
                                  /** @type {proto.IAccountID} */ (create.payerAccountID)
                              )
                            : undefined,
                    scheduleMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @internal
         * @param {Transaction} tx
         * @returns {this}
         */
        _setScheduledTransaction(tx) {
            this._scheduledTransaction = tx;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * Set the key for this account.
         *
         * This is the key that must sign each transfer out of the account.
         *
         * If `receiverSignatureRequired` is true, then the key must also sign
         * any transfer into the account.
         *
         * @param {Key} key
         * @returns {this}
         */
        setAdminKey(key) {
            this._requireNotFrozen();
            this._adminKey = key;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get payerAccountId() {
            return this._payerAccountId;
        }

        /**
         * @param {AccountId} account
         * @returns {this}
         */
        setPayerAccountId(account) {
            this._requireNotFrozen();
            this._payerAccountId = account;

            return this;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setScheduleMemo(memo) {
            this._requireNotFrozen();
            this._scheduleMemo = memo;

            return this;
        }

        /**
         * @returns {?string}
         */
        get getScheduleMemo() {
            this._requireNotFrozen();
            return this._scheduleMemo;
        }

        /**
         * @param {Transaction} transaction
         * @returns {this}
         */
        setScheduledTransaction(transaction) {
            this._requireNotFrozen();
            transaction._requireNotFrozen();

            this._scheduledTransaction = transaction.schedule()._scheduledTransaction;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.schedule.createSchedule(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "scheduleCreate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IScheduleCreateTransactionBody}
         */
        _makeTransactionData() {
            return {
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                payerAccountID:
                    this._payerAccountId != null
                        ? this._payerAccountId._toProtobuf()
                        : null,
                scheduledTransactionBody:
                    this._scheduledTransaction != null
                        ? this._scheduledTransaction._getScheduledTransactionBody()
                        : null,
                memo: this._scheduleMemo,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "scheduleCreate",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ScheduleCreateTransaction._fromProtobuf
    );

    SCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IScheduleDeleteTransactionBody} proto.IScheduleDeleteTransactionBody
     * @typedef {import("@hashgraph/proto").IScheduleID} proto.IScheduleID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../Timestamp.js").default} Timestamp
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     * @typedef {import("../account/AccountId.js").default} AccountId
     */

    /**
     * Create a new Hedera™ crypto-currency account.
     */
    class ScheduleDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {ScheduleId} [props.scheduleId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ScheduleId}
             */
            this._scheduleId = null;

            if (props.scheduleId != null) {
                this.setScheduleId(props.scheduleId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ScheduleDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const scheduleDelete = /** @type {proto.IScheduleDeleteTransactionBody} */ (body.scheduleDelete);

            return Transaction._fromProtobufTransactions(
                new ScheduleDeleteTransaction({
                    scheduleId:
                        scheduleDelete.scheduleID != null
                            ? ScheduleId._fromProtobuf(
                                  /** @type {proto.IScheduleID} */ (scheduleDelete.scheduleID)
                              )
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?ScheduleId}
         */
        get scheduleId() {
            return this._scheduleId;
        }

        /**
         * @param {ScheduleId} scheduleId
         * @returns {this}
         */
        setScheduleId(scheduleId) {
            this._requireNotFrozen();
            this._scheduleId = scheduleId;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.schedule.deleteSchedule(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "scheduleDelete";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IScheduleDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                scheduleID:
                    this._scheduleId != null
                        ? this._scheduleId._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "scheduleDelete",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ScheduleDeleteTransaction._fromProtobuf
    );

    /**
     * @typedef {object} ProtoSignaturePair
     * @property {(Uint8Array | null)=} pubKeyPrefix
     * @property {(Uint8Array | null)=} ed25519
     */

    /**
     * @typedef {object} ProtoSigMap
     * @property {(ProtoSignaturePair[] | null)=} sigPair
     */

    /**
     * @typedef {object} ProtoSignedTransaction
     * @property {(Uint8Array | null)=} bodyBytes
     * @property {(ProtoSigMap | null)=} sigMap
     */

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IScheduleSignTransactionBody} proto.IScheduleSignTransactionBody
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").ISignatureMap} proto.ISignatureMap
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../Timestamp.js").default} Timestamp
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("@hashgraph/cryptography").PublicKey} PublicKey
     */

    /**
     * Create a new Hedera™ crypto-currency account.
     */
    class ScheduleSignTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {ScheduleId} [props.scheduleId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?ScheduleId}
             */
            this._scheduleId = null;

            if (props.scheduleId != null) {
                this.setScheduleId(props.scheduleId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {ScheduleSignTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const sign = /** @type {proto.IScheduleSignTransactionBody} */ (body.scheduleSign);

            return Transaction._fromProtobufTransactions(
                new ScheduleSignTransaction({
                    scheduleId:
                        sign.scheduleID != null
                            ? ScheduleId._fromProtobuf(sign.scheduleID)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?ScheduleId}
         */
        get scheduleId() {
            return this._scheduleId;
        }

        /**
         * @param {ScheduleId} scheduleId
         * @returns {this}
         */
        setScheduleId(scheduleId) {
            this._requireNotFrozen();
            this._scheduleId = scheduleId;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.schedule.signSchedule(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "scheduleSign";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IScheduleSignTransactionBody}
         */
        _makeTransactionData() {
            return {
                scheduleID:
                    this._scheduleId != null
                        ? this._scheduleId._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "scheduleSign",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ScheduleSignTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IScheduleInfo} proto.IScheduleInfo
     * @typedef {import("@hashgraph/proto").IScheduleID} proto.IScheduleID
     * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IScheduleID} proto.IScheduledID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     * @typedef {import("@hashgraph/proto").IKey} proto.IKey
     * @typedef {import("@hashgraph/proto").IDuration} proto.IDuration
     * @typedef {import("@hashgraph/proto").ISchedulableTransactionBody} proto.ISchedulableTransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("@hashgraph/cryptography").KeyList} KeyList
     */

    /**
     * Response when the client sends the node ScheduleGetInfoQuery.
     */
    class ScheduleInfo {
        /**
         * @private
         * @param {object} props
         * @param {ScheduleId} props.scheduleId;
         * @param {?AccountId} props.creatorAccountID;
         * @param {?AccountId} props.payerAccountID;
         * @param {?proto.ISchedulableTransactionBody} props.schedulableTransactionBody;
         * @param {?Key} props.adminKey
         * @param {?KeyList} props.signers;
         * @param {?string} props.scheduleMemo;
         * @param {?Timestamp} props.expirationTime;
         * @param {?Timestamp} props.executed;
         * @param {?Timestamp} props.deleted;
         * @param {?TransactionId} props.scheduledTransactionId;
         */
        constructor(props) {
            /**
             *
             * @readonly
             */
            this.scheduleId = props.scheduleId;

            /**
             *
             * @readonly
             */
            this.creatorAccountId = props.creatorAccountID;

            /**
             *
             * @readonly
             */
            this.payerAccountId = props.payerAccountID;

            /**
             *
             * @readonly
             */
            this.schedulableTransactionBody = props.schedulableTransactionBody;

            /**
             *
             * @readonly
             */
            this.signers = props.signers;

            /**
             *
             * @readonly
             */
            this.scheduleMemo = props.scheduleMemo;

            /**
             *
             * @readonly
             */
            this.adminKey = props.adminKey != null ? props.adminKey : null;

            /**
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            /**
             *
             * @readonly
             */
            this.executed = props.executed;

            /**
             *
             * @readonly
             */
            this.deleted = props.deleted;

            this.scheduledTransactionId = props.scheduledTransactionId;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IScheduleInfo} info
         * @returns {ScheduleInfo}
         */
        static _fromProtobuf(info) {
            return new ScheduleInfo({
                scheduleId: ScheduleId._fromProtobuf(
                    /** @type {proto.IScheduleID} */ (info.scheduleID)
                ),
                creatorAccountID:
                    info.creatorAccountID != null
                        ? AccountId._fromProtobuf(
                              /** @type {proto.IAccountID} */ (info.creatorAccountID)
                          )
                        : null,
                payerAccountID:
                    info.payerAccountID != null
                        ? AccountId._fromProtobuf(
                              /** @type {proto.IAccountID} */ (info.payerAccountID)
                          )
                        : null,
                schedulableTransactionBody:
                    info.scheduledTransactionBody != null
                        ? info.scheduledTransactionBody
                        : null,
                adminKey:
                    info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,
                signers:
                    info.signers != null ? keyListFromProtobuf(info.signers) : null,
                scheduleMemo: info.memo != null ? info.memo : null,
                expirationTime:
                    info.expirationTime != null
                        ? Timestamp._fromProtobuf(
                              /** @type {proto.ITimestamp} */ (info.expirationTime)
                          )
                        : null,
                executed:
                    info.executionTime != null
                        ? Timestamp._fromProtobuf(
                              /** @type {proto.ITimestamp} */ (info.executionTime)
                          )
                        : null,
                deleted:
                    info.deletionTime != null
                        ? Timestamp._fromProtobuf(
                              /** @type {proto.ITimestamp} */ (info.deletionTime)
                          )
                        : null,
                scheduledTransactionId:
                    info.scheduledTransactionID != null
                        ? TransactionId._fromProtobuf(info.scheduledTransactionID)
                        : null,
            });
        }

        /**
         * @returns {proto.IScheduleInfo}
         */
        _toProtobuf() {
            return {
                scheduleID:
                    this.scheduleId != null ? this.scheduleId._toProtobuf() : null,
                creatorAccountID:
                    this.creatorAccountId != null
                        ? this.creatorAccountId._toProtobuf()
                        : null,
                payerAccountID:
                    this.payerAccountId != null
                        ? this.payerAccountId._toProtobuf()
                        : null,
                scheduledTransactionBody:
                    this.schedulableTransactionBody != null
                        ? this.schedulableTransactionBody
                        : null,
                adminKey:
                    this.adminKey != null ? keyToProtobuf(this.adminKey) : null,
                signers:
                    this.signers != null ? keyListToProtobuf(this.signers) : null,
                memo: this.scheduleMemo != null ? this.scheduleMemo : "",
                expirationTime:
                    this.expirationTime != null
                        ? this.expirationTime._toProtobuf()
                        : null,
                scheduledTransactionID:
                    this.scheduledTransactionId != null
                        ? this.scheduledTransactionId._toProtobuf()
                        : null,
            };
        }

        /**
         * @returns {Transaction}
         */
        get scheduledTransaction() {
            if (this.schedulableTransactionBody == null) {
                throw new Error("Scheduled transaction body is empty");
            }

            const scheduled = new SchedulableTransactionBody(
                this.schedulableTransactionBody
            );
            const data = /** @type {NonNullable<ProtoSchedulableTransactionBody["data"]>} */ (scheduled.data);

            return Transaction.fromBytes(
                TransactionList.encode({
                    transactionList: [
                        {
                            signedTransactionBytes: SignedTransaction.encode({
                                bodyBytes: TransactionBody.encode({
                                    transactionFee: this.schedulableTransactionBody
                                        .transactionFee,
                                    memo: this.schedulableTransactionBody.memo,
                                    [data]: scheduled[data],
                                }).finish(),
                            }).finish(),
                        },
                    ],
                }).finish()
            );
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IScheduleInfo} proto.IScheduleInfo
     * @typedef {import("@hashgraph/proto").IScheduleGetInfoQuery} proto.IScheduleGetInfoQuery
     * @typedef {import("@hashgraph/proto").IScheduleGetInfoResponse} proto.IScheduleGetInfoResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<ScheduleInfo>}
     */
    class ScheduleInfoQuery extends Query {
        /**
         * @param {object} properties
         * @param {ScheduleId | string} [properties.scheduleId]
         */
        constructor(properties = {}) {
            super();

            /**
             * @private
             * @type {?ScheduleId}
             */
            this._scheduleId = null;

            if (properties.scheduleId != null) {
                this.setScheduleId(properties.scheduleId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {ScheduleInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.IScheduleGetInfoQuery} */ (query.scheduleGetInfo);

            return new ScheduleInfoQuery({
                scheduleId:
                    info.scheduleID != null
                        ? ScheduleId._fromProtobuf(info.scheduleID)
                        : undefined,
            });
        }

        /**
         * @returns {?ScheduleId}
         */
        get scheduleId() {
            return this._scheduleId;
        }

        /**
         *
         * @param {ScheduleId | string} scheduleId
         * @returns {ScheduleInfoQuery}
         */
        setScheduleId(scheduleId) {
            this._scheduleId =
                scheduleId instanceof ScheduleId
                    ? scheduleId
                    : ScheduleId.fromString(scheduleId);

            return this;
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.schedule.getScheduleInfo(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const scheduleGetInfo = /** @type {proto.IScheduleGetInfoResponse} */ (response.scheduleGetInfo);
            return /** @type {proto.IResponseHeader} */ (scheduleGetInfo.header);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Promise<ScheduleInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.IScheduleGetInfoResponse} */ (response.scheduleGetInfo);

            return Promise.resolve(
                ScheduleInfo._fromProtobuf(
                    /** @type {proto.IScheduleInfo} */ (info.scheduleInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                scheduleGetInfo: {
                    header,
                    scheduleID:
                        this._scheduleId != null
                            ? this._scheduleId._toProtobuf()
                            : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("scheduleGetInfo", ScheduleInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ISystemDeleteTransactionBody} proto.ISystemDeleteTransactionBody
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class SystemDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         * @param {ContractId | string} [props.contractId]
         * @param {Timestamp} [props.expirationTime]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._fileId = null;

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {SystemDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const systemDelete = /** @type {proto.ISystemDeleteTransactionBody} */ (body.systemDelete);

            return Transaction._fromProtobufTransactions(
                new SystemDeleteTransaction({
                    fileId:
                        systemDelete.fileID != null
                            ? FileId._fromProtobuf(
                                  /** @type {proto.IFileID} */ (systemDelete.fileID)
                              )
                            : undefined,
                    contractId:
                        systemDelete.contractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (systemDelete.contractID)
                              )
                            : undefined,
                    expirationTime:
                        systemDelete.expirationTime != null
                            ? Timestamp._fromProtobuf(systemDelete.expirationTime)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * @param {FileId | string} fileId
         * @returns {this}
         */
        setFileId(fileId) {
            this._requireNotFrozen();
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * @param {ContractId | string} contractId
         * @returns {this}
         */
        setContractId(contractId) {
            this._requireNotFrozen();
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * @param {Timestamp} expirationTime
         * @returns {SystemDeleteTransaction}
         */
        setExpirationTime(expirationTime) {
            this._requireNotFrozen();
            this._expirationTime = expirationTime;
            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            if (this._fileId != null) {
                return channel.file.systemDelete(request);
            } else {
                return channel.smartContract.systemDelete(request);
            }
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "systemDelete";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ISystemDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                fileID: this._fileId != null ? this._fileId._toProtobuf() : null,
                contractID:
                    this._contractId != null
                        ? this._contractId._toProtobuf()
                        : null,
                expirationTime:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    TRANSACTION_REGISTRY.set("systemDelete", SystemDeleteTransaction._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ISystemUndeleteTransactionBody} proto.ISystemUndeleteTransactionBody
     * @typedef {import("@hashgraph/proto").IContractID} proto.IContractID
     * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../Timestamp.js").default} Timestamp
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    class SystemUndeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {FileId | string} [props.fileId]
         * @param {ContractId | string} [props.contractId]
         * @param {Timestamp} [props.expirationTime]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?FileId}
             */
            this._fileId = null;

            /**
             * @private
             * @type {?ContractId}
             */
            this._contractId = null;

            if (props.fileId != null) {
                this.setFileId(props.fileId);
            }

            if (props.contractId != null) {
                this.setContractId(props.contractId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {SystemUndeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const systemUndelete = /** @type {proto.ISystemUndeleteTransactionBody} */ (body.systemUndelete);

            return Transaction._fromProtobufTransactions(
                new SystemUndeleteTransaction({
                    fileId:
                        systemUndelete.fileID != null
                            ? FileId._fromProtobuf(
                                  /** @type {proto.IFileID} */ (systemUndelete.fileID)
                              )
                            : undefined,
                    contractId:
                        systemUndelete.contractID != null
                            ? ContractId._fromProtobuf(
                                  /** @type {proto.IContractID} */ (systemUndelete.contractID)
                              )
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?FileId}
         */
        get fileId() {
            return this._fileId;
        }

        /**
         * @param {FileId | string} fileId
         * @returns {this}
         */
        setFileId(fileId) {
            this._requireNotFrozen();
            this._fileId =
                fileId instanceof FileId ? fileId : FileId.fromString(fileId);

            return this;
        }

        /**
         * @returns {?ContractId}
         */
        get contractId() {
            return this._contractId;
        }

        /**
         * @param {ContractId | string} contractId
         * @returns {this}
         */
        setContractId(contractId) {
            this._requireNotFrozen();
            this._contractId =
                contractId instanceof ContractId
                    ? contractId
                    : ContractId.fromString(contractId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            if (this._fileId != null) {
                return channel.file.systemUndelete(request);
            } else {
                return channel.smartContract.systemUndelete(request);
            }
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "systemUndelete";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ISystemUndeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                fileID: this._fileId != null ? this._fileId._toProtobuf() : null,
                contractID:
                    this._contractId != null
                        ? this._contractId._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "systemUndelete",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        SystemUndeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenAssociateTransactionBody} proto.ITokenAssociateTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Associate a new Hedera™ crypto-currency token.
     */
    class TokenAssociateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {(TokenId | string)[]} [props.tokenIds]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId[]}
             */
            this._tokenIds = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            this.setMaxTransactionFee(new Hbar(5));

            if (props.tokenIds != null) {
                this.setTokenIds(props.tokenIds);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenAssociateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const associateToken = /** @type {proto.ITokenAssociateTransactionBody} */ (body.tokenAssociate);

            return Transaction._fromProtobufTransactions(
                new TokenAssociateTransaction({
                    tokenIds:
                        associateToken.tokens != null
                            ? associateToken.tokens.map((token) =>
                                  TokenId._fromProtobuf(token)
                              )
                            : undefined,
                    accountId:
                        associateToken.account != null
                            ? AccountId._fromProtobuf(associateToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId[]}
         */
        get tokenIds() {
            return this._tokenIds;
        }

        /**
         * @param {(TokenId | string)[]} tokenIds
         * @returns {this}
         */
        setTokenIds(tokenIds) {
            this._requireNotFrozen();
            this._tokenIds = tokenIds.map((tokenId) =>
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId)
            );

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.associateTokens(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenAssociate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenAssociateTransactionBody}
         */
        _makeTransactionData() {
            return {
                tokens:
                    this._tokenIds != null
                        ? this._tokenIds.map((tokenId) => tokenId._toProtobuf())
                        : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenAssociate",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenAssociateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenBurnTransactionBody} proto.ITokenBurnTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Burn a new Hedera™ crypto-currency token.
     */
    class TokenBurnTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {Long | number} [props.amount]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?Long}
             */
            this._amount = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.amount != null) {
                this.setAmount(props.amount);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenBurnTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const burnToken = /** @type {proto.ITokenBurnTransactionBody} */ (body.tokenBurn);

            return Transaction._fromProtobufTransactions(
                new TokenBurnTransaction({
                    tokenId:
                        burnToken.token != null
                            ? TokenId._fromProtobuf(burnToken.token)
                            : undefined,
                    amount: burnToken.amount != null ? burnToken.amount : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get amount() {
            return this._amount;
        }

        /**
         * @param {Long | number} amount
         * @returns {this}
         */
        setAmount(amount) {
            this._requireNotFrozen();
            this._amount = amount instanceof long ? amount : long.fromValue(amount);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.burnToken(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenBurn";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenBurnTransactionBody}
         */
        _makeTransactionData() {
            return {
                amount: this._amount,
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenBurn",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenBurnTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenCreateTransactionBody} proto.ITokenCreateTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Create a new Hedera™ crypto-currency token.
     */
    class TokenCreateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {string} [props.tokenName]
         * @param {string} [props.tokenSymbol]
         * @param {Long | number} [props.decimals]
         * @param {Long | number} [props.initialSupply]
         * @param {AccountId | string} [props.treasuryAccountId]
         * @param {Key} [props.adminKey]
         * @param {Key} [props.kycKey]
         * @param {Key} [props.freezeKey]
         * @param {Key} [props.wipeKey]
         * @param {Key} [props.supplyKey]
         * @param {boolean} [props.freezeDefault]
         * @param {AccountId | string} [props.autoRenewAccountId]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {string} [props.tokenMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?string}
             */
            this._tokenName = null;

            /**
             * @private
             * @type {?string}
             */
            this._tokenSymbol = null;

            /**
             * @private
             * @type {?Long}
             */
            this._decimals = null;

            /**
             * @private
             * @type {?Long}
             */
            this._initialSupply = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._treasuryAccountId = null;

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._kycKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._freezeKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._wipeKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._supplyKey = null;

            /**
             * @private
             * @type {?boolean}
             */
            this._freezeDefault = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._autoRenewAccountId = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            /**
             * @private
             * @type {?Duration}
             */
            this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);

            /**
             * @private
             * @type {?string}
             */
            this._tokenMemo = null;

            this.setMaxTransactionFee(new Hbar(30));

            if (props.tokenName != null) {
                this.setTokenName(props.tokenName);
            }

            if (props.tokenSymbol != null) {
                this.setTokenSymbol(props.tokenSymbol);
            }

            if (props.decimals != null) {
                this.setDecimals(props.decimals);
            }

            if (props.initialSupply != null) {
                this.setInitialSupply(props.initialSupply);
            }

            if (props.treasuryAccountId != null) {
                this.setTreasuryAccountId(props.treasuryAccountId);
            }

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.kycKey != null) {
                this.setKycKey(props.kycKey);
            }

            if (props.freezeKey != null) {
                this.setFreezeKey(props.freezeKey);
            }

            if (props.wipeKey != null) {
                this.setWipeKey(props.wipeKey);
            }

            if (props.supplyKey != null) {
                this.setSupplyKey(props.supplyKey);
            }

            if (props.freezeDefault != null) {
                this.setFreezeDefault(props.freezeDefault);
            }

            if (props.autoRenewAccountId != null) {
                this.setAutoRenewAccountId(props.autoRenewAccountId);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.tokenMemo != null) {
                this.setTokenMemo(props.tokenMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.ITokenCreateTransactionBody} */ (body.tokenCreation);

            return Transaction._fromProtobufTransactions(
                new TokenCreateTransaction({
                    tokenName: create.name != null ? create.name : undefined,
                    tokenSymbol: create.symbol != null ? create.symbol : undefined,
                    decimals: create.decimals != null ? create.decimals : undefined,
                    initialSupply:
                        create.initialSupply != null
                            ? create.initialSupply
                            : undefined,
                    treasuryAccountId:
                        create.treasury != null
                            ? AccountId._fromProtobuf(create.treasury)
                            : undefined,
                    adminKey:
                        create.adminKey != null
                            ? keyFromProtobuf(create.adminKey)
                            : undefined,
                    kycKey:
                        create.kycKey != null
                            ? keyFromProtobuf(create.kycKey)
                            : undefined,
                    freezeKey:
                        create.freezeKey != null
                            ? keyFromProtobuf(create.freezeKey)
                            : undefined,
                    wipeKey:
                        create.wipeKey != null
                            ? keyFromProtobuf(create.wipeKey)
                            : undefined,
                    supplyKey:
                        create.supplyKey != null
                            ? keyFromProtobuf(create.supplyKey)
                            : undefined,
                    freezeDefault:
                        create.freezeDefault != null
                            ? create.freezeDefault
                            : undefined,
                    autoRenewAccountId:
                        create.autoRenewAccount != null
                            ? AccountId._fromProtobuf(create.autoRenewAccount)
                            : undefined,
                    expirationTime:
                        create.expiry != null
                            ? Timestamp._fromProtobuf(create.expiry)
                            : undefined,
                    autoRenewPeriod:
                        create.autoRenewPeriod != null
                            ? Duration._fromProtobuf(create.autoRenewPeriod)
                            : undefined,
                    tokenMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?string}
         */
        get tokenName() {
            return this._tokenName;
        }

        /**
         * @param {string} name
         * @returns {this}
         */
        setTokenName(name) {
            this._requireNotFrozen();
            this._tokenName = name;

            return this;
        }

        /**
         * @returns {?string}
         */
        get tokenSymbol() {
            return this._tokenSymbol;
        }

        /**
         * @param {string} symbol
         * @returns {this}
         */
        setTokenSymbol(symbol) {
            this._requireNotFrozen();
            this._tokenSymbol = symbol;

            return this;
        }

        /**
         * @returns {?Long}
         */
        get decimals() {
            return this._decimals;
        }

        /**
         * @param {Long | number} decimals
         * @returns {this}
         */
        setDecimals(decimals) {
            this._requireNotFrozen();
            this._decimals =
                decimals instanceof long ? decimals : long.fromValue(decimals);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get initialSupply() {
            return this._initialSupply;
        }

        /**
         * @param {Long | number} initialSupply
         * @returns {this}
         */
        setInitialSupply(initialSupply) {
            this._requireNotFrozen();
            this._initialSupply =
                initialSupply instanceof long
                    ? initialSupply
                    : long.fromValue(initialSupply);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get treasuryAccountId() {
            return this._treasuryAccountId;
        }

        /**
         * @param {AccountId | string} id
         * @returns {this}
         */
        setTreasuryAccountId(id) {
            this._requireNotFrozen();
            this._treasuryAccountId =
                id instanceof AccountId ? id : AccountId.fromString(id);

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setAdminKey(key) {
            this._requireNotFrozen();
            this._adminKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get kycKey() {
            return this._kycKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setKycKey(key) {
            this._requireNotFrozen();
            this._kycKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get freezeKey() {
            return this._freezeKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setFreezeKey(key) {
            this._requireNotFrozen();
            this._freezeKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get wipeKey() {
            return this._wipeKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setWipeKey(key) {
            this._requireNotFrozen();
            this._wipeKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get supplyKey() {
            return this._supplyKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setSupplyKey(key) {
            this._requireNotFrozen();
            this._supplyKey = key;

            return this;
        }

        /**
         * @returns {?boolean}
         */
        get freezeDefault() {
            return this._freezeDefault;
        }

        /**
         * @param {boolean} freeze
         * @returns {this}
         */
        setFreezeDefault(freeze) {
            this._requireNotFrozen();
            this._freezeDefault = freeze;

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * @param {Timestamp | Date} time
         * @returns {this}
         */
        setExpirationTime(time) {
            this._requireNotFrozen();
            this._autoRenewPeriod = null;
            this._expirationTime =
                time instanceof Timestamp ? time : Timestamp.fromDate(time);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get autoRenewAccountId() {
            return this._autoRenewAccountId;
        }

        /**
         * @param {AccountId | string} id
         * @returns {this}
         */
        setAutoRenewAccountId(id) {
            this._requireNotFrozen();
            this._autoRenewAccountId =
                id instanceof AccountId ? id : AccountId.fromString(id);

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * Set the auto renew period for this token.
         *
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?string}
         */
        get tokenMemo() {
            return this._tokenMemo;
        }

        /**
         * @param {string} memo
         * @returns {this}
         */
        setTokenMemo(memo) {
            this._requireNotFrozen();
            this._tokenMemo = memo;

            return this;
        }

        /**
         * @param {?import("../client/Client.js").default<Channel, *>} client
         * @returns {this}
         */
        freezeWith(client) {
            if (
                this._autoRenewPeriod != null &&
                client != null &&
                client.operatorAccountId
            ) {
                this._autoRenewAccountId = client.operatorAccountId;
            }

            return super.freezeWith(client);
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.createToken(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenCreation";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenCreateTransactionBody}
         */
        _makeTransactionData() {
            return {
                name: this._tokenName,
                symbol: this._tokenSymbol,
                decimals: this._decimals != null ? this._decimals.toInt() : null,
                initialSupply: this._initialSupply,
                treasury:
                    this._treasuryAccountId != null
                        ? this._treasuryAccountId._toProtobuf()
                        : null,
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                kycKey: this._kycKey != null ? keyToProtobuf(this._kycKey) : null,
                freezeKey:
                    this._freezeKey != null ? keyToProtobuf(this._freezeKey) : null,
                wipeKey:
                    this._wipeKey != null ? keyToProtobuf(this._wipeKey) : null,
                supplyKey:
                    this._supplyKey != null ? keyToProtobuf(this._supplyKey) : null,
                freezeDefault: this._freezeDefault,
                autoRenewAccount:
                    this._autoRenewAccountId != null
                        ? this._autoRenewAccountId._toProtobuf()
                        : null,
                expiry:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
                autoRenewPeriod:
                    this._autoRenewPeriod != null
                        ? this._autoRenewPeriod._toProtobuf()
                        : null,
                memo: this._tokenMemo,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenCreation",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenCreateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenDeleteTransactionBody} proto.ITokenDeleteTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Delete a new Hedera™ crypto-currency token.
     */
    class TokenDeleteTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const deleteToken = /** @type {proto.ITokenDeleteTransactionBody} */ (body.tokenDeletion);

            return Transaction._fromProtobufTransactions(
                new TokenDeleteTransaction({
                    tokenId:
                        deleteToken.token != null
                            ? TokenId._fromProtobuf(deleteToken.token)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.deleteToken(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenDeletion";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenDeleteTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenDeletion",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenDeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenDissociateTransactionBody} proto.ITokenDissociateTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Dissociate a new Hedera™ crypto-currency token.
     */
    class TokenDissociateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {(TokenId | string)[]} [props.tokenIds]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId[]}
             */
            this._tokenIds = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            this.setMaxTransactionFee(new Hbar(5));

            if (props.tokenIds != null) {
                this.setTokenIds(props.tokenIds);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenDissociateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const dissociateToken = /** @type {proto.ITokenDissociateTransactionBody} */ (body.tokenDissociate);

            return Transaction._fromProtobufTransactions(
                new TokenDissociateTransaction({
                    tokenIds:
                        dissociateToken.tokens != null
                            ? dissociateToken.tokens.map((token) =>
                                  TokenId._fromProtobuf(token)
                              )
                            : undefined,
                    accountId:
                        dissociateToken.account != null
                            ? AccountId._fromProtobuf(dissociateToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId[]}
         */
        get tokenIds() {
            return this._tokenIds;
        }

        /**
         * @param {(TokenId | string)[]} tokenIds
         * @returns {this}
         */
        setTokenIds(tokenIds) {
            this._requireNotFrozen();
            this._tokenIds = tokenIds.map((tokenId) =>
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId)
            );

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.dissociateTokens(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenDissociate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenDissociateTransactionBody}
         */
        _makeTransactionData() {
            return {
                tokens:
                    this._tokenIds != null
                        ? this._tokenIds.map((tokenId) => tokenId._toProtobuf())
                        : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenDissociate",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenDissociateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenFreezeAccountTransactionBody} proto.ITokenFreezeAccountTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Freeze a new Hedera™ crypto-currency token.
     */
    class TokenFreezeTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenFreezeTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const freezeToken = /** @type {proto.ITokenFreezeAccountTransactionBody} */ (body.tokenFreeze);

            return Transaction._fromProtobufTransactions(
                new TokenFreezeTransaction({
                    tokenId:
                        freezeToken.token != null
                            ? TokenId._fromProtobuf(freezeToken.token)
                            : undefined,
                    accountId:
                        freezeToken.account != null
                            ? AccountId._fromProtobuf(freezeToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.freezeTokenAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenFreeze";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenFreezeAccountTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenFreeze",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenFreezeTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenGrantKycTransactionBody} proto.ITokenGrantKycTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * GrantKyc a new Hedera™ crypto-currency token.
     */
    class TokenGrantKycTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenGrantKycTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const grantKycToken = /** @type {proto.ITokenGrantKycTransactionBody} */ (body.tokenGrantKyc);

            return Transaction._fromProtobufTransactions(
                new TokenGrantKycTransaction({
                    tokenId:
                        grantKycToken.token != null
                            ? TokenId._fromProtobuf(grantKycToken.token)
                            : undefined,
                    accountId:
                        grantKycToken.account != null
                            ? AccountId._fromProtobuf(grantKycToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.grantKycToTokenAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenGrantKyc";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenGrantKycTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenGrantKyc",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenGrantKycTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").TokenFreezeStatus} proto.TokenFreezeStatus
     * @typedef {import("@hashgraph/proto").TokenKycStatus} proto.TokenKycStatus
     * @typedef {import("@hashgraph/proto").ITokenInfo} proto.ITokenInfo
     * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IKey} proto.IKey
     * @typedef {import("@hashgraph/proto").IDuration} proto.IDuration
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     */

    /**
     * Response when the client sends the node TokenGetInfoQuery.
     */
    class TokenInfo {
        /**
         * @private
         * @param {object} props
         * @param {TokenId} props.tokenId;
         * @param {string} props.name;
         * @param {string} props.symbol;
         * @param {number} props.decimals;
         * @param {Long} props.totalSupply;
         * @param {AccountId | null} props.treasuryAccountId;
         * @param {Key | null} props.adminKey;
         * @param {Key | null} props.kycKey;
         * @param {Key | null} props.freezeKey;
         * @param {Key | null} props.wipeKey;
         * @param {Key | null} props.supplyKey;
         * @param {boolean | null} props.defaultFreezeStatus;
         * @param {boolean | null} props.defaultKycStatus;
         * @param {boolean} props.isDeleted;
         * @param {AccountId | null} props.autoRenewAccountId;
         * @param {Duration | null} props.autoRenewPeriod;
         * @param {Timestamp | null} props.expirationTime;
         * @param {string} props.tokenMemo;
         */
        constructor(props) {
            /**
             * ID of the token instance
             *
             * @readonly
             */
            this.tokenId = props.tokenId;

            /**
             * The name of the token. It is a string of ASCII only characters
             *
             * @readonly
             */
            this.name = props.name;

            /**
             * The symbol of the token. It is a UTF-8 capitalized alphabetical string
             *
             * @readonly
             */
            this.symbol = props.symbol;

            /**
             * The number of decimal places a token is divisible by
             *
             * @readonly
             */
            this.decimals = props.decimals;

            /**
             * The total supply of tokens that are currently in circulation
             *
             * @readonly
             */
            this.totalSupply = props.totalSupply;

            /**
             * The ID of the account which is set as treasuryAccountId
             *
             * @readonly
             */
            this.treasuryAccountId = props.treasuryAccountId;

            /**
             * The key which can perform update/delete operations on the token. If empty, the token can be perceived as
             * immutable (not being able to be updated/deleted)
             *
             * @readonly
             */
            this.adminKey = props.adminKey;

            /**
             * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,
             * and KYC grant or revoke operations are not possible.
             *
             * @readonly
             */
            this.kycKey = props.kycKey;

            /**
             * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible
             *
             * @readonly
             */
            this.freezeKey = props.freezeKey;

            /**
             * The key which can wipe token balance of an account. If empty, wipe is not possible
             *
             * @readonly
             */
            this.wipeKey = props.wipeKey;

            /**
             * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations
             *
             * @readonly
             */
            this.supplyKey = props.supplyKey;

            /**
             * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.
             * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and
             * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false
             *      FreezeNotApplicable = null;
             *      Frozen = true;
             *      Unfrozen = false;
             *
             * @readonly
             */
            this.defaultFreezeStatus = props.defaultFreezeStatus;

            /**
             * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable
             * is returned if KYC key is not set, otherwise Revoked
             *      KycNotApplicable = null;
             *      Granted = true;
             *      Revoked = false;
             *
             * @readonly
             */
            this.defaultKycStatus = props.defaultKycStatus;

            /**
             * Specifies whether the token was deleted or not
             *
             * @readonly
             */
            this.isDeleted = props.isDeleted;

            /**
             * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval
             *
             * @readonly
             */
            this.autoRenewAccountId = props.autoRenewAccountId;

            /**
             * The interval at which the auto-renew account will be charged to extend the token's expiry
             *
             * @readonly
             */
            this.autoRenewPeriod = props.autoRenewPeriod;

            /**
             * The epoch second at which the token expire: will; if an auto-renew account and period are specified,
             * this is coerced to the current epoch second plus the autoRenewPeriod
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            this.tokenMemo = props.tokenMemo;
        }

        /**
         * @internal
         * @param {proto.ITokenInfo} info
         * @returns {TokenInfo}
         */
        static _fromProtobuf(info) {
            const defaultFreezeStatus = /** @type {proto.TokenFreezeStatus} */ (info.defaultFreezeStatus);
            const defaultKycStatus = /** @type {proto.TokenKycStatus} */ (info.defaultKycStatus);

            const autoRenewAccountId =
                info.autoRenewAccount != null
                    ? AccountId._fromProtobuf(info.autoRenewAccount)
                    : new AccountId(0);

            return new TokenInfo({
                tokenId: TokenId._fromProtobuf(
                    /** @type {proto.ITokenID} */ (info.tokenId)
                ),
                name: /** @type {string} */ (info.name),
                symbol: /** @type {string} */ (info.symbol),
                decimals: /** @type {number} */ (info.decimals),
                totalSupply: /** @type {Long} */ (info.totalSupply),
                treasuryAccountId:
                    info.treasury != null
                        ? AccountId._fromProtobuf(
                              /** @type {proto.IAccountID} */ (info.treasury)
                          )
                        : null,
                adminKey:
                    info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,
                kycKey: info.kycKey != null ? keyFromProtobuf(info.kycKey) : null,
                freezeKey:
                    info.freezeKey != null ? keyFromProtobuf(info.freezeKey) : null,
                wipeKey:
                    info.wipeKey != null ? keyFromProtobuf(info.wipeKey) : null,
                supplyKey:
                    info.supplyKey != null ? keyFromProtobuf(info.supplyKey) : null,
                defaultFreezeStatus:
                    defaultFreezeStatus === 0 ? null : defaultFreezeStatus == 1,
                defaultKycStatus:
                    defaultKycStatus === 0 ? null : defaultKycStatus == 1,
                isDeleted: /** @type {boolean} */ (info.deleted),
                autoRenewAccountId: !(
                    autoRenewAccountId.shard.toInt() == 0 &&
                    autoRenewAccountId.realm.toInt() == 0 &&
                    autoRenewAccountId.num.toInt() == 0
                )
                    ? autoRenewAccountId
                    : null,
                autoRenewPeriod:
                    info.autoRenewPeriod != null
                        ? Duration._fromProtobuf(
                              /** @type {proto.IDuration} */ (info.autoRenewPeriod)
                          )
                        : null,
                expirationTime:
                    info.expiry != null
                        ? Timestamp._fromProtobuf(
                              /** @type {proto.ITimestamp} */ (info.expiry)
                          )
                        : null,
                tokenMemo: info.memo != null ? info.memo : "",
            });
        }

        /**
         * @returns {proto.ITokenInfo}
         */
        _toProtobuf() {
            return {
                tokenId: this.tokenId._toProtobuf(),
                name: this.name,
                symbol: this.symbol,
                decimals: this.decimals,
                totalSupply: this.totalSupply,
                treasury:
                    this.treasuryAccountId != null
                        ? this.treasuryAccountId._toProtobuf()
                        : null,
                adminKey:
                    this.adminKey != null ? keyToProtobuf(this.adminKey) : null,
                kycKey: this.kycKey != null ? keyToProtobuf(this.kycKey) : null,
                freezeKey:
                    this.freezeKey != null ? keyToProtobuf(this.freezeKey) : null,
                wipeKey: this.wipeKey != null ? keyToProtobuf(this.wipeKey) : null,
                supplyKey:
                    this.supplyKey != null ? keyToProtobuf(this.supplyKey) : null,
                defaultFreezeStatus:
                    this.defaultFreezeStatus == null
                        ? 0
                        : this.defaultFreezeStatus
                        ? 1
                        : 2,
                defaultKycStatus:
                    this.defaultKycStatus == null
                        ? 0
                        : this.defaultKycStatus
                        ? 1
                        : 2,
                deleted: this.isDeleted,
                autoRenewAccount:
                    this.autoRenewAccountId != null
                        ? this.autoRenewAccountId._toProtobuf()
                        : undefined,
                autoRenewPeriod:
                    this.autoRenewPeriod != null
                        ? this.autoRenewPeriod._toProtobuf()
                        : null,
                expiry:
                    this.expirationTime != null
                        ? this.expirationTime._toProtobuf()
                        : null,
                memo: this.tokenMemo,
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").ITokenInfo} proto.ITokenInfo
     * @typedef {import("@hashgraph/proto").ITokenGetInfoQuery} proto.ITokenGetInfoQuery
     * @typedef {import("@hashgraph/proto").ITokenGetInfoResponse} proto.ITokenGetInfoResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @augments {Query<TokenInfo>}
     */
    class TokenInfoQuery extends Query {
        /**
         * @param {object} properties
         * @param {TokenId | string} [properties.tokenId]
         */
        constructor(properties = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;
            if (properties.tokenId != null) {
                this.setTokenId(properties.tokenId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {TokenInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.ITokenGetInfoQuery} */ (query.tokenGetInfo);

            return new TokenInfoQuery({
                tokenId:
                    info.token != null
                        ? TokenId._fromProtobuf(info.token)
                        : undefined,
            });
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * Set the token ID for which the info is being requested.
         *
         * @param {TokenId | string} tokenId
         * @returns {TokenInfoQuery}
         */
        setTokenId(tokenId) {
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.token.getTokenInfo(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const tokenGetInfo = /** @type {proto.ITokenGetInfoResponse} */ (response.tokenGetInfo);
            return /** @type {proto.IResponseHeader} */ (tokenGetInfo.header);
        }

        /**
         * @override
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {Promise<TokenInfo>}
         */
        _mapResponse(response) {
            const info = /** @type {proto.ITokenGetInfoResponse} */ (response.tokenGetInfo);

            return Promise.resolve(
                TokenInfo._fromProtobuf(
                    /** @type {proto.ITokenInfo} */ (info.tokenInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                tokenGetInfo: {
                    header,
                    token:
                        this._tokenId != null ? this._tokenId._toProtobuf() : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("tokenGetInfo", TokenInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenMintTransactionBody} proto.ITokenMintTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Mint a new Hedera™ crypto-currency token.
     */
    class TokenMintTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {Long | number} [props.amount]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?Long}
             */
            this._amount = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.amount != null) {
                this.setAmount(props.amount);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenMintTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const mintToken = /** @type {proto.ITokenMintTransactionBody} */ (body.tokenCreation);

            return Transaction._fromProtobufTransactions(
                new TokenMintTransaction({
                    tokenId:
                        mintToken.token != null
                            ? TokenId._fromProtobuf(mintToken.token)
                            : undefined,
                    amount: mintToken.amount != null ? mintToken.amount : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get amount() {
            return this._amount;
        }

        /**
         * @param {Long | number} amount
         * @returns {this}
         */
        setAmount(amount) {
            this._requireNotFrozen();
            this._amount = amount instanceof long ? amount : long.fromValue(amount);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.mintToken(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenMint";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenMintTransactionBody}
         */
        _makeTransactionData() {
            return {
                amount: this._amount,
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenMint",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenMintTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenRevokeKycTransactionBody} proto.ITokenRevokeKycTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * RevokeKyc a new Hedera™ crypto-currency token.
     */
    class TokenRevokeKycTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenRevokeKycTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const revokeKycToken = /** @type {proto.ITokenRevokeKycTransactionBody} */ (body.tokenRevokeKyc);

            return Transaction._fromProtobufTransactions(
                new TokenRevokeKycTransaction({
                    tokenId:
                        revokeKycToken.token != null
                            ? TokenId._fromProtobuf(revokeKycToken.token)
                            : undefined,
                    accountId:
                        revokeKycToken.account != null
                            ? AccountId._fromProtobuf(revokeKycToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.revokeKycFromTokenAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenRevokeKyc";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenRevokeKycTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenRevokeKyc",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenRevokeKycTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenUnfreezeAccountTransactionBody} proto.ITokenUnfreezeAccountTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Unfreeze a new Hedera™ crypto-currency token.
     */
    class TokenUnfreezeTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {AccountId | string} [props.accountId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenUnfreezeTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const unfreezeToken = /** @type {proto.ITokenUnfreezeAccountTransactionBody} */ (body.tokenUnfreeze);

            return Transaction._fromProtobufTransactions(
                new TokenUnfreezeTransaction({
                    tokenId:
                        unfreezeToken.token != null
                            ? TokenId._fromProtobuf(unfreezeToken.token)
                            : undefined,
                    accountId:
                        unfreezeToken.account != null
                            ? AccountId._fromProtobuf(unfreezeToken.account)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.unfreezeTokenAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenUnfreeze";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenUnfreezeAccountTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenUnfreeze",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenUnfreezeTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenUpdateTransactionBody} proto.ITokenUpdateTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("bignumber.js").default} BigNumber
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Update a new Hedera™ crypto-currency token.
     */
    class TokenUpdateTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {string} [props.tokenName]
         * @param {string} [props.tokenSymbol]
         * @param {AccountId | string} [props.treasuryAccountId]
         * @param {Key} [props.adminKey]
         * @param {Key} [props.kycKey]
         * @param {Key} [props.freezeKey]
         * @param {Key} [props.wipeKey]
         * @param {Key} [props.supplyKey]
         * @param {AccountId | string} [props.autoRenewAccountId]
         * @param {Timestamp | Date} [props.expirationTime]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {string} [props.tokenMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?string}
             */
            this._tokenName = null;

            /**
             * @private
             * @type {?string}
             */
            this._tokenSymbol = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._treasuryAccountId = null;

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._kycKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._freezeKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._wipeKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._supplyKey = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._autoRenewAccountId = null;

            /**
             * @private
             * @type {?Timestamp}
             */
            this._expirationTime = null;

            /**
             * @private
             * @type {?Duration}
             */
            this._autoRenewPeriod = null;

            /**
             * @private
             * @type {?string}
             */
            this._tokenMemo = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.tokenName != null) {
                this.setTokenName(props.tokenName);
            }

            if (props.tokenSymbol != null) {
                this.setTokenSymbol(props.tokenSymbol);
            }

            if (props.treasuryAccountId != null) {
                this.setTreasuryAccountId(props.treasuryAccountId);
            }

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.kycKey != null) {
                this.setKycKey(props.kycKey);
            }

            if (props.freezeKey != null) {
                this.setFreezeKey(props.freezeKey);
            }

            if (props.wipeKey != null) {
                this.setWipeKey(props.wipeKey);
            }

            if (props.supplyKey != null) {
                this.setsupplyKey(props.supplyKey);
            }

            if (props.autoRenewAccountId != null) {
                this.setAutoRenewAccountId(props.autoRenewAccountId);
            }

            if (props.expirationTime != null) {
                this.setExpirationTime(props.expirationTime);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.tokenMemo != null) {
                this.setTokenMemo(props.tokenMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenUpdateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const update = /** @type {proto.ITokenUpdateTransactionBody} */ (body.tokenUpdate);

            return Transaction._fromProtobufTransactions(
                new TokenUpdateTransaction({
                    tokenId:
                        update.token != null
                            ? TokenId._fromProtobuf(update.token)
                            : undefined,
                    tokenName: update.name != null ? update.name : undefined,
                    tokenSymbol: update.symbol != null ? update.symbol : undefined,
                    treasuryAccountId:
                        update.treasury != null
                            ? AccountId._fromProtobuf(update.treasury)
                            : undefined,
                    adminKey:
                        update.adminKey != null
                            ? keyFromProtobuf(update.adminKey)
                            : undefined,
                    kycKey:
                        update.kycKey != null
                            ? keyFromProtobuf(update.kycKey)
                            : undefined,
                    freezeKey:
                        update.freezeKey != null
                            ? keyFromProtobuf(update.freezeKey)
                            : undefined,
                    wipeKey:
                        update.wipeKey != null
                            ? keyFromProtobuf(update.wipeKey)
                            : undefined,
                    supplyKey:
                        update.supplyKey != null
                            ? keyFromProtobuf(update.supplyKey)
                            : undefined,
                    autoRenewAccountId:
                        update.autoRenewAccount != null
                            ? AccountId._fromProtobuf(update.autoRenewAccount)
                            : undefined,
                    expirationTime:
                        update.expiry != null
                            ? Timestamp._fromProtobuf(update.expiry)
                            : undefined,
                    autoRenewPeriod:
                        update.autoRenewPeriod != null
                            ? Duration._fromProtobuf(update.autoRenewPeriod)
                            : undefined,
                    tokenMemo:
                        update.memo != null
                            ? update.memo.value != null
                                ? update.memo.value
                                : undefined
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?string}
         */
        get tokenName() {
            return this._tokenName;
        }

        /**
         * @param {string} name
         * @returns {this}
         */
        setTokenName(name) {
            this._requireNotFrozen();
            this._tokenName = name;

            return this;
        }

        /**
         * @returns {?string}
         */
        get tokenSymbol() {
            return this._tokenSymbol;
        }

        /**
         * @param {string} symbol
         * @returns {this}
         */
        setTokenSymbol(symbol) {
            this._requireNotFrozen();
            this._tokenSymbol = symbol;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get treasuryAccountId() {
            return this._treasuryAccountId;
        }

        /**
         * @param {AccountId | string} id
         * @returns {this}
         */
        setTreasuryAccountId(id) {
            this._requireNotFrozen();
            this._treasuryAccountId =
                id instanceof AccountId ? id : AccountId.fromString(id);

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setAdminKey(key) {
            this._requireNotFrozen();
            this._adminKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get kycKey() {
            return this._kycKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setKycKey(key) {
            this._requireNotFrozen();
            this._kycKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get freezeKey() {
            return this._freezeKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setFreezeKey(key) {
            this._requireNotFrozen();
            this._freezeKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get wipeKey() {
            return this._wipeKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setWipeKey(key) {
            this._requireNotFrozen();
            this._wipeKey = key;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get supplyKey() {
            return this._supplyKey;
        }

        /**
         * @param {Key} key
         * @returns {this}
         */
        setsupplyKey(key) {
            this._requireNotFrozen();
            this._supplyKey = key;

            return this;
        }

        /**
         * @returns {?Timestamp}
         */
        get expirationTime() {
            return this._expirationTime;
        }

        /**
         * @param {Timestamp | Date} time
         * @returns {this}
         */
        setExpirationTime(time) {
            this._requireNotFrozen();
            this._expirationTime =
                time instanceof Timestamp ? time : Timestamp.fromDate(time);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get autoRenewAccountId() {
            return this._autoRenewAccountId;
        }

        /**
         * @param {AccountId | string} id
         * @returns {this}
         */
        setAutoRenewAccountId(id) {
            this._requireNotFrozen();
            this._autoRenewAccountId =
                id instanceof AccountId ? id : AccountId.fromString(id);

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * Set the auto renew period for this token.
         *
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @returns {?string}
         */
        get tokenMemo() {
            return this._tokenMemo;
        }

        /**
         * @param {string} tokenMemo
         * @returns {this}
         */
        setTokenMemo(tokenMemo) {
            this._requireNotFrozen();
            this._tokenMemo = tokenMemo;

            return this;
        }

        /**
         * @returns {this}
         */
        clearTokenMemo() {
            this._requireNotFrozen();
            this._tokenMemo = null;

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.updateToken(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenUpdate";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenUpdateTransactionBody}
         */
        _makeTransactionData() {
            return {
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                name: this.tokenName,
                symbol: this.tokenSymbol,
                treasury:
                    this._treasuryAccountId != null
                        ? this._treasuryAccountId._toProtobuf()
                        : null,
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                kycKey: this._kycKey != null ? keyToProtobuf(this._kycKey) : null,
                freezeKey:
                    this._freezeKey != null ? keyToProtobuf(this._freezeKey) : null,
                wipeKey:
                    this._wipeKey != null ? keyToProtobuf(this._wipeKey) : null,
                supplyKey:
                    this._supplyKey != null ? keyToProtobuf(this._supplyKey) : null,
                autoRenewAccount:
                    this._autoRenewAccountId != null
                        ? this._autoRenewAccountId._toProtobuf()
                        : null,
                expiry:
                    this._expirationTime != null
                        ? this._expirationTime._toProtobuf()
                        : null,
                autoRenewPeriod:
                    this._autoRenewPeriod != null
                        ? this._autoRenewPeriod._toProtobuf()
                        : null,
                memo:
                    this._tokenMemo != null
                        ? {
                              value: this._tokenMemo,
                          }
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenUpdate",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenUpdateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ITokenWipeAccountTransactionBody} proto.ITokenWipeAccountTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Wipe a new Hedera™ crypto-currency token.
     */
    class TokenWipeTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {TokenId | string} [props.tokenId]
         * @param {AccountId | string} [props.accountId]
         * @param {Long | number} [props.amount]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TokenId}
             */
            this._tokenId = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._accountId = null;

            /**
             * @private
             * @type {?Long}
             */
            this._amount = null;

            if (props.tokenId != null) {
                this.setTokenId(props.tokenId);
            }

            if (props.accountId != null) {
                this.setAccountId(props.accountId);
            }

            if (props.amount != null) {
                this.setAmount(props.amount);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TokenWipeTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const wipeToken = /** @type {proto.ITokenWipeAccountTransactionBody} */ (body.tokenWipe);

            return Transaction._fromProtobufTransactions(
                new TokenWipeTransaction({
                    tokenId:
                        wipeToken.token != null
                            ? TokenId._fromProtobuf(wipeToken.token)
                            : undefined,
                    accountId:
                        wipeToken.account != null
                            ? AccountId._fromProtobuf(wipeToken.account)
                            : undefined,
                    amount: wipeToken.amount != null ? wipeToken.amount : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TokenId}
         */
        get tokenId() {
            return this._tokenId;
        }

        /**
         * @param {TokenId | string} tokenId
         * @returns {this}
         */
        setTokenId(tokenId) {
            this._requireNotFrozen();
            this._tokenId =
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get accountId() {
            return this._accountId;
        }

        /**
         * @param {AccountId | string} accountId
         * @returns {this}
         */
        setAccountId(accountId) {
            this._requireNotFrozen();
            this._accountId =
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId);

            return this;
        }

        /**
         * @returns {?Long}
         */
        get amount() {
            return this._amount;
        }

        /**
         * @param {Long | number} amount
         * @returns {this}
         */
        setAmount(amount) {
            this._requireNotFrozen();
            this._amount = amount instanceof long ? amount : long.fromValue(amount);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.token.wipeTokenAccount(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "tokenWipe";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ITokenWipeAccountTransactionBody}
         */
        _makeTransactionData() {
            return {
                amount: this._amount,
                token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
                account:
                    this._accountId != null ? this._accountId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "tokenWipe",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TokenWipeTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IConsensusCreateTopicTransactionBody} proto.IConsensusCreateTopicTransactionBody
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Create a topic to be used for consensus.
     */
    class TopicCreateTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {Key} [props.adminKey]
         * @param {Key} [props.submitKey]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {AccountId | string} [props.autoRenewAccountId]
         * @param {string} [props.topicMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            /**
             * @private
             * @type {?Key}
             */
            this._submitKey = null;

            /**
             * @private
             * @type {?AccountId}
             */
            this._autoRenewAccountId = null;

            /**
             * @private
             * @type {Duration}
             */
            this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);

            /**
             * @private
             * @type {?string}
             */
            this._topicMemo = null;

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            if (props.submitKey != null) {
                this.setSubmitKey(props.submitKey);
            }

            if (props.autoRenewAccountId != null) {
                this.setAutoRenewAccountId(props.autoRenewAccountId);
            }

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }

            if (props.topicMemo != null) {
                this.setTopicMemo(props.topicMemo);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TopicCreateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const create = /** @type {proto.IConsensusCreateTopicTransactionBody} */ (body.consensusCreateTopic);

            return Transaction._fromProtobufTransactions(
                new TopicCreateTransaction({
                    adminKey:
                        create.adminKey != null
                            ? keyFromProtobuf(create.adminKey)
                            : undefined,
                    submitKey:
                        create.submitKey != null
                            ? keyFromProtobuf(create.submitKey)
                            : undefined,
                    autoRenewAccountId:
                        create.autoRenewAccount != null
                            ? AccountId._fromProtobuf(create.autoRenewAccount)
                            : undefined,
                    autoRenewPeriod:
                        create.autoRenewPeriod != null
                            ? create.autoRenewPeriod.seconds != null
                                ? create.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    topicMemo: create.memo != null ? create.memo : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?string}
         */
        get topicMemo() {
            return this._topicMemo;
        }

        /**
         * @param {string} topicMemo
         * @returns {this}
         */
        setTopicMemo(topicMemo) {
            this._requireNotFrozen();
            this._topicMemo = topicMemo;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} adminKey
         * @returns {this}
         */
        setAdminKey(adminKey) {
            this._requireNotFrozen();
            this._adminKey = adminKey;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get submitKey() {
            return this._submitKey;
        }

        /**
         * @param {Key} submitKey
         * @returns {this}
         */
        setSubmitKey(submitKey) {
            this._requireNotFrozen();
            this._submitKey = submitKey;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get autoRenewAccountId() {
            return this._autoRenewAccountId;
        }

        /**
         * @param {AccountId | string} autoRenewAccountId
         * @returns {this}
         */
        setAutoRenewAccountId(autoRenewAccountId) {
            this._requireNotFrozen();
            this._autoRenewAccountId =
                autoRenewAccountId instanceof AccountId
                    ? autoRenewAccountId
                    : AccountId.fromString(autoRenewAccountId);

            return this;
        }

        /**
         * @returns {Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * Set the auto renew period for this account.
         *
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {this}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.consensus.createTopic(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "consensusCreateTopic";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IConsensusCreateTopicTransactionBody}
         */
        _makeTransactionData() {
            return {
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                submitKey:
                    this._submitKey != null ? keyToProtobuf(this._submitKey) : null,
                autoRenewAccount:
                    this._autoRenewAccountId != null
                        ? this._autoRenewAccountId._toProtobuf()
                        : null,
                autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),
                memo: this._topicMemo,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "consensusCreateTopic",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TopicCreateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IConsensusDeleteTopicTransactionBody} proto.IConsensusDeleteTopicTransactionBody
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Delete a topic.
     *
     * No more transactions or queries on the topic will succeed.
     *
     * If an adminKey is set, this transaction must be signed by that key.
     * If there is no adminKey, this transaction will fail with Status#Unautorized.
     */
    class TopicDeleteTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {TopicId | string} [props.topicId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TopicId}
             */
            this._topicId = null;

            if (props.topicId != null) {
                this.setTopicId(props.topicId);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TopicDeleteTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const topicDelete = /** @type {proto.IConsensusDeleteTopicTransactionBody} */ (body.consensusDeleteTopic);

            return Transaction._fromProtobufTransactions(
                new TopicDeleteTransaction({
                    topicId:
                        topicDelete.topicID != null
                            ? TopicId._fromProtobuf(topicDelete.topicID)
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TopicId}
         */
        get topicId() {
            return this._topicId;
        }

        /**
         * Set the topic ID which is being deleted in this transaction.
         *
         * @param {TopicId | string} topicId
         * @returns {TopicDeleteTransaction}
         */
        setTopicId(topicId) {
            this._requireNotFrozen();
            this._topicId =
                topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.consensus.deleteTopic(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "consensusDeleteTopic";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IConsensusDeleteTopicTransactionBody}
         */
        _makeTransactionData() {
            return {
                topicID: this._topicId != null ? this._topicId._toProtobuf() : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "consensusDeleteTopic",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TopicDeleteTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IConsensusTopicInfo} proto.IConsensusTopicInfo
     * @typedef {import("@hashgraph/proto").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse
     * @typedef {import("@hashgraph/proto").ITopicID} proto.ITopicID
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     */

    /**
     * Current state of a topic.
     */
    class TopicInfo {
        /**
         * @private
         * @param {object} props
         * @param {TopicId} props.topicId
         * @param {string} props.topicMemo
         * @param {Uint8Array} props.runningHash
         * @param {Long} props.sequenceNumber
         * @param {?Timestamp} props.expirationTime
         * @param {?Key} props.adminKey
         * @param {?Key} props.submitKey
         * @param {?Duration} props.autoRenewPeriod
         * @param {?AccountId} props.autoRenewAccountId
         */
        constructor(props) {
            /**
             * The ID of the topic for which information is requested.
             *
             * @readonly
             */
            this.topicId = props.topicId;

            /**
             * Short publicly visible memo about the topic. No guarantee of uniqueness.
             *
             * @readonly
             */
            this.topicMemo = props.topicMemo;

            /**
             * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).
             *
             * @readonly
             */
            this.runningHash = props.runningHash;

            /**
             * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.
             *
             * @readonly
             */
            this.sequenceNumber = props.sequenceNumber;

            /**
             * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.
             *
             * @readonly
             */
            this.expirationTime = props.expirationTime;

            /**
             * Access control for update/delete of the topic. Null if there is no key.
             *
             * @readonly
             */
            this.adminKey = props.adminKey;

            /**
             * Access control for ConsensusService.submitMessage. Null if there is no key.
             *
             * @readonly
             */
            this.submitKey = props.submitKey;

            /**
             * @readonly
             */
            this.autoRenewPeriod = props.autoRenewPeriod;

            /**
             * @readonly
             */
            this.autoRenewAccountId = props.autoRenewAccountId;

            Object.freeze(this);
        }

        /**
         * @internal
         * @param {proto.IConsensusGetTopicInfoResponse} infoResponse
         * @returns {TopicInfo}
         */
        static _fromProtobuf(infoResponse) {
            const info = /** @type {proto.IConsensusTopicInfo} */ (infoResponse.topicInfo);

            return new TopicInfo({
                topicId: TopicId._fromProtobuf(
                    /** @type {proto.ITopicID} */ (infoResponse.topicID)
                ),
                topicMemo: info.memo != null ? info.memo : "",
                runningHash:
                    info.runningHash != null ? info.runningHash : new Uint8Array(),
                sequenceNumber:
                    info.sequenceNumber != null
                        ? info.sequenceNumber instanceof long
                            ? info.sequenceNumber
                            : long.fromValue(info.sequenceNumber)
                        : long.ZERO,
                expirationTime:
                    info.expirationTime != null
                        ? Timestamp._fromProtobuf(info.expirationTime)
                        : null,
                adminKey:
                    info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,
                submitKey:
                    info.submitKey != null ? keyFromProtobuf(info.submitKey) : null,
                autoRenewPeriod:
                    info.autoRenewPeriod != null
                        ? new Duration(
                              /** @type {Long} */ (info.autoRenewPeriod.seconds)
                          )
                        : null,
                autoRenewAccountId:
                    info.autoRenewAccount != null
                        ? AccountId._fromProtobuf(info.autoRenewAccount)
                        : null,
            });
        }

        /**
         * @internal
         * @returns {proto.IConsensusGetTopicInfoResponse}
         */
        _toProtobuf() {
            return {
                topicID: this.topicId._toProtobuf(),
                topicInfo: {
                    memo: this.topicMemo,
                    runningHash: this.runningHash,
                    sequenceNumber: this.sequenceNumber,
                    expirationTime:
                        this.expirationTime != null
                            ? this.expirationTime._toProtobuf()
                            : null,
                    adminKey:
                        this.adminKey != null ? keyToProtobuf(this.adminKey) : null,
                    submitKey:
                        this.submitKey != null
                            ? keyToProtobuf(this.submitKey)
                            : null,
                    autoRenewPeriod:
                        this.autoRenewPeriod != null
                            ? this.autoRenewPeriod._toProtobuf()
                            : null,
                    autoRenewAccount:
                        this.autoRenewAccountId != null
                            ? this.autoRenewAccountId._toProtobuf()
                            : null,
                },
            };
        }
    }

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
     * @typedef {import("@hashgraph/proto").IConsensusTopicQuery} proto.IConsensusTopicQuery
     * @typedef {import("@hashgraph/proto").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * Retrieve the latest state of a topic.
     *
     * @augments {Query<TopicInfo>}
     */
    class TopicInfoQuery extends Query {
        /**
         * @param {object} [props]
         * @param {TopicId | string} [props.topicId]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TopicId}
             */
            this._topicId = null;

            if (props.topicId != null) {
                this.setTopicId(props.topicId);
            }
        }

        /**
         * @internal
         * @param {proto.IQuery} query
         * @returns {TopicInfoQuery}
         */
        static _fromProtobuf(query) {
            const info = /** @type {proto.IConsensusTopicQuery} */ (query.consensusGetTopicInfo);

            return new TopicInfoQuery({
                topicId:
                    info.topicID != null
                        ? TopicId._fromProtobuf(info.topicID)
                        : undefined,
            });
        }

        /**
         * @returns {?TopicId}
         */
        get topicId() {
            return this._topicId;
        }

        /**
         * Set the topic ID for which the info is being requested.
         *
         * @param {TopicId | string} topicId
         * @returns {TopicInfoQuery}
         */
        setTopicId(topicId) {
            this._topicId =
                topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);

            return this;
        }

        /**
         * @override
         * @param {import("../client/Client.js").default<Channel, *>} client
         * @returns {Promise<Hbar>}
         */
        async getCost(client) {
            let cost = await super.getCost(client);

            if (cost.toTinybars().greaterThan(25)) {
                return cost;
            } else {
                return Hbar.fromTinybars(25);
            }
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return channel.consensus.getTopicInfo(request);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @returns {proto.IResponseHeader}
         */
        _mapResponseHeader(response) {
            const consensusGetTopicInfo = /** @type {proto.IConsensusGetTopicInfoResponse} */ (response.consensusGetTopicInfo);
            return /** @type {proto.IResponseHeader} */ (consensusGetTopicInfo.header);
        }

        /**
         * @protected
         * @override
         * @param {proto.IResponse} response
         * @returns {Promise<TopicInfo>}
         */
        _mapResponse(response) {
            return Promise.resolve(
                TopicInfo._fromProtobuf(
                    /** @type {proto.IConsensusGetTopicInfoResponse} */ (response.consensusGetTopicInfo)
                )
            );
        }

        /**
         * @override
         * @internal
         * @param {proto.IQueryHeader} header
         * @returns {proto.IQuery}
         */
        _onMakeRequest(header) {
            return {
                consensusGetTopicInfo: {
                    header,
                    topicID:
                        this._topicId != null ? this._topicId._toProtobuf() : null,
                },
            };
        }
    }

    // eslint-disable-next-line @typescript-eslint/unbound-method
    QUERY_REGISTRY.set("consensusGetTopicInfo", TopicInfoQuery._fromProtobuf);

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IConsensusSubmitMessageTransactionBody} proto.IConsensusSubmitMessageTransactionBody
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").IConsensusMessageChunkInfo} proto.IConsensusMessageChunkInfo
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../account/AccountId.js").default} AccountId
     * @typedef {import("../transaction/TransactionResponse.js").default} TransactionResponse
     * @typedef {import("../schedule/ScheduleCreateTransaction.js").default} ScheduleCreateTransaction
     */

    class TopicMessageSubmitTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {TopicId} [props.topicId]
         * @param {Uint8Array | string} [props.message]
         * @param {number} [props.maxChunks]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TopicId}
             */
            this._topicId = null;

            if (props.topicId != null) {
                this.setTopicId(props.topicId);
            }

            /**
             * @private
             * @type {?Uint8Array}
             */
            this._message = null;

            if (props.message != null) {
                this.setMessage(props.message);
            }

            /**
             * @private
             * @type {number}
             */
            this._maxChunks = 20;

            if (props.maxChunks != null) {
                this.setMaxChunks(props.maxChunks);
            }

            /** @type {proto.IConsensusMessageChunkInfo | null} */
            this._chunkInfo = null;
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TopicMessageSubmitTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const message = /** @type {proto.IConsensusSubmitMessageTransactionBody} */ (body.consensusSubmitMessage);

            return Transaction._fromProtobufTransactions(
                new TopicMessageSubmitTransaction({
                    topicId:
                        message.topicID != null
                            ? TopicId._fromProtobuf(message.topicID)
                            : undefined,
                    message: message.message != null ? message.message : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @param {TransactionId} transactionId
         * @returns {this}
         */
        setTransactionId(transactionId) {
            this._requireNotFrozen();

            if (
                transactionId.accountId == null ||
                transactionId.validStart == null
            ) {
                throw new Error(
                    "`TopicMessageSubmitTransaction` does not support `TransactionId` built from `nonce`"
                );
            }

            this._transactionIds = [transactionId];

            return this;
        }

        /**
         * @returns {?TopicId}
         */
        get topicId() {
            return this._topicId;
        }

        /**
         * @param {TopicId} topicId
         * @returns {this}
         */
        setTopicId(topicId) {
            this._requireNotFrozen();
            this._topicId = topicId;

            return this;
        }

        /**
         * @returns {?Uint8Array}
         */
        get message() {
            return this._message;
        }

        /**
         * @param {string | Uint8Array} message
         * @returns {this}
         */
        setMessage(message) {
            this._requireNotFrozen();
            this._message =
                typeof message === "string" ? encode(message) : message;

            return this;
        }

        /**
         * @returns {?number}
         */
        get maxChunks() {
            return this._maxChunks;
        }

        /**
         * @param {number} maxChunks
         * @returns {this}
         */
        setMaxChunks(maxChunks) {
            this._requireNotFrozen();
            this._maxChunks = maxChunks;
            return this;
        }

        /**
         * Freeze this transaction from further modification to prepare for
         * signing or serialization.
         *
         * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3
         * nodes to prepare this transaction for.
         *
         * @param {?import("../client/Client.js").default<Channel, *>} client
         * @returns {this}
         */
        freezeWith(client) {
            super.freezeWith(client);

            if (this._message == null) {
                return this;
            }

            const chunks = Math.floor(
                (this._message.length + (CHUNK_SIZE - 1)) / CHUNK_SIZE
            );

            if (chunks > this._maxChunks) {
                throw new Error(
                    `Message with size ${this._message.length} too long for ${this._maxChunks} chunks`
                );
            }

            const initialTransactionId = this.transactionId._toProtobuf();
            let nextTransactionId = this.transactionId;

            super._transactions = [];
            super._transactionIds = [];
            super._signedTransactions = [];
            super._nextTransactionIndex = 0;

            for (let chunk = 0; chunk < chunks; chunk++) {
                this._chunkInfo = {
                    initialTransactionID: initialTransactionId,
                    total: chunks,
                    number: chunk + 1,
                };

                this._transactionIds.push(nextTransactionId);

                for (const nodeAccountId of this._nodeIds) {
                    this._signedTransactions.push(
                        this._makeSignedTransaction(nodeAccountId)
                    );
                }

                nextTransactionId = new TransactionId(
                    /** @type {AccountId} */ (nextTransactionId.accountId),
                    new Timestamp(
                        /** @type {Timestamp} */ (nextTransactionId.validStart).seconds,
                        /** @type {Timestamp} */ (nextTransactionId.validStart).nanos.add(
                            1
                        )
                    )
                );

                super._nextTransactionIndex = this._nextTransactionIndex + 1;
            }

            this._chunkInfo = null;
            super._nextTransactionIndex = 0;

            return this;
        }

        /**
         * @returns {ScheduleCreateTransaction}
         */
        schedule() {
            this._requireNotFrozen();

            if (this._message != null && this._message.length > CHUNK_SIZE) {
                throw new Error(
                    `cannot scheduled \`TopicMessageSubmitTransaction\` with message over ${CHUNK_SIZE} bytes`
                );
            }

            return super.schedule();
        }

        /**
         * @param {import("../client/Client.js").default<*, *>} client
         * @returns {Promise<TransactionResponse>}
         */
        async execute(client) {
            return (await this.executeAll(client))[0];
        }

        /**
         * @param {import("../client/Client.js").default<*, *>} client
         * @returns {Promise<TransactionResponse[]>}
         */
        async executeAll(client) {
            if (!super._isFrozen()) {
                this.freezeWith(client);
            }

            // on execute, sign each transaction with the operator, if present
            // and we are signing a transaction that used the default transaction ID

            const transactionId = this.transactionId;
            const operatorAccountId = client.operatorAccountId;

            if (
                operatorAccountId != null &&
                operatorAccountId.equals(
                    /** @type {AccountId} */ (transactionId.accountId)
                )
            ) {
                await super.signWithOperator(client);
            }

            const responses = [];
            for (let i = 0; i < this._transactionIds.length; i++) {
                responses.push(await super.execute(client));
            }

            return responses;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.consensus.submitMessage(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "consensusSubmitMessage";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IConsensusSubmitMessageTransactionBody}
         */
        _makeTransactionData() {
            if (this._chunkInfo != null && this._message != null) {
                const num = /** @type {number} */ (this._chunkInfo.number);
                const startIndex = (num - 1) * CHUNK_SIZE;
                let endIndex = startIndex + CHUNK_SIZE;

                if (endIndex > this._message.length) {
                    endIndex = this._message.length;
                }

                return {
                    topicID:
                        this._topicId != null ? this._topicId._toProtobuf() : null,
                    message: this._message.slice(startIndex, endIndex),
                    chunkInfo: this._chunkInfo,
                };
            } else {
                return {
                    topicID:
                        this._topicId != null ? this._topicId._toProtobuf() : null,
                    message: this._message,
                };
            }
        }
    }

    TRANSACTION_REGISTRY.set(
        "consensusSubmitMessage",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TopicMessageSubmitTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IConsensusUpdateTopicTransactionBody} proto.IConsensusUpdateTopicTransactionBody
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     */

    /**
     * @typedef {import("@hashgraph/cryptography").Key} Key
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * Update a topic.
     *
     * If there is no adminKey, the only authorized update (available to anyone) is to extend the expirationTime.
     * Otherwise transaction must be signed by the adminKey.
     *
     * If an adminKey is updated, the transaction must be signed by the pre-update adminKey and post-update adminKey.
     *
     * If a new autoRenewAccount is specified (not just being removed), that account must also sign the transaction.
     */
    class TopicUpdateTransaction extends Transaction {
        /**
         * @param {object} props
         * @param {TopicId | string} [props.topicId]
         * @param {Key} [props.adminKey]
         * @param {Key} [props.submitKey]
         * @param {Duration | Long | number} [props.autoRenewPeriod]
         * @param {AccountId | string} [props.autoRenewAccountId]
         * @param {string} [props.topicMemo]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {?TopicId}
             */
            this._topicId = null;

            if (props.topicId != null) {
                this.setTopicId(props.topicId);
            }

            /**
             * @private
             * @type {?string}
             */
            this._topicMemo = null;

            if (props.topicMemo != null) {
                this.setTopicMemo(props.topicMemo);
            }

            /**
             * @private
             * @type {?Key}
             */
            this._submitKey = null;

            if (props.submitKey != null) {
                this.setSubmitKey(props.submitKey);
            }

            /**
             * @private
             * @type {?Key}
             */
            this._adminKey = null;

            if (props.adminKey != null) {
                this.setAdminKey(props.adminKey);
            }

            /**
             * @private
             * @type {?AccountId}
             */
            this._autoRenewAccountId = null;

            if (props.autoRenewAccountId != null) {
                this.setAutoRenewAccountId(props.autoRenewAccountId);
            }

            /**
             * @private
             * @type {?Duration}
             */
            this._autoRenewPeriod = null;

            if (props.autoRenewPeriod != null) {
                this.setAutoRenewPeriod(props.autoRenewPeriod);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TopicUpdateTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const update = /** @type {proto.IConsensusUpdateTopicTransactionBody} */ (body.consensusUpdateTopic);

            return Transaction._fromProtobufTransactions(
                new TopicUpdateTransaction({
                    topicId:
                        update.topicID != null
                            ? TopicId._fromProtobuf(update.topicID)
                            : undefined,
                    adminKey:
                        update.adminKey != null
                            ? keyFromProtobuf(update.adminKey)
                            : undefined,
                    submitKey:
                        update.submitKey != null
                            ? keyFromProtobuf(update.submitKey)
                            : undefined,
                    autoRenewAccountId:
                        update.autoRenewAccount != null
                            ? AccountId._fromProtobuf(update.autoRenewAccount)
                            : undefined,
                    autoRenewPeriod:
                        update.autoRenewPeriod != null
                            ? update.autoRenewPeriod.seconds != null
                                ? update.autoRenewPeriod.seconds
                                : undefined
                            : undefined,
                    topicMemo:
                        update.memo != null
                            ? update.memo.value != null
                                ? update.memo.value
                                : undefined
                            : undefined,
                }),
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {?TopicId}
         */
        get topicId() {
            return this._topicId;
        }

        /**
         * @param {TopicId | string} topicId
         * @returns {TopicUpdateTransaction}
         */
        setTopicId(topicId) {
            this._requireNotFrozen();
            this._topicId =
                topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);

            return this;
        }

        /**
         * @returns {TopicUpdateTransaction}
         */
        clearTopicId() {
            this._requireNotFrozen();
            this._topicId = null;

            return this;
        }

        /**
         * @returns {?string}
         */
        get topicMemo() {
            return this._topicMemo;
        }

        /**
         * @param {string} topicMemo
         * @returns {TopicUpdateTransaction}
         */
        setTopicMemo(topicMemo) {
            this._requireNotFrozen();
            this._topicMemo = topicMemo;

            return this;
        }

        /**
         * @returns {TopicUpdateTransaction}
         */
        clearTopicMemo() {
            this._requireNotFrozen();
            this._topicMemo = null;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get adminKey() {
            return this._adminKey;
        }

        /**
         * @param {Key} adminKey
         * @returns {TopicUpdateTransaction}
         */
        setAdminKey(adminKey) {
            this._requireNotFrozen();
            this._adminKey = adminKey;

            return this;
        }

        /**
         * @returns {TopicUpdateTransaction}
         */
        clearAdminKey() {
            this._requireNotFrozen();
            this._adminKey = null;

            return this;
        }

        /**
         * @returns {?Key}
         */
        get submitKey() {
            return this._submitKey;
        }

        /**
         * @param {Key} submitKey
         * @returns {TopicUpdateTransaction}
         */
        setSubmitKey(submitKey) {
            this._requireNotFrozen();
            this._submitKey = submitKey;

            return this;
        }

        /**
         * @returns {TopicUpdateTransaction}
         */
        clearSubmitKey() {
            this._requireNotFrozen();
            this._submitKey = null;

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get autoRenewAccountId() {
            return this._autoRenewAccountId;
        }

        /**
         * @param {AccountId | string} autoRenewAccountId
         * @returns {TopicUpdateTransaction}
         */
        setAutoRenewAccountId(autoRenewAccountId) {
            this._requireNotFrozen();
            this._autoRenewAccountId =
                autoRenewAccountId instanceof AccountId
                    ? autoRenewAccountId
                    : AccountId.fromString(autoRenewAccountId);

            return this;
        }

        /**
         * @returns {TopicUpdateTransaction}
         */
        clearAutoRenewAccountId() {
            this._requireNotFrozen();
            this._autoRenewAccountId = null;

            return this;
        }

        /**
         * @returns {?Duration}
         */
        get autoRenewPeriod() {
            return this._autoRenewPeriod;
        }

        /**
         * Set the auto renew period for this account.
         *
         * @param {Duration | Long | number} autoRenewPeriod
         * @returns {TopicUpdateTransaction}
         */
        setAutoRenewPeriod(autoRenewPeriod) {
            this._requireNotFrozen();
            this._autoRenewPeriod =
                autoRenewPeriod instanceof Duration
                    ? autoRenewPeriod
                    : new Duration(autoRenewPeriod);

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.consensus.updateTopic(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "consensusUpdateTopic";
        }

        /**
         * @override
         * @protected
         * @returns {proto.IConsensusUpdateTopicTransactionBody}
         */
        _makeTransactionData() {
            return {
                topicID: this._topicId != null ? this._topicId._toProtobuf() : null,
                adminKey:
                    this._adminKey != null ? keyToProtobuf(this._adminKey) : null,
                submitKey:
                    this._submitKey != null ? keyToProtobuf(this._submitKey) : null,
                memo:
                    this._topicMemo != null
                        ? {
                              value: this._topicMemo,
                          }
                        : null,
                autoRenewAccount:
                    this._autoRenewAccountId != null
                        ? this._autoRenewAccountId._toProtobuf()
                        : null,
                autoRenewPeriod:
                    this._autoRenewPeriod != null
                        ? this._autoRenewPeriod._toProtobuf()
                        : null,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "consensusUpdateTopic",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TopicUpdateTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransferList} proto.ITransferList
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     */

    /**
     * @typedef {import("../long.js").LongObject} LongObject
     * @typedef {import("bignumber.js").default} BigNumber
     */

    /**
     * @augments {ObjectMap<AccountId, Hbar>}
     */
    class HbarTransferMap extends ObjectMap {
        constructor() {
            super((s) => AccountId.fromString(s));
        }

        /**
         * @param {proto.ITransferList} transfers
         * @returns {HbarTransferMap}
         */
        static _fromProtobuf(transfers) {
            const accountTransfers = new HbarTransferMap();

            for (const transfer of transfers.accountAmounts != null
                ? transfers.accountAmounts
                : []) {
                const account = AccountId._fromProtobuf(
                    /** @type {proto.IAccountID} */ (transfer.accountID)
                );

                accountTransfers._set(
                    account,
                    Hbar.fromTinybars(/** @type {Long} */ (transfer.amount))
                );
            }

            return accountTransfers;
        }
    }

    /**
     * @typedef {import("../long.js").LongObject} LongObject
     * @typedef {import("bignumber.js").default} BigNumber
     */

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
     * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
     * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
     * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
     * @typedef {import("@hashgraph/proto").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody
     * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
     * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
     * @typedef {import("@hashgraph/proto").IAccountAmount} proto.IAccountAmount
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../transaction/TransactionId.js").default} TransactionId
     */

    /**
     * @typedef {object} TransferTokensInput
     * @property {TokenId | string} tokenId
     * @property {AccountId | string} accountId
     * @property {Long | number} amount
     */

    /**
     * @typedef {object} TransferTokenObject
     * @property {TokenId} tokenId
     * @property {AccountId} accountId
     * @property {Long} amount
     */

    /**
     * @typedef {object} TransferHbarInput
     * @property {AccountId | string} accountId
     * @property {number | string | Long | BigNumber | Hbar} amount
     */

    /**
     * Transfers a new Hedera™ crypto-currency token.
     */
    class TransferTransaction extends Transaction {
        /**
         * @param {object} [props]
         * @param {(TransferTokensInput)[]} [props.tokenTransfers]
         * @param {(TransferHbarInput)[]} [props.hbarTransfers]
         */
        constructor(props = {}) {
            super();

            /**
             * @private
             * @type {TokenTransferMap}
             */
            this._tokenTransfers = new TokenTransferMap();

            /**
             * @private
             * @type {HbarTransferMap}
             */
            this._hbarTransfers = new HbarTransferMap();

            this.setMaxTransactionFee(new Hbar(1));

            for (const transfer of props.tokenTransfers != null
                ? props.tokenTransfers
                : []) {
                this.addTokenTransfer(
                    transfer.tokenId,
                    transfer.accountId,
                    transfer.amount
                );
            }

            for (const transfer of props.hbarTransfers != null
                ? props.hbarTransfers
                : []) {
                this.addHbarTransfer(transfer.accountId, transfer.amount);
            }
        }

        /**
         * @internal
         * @param {proto.ITransaction[]} transactions
         * @param {proto.ISignedTransaction[]} signedTransactions
         * @param {TransactionId[]} transactionIds
         * @param {AccountId[]} nodeIds
         * @param {proto.ITransactionBody[]} bodies
         * @returns {TransferTransaction}
         */
        static _fromProtobuf(
            transactions,
            signedTransactions,
            transactionIds,
            nodeIds,
            bodies
        ) {
            const body = bodies[0];
            const cryptoTransfer = /** @type {proto.ICryptoTransferTransactionBody} */ (body.cryptoTransfer);

            const transfers = new TransferTransaction();
            for (const list of cryptoTransfer.tokenTransfers != null
                ? cryptoTransfer.tokenTransfers
                : []) {
                const tokenId = TokenId._fromProtobuf(
                    /** @type {proto.ITokenID} */ (list.token)
                );

                for (const transfer of list.transfers != null
                    ? list.transfers
                    : []) {
                    transfers.addTokenTransfer(
                        tokenId,
                        AccountId._fromProtobuf(
                            /** @type {proto.IAccountID} */ (transfer.accountID)
                        ),
                        /** @type {Long} */ (transfer.amount)
                    );
                }
            }

            const accountAmounts =
                cryptoTransfer.transfers != null
                    ? cryptoTransfer.transfers.accountAmounts != null
                        ? cryptoTransfer.transfers.accountAmounts
                        : []
                    : [];

            for (const aa of accountAmounts) {
                transfers.addHbarTransfer(
                    AccountId._fromProtobuf(
                        /** @type {proto.IAccountID} */ (aa.accountID)
                    ),
                    Hbar.fromTinybars(/** @type {Long} */ (aa.amount))
                );
            }

            return Transaction._fromProtobufTransactions(
                transfers,
                transactions,
                signedTransactions,
                transactionIds,
                nodeIds,
                bodies
            );
        }

        /**
         * @returns {TokenTransferMap}
         */
        get tokenTransfers() {
            return this._tokenTransfers;
        }

        /**
         * @param {TokenId | string} tokenId
         * @param {AccountId | string} accountId
         * @param {number | Long} amount
         * @returns {this}
         */
        addTokenTransfer(tokenId, accountId, amount) {
            this._requireNotFrozen();

            this._tokenTransfers.__set(
                tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId),
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId),
                amount instanceof long ? amount : long.fromNumber(amount)
            );

            return this;
        }

        /**
         * @returns {HbarTransferMap}
         */
        get hbarTransfers() {
            return this._hbarTransfers;
        }

        /**
         * @internal
         * @param {AccountId | string} accountId
         * @param {number | string | Long | LongObject | BigNumber | Hbar} amount
         * @returns {TransferTransaction}
         */
        addHbarTransfer(accountId, amount) {
            this._requireNotFrozen();
            this._hbarTransfers._set(
                accountId instanceof AccountId
                    ? accountId
                    : AccountId.fromString(accountId),
                amount instanceof Hbar ? amount : new Hbar(amount)
            );

            return this;
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.ITransaction} request
         * @returns {Promise<proto.ITransactionResponse>}
         */
        _execute(channel, request) {
            return channel.crypto.cryptoTransfer(request);
        }

        /**
         * @override
         * @protected
         * @returns {NonNullable<proto.TransactionBody["data"]>}
         */
        _getTransactionDataCase() {
            return "cryptoTransfer";
        }

        /**
         * @override
         * @protected
         * @returns {proto.ICryptoTransferTransactionBody}
         */
        _makeTransactionData() {
            const tokenTransfers = [];
            const hbarTransfers = [];

            for (const [tokenId, value] of this._tokenTransfers) {
                const transfers = [];
                for (const [accountId, amount] of value) {
                    transfers.push({
                        accountID: accountId._toProtobuf(),
                        amount: amount,
                    });
                }

                tokenTransfers.push({
                    token: tokenId._toProtobuf(),
                    transfers,
                });
            }

            for (const [accountId, value] of this._hbarTransfers) {
                hbarTransfers.push({
                    accountID: accountId._toProtobuf(),
                    amount: value.toTinybars(),
                });
            }

            return {
                transfers: {
                    accountAmounts: hbarTransfers,
                },
                tokenTransfers,
            };
        }
    }

    TRANSACTION_REGISTRY.set(
        "cryptoTransfer",
        // eslint-disable-next-line @typescript-eslint/unbound-method
        TransferTransaction._fromProtobuf
    );

    /**
     * @namespace proto
     * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
     * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
     * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
     */

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../Status.js").default} Status
     */

    /**
     * @template OutputT
     * @augments {Executable<proto.IQuery, proto.IResponse, Hbar>}
     */
    class CostQuery extends Executable {
        /**
         * @param {import("./Query.js").default<OutputT>} query
         */
        constructor(query) {
            super();

            this._query = query;

            /**
             * @type {proto.IQueryHeader | null}
             */
            this._header = null;
        }

        /**
         * @returns {TransactionId}
         */
        _getTransactionId() {
            return this._query._getTransactionId();
        }

        /**
         * @abstract
         * @protected
         * @param {import("../client/Client.js").default<*, *>} client
         * @returns {Promise<void>}
         */
        async _beforeExecute(client) {
            if (client == null) {
                throw new Error("Cannot do CostQuery without Client");
            }

            const operator = client._operator;

            if (operator == null) {
                throw new Error(
                    "`client` must have an `operator` or an explicit payment transaction must be provided"
                );
            }

            if (this._query._nodeIds.length == 0) {
                this._query._nodeIds = client._network.getNodeAccountIdsForExecute();
            }

            this._header = {
                payment: await _makePaymentTransaction(
                    /** @type {import("../transaction/TransactionId.js").default} */
                    (TransactionId.generate(new AccountId(0))),
                    new AccountId(0),
                    operator,
                    new Hbar(0)
                ),
                responseType: ResponseType.COST_ANSWER,
            };
        }

        /**
         * @abstract
         * @internal
         * @returns {proto.IQuery}
         */
        _makeRequest() {
            return this._query._onMakeRequest(
                /** @type {proto.IQueryHeader} */ (this._header)
            );
        }

        /**
         * @abstract
         * @internal
         * @param {proto.IResponse} status
         * @returns {Status}
         */
        _mapResponseStatus(status) {
            return this._query._mapResponseStatus(status);
        }

        /**
         * @override
         * @internal
         * @param {proto.IResponse} response
         * @param {AccountId} nodeAccountId
         * @param {proto.IQuery} request
         * @returns {Promise<Hbar>}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _mapResponse(response, nodeAccountId, request) {
            const cost = this._query._mapResponseHeader(response).cost;
            return Promise.resolve(
                Hbar.fromTinybars(/** @type {Long | number} */ (cost))
            );
        }

        /**
         * @override
         * @internal
         * @param {Channel} channel
         * @param {proto.IQuery} request
         * @returns {Promise<proto.IResponse>}
         */
        _execute(channel, request) {
            return this._query._execute(channel, request);
        }

        /**
         * @override
         * @returns {AccountId}
         */
        _getNodeAccountId() {
            return this._query._getNodeAccountId();
        }
    }

    COST_QUERY.push((query) => new CostQuery(query));

    /**
     * @typedef {import("./account/AccountId.js").default} AccountId
     * @typedef {import("./channel/Channel.js").default} Channel
     * @typedef {import("./channel/MirrorChannel.js").default} MirrorChannel
     */

    /**
     * @abstract
     * @template {Channel | MirrorChannel} ChannelT
     */
    class ManagedNode {
        /**
         * @param {string} address
         * @param {(address: string) => ChannelT} channelInitFunction
         */
        constructor(address, channelInitFunction) {
            this.address = address;

            /** @type {ChannelT | null} */
            this._channel = null;

            /** @type {(address: string) => ChannelT} */
            this._channelInitFunction = channelInitFunction;
        }

        get channel() {
            if (this._channel != null) {
                return this._channel;
            }

            this._channel = this._channelInitFunction(this.address);

            return this._channel;
        }

        close() {
            if (this._channel != null) {
                this._channel.close();
            }

            this._channel = null;
        }
    }

    /**
     * @typedef {import("./account/AccountId.js").default} AccountId
     * @typedef {import("./channel/Channel.js").default} Channel
     */

    /**
     * @template {Channel} ChannelT
     * @augments {ManagedNode<ChannelT>}
     */
    class Node extends ManagedNode {
        /**
         * @param {AccountId} accountId
         * @param {string} address
         * @param {(address: string) => ChannelT} channelInitFunction
         */
        constructor(accountId, address, channelInitFunction) {
            super(address, channelInitFunction);

            this.accountId = accountId;

            /** @type {number} */
            this.delay = 250;

            /** @type {number} */
            this.lastUsed = Date.now();

            /** @type {number} */
            this.delayUntil = Date.now();

            /** @type {number} */
            this.useCount = 0;
        }

        inUse() {
            this.useCount++;
            this.lastUsed = Date.now();
        }

        /**
         * Determines if this node is healthy by checking if this node hasn't been
         * in use for a the required `delay` period. Since this looks at `this.lastUsed`
         * and that value is only set in the `wait()` method, any node that has not
         * returned a bad gRPC status will always be considered healthy.
         *
         * @returns {boolean}
         */
        isHealthy() {
            return this.delayUntil <= Date.now();
        }

        increaseDelay() {
            this.delay = Math.min(this.delay * 2, 8000);
            this.delayUntil = Date.now() + this.delay;
        }

        decreaseDelay() {
            this.delay = Math.max(this.delay / 2, 250);
        }

        /**
         * This is only ever called if the node itself is down.
         * A node returning a transaction with a bad status code does not indicate
         * the node is down, and hence this method will not be called.
         *
         * @returns {Promise<void>}
         */
        wait() {
            const delay = this.delayUntil - this.lastUsed;
            return new Promise((resolve) => setTimeout(resolve, delay));
        }

        /**
         * @param {Node<*>} node
         * @returns {number}
         */
        compare(node) {
            if (this.isHealthy() && node.isHealthy()) {
                if (this.useCount < node.useCount) {
                    return -1;
                } else if (this.useCount > node.useCount) {
                    return 1;
                } else {
                    if (this.lastUsed < node.lastUsed) {
                        return -1;
                    } else if (this.lastUsed > node.lastUsed) {
                        return 1;
                    } else {
                        return 0;
                    }
                }
            } else if (this.isHealthy() && !node.isHealthy()) {
                return -1;
            } else if (!this.isHealthy() && node.isHealthy()) {
                return 1;
            } else {
                if (this.useCount < node.useCount) {
                    return -1;
                } else if (this.useCount > node.useCount) {
                    return 1;
                } else {
                    if (this.lastUsed < node.lastUsed) {
                        return -1;
                    } else if (this.lastUsed > node.lastUsed) {
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
        }
    }

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     */

    /**
     * @typedef {import("./Client.js").NetworkName} NetworkName
     */

    /**
     * @template {Channel} ChannelT
     */
    class Network$1 {
        /**
         * @param {(address: string) => ChannelT} createNetworkChannel
         */
        constructor(createNetworkChannel) {
            /**
             * @type {{[key: string]: (string | AccountId)}}
             */
            this.network = {};

            /**
             * Map of node account ID (as a string)
             * to the node URL.
             *
             * @internal
             * @type {Map<string, Node<ChannelT>>}
             */
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this.networkNodes = new Map();

            /**
             * List of node account IDs.
             *
             * @private
             * @type {Node<ChannelT>[]}
             */
            this.nodes = [];

            /** @type {(address: string) => ChannelT} */
            this.createNetworkChannel = createNetworkChannel;
        }

        /**
         * @param {{[key: string]: (string | AccountId)}} network
         */
        setNetwork(network) {
            const network_ = Object.entries(network);
            const thisNetwork_ = Object.entries(this.network);

            // Remove address that no longer exist
            for (const [url, accountId] of thisNetwork_) {
                const key =
                    accountId instanceof AccountId
                        ? accountId
                        : AccountId.fromString(accountId);

                // eslint-disable-next-line ie11/no-loop-func,@typescript-eslint/no-unused-vars
                const index = network_.findIndex(([url_, _]) => url_ === url);
                if (index < 0) {
                    const node = this.networkNodes.get(key.toString());
                    if (node != null) {
                        node.close();
                    }

                    this.networkNodes.delete(key.toString());

                    const nodesIndex = this.nodes.findIndex(
                        // eslint-disable-next-line ie11/no-loop-func
                        (node) => node.address === url
                    );
                    if (nodesIndex >= 0) {
                        this.nodes.splice(nodesIndex, 1);
                    }
                }
            }

            // Add new address to the list
            for (const [url, accountId] of network_) {
                const key =
                    accountId instanceof AccountId
                        ? accountId
                        : AccountId.fromString(accountId);

                // eslint-disable-next-line ie11/no-loop-func,@typescript-eslint/no-unused-vars
                const index = thisNetwork_.findIndex(([url_, _]) => url_ === url);
                if (index < 0) {
                    const node = new Node(key, url, this.createNetworkChannel);
                    this.networkNodes.set(key.toString(), node);

                    this.nodes.push(node);
                }
            }

            shuffle(this.nodes);

            this.network = network;
        }

        /**
         * @internal
         * @returns {number}
         */
        getNumberOfNodesForTransaction() {
            const count = this.nodes
                .map((node) => /** @type {number} */ (node.isHealthy() ? 1 : 0))
                .reduce((sum, value) => (sum += value));

            return (count + 3 - 1) / 3;
        }

        /**
         * @internal
         * @returns {AccountId[]}
         */
        getNodeAccountIdsForExecute() {
            this.nodes.sort((a, b) => a.compare(b));

            return this.nodes
                .slice(0, this.getNumberOfNodesForTransaction())
                .map((node) => node.accountId);
        }

        close() {
            for (const node of this.nodes) {
                node.close();
            }

            this.networkNodes.clear();
            this.nodes = [];
            this.network = {};
        }
    }

    /**
     * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
     *
     * @template T
     * @param {Array<T>} array
     */
    function shuffle(array) {
        var currentIndex = array.length,
            temporaryValue,
            randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
    }

    /**
     * @typedef {import("./channel/MirrorChannel.js").default} MirrorChannel
     */

    class MirrorNode {
        /**
         * @param {string} address
         * @param {(address: string) => MirrorChannel} channelInitFunction
         */
        constructor(address, channelInitFunction) {
            this.address = address;
            this._channelInitFunction = channelInitFunction;
        }

        get channel() {
            if (this._channel != null) {
                return this._channel;
            }

            this._channel = this._channelInitFunction(this.address);

            return this._channel;
        }

        close() {
            if (this._channel != null) {
                this._channel.close();
            }

            this._channel = null;
        }
    }

    /**
     * @typedef {import("../channel/MirrorChannel.js").default} MirrorChannel
     */

    /**
     * @typedef {import("./Client.js").NetworkName} NetworkName
     */
    class MirrorNetwork {
        /**
         * @param {((address: string) => MirrorChannel)?} channelInitFunction
         */
        constructor(channelInitFunction) {
            /**
             * Map of node account ID (as a string)
             * to the node URL.
             *
             * @internal
             * @type {string[]}
             */
            this.network = [];

            /**
             * Map of node account ID (as a string)
             * to the node URL.
             *
             * @internal
             * @type {Map<string, MirrorNode>}
             */
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this.networkNodes = new Map();

            this.index = 0;

            /** @type {((address: string) => MirrorChannel)?} */
            this._channelInitFunction = channelInitFunction;
        }

        /**
         * @param {string[]} network
         */
        setMirrorNetwork(network) {
            if (this._channelInitFunction == null) {
                // silently fail on client boot if mirror network is not
                // supported
                return;
            }

            this.close();
            this.network = network;

            for (const address of this.network) {
                this.networkNodes.set(
                    address,
                    new MirrorNode(address, this._channelInitFunction)
                );
            }

            this.index = 0;
        }

        /**
         * @returns {MirrorNode}
         */
        getNextMirrorNode() {
            if (this._channelInitFunction == null) {
                throw new Error("mirror network not supported on browser");
            }

            const node = this.network[this.index];
            this.index = (this.index + 1) % this.network.length;
            return /** @type {MirrorNode} */ (this.networkNodes.get(node));
        }

        close() {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, node] of this.networkNodes) {
                node.close();
            }

            this.networkNodes.clear();
            this.network = [];
        }
    }

    /**
     * @typedef {import("../channel/Channel.js").default} Channel
     * @typedef {import("../channel/MirrorChannel.js").default} MirrorChannel
     */

    /**
     * @typedef {"mainnet" | "testnet" | "previewnet"} NetworkName
     */

    /**
     * @typedef {object} Operator
     * @property {string | PrivateKey} privateKey
     * @property {string | AccountId} accountId
     */

    /**
     * @typedef {object} ClientOperator
     * @property {PublicKey} publicKey
     * @property {AccountId} accountId
     * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner
     */

    /**
     * @typedef {object} ClientConfiguration
     * @property {{[key: string]: (string | AccountId)} | NetworkName} network
     * @property {string[] | NetworkName | string} [mirrorNetwork]
     * @property {Operator} [operator]
     */

    /**
     * @abstract
     * @template {Channel} ChannelT
     * @template {MirrorChannel} MirrorChannelT
     */
    class Client {
        /**
         * @protected
         * @hideconstructor
         * @param {ClientConfiguration} [props]
         */
        constructor(props) {
            /**
             * List of mirror network URLs.
             *
             * @internal
             * @type {MirrorNetwork}
             */
            this._mirrorNetwork = new MirrorNetwork(
                this._createMirrorNetworkChannel()
            );

            /**
             * Map of node account ID (as a string)
             * to the node URL.
             *
             * @internal
             * @type {Network<ChannelT>}
             */
            this._network = new Network$1(this._createNetworkChannel());

            /**
             * @internal
             * @type {?ClientOperator}
             */
            this._operator = null;

            /**
             * @private
             * @type {Hbar}
             */
            this._maxTransactionFee = new Hbar(2);

            /**
             * @private
             * @type {Hbar}
             */
            this._maxQueryPayment = new Hbar(1);

            if (props != null) {
                if (props.operator != null) {
                    this.setOperator(
                        props.operator.accountId,
                        props.operator.privateKey
                    );
                }
            }
        }

        /**
         * @param {{[key: string]: (string | AccountId)} | NetworkName} network
         * @returns {void}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        setNetwork(network) {
            throw new Error("not implemented");
        }

        /**
         * @returns {{[key: string]: (string | AccountId)}}
         */
        get network() {
            return this._network.network;
        }

        /**
         * @param {string[] | string | NetworkName} mirrorNetwork
         * @returns {void}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        setMirrorNetwork(mirrorNetwork) {
            throw new Error("not implemented");
        }

        /**
         * @returns {string[]}
         */
        get mirrorNetwork() {
            return this._mirrorNetwork.network;
        }

        /**
         * Set the account that will, by default, pay for transactions and queries built with this client.
         *
         * @param {AccountId | string} accountId
         * @param {PrivateKey | string} privateKey
         * @returns {this}
         */
        setOperator(accountId, privateKey) {
            const key =
                typeof privateKey === "string"
                    ? PrivateKey.fromString(privateKey)
                    : privateKey;

            return this.setOperatorWith(accountId, key.publicKey, (message) =>
                Promise.resolve(key.sign(message))
            );
        }

        /**
         * Sets the account that will, by default, pay for transactions and queries built with
         * this client.
         *
         * @param {AccountId | string} accountId
         * @param {PublicKey | string} publicKey
         * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner
         * @returns {this}
         */
        setOperatorWith(accountId, publicKey, transactionSigner) {
            this._operator = {
                transactionSigner,

                accountId:
                    accountId instanceof AccountId
                        ? accountId
                        : AccountId.fromString(accountId),

                publicKey:
                    publicKey instanceof PublicKey
                        ? publicKey
                        : PublicKey.fromString(publicKey),
            };

            return this;
        }

        /**
         * @returns {?AccountId}
         */
        get operatorAccountId() {
            return this._operator != null ? this._operator.accountId : null;
        }

        /**
         * @returns {?PublicKey}
         */
        get operatorPublicKey() {
            return this._operator != null ? this._operator.publicKey : null;
        }

        /**
         * @returns {Hbar}
         */
        get maxTransactionFee() {
            return this._maxTransactionFee;
        }

        /**
         * Set the maximum fee to be paid for transactions
         * executed by this client.
         *
         * @param {Hbar} maxTransactionFee
         * @returns {this}
         */
        setMaxTransactionFee(maxTransactionFee) {
            this._maxTransactionFee = maxTransactionFee;
            return this;
        }

        /**
         * @returns {Hbar}
         */
        get maxQueryPayment() {
            return this._maxQueryPayment;
        }

        /**
         * Set the maximum payment allowable for queries.
         *
         * @param {Hbar} maxQueryPayment
         * @returns {Client<ChannelT, MirrorChannelT>}
         */
        setMaxQueryPayment(maxQueryPayment) {
            this._maxQueryPayment = maxQueryPayment;
            return this;
        }

        /**
         * @param {AccountId | string} accountId
         */
        async ping(accountId) {
            await new AccountBalanceQuery({ accountId })
                .setNodeAccountIds([
                    accountId instanceof AccountId
                        ? accountId
                        : AccountId.fromString(accountId),
                ])
                .execute(this);
        }

        /**
         * @returns {void}
         */
        close() {
            this._network.close();
            this._mirrorNetwork.close();
        }

        /**
         * @abstract
         * @returns {(address: string) => ChannelT}
         */
        _createNetworkChannel() {
            throw new Error("not implemented");
        }

        /**
         * @abstract
         * @returns {((address: string) => MirrorChannelT)?}
         */
        _createMirrorNetworkChannel() {
            // throw new Error("not implemented");
            return null;
        }
    }

    /**
     * @internal
     * @abstract
     */
    class Channel {
        /**
         * @protected
         */
        constructor() {
            /**
             * @protected
             * @type {?CryptoService}
             */
            this._crypto = null;

            /**
             * @protected
             * @type {?SmartContractService}
             */
            this._smartContract = null;

            /**
             * @protected
             * @type {?FileService}
             */
            this._file = null;

            /**
             * @protected
             * @type {?ConsensusService}
             */
            this._consensus = null;

            /**
             * @protected
             * @type {?FreezeService}
             */
            this._freeze = null;

            /**
             * @protected
             * @type {?NetworkService}
             */
            this._network = null;

            /**
             * @protected
             * @type {?TokenService}
             */
            this._token = null;

            /**
             * @protected
             * @type {?ScheduleService}
             */
            this._schedule = null;
        }

        /**
         * @abstract
         * @returns {void}
         */
        close() {
            throw new Error("not implemented");
        }

        /**
         * @returns {CryptoService}
         */
        get crypto() {
            if (this._crypto != null) {
                return this._crypto;
            }

            this._crypto = CryptoService.create(
                this._createUnaryClient("CryptoService")
            );

            return this._crypto;
        }

        /**
         * @returns {SmartContractService}
         */
        get smartContract() {
            if (this._smartContract != null) {
                return this._smartContract;
            }

            this._smartContract = SmartContractService.create(
                this._createUnaryClient("SmartContractService")
            );

            return this._smartContract;
        }

        /**
         * @returns {FileService}
         */
        get file() {
            if (this._file != null) {
                return this._file;
            }

            this._file = FileService.create(this._createUnaryClient("FileService"));

            return this._file;
        }

        /**
         * @returns {ConsensusService}
         */
        get consensus() {
            if (this._consensus != null) {
                return this._consensus;
            }

            this._consensus = ConsensusService.create(
                this._createUnaryClient("ConsensusService")
            );

            return this._consensus;
        }

        /**
         * @returns {FreezeService}
         */
        get freeze() {
            if (this._freeze != null) {
                return this._freeze;
            }

            this._freeze = FreezeService.create(
                this._createUnaryClient("FreezeService")
            );

            return this._freeze;
        }

        /**
         * @returns {NetworkService}
         */
        get network() {
            if (this._network != null) {
                return this._network;
            }

            this._network = NetworkService.create(
                this._createUnaryClient("NetworkService")
            );

            return this._network;
        }

        /**
         * @returns {TokenService}
         */
        get token() {
            if (this._token != null) {
                return this._token;
            }

            this._token = TokenService.create(
                this._createUnaryClient("TokenService")
            );

            return this._token;
        }

        /**
         * @returns {ScheduleService}
         */
        get schedule() {
            if (this._schedule != null) {
                return this._schedule;
            }

            this._schedule = ScheduleService.create(
                this._createUnaryClient("ScheduleService")
            );

            return this._schedule;
        }

        /**
         * @abstract
         * @protected
         * @param {string} serviceName
         * @returns {import("@hashgraph/protobufjs").RPCImpl}
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _createUnaryClient(serviceName) {
            throw new Error("not implemented");
        }
    }

    // grpc-web+proto is a series of data or trailer frames

    // a frame is identified by a single byte (0 = data or 1 = trailer) followed by 4 bytes for the
    // length of the frame, followed by the frame data

    /**
     * @param {Uint8Array} data
     * @returns {ArrayBuffer}
     */
    function encodeRequest(data) {
        // for our requests, we want to transfer a single data frame

        const frame = new ArrayBuffer(data.byteLength + 5);

        // the frame type (data) is zero and can be left default-initialized

        // the length of the frame data
        new DataView(frame, 1, 4).setUint32(0, data.length);

        // copy in the frame data
        new Uint8Array(frame, 5).set(data);

        return frame;
    }

    /**
     * @param {ArrayBuffer} data
     * @returns {Uint8Array}
     */
    function decodeUnaryResponse(data) {
        let dataOffset = 0;

        /** @type {?Uint8Array} */
        let unaryResponse = null;

        // 0 = successful
        let status = 0;

        while (dataOffset < data.byteLength) {
            const dataView = new DataView(data, dataOffset);
            const frameByte = dataView.getUint8(0);
            const frameType = frameByte >> 7;
            const frameByteLength = dataView.getUint32(1);
            const frameData = new Uint8Array(data, dataOffset + 5, frameByteLength);

            if (frameType === 0) {
                if (unaryResponse != null) {
                    throw new Error(
                        "(BUG) unexpectedly received more than one data frame"
                    );
                }

                unaryResponse = frameData;
            } else if (frameType === 1) {
                const trailer = decode(frameData);
                const [trailerName, trailerValue] = trailer.split(":");

                if (trailerName === "grpc-status") {
                    status = parseInt(trailerValue);
                } else {
                    throw new Error(`(BUG) unhandled trailer, ${trailer}`);
                }
            } else {
                throw new Error(`(BUG) unexpected frame type: ${frameType}`);
            }

            dataOffset += frameByteLength + 5;
        }

        if (status !== 0) {
            throw new Error(`(BUG) unhandled grpc-status: ${status}`);
        }

        if (unaryResponse == null) {
            throw new Error("(BUG) unexpectedly received no response");
        }

        return unaryResponse;
    }

    class WebChannel extends Channel {
        /**
         * @param {string} address
         */
        constructor(address) {
            super();

            /**
             * @type {string}
             * @private
             */
            this._address = address;
        }

        /**
         * @override
         * @returns {void}
         */
        close() {
            // do nothing
        }

        /**
         * @override
         * @protected
         * @param {string} serviceName
         * @returns {import("@hashgraph/protobufjs").RPCImpl}
         */
        _createUnaryClient(serviceName) {
            return async (method, requestData, callback) => {
                const response = await fetch(
                    `${this._address}/proto.${serviceName}/${method.name}`,
                    {
                        method: "POST",
                        headers: {
                            "content-type": "application/grpc-web+proto",
                            "x-user-agent": "hedera-sdk-js/v2",
                            "x-grpc-web": "1",
                        },
                        body: encodeRequest(requestData),
                    }
                );

                const responseBuffer = await response.arrayBuffer();
                const unaryResponse = decodeUnaryResponse(responseBuffer);

                callback(null, unaryResponse);
            };
        }
    }

    /**
     * @typedef {import("./Client.js").ClientConfiguration} ClientConfiguration
     * @typedef {import("./Client.js").NetworkName} NetworkName
     */

    const Network = {
        /**
         * @param {string} name
         * @returns {{[key: string]: (string | AccountId)}}
         */
        fromName(name) {
            switch (name) {
                case "mainnet":
                    return Network.MAINNET;

                case "testnet":
                    return Network.TESTNET;

                case "previewnet":
                    return Network.PREVIEWNET;

                default:
                    throw new Error(`unknown network name: ${name}`);
            }
        },

        MAINNET: {
            "https://grpc-web.myhbarwallet.com": new AccountId(3),
        },

        TESTNET: {
            "https://grpc-web.testnet.myhbarwallet.com": new AccountId(3),
        },

        PREVIEWNET: {
            "https://grpc-web.previewnet.myhbarwallet.com": new AccountId(3),
        },
    };

    /**
     * @augments {Client<WebChannel, *>}
     */
    class WebClient extends Client {
        /**
         * @param {ClientConfiguration} [props]
         */
        constructor(props) {
            super(props);

            if (props != null) {
                if (typeof props.network === "string") {
                    switch (props.network) {
                        case "mainnet":
                            this.setNetwork(Network.MAINNET);
                            break;

                        case "testnet":
                            this.setNetwork(Network.TESTNET);
                            break;

                        case "previewnet":
                            this.setNetwork(Network.PREVIEWNET);
                            break;

                        default:
                            throw new Error(
                                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                                `unknown network: ${props.network}`
                            );
                    }
                } else if (props.network != null) {
                    this.setNetwork(props.network);
                }
            }
        }

        /**
         * @param {string | ClientConfiguration} data
         * @returns {WebClient}
         */
        static fromConfig(data) {
            return new WebClient(
                typeof data === "string" ? JSON.parse(data) : data
            );
        }

        /**
         * Construct a client for a specific network.
         *
         * It is the responsibility of the caller to ensure that all nodes in the map are part of the
         * same Hedera network. Failure to do so will result in undefined behavior.
         *
         * The client will load balance all requests to Hedera using a simple round-robin scheme to
         * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be
         * tried.
         *
         * @param {{[key: string]: (string | AccountId)} | import("./Client.js").NetworkName} network
         * @returns {WebClient}
         */
        static forNetwork(network) {
            return new WebClient({ network });
        }

        /**
         * @param {NetworkName} network
         * @returns {WebClient}
         */
        static forName(network) {
            return new WebClient({ network });
        }

        /**
         * Construct a Hedera client pre-configured for Mainnet access.
         *
         * @returns {WebClient}
         */
        static forMainnet() {
            return new WebClient({ network: "mainnet" });
        }

        /**
         * Construct a Hedera client pre-configured for Testnet access.
         *
         * @returns {WebClient}
         */
        static forTestnet() {
            return new WebClient({ network: "testnet" });
        }

        /**
         * Construct a Hedera client pre-configured for Previewnet access.
         *
         * @returns {WebClient}
         */
        static forPreviewnet() {
            return new WebClient({ network: "previewnet" });
        }

        /**
         * @param {{[key: string]: (string | AccountId)} | NetworkName} network
         * @returns {void}
         */
        setNetwork(network) {
            if (typeof network === "string") {
                switch (network) {
                    case "previewnet":
                        this._network.setNetwork(Network.PREVIEWNET);
                        break;
                    case "testnet":
                        this._network.setNetwork(Network.TESTNET);
                        break;
                    case "mainnet":
                        this._network.setNetwork(Network.MAINNET);
                }
            } else {
                this._network.setNetwork(network);
            }
        }

        /**
         * @override
         * @returns {(address: string) => WebChannel}
         */
        _createNetworkChannel() {
            return (address) => new WebChannel(address);
        }
    }

    class HederaService {
        constructor() {
            var _a;
            this.hederaAccountInfo = writable((_a = JSON.parse(localStorage.getItem("hederaAccountInfo"))) !== null && _a !== void 0 ? _a : "{}");
            this.hederaAccountInfo.subscribe((v) => localStorage.setItem("hederaAccountInfo", JSON.stringify(v)));
            const { privateKey, accountId } = get_store_value(this.hederaAccountInfo);
            this.client = WebClient.forTestnet();
            if (!privateKey) {
                this.client.setOperator("0.0.460923", "302e020100300506032b657004220420c6363cedb392f602bcebf78edfb0541812534f492f4d367e32939d7247705884");
            }
            else {
                try {
                    this.client.setOperator(accountId, privateKey);
                }
                catch (e) {
                    if (e instanceof BadKeyError) {
                        this.hederaAccountInfo.update((info) => (Object.assign(Object.assign({}, info), { privateKey: undefined })));
                    }
                }
            }
        }
        async generateMnemonic() {
            return (await Mnemonic.generate12()).toString();
        }
        async generateKeyPairs(mnemonic) {
            const privateKey = await PrivateKey.fromMnemonic(mnemonic);
            return { privateKey: privateKey.toString(), publicKey: privateKey.publicKey.toString() };
        }
        async createAccount(privateKey, publicKey) {
            const transaction = await new AccountCreateTransaction()
                .setKey(PrivateKey.fromString(privateKey).publicKey)
                .setInitialBalance(0)
                .execute(this.client);
            const receipt = await transaction.getReceipt(this.client);
            const accountId = receipt.accountId.toString();
            this.hederaAccountInfo.set({ accountId, privateKey, publicKey });
            return accountId;
        }
        async fetchBalance() {
            if (!get_store_value(this.hederaAccountInfo).accountId) {
                return { hbars: 0 };
            }
            return new AccountBalanceQuery()
                .setAccountId(get_store_value(this.hederaAccountInfo).accountId)
                .execute(this.client);
        }
        async importPrivateKey(privateKey) {
            this.hederaAccountInfo.update((info) => (Object.assign(Object.assign({}, info), { privateKey })));
        }
        async exportPrivateKey() {
            const uri = "data:application/octet-stream," + encodeURIComponent(get_store_value(this.hederaAccountInfo).privateKey);
            window.open(uri, "neuesDokument");
        }
    }

    class NotificationService {
        constructor() {
            this.notifications = writable(new Array());
        }
        push(notification) {
            this.notifications.update((n) => [...n, notification]);
        }
        clearByIndex(index) {
            this.notifications.update((n) => n.filter((_, i) => i !== index));
        }
    }

    class PaymentsService {
        constructor() { }
        async fetchPayments() {
            return {
                data: [
                    {
                        id: 1,
                        amount: 1.15,
                        hederaTransactionId: "1234",
                        consumerId: 10,
                        prosumerId: 101,
                        createdAt: new Date(),
                    },
                    {
                        id: 2,
                        amount: 1.25,
                        hederaTransactionId: "4312",
                        consumerId: 10,
                        prosumerId: 101,
                        createdAt: new Date(),
                    },
                    {
                        id: 3,
                        amount: 1.17,
                        hederaTransactionId: "4321",
                        consumerId: 101,
                        prosumerId: 10,
                        createdAt: new Date(),
                    },
                    {
                        id: 4,
                        amount: 1.21,
                        hederaTransactionId: "4213",
                        consumerId: 102,
                        prosumerId: 10,
                        createdAt: new Date(),
                    },
                    {
                        id: 5,
                        amount: 1.28,
                        hederaTransactionId: "4231",
                        consumerId: 10,
                        prosumerId: 103,
                        createdAt: new Date(),
                    },
                ],
            };
        }
    }

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }

      var number = Number(dirtyNumber);

      if (isNaN(number)) {
        return number;
      }

      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */

    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument); // Clone the date

      if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

          console.warn(new Error().stack);
        }

        return new Date(NaN);
      }
    }

    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} - the new date with the days added
     * @throws {TypeError} - 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */

    function addDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);

      if (isNaN(amount)) {
        return new Date(NaN);
      }

      if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
      }

      date.setDate(date.getDate() + amount);
      return date;
    }

    /**
     * @name addMonths
     * @category Month Helpers
     * @summary Add the specified number of months to the given date.
     *
     * @description
     * Add the specified number of months to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the months added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 months to 1 September 2014:
     * const result = addMonths(new Date(2014, 8, 1), 5)
     * //=> Sun Feb 01 2015 00:00:00
     */

    function addMonths(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);

      if (isNaN(amount)) {
        return new Date(NaN);
      }

      if (!amount) {
        // If 0 months, no-op to avoid changing times in the hour before end of DST
        return date;
      }

      var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
      // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
      // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
      // want except that dates will wrap around the end of a month, meaning that
      // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
      // we'll default to the end of the desired month by adding 1 to the desired
      // month and using a date of 0 to back up one day to the end of the desired
      // month.

      var endOfDesiredMonth = new Date(date.getTime());
      endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
      var daysInMonth = endOfDesiredMonth.getDate();

      if (dayOfMonth >= daysInMonth) {
        // If we're already at the end of the month, then this is the correct date
        // and we're done.
        return endOfDesiredMonth;
      } else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
      }
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */

    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    var MILLISECONDS_IN_HOUR = 3600000;
    /**
     * @name addHours
     * @category Hour Helpers
     * @summary Add the specified number of hours to the given date.
     *
     * @description
     * Add the specified number of hours to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the hours added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 2 hours to 10 July 2014 23:00:00:
     * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
     * //=> Fri Jul 11 2014 01:00:00
     */

    function addHours(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
    }

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    /**
     * @name addWeeks
     * @category Week Helpers
     * @summary Add the specified number of weeks to the given date.
     *
     * @description
     * Add the specified number of week to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the weeks added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 4 weeks to 1 September 2014:
     * const result = addWeeks(new Date(2014, 8, 1), 4)
     * //=> Mon Sep 29 2014 00:00:00
     */

    function addWeeks(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      var days = amount * 7;
      return addDays(dirtyDate, days);
    }

    /**
     * @name addYears
     * @category Year Helpers
     * @summary Add the specified number of years to the given date.
     *
     * @description
     * Add the specified number of years to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the years added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 years to 1 September 2014:
     * const result = addYears(new Date(2014, 8, 1), 5)
     * //=> Sun Sep 01 2019 00:00:00
     */

    function addYears(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMonths(dirtyDate, amount * 12);
    }

    /**
     * @name compareAsc
     * @category Common Helpers
     * @summary Compare the two dates and return -1, 0 or 1.
     *
     * @description
     * Compare the two dates and return 1 if the first date is after the second,
     * -1 if the first date is before the second or 0 if dates are equal.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the first date to compare
     * @param {Date|Number} dateRight - the second date to compare
     * @returns {Number} the result of the comparison
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Compare 11 February 1987 and 10 July 1989:
     * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
     * //=> -1
     *
     * @example
     * // Sort the array of dates:
     * const result = [
     *   new Date(1995, 6, 2),
     *   new Date(1987, 1, 11),
     *   new Date(1989, 6, 10)
     * ].sort(compareAsc)
     * //=> [
     * //   Wed Feb 11 1987 00:00:00,
     * //   Mon Jul 10 1989 00:00:00,
     * //   Sun Jul 02 1995 00:00:00
     * // ]
     */

    function compareAsc(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();

      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1; // Return 0 if diff is 0; return NaN if diff is NaN
      } else {
        return diff;
      }
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - Now `isValid` doesn't throw an exception
     *   if the first argument is not an instance of Date.
     *   Instead, argument is converted beforehand using `toDate`.
     *
     *   Examples:
     *
     *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
     *   |---------------------------|---------------|---------------|
     *   | `new Date()`              | `true`        | `true`        |
     *   | `new Date('2016-01-01')`  | `true`        | `true`        |
     *   | `new Date('')`            | `false`       | `false`       |
     *   | `new Date(1488370835081)` | `true`        | `true`        |
     *   | `new Date(NaN)`           | `false`       | `false`       |
     *   | `'2016-01-01'`            | `TypeError`   | `false`       |
     *   | `''`                      | `TypeError`   | `false`       |
     *   | `1488370835081`           | `TypeError`   | `true`        |
     *   | `NaN`                     | `TypeError`   | `false`       |
     *
     *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
     *   that try to coerce arguments to the expected type
     *   (which is also the case with other *date-fns* functions).
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * var result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * var result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * var result = isValid(new Date(''))
     * //=> false
     */

    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      return !isNaN(date);
    }

    /**
     * @name differenceInCalendarMonths
     * @category Month Helpers
     * @summary Get the number of calendar months between the given dates.
     *
     * @description
     * Get the number of calendar months between the given dates.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar months are between 31 January 2014 and 1 September 2014?
     * var result = differenceInCalendarMonths(
     *   new Date(2014, 8, 1),
     *   new Date(2014, 0, 31)
     * )
     * //=> 8
     */

    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
      return yearDiff * 12 + monthDiff;
    }

    /**
     * @name differenceInMilliseconds
     * @category Millisecond Helpers
     * @summary Get the number of milliseconds between the given dates.
     *
     * @description
     * Get the number of milliseconds between the given dates.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of milliseconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many milliseconds are between
     * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
     * var result = differenceInMilliseconds(
     *   new Date(2014, 6, 2, 12, 30, 21, 700),
     *   new Date(2014, 6, 2, 12, 30, 20, 600)
     * )
     * //=> 1100
     */

    function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      return dateLeft.getTime() - dateRight.getTime();
    }

    /**
     * @name endOfDay
     * @category Day Helpers
     * @summary Return the end of a day for the given date.
     *
     * @description
     * Return the end of a day for the given date.
     * The result will be in the local timezone.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a day for 2 September 2014 11:55:00:
     * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 23:59:59.999
     */

    function endOfDay(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name endOfMonth
     * @category Month Helpers
     * @summary Return the end of a month for the given date.
     *
     * @description
     * Return the end of a month for the given date.
     * The result will be in the local timezone.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a month for 2 September 2014 11:55:00:
     * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 23:59:59.999
     */

    function endOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name isLastDayOfMonth
     * @category Month Helpers
     * @summary Is the given date the last day of a month?
     *
     * @description
     * Is the given date the last day of a month?
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to check
     * @returns {Boolean} the date is the last day of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Is 28 February 2014 the last day of a month?
     * var result = isLastDayOfMonth(new Date(2014, 1, 28))
     * //=> true
     */

    function isLastDayOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      return endOfDay(date).getTime() === endOfMonth(date).getTime();
    }

    /**
     * @name differenceInMonths
     * @category Month Helpers
     * @summary Get the number of full months between the given dates.
     *
     * @description
     * Get the number of full months between the given dates.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full months are between 31 January 2014 and 1 September 2014?
     * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
     * //=> 7
     */

    function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var sign = compareAsc(dateLeft, dateRight);
      var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
      var result; // Check for the difference of less than month

      if (difference < 1) {
        result = 0;
      } else {
        if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
          // This will check if the date is end of Feb and assign a higher end of month date
          // to compare it with Jan
          dateLeft.setDate(30);
        }

        dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
        // If so, result must be decreased by 1 in absolute value

        var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month

        if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
          isLastMonthNotFull = false;
        }

        result = sign * (difference - isLastMonthNotFull);
      } // Prevent negative zero


      return result === 0 ? 0 : result;
    }

    /**
     * @name differenceInSeconds
     * @category Second Helpers
     * @summary Get the number of seconds between the given dates.
     *
     * @description
     * Get the number of seconds between the given dates.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of seconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many seconds are between
     * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
     * var result = differenceInSeconds(
     *   new Date(2014, 6, 2, 12, 30, 20, 0),
     *   new Date(2014, 6, 2, 12, 30, 7, 999)
     * )
     * //=> 12
     */

    function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    function formatDistance$1(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    }

    function buildFormatLongFn(args) {
      return function (dirtyOptions) {
        var options = dirtyOptions || {};
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    function buildLocalizeFn(args) {
      return function (dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {};
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;

        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;

          var _width = options.width ? String(options.width) : args.defaultWidth;

          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }

        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
      // If you are making a new locale based on this one, check if the same is true for the language you're working on.
      // Generally, formatted dates should look like they are in the middle of a sentence,
      // e.g. in Spanish language the weekdays and months should be in the lowercase.

    };
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';

          case 2:
            return number + 'nd';

          case 3:
            return number + 'rd';
        }
      }

      return number + 'th';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };

    function buildMatchPatternFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var matchResult = string.match(args.matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);

        if (!parseResult) {
          return null;
        }

        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    function buildMatchFn(args) {
      return function (dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options = dirtyOptions || {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var value;

        if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
          value = findIndex(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        } else {
          value = findKey(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
          });
        }

        value = args.valueCallback ? args.valueCallback(value) : value;
        value = options.valueCallback ? options.valueCallback(value) : value;
        return {
          value: value,
          rest: string.slice(matchedString.length)
        };
      };
    }

    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
    }

    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */

    var locale = {
      code: 'en-US',
      formatDistance: formatDistance$1,
      formatLong: formatLong,
      formatRelative: formatRelative,
      localize: localize,
      match: match,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */

    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();

      while (output.length < targetLength) {
        output = '0' + output;
      }

      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */

    var formatters$1 = {
      // Year
      y: function (date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function (date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function (date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function (date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();

          case 'aaa':
            return dayPeriodEnumValue;

          case 'aaaaa':
            return dayPeriodEnumValue[0];

          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function (date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function (date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function (date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function (date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function (date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };

    var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate, dirtyOptions);
      var year = date.getUTCFullYear();
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
      var year = getUTCWeekYear(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, dirtyOptions);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
      /*
       * |     | Unit                           |     | Unit                           |
       * |-----|--------------------------------|-----|--------------------------------|
       * |  a  | AM, PM                         |  A* | Milliseconds in day            |
       * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
       * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
       * |  d  | Day of month                   |  D  | Day of year                    |
       * |  e  | Local day of week              |  E  | Day of week                    |
       * |  f  |                                |  F* | Day of week in month           |
       * |  g* | Modified Julian day            |  G  | Era                            |
       * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
       * |  i! | ISO day of week                |  I! | ISO week of year               |
       * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
       * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
       * |  l* | (deprecated)                   |  L  | Stand-alone month              |
       * |  m  | Minute                         |  M  | Month                          |
       * |  n  |                                |  N  |                                |
       * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
       * |  p! | Long localized time            |  P! | Long localized date            |
       * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
       * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
       * |  s  | Second                         |  S  | Fraction of second             |
       * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
       * |  u  | Extended year                  |  U* | Cyclic year                    |
       * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
       * |  w  | Local week of year             |  W* | Week of month                  |
       * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
       * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
       * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
       *
       * Letters marked by * are not implemented but reserved by Unicode standard.
       *
       * Letters marked by ! are non-standard, but implemented by date-fns:
       * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
       * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
       *   i.e. 7 for Sunday, 1 for Monday, etc.
       * - `I` is ISO week of year, as opposed to `w` which is local week of year.
       * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
       *   `R` is supposed to be used in conjunction with `I` and `i`
       *   for universal ISO week-numbering date, whereas
       *   `Y` is supposed to be used in conjunction with `w` and `e`
       *   for week-numbering date specific to the locale.
       * - `P` is long localized date format
       * - `p` is long localized time format
       */

    };
    var formatters = {
      // Era
      G: function (date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;

        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B

          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ

          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function (date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }

        return formatters$1.y(date, token);
      },
      // Local week-numbering year
      Y: function (date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        } // Ordinal number


        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        } // Padding


        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function (date, token) {
        var isoWeekYear = getUTCISOWeekYear(date); // Padding

        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function (date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...

          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...

          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          case 'M':
          case 'MM':
            return formatters$1.M(date, token);
          // 1st, 2nd, ..., 12th

          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D

          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December

          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12

          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th

          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D

          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December

          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function (date, token, localize, options) {
        var week = getUTCWeek(date, options);

        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }

        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function (date, token, localize) {
        var isoWeek = getUTCISOWeek(date);

        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }

        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function (date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }

        return formatters$1.d(date, token);
      },
      // Day of year
      D: function (date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);

        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }

        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();

        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th

          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th

          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T

          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu

          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday

          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02

          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd

          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue

          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }

        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }

        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function (date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return formatters$1.h(date, token);
      },
      // Hour [0-23]
      H: function (date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }

        return formatters$1.H(date, token);
      },
      // Hour [0-11]
      K: function (date, token, localize) {
        var hours = date.getUTCHours() % 12;

        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function (date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;

        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function (date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }

        return formatters$1.m(date, token);
      },
      // Second
      s: function (date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }

        return formatters$1.s(date, token);
      },
      // Fraction of second
      S: function (date, token) {
        return formatters$1.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        if (timezoneOffset === 0) {
          return 'Z';
        }

        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`

          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`

          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`

          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`

          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };

    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;

      if (minutes === 0) {
        return sign + String(hours);
      }

      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }

    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }

      return formatTimezone(offset, dirtyDelimiter);
    }

    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }

    function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });

        case 'PP':
          return formatLong.date({
            width: 'medium'
          });

        case 'PPP':
          return formatLong.date({
            width: 'long'
          });

        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    }

    function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });

        case 'pp':
          return formatLong.time({
            width: 'medium'
          });

        case 'ppp':
          return formatLong.time({
            width: 'long'
          });

        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    }

    function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/);
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];

      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }

      var dateTimeFormat;

      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;

        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;

        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;

        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }

      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    }

    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      }
    }

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://git.io/fxCyr
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
     *
     * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The second argument is now required for the sake of explicitness.
     *
     *   ```javascript
     *   // Before v2.0.0
     *   format(new Date(2016, 0, 1))
     *
     *   // v2.0.0 onward
     *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
     *   ```
     *
     * - New format string API for `format` function
     *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
     *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
     *
     * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://git.io/fxCyr
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://git.io/fxCyr
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var options = dirtyOptions || {};
      var locale$1 = options.locale || locale;
      var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      if (!locale$1.localize) {
        throw new RangeError('locale must contain localize property');
      }

      if (!locale$1.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }

      var originalDate = toDate(dirtyDate);

      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale$1,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];

        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale$1.formatLong, formatterOptions);
        }

        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }

        var firstCharacter = substring[0];

        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }

        var formatter = formatters[firstCharacter];

        if (formatter) {
          if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          return formatter(utcDate, substring, locale$1.localize, formatterOptions);
        }

        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        return substring;
      }).join('');
      return result;
    }

    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    function assign(target, dirtyObject) {
      if (target == null) {
        throw new TypeError('assign requires that input parameter not be null or undefined');
      }

      dirtyObject = dirtyObject || {};

      for (var property in dirtyObject) {
        if (dirtyObject.hasOwnProperty(property)) {
          target[property] = dirtyObject[property];
        }
      }

      return target;
    }

    function cloneObject(dirtyObject) {
      return assign({}, dirtyObject);
    }

    var MINUTES_IN_DAY = 1440;
    var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
    var MINUTES_IN_MONTH = 43200;
    var MINUTES_IN_TWO_MONTHS = 86400;
    /**
     * @name formatDistance
     * @category Common Helpers
     * @summary Return the distance between the given dates in words.
     *
     * @description
     * Return the distance between the given dates in words.
     *
     * | Distance between dates                                            | Result              |
     * |-------------------------------------------------------------------|---------------------|
     * | 0 ... 30 secs                                                     | less than a minute  |
     * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
     * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
     * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
     * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
     * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
     * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
     * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
     * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
     * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
     * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
     * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
     * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
     * | N yrs ... N yrs 3 months                                          | about N years       |
     * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
     * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
     *
     * With `options.includeSeconds == true`:
     * | Distance between dates | Result               |
     * |------------------------|----------------------|
     * | 0 secs ... 5 secs      | less than 5 seconds  |
     * | 5 secs ... 10 secs     | less than 10 seconds |
     * | 10 secs ... 20 secs    | less than 20 seconds |
     * | 20 secs ... 40 secs    | half a minute        |
     * | 40 secs ... 60 secs    | less than a minute   |
     * | 60 secs ... 90 secs    | 1 minute             |
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The function was renamed from `distanceInWords ` to `formatDistance`
     *   to make its name consistent with `format` and `formatRelative`.
     *
     * - The order of arguments is swapped to make the function
     *   consistent with `differenceIn...` functions.
     *
     *   ```javascript
     *   // Before v2.0.0
     *
     *   distanceInWords(
     *     new Date(1986, 3, 4, 10, 32, 0),
     *     new Date(1986, 3, 4, 11, 32, 0),
     *     { addSuffix: true }
     *   ) //=> 'in about 1 hour'
     *
     *   // v2.0.0 onward
     *
     *   formatDistance(
     *     new Date(1986, 3, 4, 11, 32, 0),
     *     new Date(1986, 3, 4, 10, 32, 0),
     *     { addSuffix: true }
     *   ) //=> 'in about 1 hour'
     *   ```
     *
     * @param {Date|Number} date - the date
     * @param {Date|Number} baseDate - the date to compare with
     * @param {Object} [options] - an object with options.
     * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
     * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @returns {String} the distance in words
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `baseDate` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `formatDistance` property
     *
     * @example
     * // What is the distance between 2 July 2014 and 1 January 2015?
     * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
     * //=> '6 months'
     *
     * @example
     * // What is the distance between 1 January 2015 00:00:15
     * // and 1 January 2015 00:00:00, including seconds?
     * var result = formatDistance(
     *   new Date(2015, 0, 1, 0, 0, 15),
     *   new Date(2015, 0, 1, 0, 0, 0),
     *   { includeSeconds: true }
     * )
     * //=> 'less than 20 seconds'
     *
     * @example
     * // What is the distance from 1 January 2016
     * // to 1 January 2015, with a suffix?
     * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
     *   addSuffix: true
     * })
     * //=> 'about 1 year ago'
     *
     * @example
     * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
     * import { eoLocale } from 'date-fns/locale/eo'
     * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
     *   locale: eoLocale
     * })
     * //=> 'pli ol 1 jaro'
     */

    function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {
      requiredArgs(2, arguments);
      var options = dirtyOptions || {};
      var locale$1 = options.locale || locale;

      if (!locale$1.formatDistance) {
        throw new RangeError('locale must contain formatDistance property');
      }

      var comparison = compareAsc(dirtyDate, dirtyBaseDate);

      if (isNaN(comparison)) {
        throw new RangeError('Invalid time value');
      }

      var localizeOptions = cloneObject(options);
      localizeOptions.addSuffix = Boolean(options.addSuffix);
      localizeOptions.comparison = comparison;
      var dateLeft;
      var dateRight;

      if (comparison > 0) {
        dateLeft = toDate(dirtyBaseDate);
        dateRight = toDate(dirtyDate);
      } else {
        dateLeft = toDate(dirtyDate);
        dateRight = toDate(dirtyBaseDate);
      }

      var seconds = differenceInSeconds(dateRight, dateLeft);
      var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
      var minutes = Math.round((seconds - offsetInSeconds) / 60);
      var months; // 0 up to 2 mins

      if (minutes < 2) {
        if (options.includeSeconds) {
          if (seconds < 5) {
            return locale$1.formatDistance('lessThanXSeconds', 5, localizeOptions);
          } else if (seconds < 10) {
            return locale$1.formatDistance('lessThanXSeconds', 10, localizeOptions);
          } else if (seconds < 20) {
            return locale$1.formatDistance('lessThanXSeconds', 20, localizeOptions);
          } else if (seconds < 40) {
            return locale$1.formatDistance('halfAMinute', null, localizeOptions);
          } else if (seconds < 60) {
            return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
          } else {
            return locale$1.formatDistance('xMinutes', 1, localizeOptions);
          }
        } else {
          if (minutes === 0) {
            return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
          } else {
            return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
          }
        } // 2 mins up to 0.75 hrs

      } else if (minutes < 45) {
        return locale$1.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs
      } else if (minutes < 90) {
        return locale$1.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs
      } else if (minutes < MINUTES_IN_DAY) {
        var hours = Math.round(minutes / 60);
        return locale$1.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days
      } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
        return locale$1.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days
      } else if (minutes < MINUTES_IN_MONTH) {
        var days = Math.round(minutes / MINUTES_IN_DAY);
        return locale$1.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months
      } else if (minutes < MINUTES_IN_TWO_MONTHS) {
        months = Math.round(minutes / MINUTES_IN_MONTH);
        return locale$1.formatDistance('aboutXMonths', months, localizeOptions);
      }

      months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months

      if (months < 12) {
        var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
        return locale$1.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date
      } else {
        var monthsSinceStartOfYear = months % 12;
        var years = Math.floor(months / 12); // N years up to 1 years 3 months

        if (monthsSinceStartOfYear < 3) {
          return locale$1.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months
        } else if (monthsSinceStartOfYear < 9) {
          return locale$1.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months
        } else {
          return locale$1.formatDistance('almostXYears', years + 1, localizeOptions);
        }
      }
    }

    /**
     * @name formatDistanceToNow
     * @category Common Helpers
     * @summary Return the distance between the given date and now in words.
     * @pure false
     *
     * @description
     * Return the distance between the given date and now in words.
     *
     * | Distance to now                                                   | Result              |
     * |-------------------------------------------------------------------|---------------------|
     * | 0 ... 30 secs                                                     | less than a minute  |
     * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
     * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
     * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
     * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
     * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
     * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
     * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
     * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
     * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
     * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
     * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
     * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
     * | N yrs ... N yrs 3 months                                          | about N years       |
     * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
     * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
     *
     * With `options.includeSeconds == true`:
     * | Distance to now     | Result               |
     * |---------------------|----------------------|
     * | 0 secs ... 5 secs   | less than 5 seconds  |
     * | 5 secs ... 10 secs  | less than 10 seconds |
     * | 10 secs ... 20 secs | less than 20 seconds |
     * | 20 secs ... 40 secs | half a minute        |
     * | 40 secs ... 60 secs | less than a minute   |
     * | 60 secs ... 90 secs | 1 minute             |
     *
     * > ⚠️ Please note that this function is not present in the FP submodule as
     * > it uses `Date.now()` internally hence impure and can't be safely curried.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`
     *   to make its name consistent with `format` and `formatRelative`.
     *
     *   ```javascript
     *   // Before v2.0.0
     *
     *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })
     *   //=> 'in 6 months'
     *
     *   // v2.0.0 onward
     *
     *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })
     *   //=> 'in 6 months'
     *   ```
     *
     * @param {Date|Number} date - the given date
     * @param {Object} [options] - the object with options
     * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
     * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @returns {String} the distance in words
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `formatDistance` property
     *
     * @example
     * // If today is 1 January 2015, what is the distance to 2 July 2014?
     * var result = formatDistanceToNow(
     *   new Date(2014, 6, 2)
     * )
     * //=> '6 months'
     *
     * @example
     * // If now is 1 January 2015 00:00:00,
     * // what is the distance to 1 January 2015 00:00:15, including seconds?
     * var result = formatDistanceToNow(
     *   new Date(2015, 0, 1, 0, 0, 15),
     *   {includeSeconds: true}
     * )
     * //=> 'less than 20 seconds'
     *
     * @example
     * // If today is 1 January 2015,
     * // what is the distance to 1 January 2016, with a suffix?
     * var result = formatDistanceToNow(
     *   new Date(2016, 0, 1),
     *   {addSuffix: true}
     * )
     * //=> 'in about 1 year'
     *
     * @example
     * // If today is 1 January 2015,
     * // what is the distance to 1 August 2016 in Esperanto?
     * var eoLocale = require('date-fns/locale/eo')
     * var result = formatDistanceToNow(
     *   new Date(2016, 7, 1),
     *   {locale: eoLocale}
     * )
     * //=> 'pli ol 1 jaro'
     */

    function formatDistanceToNow(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      return formatDistance(dirtyDate, Date.now(), dirtyOptions);
    }

    /**
     * @name subDays
     * @category Day Helpers
     * @summary Subtract the specified number of days from the given date.
     *
     * @description
     * Subtract the specified number of days from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the days subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 10 days from 1 September 2014:
     * const result = subDays(new Date(2014, 8, 1), 10)
     * //=> Fri Aug 22 2014 00:00:00
     */

    function subDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addDays(dirtyDate, -amount);
    }

    /**
     * @name subMonths
     * @category Month Helpers
     * @summary Subtract the specified number of months from the given date.
     *
     * @description
     * Subtract the specified number of months from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the months subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 5 months from 1 February 2015:
     * const result = subMonths(new Date(2015, 1, 1), 5)
     * //=> Mon Sep 01 2014 00:00:00
     */

    function subMonths(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMonths(dirtyDate, -amount);
    }

    /**
     * @name subHours
     * @category Hour Helpers
     * @summary Subtract the specified number of hours from the given date.
     *
     * @description
     * Subtract the specified number of hours from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the hours subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 2 hours from 11 July 2014 01:00:00:
     * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)
     * //=> Thu Jul 10 2014 23:00:00
     */

    function subHours(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addHours(dirtyDate, -amount);
    }

    /**
     * @name subWeeks
     * @category Week Helpers
     * @summary Subtract the specified number of weeks from the given date.
     *
     * @description
     * Subtract the specified number of weeks from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the weeks subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 4 weeks from 1 September 2014:
     * const result = subWeeks(new Date(2014, 8, 1), 4)
     * //=> Mon Aug 04 2014 00:00:00
     */

    function subWeeks(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addWeeks(dirtyDate, -amount);
    }

    /**
     * @name subYears
     * @category Year Helpers
     * @summary Subtract the specified number of years from the given date.
     *
     * @description
     * Subtract the specified number of years from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the years subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 5 years from 1 September 2014:
     * const result = subYears(new Date(2014, 8, 1), 5)
     * //=> Tue Sep 01 2009 00:00:00
     */

    function subYears(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addYears(dirtyDate, -amount);
    }

    class TransactionsService {
        fetchPriceLast24Hours() {
            return { data: 1.2 };
        }
        fetchPriceHistory(interval, scale) {
            const data = new Array();
            for (let i = 0; i < scale; i++)
                data.push(Math.random() * 1.2);
            return { data };
        }
        fetchEnergyHistory(interval, scale) {
            const data = new Array();
            for (let i = 0; i < scale; i++)
                data.push(Math.random() * 1.2);
            return { data };
        }
        fetchEnergyFlow(start, end) {
            format(start, "MM-dd-yyyy HH:mm:ss");
            format(end, "MM-dd-yyyy HH:mm:ss");
            return {
                data: {
                    energyFromCommunity: 100,
                    energyFromPublicGrid: 20,
                    energyToCommunity: 120,
                    energyToPublicGrid: 80,
                },
            };
        }
    }

    class UsersService {
        async fetchPrices() {
            return { data: { buyPrice: 1.2, sellPrice: 1.18 } };
        }
    }

    const authService = new AuthService();
    const hederaService = new HederaService();
    const notificationsService = new NotificationService();
    const paymentsService = new PaymentsService();
    const usersService = new UsersService();
    const transactionsService = new TransactionsService();

    /* src\auth\routes\Login.svelte generated by Svelte v3.37.0 */
    const file$v = "src\\auth\\routes\\Login.svelte";

    function create_fragment$v(ctx) {
    	let div12;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let h2;
    	let t2;
    	let div11;
    	let div10;
    	let div9;
    	let div2;
    	let label0;
    	let t4;
    	let div1;
    	let input0;
    	let t5;
    	let div4;
    	let label1;
    	let t7;
    	let div3;
    	let input1;
    	let t8;
    	let div7;
    	let div5;
    	let input2;
    	let t9;
    	let label2;
    	let t11;
    	let div6;
    	let a;
    	let t13;
    	let div8;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			h2 = element("h2");
    			h2.textContent = "Sign in to your account";
    			t2 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div2 = element("div");
    			label0 = element("label");
    			label0.textContent = "Email address";
    			t4 = space();
    			div1 = element("div");
    			input0 = element("input");
    			t5 = space();
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "Password";
    			t7 = space();
    			div3 = element("div");
    			input1 = element("input");
    			t8 = space();
    			div7 = element("div");
    			div5 = element("div");
    			input2 = element("input");
    			t9 = space();
    			label2 = element("label");
    			label2.textContent = "Remember me";
    			t11 = space();
    			div6 = element("div");
    			a = element("a");
    			a.textContent = "Forgot your password?";
    			t13 = space();
    			div8 = element("div");
    			button = element("button");
    			button.textContent = "Sign in";
    			attr_dev(img, "class", "mx-auto h-12 w-auto");
    			if (img.src !== (img_src_value = "https://energify.pt/logo-small.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Workflow");
    			add_location(img, file$v, 25, 4, 1254);
    			attr_dev(h2, "class", "mt-6 text-center text-3xl font-extrabold text-gray-900");
    			add_location(h2, file$v, 26, 4, 1351);
    			attr_dev(div0, "class", "sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div0, file$v, 24, 2, 1202);
    			attr_dev(label0, "for", "email");
    			attr_dev(label0, "class", "block text-sm font-medium text-gray-700");
    			add_location(label0, file$v, 33, 10, 1639);
    			attr_dev(input0, "id", "email");
    			attr_dev(input0, "name", "email");
    			attr_dev(input0, "autocomplete", "off");
    			attr_dev(input0, "type", "email");
    			input0.required = true;
    			attr_dev(input0, "class", "input");
    			add_location(input0, file$v, 35, 12, 1773);
    			attr_dev(div1, "class", "mt-1");
    			add_location(div1, file$v, 34, 10, 1741);
    			add_location(div2, file$v, 32, 8, 1622);
    			attr_dev(label1, "for", "password");
    			attr_dev(label1, "class", "block text-sm font-medium text-gray-700");
    			add_location(label1, file$v, 48, 10, 2075);
    			attr_dev(input1, "id", "password");
    			attr_dev(input1, "name", "password");
    			attr_dev(input1, "type", "password");
    			input1.required = true;
    			attr_dev(input1, "class", "input");
    			add_location(input1, file$v, 50, 12, 2207);
    			attr_dev(div3, "class", "mt-1");
    			add_location(div3, file$v, 49, 10, 2175);
    			add_location(div4, file$v, 47, 8, 2058);
    			attr_dev(input2, "id", "remember_me");
    			attr_dev(input2, "name", "remember_me");
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "class", "h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded");
    			add_location(input2, file$v, 63, 12, 2574);
    			attr_dev(label2, "for", "remember_me");
    			attr_dev(label2, "class", "ml-2 block text-sm text-gray-900");
    			add_location(label2, file$v, 69, 12, 2798);
    			attr_dev(div5, "class", "flex items-center");
    			add_location(div5, file$v, 62, 10, 2529);
    			attr_dev(a, "href", "#");
    			attr_dev(a, "class", "font-medium text-green-600 hover:text-green-500");
    			add_location(a, file$v, 73, 12, 2952);
    			attr_dev(div6, "class", "text-sm");
    			add_location(div6, file$v, 72, 10, 2917);
    			attr_dev(div7, "class", "flex items-center justify-between");
    			add_location(div7, file$v, 61, 8, 2470);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "w-full flex justify-center btn");
    			add_location(button, file$v, 80, 10, 3138);
    			add_location(div8, file$v, 79, 8, 3121);
    			attr_dev(div9, "class", "space-y-6");
    			add_location(div9, file$v, 31, 6, 1589);
    			attr_dev(div10, "class", "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10");
    			add_location(div10, file$v, 30, 4, 1519);
    			attr_dev(div11, "class", "mt-8 sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div11, file$v, 29, 2, 1462);
    			attr_dev(div12, "class", "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8");
    			add_location(div12, file$v, 23, 0, 1110);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, h2);
    			append_dev(div12, t2);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div2);
    			append_dev(div2, label0);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*loginFormData*/ ctx[0].email);
    			append_dev(div9, t5);
    			append_dev(div9, div4);
    			append_dev(div4, label1);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, input1);
    			set_input_value(input1, /*loginFormData*/ ctx[0].password);
    			append_dev(div9, t8);
    			append_dev(div9, div7);
    			append_dev(div7, div5);
    			append_dev(div5, input2);
    			append_dev(div5, t9);
    			append_dev(div5, label2);
    			append_dev(div7, t11);
    			append_dev(div7, div6);
    			append_dev(div6, a);
    			append_dev(div9, t13);
    			append_dev(div9, div8);
    			append_dev(div8, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(button, "click", /*handleLogin*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*loginFormData*/ 1 && input0.value !== /*loginFormData*/ ctx[0].email) {
    				set_input_value(input0, /*loginFormData*/ ctx[0].email);
    			}

    			if (dirty & /*loginFormData*/ 1 && input1.value !== /*loginFormData*/ ctx[0].password) {
    				set_input_value(input1, /*loginFormData*/ ctx[0].password);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Login", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let loginFormData = { email: "", password: "" };

    	function handleLogin() {
    		return __awaiter(this, void 0, void 0, function* () {
    			try {
    				yield authService.login(loginFormData);
    				push("/");
    			} catch(_a) {
    				
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		loginFormData.email = this.value;
    		$$invalidate(0, loginFormData);
    	}

    	function input1_input_handler() {
    		loginFormData.password = this.value;
    		$$invalidate(0, loginFormData);
    	}

    	$$self.$capture_state = () => ({
    		__awaiter,
    		push,
    		authService,
    		loginFormData,
    		handleLogin
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("loginFormData" in $$props) $$invalidate(0, loginFormData = $$props.loginFormData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [loginFormData, handleLogin, input0_input_handler, input1_input_handler];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* src\auth\routes\Register.svelte generated by Svelte v3.37.0 */
    const file$u = "src\\auth\\routes\\Register.svelte";

    function create_fragment$u(ctx) {
    	let div14;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let h2;
    	let t2;
    	let div13;
    	let div12;
    	let form;
    	let div2;
    	let label0;
    	let t4;
    	let div1;
    	let input0;
    	let t5;
    	let div4;
    	let label1;
    	let t7;
    	let div3;
    	let input1;
    	let t8;
    	let div6;
    	let label2;
    	let t10;
    	let div5;
    	let input2;
    	let t11;
    	let div8;
    	let label3;
    	let t13;
    	let div7;
    	let input3;
    	let t14;
    	let div10;
    	let label4;
    	let t16;
    	let div9;
    	let input4;
    	let t17;
    	let div11;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			h2 = element("h2");
    			h2.textContent = "Create a new account";
    			t2 = space();
    			div13 = element("div");
    			div12 = element("div");
    			form = element("form");
    			div2 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name";
    			t4 = space();
    			div1 = element("div");
    			input0 = element("input");
    			t5 = space();
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "Birthday";
    			t7 = space();
    			div3 = element("div");
    			input1 = element("input");
    			t8 = space();
    			div6 = element("div");
    			label2 = element("label");
    			label2.textContent = "Email address";
    			t10 = space();
    			div5 = element("div");
    			input2 = element("input");
    			t11 = space();
    			div8 = element("div");
    			label3 = element("label");
    			label3.textContent = "Password";
    			t13 = space();
    			div7 = element("div");
    			input3 = element("input");
    			t14 = space();
    			div10 = element("div");
    			label4 = element("label");
    			label4.textContent = "Citizen No";
    			t16 = space();
    			div9 = element("div");
    			input4 = element("input");
    			t17 = space();
    			div11 = element("div");
    			button = element("button");
    			button.textContent = "Sign up";
    			attr_dev(img, "class", "mx-auto h-12 w-auto");
    			if (img.src !== (img_src_value = "https://energify.pt/logo-small.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Workflow");
    			add_location(img, file$u, 31, 4, 1335);
    			attr_dev(h2, "class", "mt-6 text-center text-3xl font-extrabold text-gray-900");
    			add_location(h2, file$u, 32, 4, 1432);
    			attr_dev(div0, "class", "sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div0, file$u, 30, 2, 1283);
    			attr_dev(label0, "for", "name");
    			attr_dev(label0, "class", "block text-sm font-medium text-gray-700");
    			add_location(label0, file$u, 39, 10, 1760);
    			attr_dev(input0, "id", "name");
    			attr_dev(input0, "name", "name");
    			input0.required = true;
    			attr_dev(input0, "class", "input");
    			add_location(input0, file$u, 41, 12, 1884);
    			attr_dev(div1, "class", "mt-1");
    			add_location(div1, file$u, 40, 10, 1852);
    			add_location(div2, file$u, 38, 8, 1743);
    			attr_dev(label1, "for", "birthday");
    			attr_dev(label1, "class", "block text-sm font-medium text-gray-700");
    			add_location(label1, file$u, 52, 10, 2124);
    			attr_dev(input1, "id", "birthday");
    			attr_dev(input1, "type", "date");
    			attr_dev(input1, "name", "birthday");
    			input1.required = true;
    			attr_dev(input1, "class", "input");
    			add_location(input1, file$u, 54, 12, 2256);
    			attr_dev(div3, "class", "mt-1");
    			add_location(div3, file$u, 53, 10, 2224);
    			add_location(div4, file$u, 51, 8, 2107);
    			attr_dev(label2, "for", "email");
    			attr_dev(label2, "class", "block text-sm font-medium text-gray-700");
    			add_location(label2, file$u, 66, 10, 2535);
    			attr_dev(input2, "id", "email");
    			attr_dev(input2, "name", "email");
    			attr_dev(input2, "type", "email");
    			input2.required = true;
    			attr_dev(input2, "class", "input");
    			add_location(input2, file$u, 68, 12, 2669);
    			attr_dev(div5, "class", "mt-1");
    			add_location(div5, file$u, 67, 10, 2637);
    			add_location(div6, file$u, 65, 8, 2518);
    			attr_dev(label3, "for", "password");
    			attr_dev(label3, "class", "block text-sm font-medium text-gray-700");
    			add_location(label3, file$u, 80, 10, 2940);
    			attr_dev(input3, "id", "password");
    			attr_dev(input3, "name", "password");
    			attr_dev(input3, "type", "password");
    			input3.required = true;
    			attr_dev(input3, "class", "input");
    			add_location(input3, file$u, 82, 12, 3072);
    			attr_dev(div7, "class", "mt-1");
    			add_location(div7, file$u, 81, 10, 3040);
    			add_location(div8, file$u, 79, 8, 2923);
    			attr_dev(label4, "for", "cc");
    			attr_dev(label4, "class", "block text-sm font-medium text-gray-700");
    			add_location(label4, file$u, 94, 10, 3355);
    			attr_dev(input4, "id", "cc");
    			attr_dev(input4, "name", "cc");
    			input4.required = true;
    			attr_dev(input4, "class", "input");
    			add_location(input4, file$u, 96, 12, 3483);
    			attr_dev(div9, "class", "mt-1");
    			add_location(div9, file$u, 95, 10, 3451);
    			add_location(div10, file$u, 93, 8, 3338);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "w-full flex justify-center btn");
    			add_location(button, file$u, 101, 10, 3629);
    			add_location(div11, file$u, 100, 8, 3612);
    			attr_dev(form, "class", "space-y-6");
    			add_location(form, file$u, 37, 6, 1667);
    			attr_dev(div12, "class", "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10");
    			add_location(div12, file$u, 36, 4, 1597);
    			attr_dev(div13, "class", "mt-8 sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div13, file$u, 35, 2, 1540);
    			attr_dev(div14, "class", "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8");
    			add_location(div14, file$u, 29, 0, 1191);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, h2);
    			append_dev(div14, t2);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, form);
    			append_dev(form, div2);
    			append_dev(div2, label0);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*registerFormData*/ ctx[0].name);
    			append_dev(form, t5);
    			append_dev(form, div4);
    			append_dev(div4, label1);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, input1);
    			set_input_value(input1, /*registerFormData*/ ctx[0].birthday);
    			append_dev(form, t8);
    			append_dev(form, div6);
    			append_dev(div6, label2);
    			append_dev(div6, t10);
    			append_dev(div6, div5);
    			append_dev(div5, input2);
    			set_input_value(input2, /*registerFormData*/ ctx[0].email);
    			append_dev(form, t11);
    			append_dev(form, div8);
    			append_dev(div8, label3);
    			append_dev(div8, t13);
    			append_dev(div8, div7);
    			append_dev(div7, input3);
    			set_input_value(input3, /*registerFormData*/ ctx[0].password);
    			append_dev(form, t14);
    			append_dev(form, div10);
    			append_dev(div10, label4);
    			append_dev(div10, t16);
    			append_dev(div10, div9);
    			append_dev(div9, input4);
    			set_input_value(input4, /*registerFormData*/ ctx[0].cc);
    			append_dev(form, t17);
    			append_dev(form, div11);
    			append_dev(div11, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[4]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[5]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[6]),
    					listen_dev(form, "submit", prevent_default(/*handleRegister*/ ctx[1]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*registerFormData*/ 1 && input0.value !== /*registerFormData*/ ctx[0].name) {
    				set_input_value(input0, /*registerFormData*/ ctx[0].name);
    			}

    			if (dirty & /*registerFormData*/ 1) {
    				set_input_value(input1, /*registerFormData*/ ctx[0].birthday);
    			}

    			if (dirty & /*registerFormData*/ 1 && input2.value !== /*registerFormData*/ ctx[0].email) {
    				set_input_value(input2, /*registerFormData*/ ctx[0].email);
    			}

    			if (dirty & /*registerFormData*/ 1 && input3.value !== /*registerFormData*/ ctx[0].password) {
    				set_input_value(input3, /*registerFormData*/ ctx[0].password);
    			}

    			if (dirty & /*registerFormData*/ 1 && input4.value !== /*registerFormData*/ ctx[0].cc) {
    				set_input_value(input4, /*registerFormData*/ ctx[0].cc);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Register", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let registerFormData = {
    		name: "",
    		birthday: "",
    		email: "",
    		password: "",
    		cc: ""
    	};

    	function handleRegister() {
    		return __awaiter(this, void 0, void 0, function* () {
    			try {
    				yield authService.register(registerFormData);
    				push("/auth/login");
    			} catch(_a) {
    				
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Register> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		registerFormData.name = this.value;
    		$$invalidate(0, registerFormData);
    	}

    	function input1_input_handler() {
    		registerFormData.birthday = this.value;
    		$$invalidate(0, registerFormData);
    	}

    	function input2_input_handler() {
    		registerFormData.email = this.value;
    		$$invalidate(0, registerFormData);
    	}

    	function input3_input_handler() {
    		registerFormData.password = this.value;
    		$$invalidate(0, registerFormData);
    	}

    	function input4_input_handler() {
    		registerFormData.cc = this.value;
    		$$invalidate(0, registerFormData);
    	}

    	$$self.$capture_state = () => ({
    		__awaiter,
    		push,
    		authService,
    		registerFormData,
    		handleRegister
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("registerFormData" in $$props) $$invalidate(0, registerFormData = $$props.registerFormData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		registerFormData,
    		handleRegister,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler
    	];
    }

    class Register extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Register",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* node_modules\svelte-hero-icons\dist\Icon.svelte generated by Svelte v3.37.0 */

    const file$t = "node_modules\\svelte-hero-icons\\dist\\Icon.svelte";

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (22:0) {#if src && src != []}
    function create_if_block$5(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*solid*/ ctx[2]) return create_if_block_1$1;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(22:0) {#if src && src != []}",
    		ctx
    	});

    	return block;
    }

    // (37:2) {:else}
    function create_else_block$2(ctx) {
    	let svg;
    	let svg_class_value;
    	let each_value_1 = /*src*/ ctx[1][1] ?? [];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", svg_class_value = "heroicon outline " + /*customClass*/ ctx[3]);
    			attr_dev(svg, "width", /*size*/ ctx[0]);
    			attr_dev(svg, "height", /*size*/ ctx[0]);
    			add_location(svg, file$t, 37, 4, 759);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 2) {
    				each_value_1 = /*src*/ ctx[1][1] ?? [];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*customClass*/ 8 && svg_class_value !== (svg_class_value = "heroicon outline " + /*customClass*/ ctx[3])) {
    				attr_dev(svg, "class", svg_class_value);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "width", /*size*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "height", /*size*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(37:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (23:2) {#if solid}
    function create_if_block_1$1(ctx) {
    	let svg;
    	let svg_class_value;
    	let each_value = /*src*/ ctx[1][0] ?? [];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 20 20");
    			attr_dev(svg, "fill", "currentColor");
    			attr_dev(svg, "class", svg_class_value = "heroicon solid " + /*customClass*/ ctx[3]);
    			attr_dev(svg, "width", /*size*/ ctx[0]);
    			attr_dev(svg, "height", /*size*/ ctx[0]);
    			add_location(svg, file$t, 23, 4, 446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 2) {
    				each_value = /*src*/ ctx[1][0] ?? [];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*customClass*/ 8 && svg_class_value !== (svg_class_value = "heroicon solid " + /*customClass*/ ctx[3])) {
    				attr_dev(svg, "class", svg_class_value);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "width", /*size*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "height", /*size*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(23:2) {#if solid}",
    		ctx
    	});

    	return block;
    }

    // (47:6) {#each src[1] ?? [] as att}
    function create_each_block_1$1(ctx) {
    	let path;
    	let path_levels = [/*att*/ ctx[4]];
    	let path_data = {};

    	for (let i = 0; i < path_levels.length; i += 1) {
    		path_data = assign$1(path_data, path_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			set_svg_attributes(path, path_data);
    			add_location(path, file$t, 48, 8, 1037);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(path, path_data = get_spread_update(path_levels, [dirty & /*src*/ 2 && /*att*/ ctx[4]]));
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(47:6) {#each src[1] ?? [] as att}",
    		ctx
    	});

    	return block;
    }

    // (32:6) {#each src[0] ?? [] as att}
    function create_each_block$6(ctx) {
    	let path;
    	let path_levels = [/*att*/ ctx[4]];
    	let path_data = {};

    	for (let i = 0; i < path_levels.length; i += 1) {
    		path_data = assign$1(path_data, path_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			set_svg_attributes(path, path_data);
    			add_location(path, file$t, 33, 8, 702);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(path, path_data = get_spread_update(path_levels, [dirty & /*src*/ 2 && /*att*/ ctx[4]]));
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(32:6) {#each src[0] ?? [] as att}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let if_block_anchor;
    	let if_block = /*src*/ ctx[1] && /*src*/ ctx[1] != [] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*src*/ ctx[1] && /*src*/ ctx[1] != []) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Icon", slots, []);
    	let { src = [] } = $$props;
    	let { size = "100%" } = $$props;
    	let { solid = false } = $$props;
    	let { class: customClass = "" } = $$props;

    	if (size !== "100%") {
    		if (size.slice(-1) != "x" && size.slice(-1) != "m" && size.slice(-1) != "%") {
    			try {
    				size = parseInt(size) + "px";
    			} catch(error) {
    				size = "100%";
    			}
    		}
    	}

    	const writable_props = ["src", "size", "solid", "class"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("src" in $$props) $$invalidate(1, src = $$props.src);
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("solid" in $$props) $$invalidate(2, solid = $$props.solid);
    		if ("class" in $$props) $$invalidate(3, customClass = $$props.class);
    	};

    	$$self.$capture_state = () => ({ src, size, solid, customClass });

    	$$self.$inject_state = $$props => {
    		if ("src" in $$props) $$invalidate(1, src = $$props.src);
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("solid" in $$props) $$invalidate(2, solid = $$props.solid);
    		if ("customClass" in $$props) $$invalidate(3, customClass = $$props.customClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, src, solid, customClass];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, { src: 1, size: 0, solid: 2, class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$t.name
    		});
    	}

    	get src() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set src(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var ArrowUp = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M5 10l7-7m0 0l7 7m-7-7v18"
    		}
    	]
    ];

    var Cash = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
    		}
    	]
    ];

    var ChartBar = [
    	[
    		{
    			d: "M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
    		}
    	]
    ];

    var CheckCircle = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
    		}
    	]
    ];

    var ChevronDown = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M19 9l-7 7-7-7"
    		}
    	]
    ];

    var Cloud = [
    	[
    		{
    			d: "M5.5 16a3.5 3.5 0 01-.369-6.98 4 4 0 117.753-1.977A4.5 4.5 0 1113.5 16h-8z"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"
    		}
    	]
    ];

    var Exclamation = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
    		}
    	]
    ];

    var Home = [
    	[
    		{
    			d: "M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
    		}
    	]
    ];

    var InformationCircle = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
    		}
    	]
    ];

    var LightningBolt = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M13 10V3L4 14h7v7l9-11h-7z"
    		}
    	]
    ];

    var Menu = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M4 6h16M4 12h16M4 18h16"
    		}
    	]
    ];

    var X = [
    	[
    		{
    			"fill-rule": "evenodd",
    			d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
    			"clip-rule": "evenodd"
    		}
    	],
    	[
    		{
    			"stroke-linecap": "round",
    			"stroke-linejoin": "round",
    			"stroke-width": "2",
    			d: "M6 18L18 6M6 6l12 12"
    		}
    	]
    ];

    /* src\auth\routes\Complete.svelte generated by Svelte v3.37.0 */

    const { Object: Object_1 } = globals;

    const file$s = "src\\auth\\routes\\Complete.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (82:12) {#each mnemonic.split(" ") as word}
    function create_each_block$5(ctx) {
    	let div;
    	let t0_value = /*word*/ ctx[7] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(div, "class", "flex items-center justify-center bg-gray-100 text-gray-600 px-1 mr-4 \r\n                rounded-md col-span-3");
    			add_location(div, file$s, 82, 14, 3475);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mnemonic*/ 1 && t0_value !== (t0_value = /*word*/ ctx[7] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(82:12) {#each mnemonic.split(\\\" \\\") as word}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div12;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let h2;
    	let t2;
    	let div11;
    	let div10;
    	let form;
    	let div2;
    	let div1;
    	let icon;
    	let t3;
    	let t4;
    	let div4;
    	let label0;
    	let t6;
    	let div3;
    	let input0;
    	let t7;
    	let div6;
    	let label1;
    	let t9;
    	let div5;
    	let input1;
    	let t10;
    	let div8;
    	let span;
    	let t12;
    	let div7;
    	let t13;
    	let div9;
    	let button;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { src: Exclamation, class: "mr-2 w-8 h-8" },
    			$$inline: true
    		});

    	let each_value = /*mnemonic*/ ctx[0].split(" ");
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			h2 = element("h2");
    			h2.textContent = "Complete Account";
    			t2 = space();
    			div11 = element("div");
    			div10 = element("div");
    			form = element("form");
    			div2 = element("div");
    			div1 = element("div");
    			create_component(icon.$$.fragment);
    			t3 = text("\r\n            The recovery phrase is only showed once, store it in a safe place.");
    			t4 = space();
    			div4 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nif";
    			t6 = space();
    			div3 = element("div");
    			input0 = element("input");
    			t7 = space();
    			div6 = element("div");
    			label1 = element("label");
    			label1.textContent = "Address";
    			t9 = space();
    			div5 = element("div");
    			input1 = element("input");
    			t10 = space();
    			div8 = element("div");
    			span = element("span");
    			span.textContent = "Recovery Phrase";
    			t12 = space();
    			div7 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t13 = space();
    			div9 = element("div");
    			button = element("button");
    			button.textContent = "Complete";
    			attr_dev(img, "class", "mx-auto h-12 w-auto");
    			if (img.src !== (img_src_value = "https://energify.pt/logo-small.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Workflow");
    			add_location(img, file$s, 41, 4, 1877);
    			attr_dev(h2, "class", "mt-6 text-center text-3xl font-extrabold text-gray-900");
    			add_location(h2, file$s, 42, 4, 1974);
    			attr_dev(div0, "class", "sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div0, file$s, 40, 2, 1825);
    			attr_dev(div1, "class", "flex items-center bg-yellow-100 text-yellow-800 p-2 rounded-md \r\n            text-sm mt-2");
    			add_location(div1, file$s, 49, 10, 2298);
    			add_location(div2, file$s, 48, 8, 2281);
    			attr_dev(label0, "for", "nif");
    			attr_dev(label0, "class", "block text-sm font-medium text-gray-700");
    			add_location(label0, file$s, 59, 10, 2630);
    			attr_dev(input0, "id", "nif");
    			attr_dev(input0, "name", "nif");
    			input0.required = true;
    			attr_dev(input0, "class", "input");
    			add_location(input0, file$s, 61, 12, 2752);
    			attr_dev(div3, "class", "mt-1");
    			add_location(div3, file$s, 60, 10, 2720);
    			add_location(div4, file$s, 58, 8, 2613);
    			attr_dev(label1, "for", "address");
    			attr_dev(label1, "class", "block text-sm font-medium text-gray-700");
    			add_location(label1, file$s, 66, 10, 2901);
    			attr_dev(input1, "id", "address");
    			attr_dev(input1, "name", "address");
    			input1.required = true;
    			attr_dev(input1, "class", "input");
    			add_location(input1, file$s, 68, 12, 3031);
    			attr_dev(div5, "class", "mt-1");
    			add_location(div5, file$s, 67, 10, 2999);
    			add_location(div6, file$s, 65, 8, 2884);
    			attr_dev(span, "class", "block text-sm font-medium text-gray-700");
    			add_location(span, file$s, 79, 10, 3280);
    			attr_dev(div7, "class", "grid grid-cols-12 mt-2 gap-3");
    			add_location(div7, file$s, 80, 10, 3368);
    			add_location(div8, file$s, 78, 8, 3263);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "w-full flex justify-center btn");
    			add_location(button, file$s, 93, 10, 3760);
    			add_location(div9, file$s, 92, 8, 3743);
    			attr_dev(form, "class", "space-y-6");
    			add_location(form, file$s, 47, 6, 2205);
    			attr_dev(div10, "class", "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10");
    			add_location(div10, file$s, 46, 4, 2135);
    			attr_dev(div11, "class", "mt-8 sm:mx-auto sm:w-full sm:max-w-md");
    			add_location(div11, file$s, 45, 2, 2078);
    			attr_dev(div12, "class", "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8");
    			add_location(div12, file$s, 39, 0, 1733);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, h2);
    			append_dev(div12, t2);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, form);
    			append_dev(form, div2);
    			append_dev(div2, div1);
    			mount_component(icon, div1, null);
    			append_dev(div1, t3);
    			append_dev(form, t4);
    			append_dev(form, div4);
    			append_dev(div4, label0);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, input0);
    			set_input_value(input0, /*completeFormData*/ ctx[1].nif);
    			append_dev(form, t7);
    			append_dev(form, div6);
    			append_dev(div6, label1);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, input1);
    			set_input_value(input1, /*completeFormData*/ ctx[1].address);
    			append_dev(form, t10);
    			append_dev(form, div8);
    			append_dev(div8, span);
    			append_dev(div8, t12);
    			append_dev(div8, div7);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div7, null);
    			}

    			append_dev(form, t13);
    			append_dev(form, div9);
    			append_dev(div9, button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
    					listen_dev(form, "submit", prevent_default(/*handleComplete*/ ctx[2]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*completeFormData*/ 2 && input0.value !== /*completeFormData*/ ctx[1].nif) {
    				set_input_value(input0, /*completeFormData*/ ctx[1].nif);
    			}

    			if (dirty & /*completeFormData*/ 2 && input1.value !== /*completeFormData*/ ctx[1].address) {
    				set_input_value(input1, /*completeFormData*/ ctx[1].address);
    			}

    			if (dirty & /*mnemonic*/ 1) {
    				each_value = /*mnemonic*/ ctx[0].split(" ");
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div7, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    			destroy_component(icon);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Complete", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let mnemonic = "";
    	let completeFormData = { nif: "", address: "" };

    	function generateMnemonicAndKeyPairs() {
    		return __awaiter(this, void 0, void 0, function* () {
    			$$invalidate(0, mnemonic = yield hederaService.generateMnemonic());
    		});
    	}

    	function handleComplete() {
    		return __awaiter(this, void 0, void 0, function* () {
    			try {
    				const { privateKey, publicKey } = yield hederaService.generateKeyPairs(mnemonic);
    				const hederaAccountId = yield hederaService.createAccount(privateKey, publicKey);
    				yield authService.complete(Object.assign(Object.assign({}, completeFormData), { hederaAccountId }));
    				push("/");
    			} catch(_a) {
    				
    			}
    		});
    	}

    	onMount(() => {
    		generateMnemonicAndKeyPairs();
    	});

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Complete> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		completeFormData.nif = this.value;
    		$$invalidate(1, completeFormData);
    	}

    	function input1_input_handler() {
    		completeFormData.address = this.value;
    		$$invalidate(1, completeFormData);
    	}

    	$$self.$capture_state = () => ({
    		__awaiter,
    		onMount,
    		Icon,
    		Exclamation,
    		push,
    		authService,
    		hederaService,
    		mnemonic,
    		completeFormData,
    		generateMnemonicAndKeyPairs,
    		handleComplete
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("mnemonic" in $$props) $$invalidate(0, mnemonic = $$props.mnemonic);
    		if ("completeFormData" in $$props) $$invalidate(1, completeFormData = $$props.completeFormData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		mnemonic,
    		completeFormData,
    		handleComplete,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class Complete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Complete",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    var authRoutes = {
        "/auth/login": wrap$1({
            component: Login,
            //conditions: [async () => !(await authService.isLoggedIn())],
        }),
        "/auth/register": wrap$1({
            component: Register,
            //conditions: [async () => !(await authService.isLoggedIn())],
        }),
        "/auth/complete": wrap$1({
            component: Complete,
            /*conditions: [
              async () => await authService.isLoggedIn(),
              () => !authService.isAccountComplete(),
            ],*/
        }),
    };

    /* src\common\components\notifications\Notification.svelte generated by Svelte v3.37.0 */
    const file$r = "src\\common\\components\\notifications\\Notification.svelte";

    // (20:0) {#if isMounted}
    function create_if_block$4(ctx) {
    	let div7;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let div0;
    	let icon0;
    	let t0;
    	let div1;
    	let p0;
    	let t1_value = /*notification*/ ctx[0].title + "";
    	let t1;
    	let t2;
    	let p1;
    	let t3_value = /*notification*/ ctx[0].description + "";
    	let t3;
    	let t4;
    	let div2;
    	let button;
    	let icon1;
    	let div6_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	icon0 = new Icon({
    			props: {
    				src: /*notification*/ ctx[0].type === "success"
    				? CheckCircle
    				: /*notification*/ ctx[0].type === "error"
    					? Exclamation
    					: InformationCircle,
    				class: "h-6 w-6"
    			},
    			$$inline: true
    		});

    	icon1 = new Icon({
    			props: { src: X, class: "h-5 w-5" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			create_component(icon0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			p1 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			div2 = element("div");
    			button = element("button");
    			create_component(icon1.$$.fragment);
    			attr_dev(div0, "class", "flex-shrink-0");
    			toggle_class(div0, "text-green-400", /*notification*/ ctx[0].type === "success");
    			toggle_class(div0, "text-red-400", /*notification*/ ctx[0].type === "error");
    			toggle_class(div0, "text-gray-900", /*notification*/ ctx[0].type === "info");
    			add_location(div0, file$r, 36, 12, 1254);
    			attr_dev(p0, "class", "text-sm font-medium text-gray-900");
    			add_location(p0, file$r, 52, 14, 1881);
    			attr_dev(p1, "class", "mt-1 text-sm text-gray-500");
    			add_location(p1, file$r, 53, 14, 1966);
    			attr_dev(div1, "class", "ml-3 w-0 flex-1 pt-0.5");
    			add_location(div1, file$r, 51, 12, 1829);
    			attr_dev(button, "class", "bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500 \r\n              focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500");
    			add_location(button, file$r, 56, 14, 2121);
    			attr_dev(div2, "class", "ml-4 flex-shrink-0 flex");
    			add_location(div2, file$r, 55, 12, 2068);
    			attr_dev(div3, "class", "flex items-start");
    			add_location(div3, file$r, 35, 10, 1210);
    			attr_dev(div4, "class", "p-4");
    			add_location(div4, file$r, 34, 8, 1181);
    			attr_dev(div5, "class", "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 \r\n        ring-black ring-opacity-5 overflow-hidden");
    			add_location(div5, file$r, 30, 6, 1016);

    			attr_dev(div6, "class", div6_class_value = "w-full flex flex-col items-center space-y-4 sm:items-end\r\n  transform ease-out duration-300 transition " + (/*isRendered*/ ctx[2]
    			? "translate-y-0 opacity-100 sm:translate-x-0"
    			: "translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"));

    			add_location(div6, file$r, 24, 4, 739);
    			attr_dev(div7, "aria-live", "assertive");
    			attr_dev(div7, "class", "fixed inset-0 flex items-end px-4 py-6 pointer-events-none sm:p-6 sm:items-start");
    			add_location(div7, file$r, 20, 2, 603);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			mount_component(icon0, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, p0);
    			append_dev(p0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p1);
    			append_dev(p1, t3);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			mount_component(icon1, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClose*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const icon0_changes = {};

    			if (dirty & /*notification*/ 1) icon0_changes.src = /*notification*/ ctx[0].type === "success"
    			? CheckCircle
    			: /*notification*/ ctx[0].type === "error"
    				? Exclamation
    				: InformationCircle;

    			icon0.$set(icon0_changes);

    			if (dirty & /*notification*/ 1) {
    				toggle_class(div0, "text-green-400", /*notification*/ ctx[0].type === "success");
    			}

    			if (dirty & /*notification*/ 1) {
    				toggle_class(div0, "text-red-400", /*notification*/ ctx[0].type === "error");
    			}

    			if (dirty & /*notification*/ 1) {
    				toggle_class(div0, "text-gray-900", /*notification*/ ctx[0].type === "info");
    			}

    			if ((!current || dirty & /*notification*/ 1) && t1_value !== (t1_value = /*notification*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*notification*/ 1) && t3_value !== (t3_value = /*notification*/ ctx[0].description + "")) set_data_dev(t3, t3_value);

    			if (!current || dirty & /*isRendered*/ 4 && div6_class_value !== (div6_class_value = "w-full flex flex-col items-center space-y-4 sm:items-end\r\n  transform ease-out duration-300 transition " + (/*isRendered*/ ctx[2]
    			? "translate-y-0 opacity-100 sm:translate-x-0"
    			: "translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"))) {
    				attr_dev(div6, "class", div6_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			destroy_component(icon0);
    			destroy_component(icon1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(20:0) {#if isMounted}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*isMounted*/ ctx[1] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isMounted*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isMounted*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Notification", slots, []);
    	
    	let { id } = $$props;
    	let { notification } = $$props;

    	function handleClose() {
    		$$invalidate(2, isRendered = false);
    		setTimeout(() => notificationsService.clearByIndex(id), 100);
    	}

    	onMount(() => {
    		$$invalidate(1, isMounted = true);
    		setTimeout(() => $$invalidate(2, isRendered = true), 100);
    		setTimeout(() => handleClose(), 4000);
    	});

    	let isMounted = false;
    	let isRendered = false;
    	const writable_props = ["id", "notification"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notification> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(4, id = $$props.id);
    		if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Icon,
    		X,
    		Exclamation,
    		InformationCircle,
    		CheckCircle,
    		notificationsService,
    		id,
    		notification,
    		handleClose,
    		isMounted,
    		isRendered
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(4, id = $$props.id);
    		if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
    		if ("isMounted" in $$props) $$invalidate(1, isMounted = $$props.isMounted);
    		if ("isRendered" in $$props) $$invalidate(2, isRendered = $$props.isRendered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [notification, isMounted, isRendered, handleClose, id];
    }

    class Notification extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { id: 4, notification: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notification",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[4] === undefined && !("id" in props)) {
    			console.warn("<Notification> was created without expected prop 'id'");
    		}

    		if (/*notification*/ ctx[0] === undefined && !("notification" in props)) {
    			console.warn("<Notification> was created without expected prop 'notification'");
    		}
    	}

    	get id() {
    		throw new Error("<Notification>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Notification>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notification() {
    		throw new Error("<Notification>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notification(value) {
    		throw new Error("<Notification>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\notifications\NotificationManager.svelte generated by Svelte v3.37.0 */
    const file$q = "src\\common\\components\\notifications\\NotificationManager.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    // (8:2) {#each $notifications as notification, id}
    function create_each_block$4(ctx) {
    	let notification;
    	let current;

    	notification = new Notification({
    			props: {
    				notification: /*notification*/ ctx[2],
    				id: /*id*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(notification.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(notification, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const notification_changes = {};
    			if (dirty & /*$notifications*/ 1) notification_changes.notification = /*notification*/ ctx[2];
    			notification.$set(notification_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notification.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notification.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(notification, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(8:2) {#each $notifications as notification, id}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let div;
    	let current;
    	let each_value = /*$notifications*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "absolute top-0 right-0 mr-8");
    			add_location(div, file$q, 6, 0, 240);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$notifications*/ 1) {
    				each_value = /*$notifications*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $notifications;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NotificationManager", slots, []);
    	const { notifications } = notificationsService;
    	validate_store(notifications, "notifications");
    	component_subscribe($$self, notifications, value => $$invalidate(0, $notifications = value));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NotificationManager> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		notificationsService,
    		Notification,
    		notifications,
    		$notifications
    	});

    	return [$notifications, notifications];
    }

    class NotificationManager extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotificationManager",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    // List of nodes to update
    const nodes = [];

    // Current location
    let location;

    // Function that updates all nodes marking the active ones
    function checkActive(el) {
        const matchesLocation = el.pattern.test(location);
        toggleClasses(el, el.className, matchesLocation);
        toggleClasses(el, el.inactiveClassName, !matchesLocation);
    }

    function toggleClasses(el, className, shouldAdd) {
        (className || '').split(' ').forEach((cls) => {
            if (!cls) {
                return
            }
            // Remove the class firsts
            el.node.classList.remove(cls);

            // If the pattern doesn't match, then set the class
            if (shouldAdd) {
                el.node.classList.add(cls);
            }
        });
    }

    // Listen to changes in the location
    loc.subscribe((value) => {
        // Update the location
        location = value.location + (value.querystring ? '?' + value.querystring : '');

        // Update all nodes
        nodes.map(checkActive);
    });

    /**
     * @typedef {Object} ActiveOptions
     * @property {string|RegExp} [path] - Path expression that makes the link active when matched (must start with '/' or '*'); default is the link's href
     * @property {string} [className] - CSS class to apply to the element when active; default value is "active"
     */

    /**
     * Svelte Action for automatically adding the "active" class to elements (links, or any other DOM element) when the current location matches a certain path.
     * 
     * @param {HTMLElement} node - The target node (automatically set by Svelte)
     * @param {ActiveOptions|string|RegExp} [opts] - Can be an object of type ActiveOptions, or a string (or regular expressions) representing ActiveOptions.path.
     * @returns {{destroy: function(): void}} Destroy function
     */
    function active(node, opts) {
        // Check options
        if (opts && (typeof opts == 'string' || (typeof opts == 'object' && opts instanceof RegExp))) {
            // Interpret strings and regular expressions as opts.path
            opts = {
                path: opts
            };
        }
        else {
            // Ensure opts is a dictionary
            opts = opts || {};
        }

        // Path defaults to link target
        if (!opts.path && node.hasAttribute('href')) {
            opts.path = node.getAttribute('href');
            if (opts.path && opts.path.length > 1 && opts.path.charAt(0) == '#') {
                opts.path = opts.path.substring(1);
            }
        }

        // Default class name
        if (!opts.className) {
            opts.className = 'active';
        }

        // If path is a string, it must start with '/' or '*'
        if (!opts.path || 
            typeof opts.path == 'string' && (opts.path.length < 1 || (opts.path.charAt(0) != '/' && opts.path.charAt(0) != '*'))
        ) {
            throw Error('Invalid value for "path" argument')
        }

        // If path is not a regular expression already, make it
        const {pattern} = typeof opts.path == 'string' ?
            regexparam(opts.path) :
            {pattern: opts.path};

        // Add the node to the list
        const el = {
            node,
            className: opts.className,
            inactiveClassName: opts.inactiveClassName,
            pattern
        };
        nodes.push(el);

        // Trigger the action right away
        checkActive(el);

        return {
            // When the element is destroyed, remove it from the list
            destroy() {
                nodes.splice(nodes.indexOf(el), 1);
            }
        }
    }

    /* src\common\components\sidebar\SidebarItem.svelte generated by Svelte v3.37.0 */
    const file$p = "src\\common\\components\\sidebar\\SidebarItem.svelte";

    function create_fragment$p(ctx) {
    	let div;
    	let a;
    	let icon_1;
    	let t0;
    	let t1;
    	let active_action;
    	let current;
    	let mounted;
    	let dispose;

    	icon_1 = new Icon({
    			props: {
    				src: /*icon*/ ctx[1],
    				solid: true,
    				class: "w-6 h-6 mr-2"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			create_component(icon_1.$$.fragment);
    			t0 = space();
    			t1 = text(/*name*/ ctx[0]);
    			attr_dev(a, "href", /*link*/ ctx[2]);
    			attr_dev(a, "class", "mx-1 group flex items-center px-4 py-2 text-md font-medium rounded-md");
    			add_location(a, file$p, 8, 2, 194);
    			attr_dev(div, "class", "py-1");
    			add_location(div, file$p, 7, 0, 172);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			mount_component(icon_1, a, null);
    			append_dev(a, t0);
    			append_dev(a, t1);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(active_action = active.call(null, a, {
    					path: /*link*/ ctx[2].replace("#", ""),
    					className: "bg-gray-800 text-gray-100",
    					inactiveClassName: "text-gray-400 hover:bg-gray-800 hover:text-gray-100"
    				}));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 2) icon_1_changes.src = /*icon*/ ctx[1];
    			icon_1.$set(icon_1_changes);
    			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);

    			if (!current || dirty & /*link*/ 4) {
    				attr_dev(a, "href", /*link*/ ctx[2]);
    			}

    			if (active_action && is_function(active_action.update) && dirty & /*link*/ 4) active_action.update.call(null, {
    				path: /*link*/ ctx[2].replace("#", ""),
    				className: "bg-gray-800 text-gray-100",
    				inactiveClassName: "text-gray-400 hover:bg-gray-800 hover:text-gray-100"
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon_1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SidebarItem", slots, []);
    	let { name } = $$props;
    	let { icon } = $$props;
    	let { link } = $$props;
    	const writable_props = ["name", "icon", "link"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SidebarItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("icon" in $$props) $$invalidate(1, icon = $$props.icon);
    		if ("link" in $$props) $$invalidate(2, link = $$props.link);
    	};

    	$$self.$capture_state = () => ({ Icon, active, name, icon, link });

    	$$self.$inject_state = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("icon" in $$props) $$invalidate(1, icon = $$props.icon);
    		if ("link" in $$props) $$invalidate(2, link = $$props.link);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, icon, link];
    }

    class SidebarItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { name: 0, icon: 1, link: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SidebarItem",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
    			console.warn("<SidebarItem> was created without expected prop 'name'");
    		}

    		if (/*icon*/ ctx[1] === undefined && !("icon" in props)) {
    			console.warn("<SidebarItem> was created without expected prop 'icon'");
    		}

    		if (/*link*/ ctx[2] === undefined && !("link" in props)) {
    			console.warn("<SidebarItem> was created without expected prop 'link'");
    		}
    	}

    	get name() {
    		throw new Error("<SidebarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<SidebarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<SidebarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<SidebarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<SidebarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<SidebarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\sidebar\Sidebar.svelte generated by Svelte v3.37.0 */
    const file$o = "src\\common\\components\\sidebar\\Sidebar.svelte";

    function create_fragment$o(ctx) {
    	let div7;
    	let div0;
    	let t0;
    	let div5;
    	let div2;
    	let div1;
    	let icon;
    	let t1;
    	let div3;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let span0;
    	let t4;
    	let div4;
    	let nav0;
    	let sidebaritem0;
    	let t5;
    	let sidebaritem1;
    	let t6;
    	let sidebaritem2;
    	let t7;
    	let div6;
    	let t8;
    	let div12;
    	let div11;
    	let div10;
    	let div8;
    	let img1;
    	let img1_src_value;
    	let t9;
    	let span1;
    	let t11;
    	let div9;
    	let nav1;
    	let span2;
    	let t13;
    	let sidebaritem3;
    	let t14;
    	let sidebaritem4;
    	let t15;
    	let sidebaritem5;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { src: X, class: "text-white" },
    			$$inline: true
    		});

    	sidebaritem0 = new SidebarItem({
    			props: {
    				name: "Dashboard",
    				icon: Home,
    				link: "#/"
    			},
    			$$inline: true
    		});

    	sidebaritem1 = new SidebarItem({
    			props: {
    				name: "Trading",
    				icon: ChartBar,
    				link: "#/trading/"
    			},
    			$$inline: true
    		});

    	sidebaritem2 = new SidebarItem({
    			props: {
    				name: "Wallet",
    				icon: Cash,
    				link: "#/wallet/"
    			},
    			$$inline: true
    		});

    	sidebaritem3 = new SidebarItem({
    			props: {
    				name: "Dashboard",
    				icon: Home,
    				link: "#/"
    			},
    			$$inline: true
    		});

    	sidebaritem4 = new SidebarItem({
    			props: {
    				name: "Trading",
    				icon: ChartBar,
    				link: "#/trading/"
    			},
    			$$inline: true
    		});

    	sidebaritem5 = new SidebarItem({
    			props: {
    				name: "Wallet",
    				icon: Cash,
    				link: "#/wallet/"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div5 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			create_component(icon.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			img0 = element("img");
    			t2 = space();
    			span0 = element("span");
    			span0.textContent = "Energify";
    			t4 = space();
    			div4 = element("div");
    			nav0 = element("nav");
    			create_component(sidebaritem0.$$.fragment);
    			t5 = space();
    			create_component(sidebaritem1.$$.fragment);
    			t6 = space();
    			create_component(sidebaritem2.$$.fragment);
    			t7 = space();
    			div6 = element("div");
    			t8 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			div8 = element("div");
    			img1 = element("img");
    			t9 = space();
    			span1 = element("span");
    			span1.textContent = "Energify";
    			t11 = space();
    			div9 = element("div");
    			nav1 = element("nav");
    			span2 = element("span");
    			span2.textContent = "Navigation";
    			t13 = space();
    			create_component(sidebaritem3.$$.fragment);
    			t14 = space();
    			create_component(sidebaritem4.$$.fragment);
    			t15 = space();
    			create_component(sidebaritem5.$$.fragment);
    			attr_dev(div0, "class", "fixed inset-0 bg-gray-900 bg-opacity-75");
    			attr_dev(div0, "aria-hidden", "true");
    			add_location(div0, file$o, 13, 2, 412);
    			attr_dev(div1, "class", "ml-1 flex items-center justify-center h-10 w-10 rounded-full cursor-pointer");
    			add_location(div1, file$o, 21, 6, 777);
    			attr_dev(div2, "class", "absolute top-0 right-0 -mr-12 pt-2");
    			add_location(div2, file$o, 20, 4, 721);
    			attr_dev(img0, "class", "h-8 w-auto");
    			if (img0.src !== (img0_src_value = "https://energify.pt/logo-small.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Energify");
    			add_location(img0, file$o, 30, 6, 1057);
    			attr_dev(span0, "class", "text-gray-50 ml-2 text-2xl font-medium");
    			add_location(span0, file$o, 31, 6, 1147);
    			attr_dev(div3, "class", "flex-shrink-0 flex items-center px-4");
    			add_location(div3, file$o, 29, 4, 999);
    			attr_dev(nav0, "class", "px-2 space-y-1");
    			add_location(nav0, file$o, 34, 6, 1286);
    			attr_dev(div4, "class", "mt-5 flex-1 h-0 overflow-y-auto");
    			add_location(div4, file$o, 33, 4, 1233);
    			attr_dev(div5, "class", "relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-gray-900 transition \r\n      ease-in-out duration-300 transform");
    			toggle_class(div5, "-translate-x-full", !/*isMenuOpen*/ ctx[1]);
    			toggle_class(div5, "translate-x-0", /*isMenuOpen*/ ctx[1]);
    			add_location(div5, file$o, 14, 2, 490);
    			attr_dev(div6, "class", "flex-shrink-0 w-14");
    			attr_dev(div6, "aria-hidden", "true");
    			add_location(div6, file$o, 42, 2, 1562);
    			attr_dev(div7, "class", "fixed inset-0 flex z-40 md:hidden transition-opacity ease-linear duration-300");
    			toggle_class(div7, "opacity-0", !/*isMenuOpen*/ ctx[1]);
    			toggle_class(div7, "opacity-100", /*isMenuOpen*/ ctx[1]);
    			add_location(div7, file$o, 8, 0, 245);
    			attr_dev(img1, "class", "h-8 w-auto");
    			if (img1.src !== (img1_src_value = "https://energify.pt/logo-small.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Energify");
    			add_location(img1, file$o, 49, 8, 1867);
    			attr_dev(span1, "class", "text-gray-50 ml-2 text-2xl font-medium");
    			add_location(span1, file$o, 50, 8, 1959);
    			attr_dev(div8, "class", "flex items-center h-16 flex-shrink-0 px-7 pt-8 bg-gray-900");
    			add_location(div8, file$o, 48, 6, 1785);
    			attr_dev(span2, "class", "uppercase text-sm text-gray-500 font-medium px-4");
    			add_location(span2, file$o, 54, 10, 2174);
    			attr_dev(nav1, "class", "flex-1 px-2 py-12 bg-gray-900 space-y-1");
    			add_location(nav1, file$o, 53, 8, 2109);
    			attr_dev(div9, "class", "flex-1 flex flex-col overflow-y-auto");
    			add_location(div9, file$o, 52, 6, 2049);
    			attr_dev(div10, "class", "flex flex-col h-0 flex-1");
    			add_location(div10, file$o, 47, 4, 1739);
    			attr_dev(div11, "class", "flex flex-col w-64");
    			add_location(div11, file$o, 46, 2, 1701);
    			attr_dev(div12, "class", "hidden md:flex md:flex-shrink-0 border-r border-gray-200");
    			add_location(div12, file$o, 45, 0, 1627);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div0);
    			append_dev(div7, t0);
    			append_dev(div7, div5);
    			append_dev(div5, div2);
    			append_dev(div2, div1);
    			mount_component(icon, div1, null);
    			append_dev(div5, t1);
    			append_dev(div5, div3);
    			append_dev(div3, img0);
    			append_dev(div3, t2);
    			append_dev(div3, span0);
    			append_dev(div5, t4);
    			append_dev(div5, div4);
    			append_dev(div4, nav0);
    			mount_component(sidebaritem0, nav0, null);
    			append_dev(nav0, t5);
    			mount_component(sidebaritem1, nav0, null);
    			append_dev(nav0, t6);
    			mount_component(sidebaritem2, nav0, null);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div8);
    			append_dev(div8, img1);
    			append_dev(div8, t9);
    			append_dev(div8, span1);
    			append_dev(div10, t11);
    			append_dev(div10, div9);
    			append_dev(div9, nav1);
    			append_dev(nav1, span2);
    			append_dev(nav1, t13);
    			mount_component(sidebaritem3, nav1, null);
    			append_dev(nav1, t14);
    			mount_component(sidebaritem4, nav1, null);
    			append_dev(nav1, t15);
    			mount_component(sidebaritem5, nav1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*handleMenuToggle*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*isMenuOpen*/ 2) {
    				toggle_class(div5, "-translate-x-full", !/*isMenuOpen*/ ctx[1]);
    			}

    			if (dirty & /*isMenuOpen*/ 2) {
    				toggle_class(div5, "translate-x-0", /*isMenuOpen*/ ctx[1]);
    			}

    			if (dirty & /*isMenuOpen*/ 2) {
    				toggle_class(div7, "opacity-0", !/*isMenuOpen*/ ctx[1]);
    			}

    			if (dirty & /*isMenuOpen*/ 2) {
    				toggle_class(div7, "opacity-100", /*isMenuOpen*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(sidebaritem0.$$.fragment, local);
    			transition_in(sidebaritem1.$$.fragment, local);
    			transition_in(sidebaritem2.$$.fragment, local);
    			transition_in(sidebaritem3.$$.fragment, local);
    			transition_in(sidebaritem4.$$.fragment, local);
    			transition_in(sidebaritem5.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(sidebaritem0.$$.fragment, local);
    			transition_out(sidebaritem1.$$.fragment, local);
    			transition_out(sidebaritem2.$$.fragment, local);
    			transition_out(sidebaritem3.$$.fragment, local);
    			transition_out(sidebaritem4.$$.fragment, local);
    			transition_out(sidebaritem5.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			destroy_component(icon);
    			destroy_component(sidebaritem0);
    			destroy_component(sidebaritem1);
    			destroy_component(sidebaritem2);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div12);
    			destroy_component(sidebaritem3);
    			destroy_component(sidebaritem4);
    			destroy_component(sidebaritem5);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Sidebar", slots, []);
    	let isMenuOpen = false;

    	function handleMenuToggle() {
    		$$invalidate(1, isMenuOpen = !isMenuOpen);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		SidebarItem,
    		Icon,
    		ChartBar,
    		Cash,
    		Home,
    		X,
    		isMenuOpen,
    		handleMenuToggle
    	});

    	$$self.$inject_state = $$props => {
    		if ("isMenuOpen" in $$props) $$invalidate(1, isMenuOpen = $$props.isMenuOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [handleMenuToggle, isMenuOpen];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { handleMenuToggle: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get handleMenuToggle() {
    		return this.$$.ctx[0];
    	}

    	set handleMenuToggle(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\dropdown\Dropdown.svelte generated by Svelte v3.37.0 */
    const file$n = "src\\common\\components\\dropdown\\Dropdown.svelte";

    // (22:6) {#if name}
    function create_if_block$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*name*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 1) set_data_dev(t, /*name*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(22:6) {#if name}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div3;
    	let div0;
    	let button;
    	let t0;
    	let icon;
    	let button_class_value;
    	let t1;
    	let div2;
    	let div1;
    	let div2_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*name*/ ctx[0] && create_if_block$3(ctx);

    	icon = new Icon({
    			props: {
    				src: ChevronDown,
    				class: "" + ((/*name*/ ctx[0] ? "-mr-1 ml-2" : "") + " h-5 w-5")
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			button = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			create_component(icon.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", button_class_value = "inline-flex justify-center w-full " + /*buttonClass*/ ctx[1]);
    			add_location(button, file$n, 20, 4, 533);
    			add_location(div0, file$n, 19, 2, 522);
    			attr_dev(div1, "class", "py-1");
    			attr_dev(div1, "role", "none");
    			add_location(div1, file$n, 39, 4, 1194);
    			attr_dev(div2, "class", div2_class_value = "transition ease-out duration-100 origin-top-right absolute right-0 mt-2 w-" + /*width*/ ctx[2] + "\r\n     rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-30");
    			attr_dev(div2, "role", "menu");
    			attr_dev(div2, "aria-orientation", "vertical");
    			attr_dev(div2, "aria-labelledby", "menu-button");
    			attr_dev(div2, "tabindex", "-1");
    			toggle_class(div2, "opacity-0", !/*isMenuOpen*/ ctx[3]);
    			toggle_class(div2, "opacity-100", /*isMenuOpen*/ ctx[3]);
    			toggle_class(div2, "hidden", !/*isMenuRendered*/ ctx[4]);
    			add_location(div2, file$n, 28, 2, 780);
    			attr_dev(div3, "class", "relative inline-block text-left");
    			add_location(div3, file$n, 18, 0, 473);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, button);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t0);
    			mount_component(icon, button, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleMenuToggle*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*name*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(button, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			const icon_changes = {};
    			if (dirty & /*name*/ 1) icon_changes.class = "" + ((/*name*/ ctx[0] ? "-mr-1 ml-2" : "") + " h-5 w-5");
    			icon.$set(icon_changes);

    			if (!current || dirty & /*buttonClass*/ 2 && button_class_value !== (button_class_value = "inline-flex justify-center w-full " + /*buttonClass*/ ctx[1])) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 64) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*width*/ 4 && div2_class_value !== (div2_class_value = "transition ease-out duration-100 origin-top-right absolute right-0 mt-2 w-" + /*width*/ ctx[2] + "\r\n     rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-30")) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (dirty & /*width, isMenuOpen*/ 12) {
    				toggle_class(div2, "opacity-0", !/*isMenuOpen*/ ctx[3]);
    			}

    			if (dirty & /*width, isMenuOpen*/ 12) {
    				toggle_class(div2, "opacity-100", /*isMenuOpen*/ ctx[3]);
    			}

    			if (dirty & /*width, isMenuRendered*/ 20) {
    				toggle_class(div2, "hidden", !/*isMenuRendered*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    			destroy_component(icon);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Dropdown", slots, ['default']);
    	let { name } = $$props;
    	let { buttonClass } = $$props;
    	let { width = 56 } = $$props;
    	let isMenuOpen = false;
    	let isMenuRendered = false;

    	function handleMenuToggle() {
    		if (isMenuRendered) {
    			$$invalidate(3, isMenuOpen = !isMenuOpen);
    			setTimeout(() => $$invalidate(4, isMenuRendered = false), 500);
    		} else {
    			$$invalidate(4, isMenuRendered = true);
    			setTimeout(() => $$invalidate(3, isMenuOpen = true), 100);
    		}
    	}

    	const writable_props = ["name", "buttonClass", "width"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dropdown> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("buttonClass" in $$props) $$invalidate(1, buttonClass = $$props.buttonClass);
    		if ("width" in $$props) $$invalidate(2, width = $$props.width);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		ChevronDown,
    		name,
    		buttonClass,
    		width,
    		isMenuOpen,
    		isMenuRendered,
    		handleMenuToggle
    	});

    	$$self.$inject_state = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("buttonClass" in $$props) $$invalidate(1, buttonClass = $$props.buttonClass);
    		if ("width" in $$props) $$invalidate(2, width = $$props.width);
    		if ("isMenuOpen" in $$props) $$invalidate(3, isMenuOpen = $$props.isMenuOpen);
    		if ("isMenuRendered" in $$props) $$invalidate(4, isMenuRendered = $$props.isMenuRendered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		buttonClass,
    		width,
    		isMenuOpen,
    		isMenuRendered,
    		handleMenuToggle,
    		$$scope,
    		slots
    	];
    }

    class Dropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { name: 0, buttonClass: 1, width: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dropdown",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
    			console.warn("<Dropdown> was created without expected prop 'name'");
    		}

    		if (/*buttonClass*/ ctx[1] === undefined && !("buttonClass" in props)) {
    			console.warn("<Dropdown> was created without expected prop 'buttonClass'");
    		}
    	}

    	get name() {
    		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttonClass() {
    		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttonClass(value) {
    		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\shell\ShellUser.svelte generated by Svelte v3.37.0 */
    const file$m = "src\\common\\components\\shell\\ShellUser.svelte";

    function get_then_context$2(ctx) {
    	ctx[2] = ctx[3].hbars;
    }

    // (1:0) <script lang="ts">import { authService, hederaService }
    function create_catch_block$2(ctx) {
    	const block = { c: noop$2, m: noop$2, d: noop$2 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$2.name,
    		type: "catch",
    		source: "(1:0) <script lang=\\\"ts\\\">import { authService, hederaService }",
    		ctx
    	});

    	return block;
    }

    // (17:6) {:then { hbars }}
    function create_then_block$2(ctx) {
    	get_then_context$2(ctx);
    	let t;

    	const block = {
    		c: function create() {
    			t = text("75ℏ");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$2.name,
    		type: "then",
    		source: "(17:6) {:then { hbars }}",
    		ctx
    	});

    	return block;
    }

    // (15:43)           ...        {:then { hbars }}
    function create_pending_block$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$2.name,
    		type: "pending",
    		source: "(15:43)           ...        {:then { hbars }}",
    		ctx
    	});

    	return block;
    }

    // (23:2) <Dropdown>
    function create_default_slot$c(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "Settings";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "Logout";
    			attr_dev(div0, "class", "hover:bg-gray-100 hover:text-gray-900 text-gray-800 block px-4 py-2 text-sm\r\n      cursor-pointer");
    			add_location(div0, file$m, 23, 4, 703);
    			attr_dev(div1, "class", "hover:bg-gray-100 hover:text-gray-900 text-gray-800 block px-4 \r\n    py-2 text-sm cursor-pointer");
    			add_location(div1, file$m, 29, 4, 861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(23:2) <Dropdown>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let span0;
    	let t2;
    	let span1;
    	let t3;
    	let dropdown;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$2,
    		then: create_then_block$2,
    		catch: create_catch_block$2,
    		value: 3
    	};

    	handle_promise(hederaService.fetchBalance(), info);

    	dropdown = new Dropdown({
    			props: {
    				$$slots: { default: [create_default_slot$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "Luís Alves";
    			t2 = space();
    			span1 = element("span");
    			info.block.c();
    			t3 = space();
    			create_component(dropdown.$$.fragment);
    			attr_dev(img, "alt", "Profile");
    			if (img.src !== (img_src_value = "https://uifaces.co/our-content/donated/gPZwCbdS.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "w-10 h-10 rounded-full  hidden md:flex");
    			add_location(img, file$m, 6, 2, 230);
    			attr_dev(span0, "class", "text-base text-gray-900");
    			add_location(span0, file$m, 12, 4, 416);
    			attr_dev(span1, "class", "text-sm text-gray-500");
    			add_location(span1, file$m, 13, 4, 477);
    			attr_dev(div0, "class", "flex flex-col mx-2");
    			add_location(div0, file$m, 11, 2, 378);
    			attr_dev(div1, "class", "flex items-center");
    			add_location(div1, file$m, 5, 0, 195);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t2);
    			append_dev(div0, span1);
    			info.block.m(span1, info.anchor = null);
    			info.mount = () => span1;
    			info.anchor = null;
    			append_dev(div1, t3);
    			mount_component(dropdown, div1, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const dropdown_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				dropdown_changes.$$scope = { dirty, ctx };
    			}

    			dropdown.$set(dropdown_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			info.block.d();
    			info.token = null;
    			info = null;
    			destroy_component(dropdown);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ShellUser", slots, []);
    	const { user } = authService;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ShellUser> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => authService.logout();

    	$$self.$capture_state = () => ({
    		authService,
    		hederaService,
    		Dropdown,
    		user
    	});

    	return [click_handler];
    }

    class ShellUser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ShellUser",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* src\common\components\topbar\Topbar.svelte generated by Svelte v3.37.0 */
    const file$l = "src\\common\\components\\topbar\\Topbar.svelte";

    function create_fragment$l(ctx) {
    	let div1;
    	let div0;
    	let icon;
    	let t0;
    	let h1;
    	let t1;
    	let t2;
    	let shelluser;
    	let current;

    	icon = new Icon({
    			props: {
    				src: Menu,
    				class: "md:hidden text-gray-900 w-8 h-8 mr-4 cursor-pointer"
    			},
    			$$inline: true
    		});

    	icon.$on("click", /*click_handler*/ ctx[2]);
    	shelluser = new ShellUser({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			h1 = element("h1");
    			t1 = text(/*title*/ ctx[0]);
    			t2 = space();
    			create_component(shelluser.$$.fragment);
    			attr_dev(h1, "class", "text-3xl font-semibold text-gray-900");
    			add_location(h1, file$l, 17, 4, 483);
    			attr_dev(div0, "class", "flex items-center");
    			add_location(div0, file$l, 11, 2, 291);
    			attr_dev(div1, "class", "flex border-b border-gray-200 justify-between items-center \r\n      bg-white mx-auto px-8 py-5");
    			add_location(div1, file$l, 7, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(icon, div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, h1);
    			append_dev(h1, t1);
    			append_dev(div1, t2);
    			mount_component(shelluser, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*title*/ 1) set_data_dev(t1, /*title*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(shelluser.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(shelluser.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(icon);
    			destroy_component(shelluser);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Topbar", slots, []);
    	
    	let { title } = $$props;
    	let { sidebar } = $$props;
    	const writable_props = ["title", "sidebar"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Topbar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => sidebar.handleMenuToggle();

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("sidebar" in $$props) $$invalidate(1, sidebar = $$props.sidebar);
    	};

    	$$self.$capture_state = () => ({ Icon, Menu, ShellUser, title, sidebar });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("sidebar" in $$props) $$invalidate(1, sidebar = $$props.sidebar);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, sidebar, click_handler];
    }

    class Topbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { title: 0, sidebar: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Topbar",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<Topbar> was created without expected prop 'title'");
    		}

    		if (/*sidebar*/ ctx[1] === undefined && !("sidebar" in props)) {
    			console.warn("<Topbar> was created without expected prop 'sidebar'");
    		}
    	}

    	get title() {
    		throw new Error("<Topbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Topbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sidebar() {
    		throw new Error("<Topbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sidebar(value) {
    		throw new Error("<Topbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\shell\Shell.svelte generated by Svelte v3.37.0 */
    const file$k = "src\\common\\components\\shell\\Shell.svelte";

    function create_fragment$k(ctx) {
    	let div1;
    	let sidebar_1;
    	let t0;
    	let main;
    	let topbar;
    	let t1;
    	let div0;
    	let current;
    	let sidebar_1_props = {};
    	sidebar_1 = new Sidebar({ props: sidebar_1_props, $$inline: true });
    	/*sidebar_1_binding*/ ctx[4](sidebar_1);

    	topbar = new Topbar({
    			props: {
    				sidebar: /*sidebar*/ ctx[1],
    				title: /*title*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(sidebar_1.$$.fragment);
    			t0 = space();
    			main = element("main");
    			create_component(topbar.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "h-full mx-auto px-4 sm:px-6 md:px-8 py-6 overflow-y-auto");
    			add_location(div0, file$k, 10, 4, 323);
    			attr_dev(main, "class", "flex-1 focus:outline-none");
    			add_location(main, file$k, 8, 2, 243);
    			attr_dev(div1, "class", "flex h-screen overflow-hidden");
    			add_location(div1, file$k, 6, 0, 161);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(sidebar_1, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, main);
    			mount_component(topbar, main, null);
    			append_dev(main, t1);
    			append_dev(main, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const sidebar_1_changes = {};
    			sidebar_1.$set(sidebar_1_changes);
    			const topbar_changes = {};
    			if (dirty & /*sidebar*/ 2) topbar_changes.sidebar = /*sidebar*/ ctx[1];
    			if (dirty & /*title*/ 1) topbar_changes.title = /*title*/ ctx[0];
    			topbar.$set(topbar_changes);

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 4) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebar_1.$$.fragment, local);
    			transition_in(topbar.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebar_1.$$.fragment, local);
    			transition_out(topbar.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*sidebar_1_binding*/ ctx[4](null);
    			destroy_component(sidebar_1);
    			destroy_component(topbar);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Shell", slots, ['default']);
    	let { title } = $$props;
    	let sidebar;
    	const writable_props = ["title"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Shell> was created with unknown prop '${key}'`);
    	});

    	function sidebar_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			sidebar = $$value;
    			$$invalidate(1, sidebar);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ Sidebar, Topbar, title, sidebar });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("sidebar" in $$props) $$invalidate(1, sidebar = $$props.sidebar);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, sidebar, $$scope, slots, sidebar_1_binding];
    }

    class Shell extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Shell",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<Shell> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<Shell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Shell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\stat\Stat.svelte generated by Svelte v3.37.0 */
    const file$j = "src\\common\\components\\stat\\Stat.svelte";

    function create_fragment$j(ctx) {
    	let div3;
    	let div0;
    	let icon_1;
    	let t0;
    	let div2;
    	let p0;
    	let t1;
    	let t2;
    	let div1;
    	let p1;
    	let t3;
    	let current;

    	icon_1 = new Icon({
    			props: {
    				src: /*icon*/ ctx[0],
    				class: "h-6 w-6 text-green-500",
    				solid: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			create_component(icon_1.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			p0 = element("p");
    			t1 = text(/*text*/ ctx[1]);
    			t2 = space();
    			div1 = element("div");
    			p1 = element("p");
    			t3 = text(/*value*/ ctx[2]);
    			attr_dev(div0, "class", "bg-gray-900 rounded-md h-12 2xl:w-10 w-12 flex items-center justify-center");
    			add_location(div0, file$j, 7, 2, 218);
    			attr_dev(p0, "class", "text-sm font-medium text-gray-500 truncate");
    			add_location(p0, file$j, 11, 4, 420);
    			attr_dev(p1, "class", "text-xl font-semibold text-gray-900");
    			add_location(p1, file$j, 13, 6, 531);
    			attr_dev(div1, "class", "flex items-baseline");
    			add_location(div1, file$j, 12, 4, 490);
    			attr_dev(div2, "class", "flex flex-col ml-4");
    			add_location(div2, file$j, 10, 2, 382);
    			attr_dev(div3, "class", "flex flex-between bg-white pt-5 px-4 pb-6 sm:pt-6 sm:px-6 shadow rounded-lg");
    			add_location(div3, file$j, 6, 0, 125);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			mount_component(icon_1, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, p0);
    			append_dev(p0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, p1);
    			append_dev(p1, t3);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 1) icon_1_changes.src = /*icon*/ ctx[0];
    			icon_1.$set(icon_1_changes);
    			if (!current || dirty & /*text*/ 2) set_data_dev(t1, /*text*/ ctx[1]);
    			if (!current || dirty & /*value*/ 4) set_data_dev(t3, /*value*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(icon_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Stat", slots, []);
    	let { icon } = $$props;
    	let { text } = $$props;
    	let { value } = $$props;
    	const writable_props = ["icon", "text", "value"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Stat> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    		if ("value" in $$props) $$invalidate(2, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({ Icon, icon, text, value });

    	$$self.$inject_state = $$props => {
    		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    		if ("value" in $$props) $$invalidate(2, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, text, value];
    }

    class Stat extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { icon: 0, text: 1, value: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Stat",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*icon*/ ctx[0] === undefined && !("icon" in props)) {
    			console.warn("<Stat> was created without expected prop 'icon'");
    		}

    		if (/*text*/ ctx[1] === undefined && !("text" in props)) {
    			console.warn("<Stat> was created without expected prop 'text'");
    		}

    		if (/*value*/ ctx[2] === undefined && !("value" in props)) {
    			console.warn("<Stat> was created without expected prop 'value'");
    		}
    	}

    	get icon() {
    		throw new Error("<Stat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Stat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Stat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Stat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Stat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Stat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function createChart(ctx, type, datasets, labels, options) {
        return new Chart(ctx, {
            type,
            data: { labels, datasets },
            options,
        });
    }

    /* src\common\components\card\Card.svelte generated by Svelte v3.37.0 */

    const file$i = "src\\common\\components\\card\\Card.svelte";
    const get_action_slot_changes = dirty => ({});
    const get_action_slot_context = ctx => ({});

    // (6:2) {#if title}
    function create_if_block$2(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let h3;
    	let t0;
    	let t1;
    	let div2;
    	let current;
    	const action_slot_template = /*#slots*/ ctx[3].action;
    	const action_slot = create_slot(action_slot_template, ctx, /*$$scope*/ ctx[2], get_action_slot_context);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			t0 = text(/*title*/ ctx[0]);
    			t1 = space();
    			div2 = element("div");
    			if (action_slot) action_slot.c();
    			attr_dev(h3, "class", "text-xl leading-6 font-medium text-gray-900");
    			add_location(h3, file$i, 9, 10, 364);
    			attr_dev(div0, "class", "ml-4 mt-2");
    			add_location(div0, file$i, 8, 8, 329);
    			attr_dev(div1, "class", "-ml-4 -mt-2 flex items-center justify-between flex-wrap sm:flex-nowrap");
    			add_location(div1, file$i, 7, 6, 235);
    			add_location(div2, file$i, 12, 6, 470);
    			attr_dev(div3, "class", "flex justify-between mx-4 pt-6 pb-3 sm:mx-6");
    			add_location(div3, file$i, 6, 4, 170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h3);
    			append_dev(h3, t0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);

    			if (action_slot) {
    				action_slot.m(div2, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

    			if (action_slot) {
    				if (action_slot.p && dirty & /*$$scope*/ 4) {
    					update_slot(action_slot, action_slot_template, ctx, /*$$scope*/ ctx[2], dirty, get_action_slot_changes, get_action_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(action_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(action_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (action_slot) action_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(6:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let div1_class_value;
    	let current;
    	let if_block = /*title*/ ctx[0] && create_if_block$2(ctx);
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "px-4 py-5 sm:px-6");
    			add_location(div0, file$i, 17, 2, 546);
    			attr_dev(div1, "class", div1_class_value = "" + (/*bgColor*/ ctx[1] + " shadow overflow-hidden rounded-md w-full "));
    			add_location(div1, file$i, 4, 0, 84);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*title*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 4) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*bgColor*/ 2 && div1_class_value !== (div1_class_value = "" + (/*bgColor*/ ctx[1] + " shadow overflow-hidden rounded-md w-full "))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Card", slots, ['action','default']);
    	let { title } = $$props;
    	let { bgColor = "bg-white" } = $$props;
    	const writable_props = ["title", "bgColor"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("bgColor" in $$props) $$invalidate(1, bgColor = $$props.bgColor);
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ title, bgColor });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("bgColor" in $$props) $$invalidate(1, bgColor = $$props.bgColor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, bgColor, $$scope, slots];
    }

    class Card extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { title: 0, bgColor: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Card",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<Card> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bgColor() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bgColor(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\interval-selector\IntervalSelector.svelte generated by Svelte v3.37.0 */

    const file$h = "src\\common\\components\\interval-selector\\IntervalSelector.svelte";

    function create_fragment$h(ctx) {
    	let select;
    	let option0;
    	let option1;
    	let option2;
    	let option3;
    	let option4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = "1h";
    			option1 = element("option");
    			option1.textContent = "1d";
    			option2 = element("option");
    			option2.textContent = "1w";
    			option3 = element("option");
    			option3.textContent = "1m";
    			option4 = element("option");
    			option4.textContent = "1y";
    			option0.__value = "1h";
    			option0.value = option0.__value;
    			attr_dev(option0, "default", "");
    			add_location(option0, file$h, 5, 2, 153);
    			option1.__value = "1d";
    			option1.value = option1.__value;
    			add_location(option1, file$h, 6, 2, 195);
    			option2.__value = "1w";
    			option2.value = option2.__value;
    			add_location(option2, file$h, 7, 2, 229);
    			option3.__value = "1m";
    			option3.value = option3.__value;
    			add_location(option3, file$h, 8, 2, 263);
    			option4.__value = "1y";
    			option4.value = option4.__value;
    			add_location(option4, file$h, 9, 2, 297);
    			attr_dev(select, "class", "input");
    			if (/*interval*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
    			add_location(select, file$h, 4, 0, 68);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);
    			append_dev(select, option0);
    			append_dev(select, option1);
    			append_dev(select, option2);
    			append_dev(select, option3);
    			append_dev(select, option4);
    			select_option(select, /*interval*/ ctx[1]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[2]),
    					listen_dev(select, "change", /*change_handler*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*interval*/ 2) {
    				select_option(select, /*interval*/ ctx[1]);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("IntervalSelector", slots, []);
    	let { onChange } = $$props;
    	let interval;
    	const writable_props = ["onChange"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IntervalSelector> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		interval = select_value(this);
    		$$invalidate(1, interval);
    	}

    	const change_handler = () => onChange(interval);

    	$$self.$$set = $$props => {
    		if ("onChange" in $$props) $$invalidate(0, onChange = $$props.onChange);
    	};

    	$$self.$capture_state = () => ({ onChange, interval });

    	$$self.$inject_state = $$props => {
    		if ("onChange" in $$props) $$invalidate(0, onChange = $$props.onChange);
    		if ("interval" in $$props) $$invalidate(1, interval = $$props.interval);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [onChange, interval, select_change_handler, change_handler];
    }

    class IntervalSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { onChange: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IntervalSelector",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onChange*/ ctx[0] === undefined && !("onChange" in props)) {
    			console.warn("<IntervalSelector> was created without expected prop 'onChange'");
    		}
    	}

    	get onChange() {
    		throw new Error("<IntervalSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<IntervalSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function arrayFromRange(j, k) {
        return Array.apply(null, Array(k - j + 1)).map(function (_, n) {
            return n + j;
        });
    }
    function intervalToChartLabel(interval, scale) {
        if (interval === "1h") {
            const now = new Date();
            now.setMinutes(0);
            return arrayFromRange(0, scale - 1)
                .map((_, i) => format(subHours(now, i), "HH:mm"))
                .reverse();
        }
        else if (interval === "1d") {
            return arrayFromRange(0, scale - 1)
                .map((_, i) => format(subDays(new Date(), i), "dd/MM"))
                .reverse();
        }
        else if (interval === "1w") {
            return arrayFromRange(0, scale - 1)
                .map((_, i) => format(subWeeks(new Date(), i), "dd/MM"))
                .reverse();
        }
        else if (interval === "1m") {
            return arrayFromRange(0, scale - 1)
                .map((_, i) => format(subMonths(new Date(), i), "MM/yy"))
                .reverse();
        }
        else {
            return arrayFromRange(0, scale - 1)
                .map((_, i) => format(subYears(new Date(), i), "yyyy"))
                .reverse();
        }
    }

    const energyHistoryOptions = {
        responsive: true,
        plugins: {
            legend: { display: false },
            tooltip: { enabled: true },
        },
        scales: {
            x: {
                grid: { display: false, borderColor: "#F3F4F6" },
                ticks: { font: { size: 14, family: "Inter" }, color: "rgb(156, 163, 175)" },
            },
            y: {
                beginAtZero: true,
                grid: { drawBorder: false, color: "#F3F4F6" },
                ticks: { font: { size: 14, family: "Inter" }, color: "rgb(156, 163, 175)" },
            },
        },
    };

    /* src\dashboard\components\EnergyHistoryChart.svelte generated by Svelte v3.37.0 */

    const { console: console_1$1 } = globals;
    const file$g = "src\\dashboard\\components\\EnergyHistoryChart.svelte";

    // (62:0) <Card title="Energy History">
    function create_default_slot$b(ctx) {
    	let span;
    	let t1;
    	let canvas;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "kW";
    			t1 = space();
    			canvas = element("canvas");
    			attr_dev(span, "class", "text-gray-400 mx-0.5 px-0.5 text-xs font-medium");
    			add_location(span, file$g, 65, 2, 2962);
    			attr_dev(canvas, "id", "energyChart");
    			attr_dev(canvas, "class", "w-full");
    			add_location(canvas, file$g, 66, 2, 3037);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, canvas, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(canvas);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(62:0) <Card title=\\\"Energy History\\\">",
    		ctx
    	});

    	return block;
    }

    // (63:2) 
    function create_action_slot$2(ctx) {
    	let span;
    	let intervalselector;
    	let current;

    	intervalselector = new IntervalSelector({
    			props: { onChange: /*func*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(intervalselector.$$.fragment);
    			attr_dev(span, "slot", "action");
    			add_location(span, file$g, 62, 2, 2854);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(intervalselector, span, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(intervalselector.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(intervalselector.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(intervalselector);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_action_slot$2.name,
    		type: "slot",
    		source: "(63:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				title: "Energy History",
    				$$slots: {
    					action: [create_action_slot$2],
    					default: [create_default_slot$b]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("EnergyHistoryChart", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	
    	let chart;

    	let dataset = [
    		{
    			fill: true,
    			backgroundColor: "#00966922",
    			borderColor: "#009669",
    			data: [1, 2, 3, 4, 5, 6]
    		}
    	];

    	const nowDateRounded = new Date();
    	nowDateRounded.setMinutes(0);

    	onMount(() => {
    		const canvas = document.getElementById("energyChart");
    		chart = createChart(canvas.getContext("2d"), "line", dataset, [], energyHistoryOptions);
    		updateChart();
    	});

    	function updateChart(interval = "1h") {
    		return __awaiter(this, void 0, void 0, function* () {
    			//const { data } = await transactionsService.fetchEnergyHistory(interval, 12);
    			//Static values for IHC
    			let data;

    			if (interval === "1h") {
    				data = [
    					0.37,
    					0.43,
    					0.745,
    					0.859,
    					1.02,
    					1.07,
    					0.893,
    					0.623,
    					0.456,
    					0.56,
    					0.89,
    					0.943
    				];
    			} else if (interval === "1d") {
    				data = [
    					0.589,
    					0.632,
    					0.74,
    					0.889,
    					0.912,
    					1.12,
    					0.442,
    					0.673,
    					0.993,
    					0.568,
    					0.883,
    					0.738
    				];
    			} else if (interval === "1w") {
    				data = [
    					0.755,
    					0.638,
    					0.888,
    					0.612,
    					0.913,
    					1.01,
    					0.935,
    					0.396,
    					0.678,
    					0.518,
    					0.991,
    					1.08
    				];
    			} else if (interval === "1m") {
    				data = [
    					0.898,
    					0.612,
    					0.893,
    					0.854,
    					0.915,
    					1.05,
    					0.912,
    					0.854,
    					0.667,
    					0.831,
    					0.893,
    					0.798
    				];
    			} else if (interval === "1y") {
    				data = [
    					0.901,
    					0.788,
    					0.744,
    					0.819,
    					0.912,
    					0.991,
    					0.835,
    					0.791,
    					0.831,
    					0.918,
    					0.765,
    					0.788
    				];
    			}

    			console.log(data);
    			chart.data.datasets[0].data = data;
    			chart.data.labels = intervalToChartLabel(interval, 12);
    			chart.update();
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<EnergyHistoryChart> was created with unknown prop '${key}'`);
    	});

    	const func = interval => updateChart(interval);

    	$$self.$capture_state = () => ({
    		__awaiter,
    		onMount,
    		createChart,
    		Card,
    		IntervalSelector,
    		intervalToChartLabel,
    		transactionsService,
    		energyHistoryOptions,
    		chart,
    		dataset,
    		nowDateRounded,
    		updateChart
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("chart" in $$props) chart = $$props.chart;
    		if ("dataset" in $$props) dataset = $$props.dataset;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [updateChart, func];
    }

    class EnergyHistoryChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnergyHistoryChart",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    const energyFlowOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { display: false },
            tooltip: {
                enabled: true,
            },
        },
        scales: {
            x: {
                grid: { display: false, drawBorder: false },
                ticks: { display: false, font: { size: 14, family: "Inter" }, color: "rgb(156, 163, 175)" },
            },
            y: {
                grid: { display: false, drawBorder: false, color: "#F3F4F6" },
                ticks: { display: false, font: { size: 14, family: "Inter" }, color: "rgb(156, 163, 175)" },
            },
        },
    };

    /* src\dashboard\components\EnergyFlowChart.svelte generated by Svelte v3.37.0 */
    const file$f = "src\\dashboard\\components\\EnergyFlowChart.svelte";

    // (50:0) <Card title="Energy Flow">
    function create_default_slot$a(ctx) {
    	let div4;
    	let div1;
    	let div0;
    	let canvas0;
    	let t0;
    	let span0;
    	let t2;
    	let div3;
    	let div2;
    	let canvas1;
    	let t3;
    	let span1;
    	let t5;
    	let div9;
    	let div6;
    	let div5;
    	let t6;
    	let span2;
    	let t8;
    	let div8;
    	let div7;
    	let t9;
    	let span3;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			canvas0 = element("canvas");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "Consumption";
    			t2 = space();
    			div3 = element("div");
    			div2 = element("div");
    			canvas1 = element("canvas");
    			t3 = space();
    			span1 = element("span");
    			span1.textContent = "Production";
    			t5 = space();
    			div9 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			t6 = space();
    			span2 = element("span");
    			span2.textContent = "Community";
    			t8 = space();
    			div8 = element("div");
    			div7 = element("div");
    			t9 = space();
    			span3 = element("span");
    			span3.textContent = "Public Grid";
    			attr_dev(canvas0, "id", "chartIn");
    			attr_dev(canvas0, "class", "w-52");
    			add_location(canvas0, file$f, 76, 8, 3441);
    			add_location(div0, file$f, 75, 6, 3426);
    			attr_dev(span0, "class", "text-gray-900 font-medium");
    			add_location(span0, file$f, 78, 6, 3499);
    			attr_dev(div1, "class", "flex flex-col items-center mx-8");
    			add_location(div1, file$f, 74, 4, 3373);
    			attr_dev(canvas1, "id", "chartOut");
    			attr_dev(canvas1, "class", "w-52");
    			add_location(canvas1, file$f, 82, 8, 3643);
    			add_location(div2, file$f, 81, 6, 3628);
    			attr_dev(span1, "class", "text-gray-900 font-medium");
    			add_location(span1, file$f, 84, 6, 3702);
    			attr_dev(div3, "class", "flex flex-col items-center mx-8");
    			add_location(div3, file$f, 80, 4, 3575);
    			attr_dev(div4, "class", "flex items-center mb-8");
    			add_location(div4, file$f, 73, 2, 3331);
    			attr_dev(div5, "class", "w-4 h-4 rounded-sm bg-green-500");
    			add_location(div5, file$f, 89, 6, 3881);
    			attr_dev(span2, "class", "text-gray-500 font-medium ml-1");
    			add_location(span2, file$f, 90, 6, 3936);
    			attr_dev(div6, "class", "flex items-center ml-5");
    			add_location(div6, file$f, 88, 4, 3837);
    			attr_dev(div7, "class", "w-4 h-4 rounded-sm bg-black");
    			add_location(div7, file$f, 93, 6, 4059);
    			attr_dev(span3, "class", "text-gray-500 font-medium ml-1");
    			add_location(span3, file$f, 94, 6, 4110);
    			attr_dev(div8, "class", "flex items-center ml-4");
    			add_location(div8, file$f, 92, 4, 4015);
    			attr_dev(div9, "class", "flex items-center justify-center");
    			add_location(div9, file$f, 87, 2, 3785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, canvas0);
    			append_dev(div1, t0);
    			append_dev(div1, span0);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, canvas1);
    			append_dev(div3, t3);
    			append_dev(div3, span1);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div6);
    			append_dev(div6, div5);
    			append_dev(div6, t6);
    			append_dev(div6, span2);
    			append_dev(div9, t8);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div8, t9);
    			append_dev(div8, span3);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div9);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(50:0) <Card title=\\\"Energy Flow\\\">",
    		ctx
    	});

    	return block;
    }

    // (51:2) 
    function create_action_slot$1(ctx) {
    	let span2;
    	let div2;
    	let div0;
    	let span0;
    	let t1;
    	let input0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let input1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span2 = element("span");
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "From";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "To";
    			t4 = space();
    			input1 = element("input");
    			attr_dev(span0, "class", "text-gray-500 text-xs font-medium");
    			add_location(span0, file$f, 53, 8, 2795);
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "class", "input-sm mr-2 px-1 py-1");
    			add_location(input0, file$f, 54, 8, 2864);
    			attr_dev(div0, "class", "flex-col m-2");
    			add_location(div0, file$f, 52, 6, 2759);
    			attr_dev(span1, "class", "text-gray-500 text-xs font-medium");
    			add_location(span1, file$f, 62, 8, 3075);
    			attr_dev(input1, "type", "date");
    			attr_dev(input1, "class", "input-sm px-1 py-1");
    			add_location(input1, file$f, 63, 8, 3142);
    			attr_dev(div1, "class", "flex-col m-2");
    			add_location(div1, file$f, 61, 6, 3039);
    			attr_dev(div2, "class", "flex");
    			add_location(div2, file$f, 51, 4, 2733);
    			attr_dev(span2, "slot", "action");
    			add_location(span2, file$f, 50, 2, 2707);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span2, anchor);
    			append_dev(span2, div2);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*startDate*/ ctx[0]);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			set_input_value(input1, /*endDate*/ ctx[1]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
    					listen_dev(input0, "change", /*updateChart*/ ctx[2], false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
    					listen_dev(input1, "change", /*updateChart*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*startDate*/ 1) {
    				set_input_value(input0, /*startDate*/ ctx[0]);
    			}

    			if (dirty & /*endDate*/ 2) {
    				set_input_value(input1, /*endDate*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_action_slot$1.name,
    		type: "slot",
    		source: "(51:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				title: "Energy Flow",
    				$$slots: {
    					action: [create_action_slot$1],
    					default: [create_default_slot$a]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope, endDate, startDate*/ 1027) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("EnergyFlowChart", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	
    	let startDate;
    	let endDate;
    	let chartIn;
    	let chartOut;

    	let dataset = [
    		{
    			data: [3, 1],
    			backgroundColor: ["#12B981", "#101827"]
    		}
    	];

    	let labels = ["Community", "Public Grid"];

    	onMount(() => {
    		const canvasIn = document.getElementById("chartIn");
    		const canvasOut = document.getElementById("chartOut");
    		chartIn = createChart(canvasIn.getContext("2d"), "pie", dataset, labels, energyFlowOptions);
    		chartOut = createChart(canvasOut.getContext("2d"), "pie", dataset, labels, energyFlowOptions);
    		updateChart();
    	});

    	function updateChart() {
    		return __awaiter(this, void 0, void 0, function* () {
    			const start = new Date(startDate !== null && startDate !== void 0
    				? startDate
    				: new Date());

    			const end = new Date(endDate !== null && endDate !== void 0
    				? endDate
    				: subDays(start, 1));

    			const { data: chartInData } = yield transactionsService.fetchEnergyFlow(start, end);
    			const { energyFromCommunity, energyFromPublicGrid, energyToCommunity, energyToPublicGrid } = chartInData;

    			chartIn.data.datasets[0].data = [
    				Math.round(energyToCommunity / (energyToCommunity + energyToPublicGrid) * 100),
    				Math.round(energyToPublicGrid / (energyToCommunity + energyToPublicGrid) * 100)
    			];

    			chartIn.update();

    			chartOut.data.datasets[0].data = [
    				Math.round(energyFromCommunity / (energyFromCommunity + energyFromPublicGrid) * 100),
    				Math.round(energyFromPublicGrid / (energyFromCommunity + energyFromPublicGrid) * 100)
    			];

    			chartOut.update();
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EnergyFlowChart> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		startDate = this.value;
    		$$invalidate(0, startDate);
    	}

    	function input1_input_handler() {
    		endDate = this.value;
    		$$invalidate(1, endDate);
    	}

    	$$self.$capture_state = () => ({
    		__awaiter,
    		subDays,
    		onMount,
    		createChart,
    		Card,
    		transactionsService,
    		energyFlowOptions,
    		startDate,
    		endDate,
    		chartIn,
    		chartOut,
    		dataset,
    		labels,
    		updateChart
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("startDate" in $$props) $$invalidate(0, startDate = $$props.startDate);
    		if ("endDate" in $$props) $$invalidate(1, endDate = $$props.endDate);
    		if ("chartIn" in $$props) chartIn = $$props.chartIn;
    		if ("chartOut" in $$props) chartOut = $$props.chartOut;
    		if ("dataset" in $$props) dataset = $$props.dataset;
    		if ("labels" in $$props) labels = $$props.labels;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [startDate, endDate, updateChart, input0_input_handler, input1_input_handler];
    }

    class EnergyFlowChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnergyFlowChart",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src\dashboard\routes\Dashboard.svelte generated by Svelte v3.37.0 */
    const file$e = "src\\dashboard\\routes\\Dashboard.svelte";

    // (8:0) <Shell title="Dashboard">
    function create_default_slot$9(ctx) {
    	let div6;
    	let div0;
    	let energyhistorychart;
    	let t0;
    	let div5;
    	let div1;
    	let stat0;
    	let t1;
    	let div2;
    	let stat1;
    	let t2;
    	let div3;
    	let stat2;
    	let t3;
    	let div4;
    	let energyflowchart;
    	let current;
    	energyhistorychart = new EnergyHistoryChart({ $$inline: true });

    	stat0 = new Stat({
    			props: {
    				icon: LightningBolt,
    				text: "Used energy",
    				value: "10 kWh"
    			},
    			$$inline: true
    		});

    	stat1 = new Stat({
    			props: {
    				icon: Cloud,
    				text: "Emitted Co2",
    				value: "78 kg"
    			},
    			$$inline: true
    		});

    	stat2 = new Stat({
    			props: {
    				icon: Cash,
    				text: "Saved",
    				value: "$24.34"
    			},
    			$$inline: true
    		});

    	energyflowchart = new EnergyFlowChart({ $$inline: true });

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div0 = element("div");
    			create_component(energyhistorychart.$$.fragment);
    			t0 = space();
    			div5 = element("div");
    			div1 = element("div");
    			create_component(stat0.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(stat1.$$.fragment);
    			t2 = space();
    			div3 = element("div");
    			create_component(stat2.$$.fragment);
    			t3 = space();
    			div4 = element("div");
    			create_component(energyflowchart.$$.fragment);
    			attr_dev(div0, "class", "col-span-6");
    			add_location(div0, file$e, 9, 4, 440);
    			attr_dev(div1, "class", "col-span-12 md:col-span-4");
    			add_location(div1, file$e, 13, 6, 583);
    			attr_dev(div2, "class", "col-span-12 md:col-span-4");
    			add_location(div2, file$e, 16, 6, 717);
    			attr_dev(div3, "class", "col-span-12 md:col-span-4");
    			add_location(div3, file$e, 19, 6, 842);
    			attr_dev(div4, "class", "col-span-12");
    			add_location(div4, file$e, 22, 6, 961);
    			attr_dev(div5, "class", "col-span-12 xl:col-span-6 grid grid-cols-12 gap-6");
    			add_location(div5, file$e, 12, 4, 512);
    			attr_dev(div6, "class", "grid grid-cols-12 gap-12");
    			add_location(div6, file$e, 8, 2, 396);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div0);
    			mount_component(energyhistorychart, div0, null);
    			append_dev(div6, t0);
    			append_dev(div6, div5);
    			append_dev(div5, div1);
    			mount_component(stat0, div1, null);
    			append_dev(div5, t1);
    			append_dev(div5, div2);
    			mount_component(stat1, div2, null);
    			append_dev(div5, t2);
    			append_dev(div5, div3);
    			mount_component(stat2, div3, null);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			mount_component(energyflowchart, div4, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(energyhistorychart.$$.fragment, local);
    			transition_in(stat0.$$.fragment, local);
    			transition_in(stat1.$$.fragment, local);
    			transition_in(stat2.$$.fragment, local);
    			transition_in(energyflowchart.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(energyhistorychart.$$.fragment, local);
    			transition_out(stat0.$$.fragment, local);
    			transition_out(stat1.$$.fragment, local);
    			transition_out(stat2.$$.fragment, local);
    			transition_out(energyflowchart.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(energyhistorychart);
    			destroy_component(stat0);
    			destroy_component(stat1);
    			destroy_component(stat2);
    			destroy_component(energyflowchart);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(8:0) <Shell title=\\\"Dashboard\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let shell;
    	let current;

    	shell = new Shell({
    			props: {
    				title: "Dashboard",
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(shell.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(shell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const shell_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				shell_changes.$$scope = { dirty, ctx };
    			}

    			shell.$set(shell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(shell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(shell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(shell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Dashboard", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dashboard> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		LightningBolt,
    		Cash,
    		Cloud,
    		Shell,
    		Stat,
    		EnergyHistoryChart,
    		EnergyFlowChart
    	});

    	return [];
    }

    class Dashboard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dashboard",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    var dashboardRoutes = {
        "/": wrap$1({
            component: Dashboard,
            //conditions: [async () => await authService.isLoggedIn()],
        }),
    };

    const priceHistoryOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { display: false },
            tooltip: { enabled: true },
        },
        scales: {
            x: {
                grid: { display: false, borderColor: "#F3F4F6" },
                ticks: {
                    font: { size: 14, family: "Inter" },
                    color: "rgb(156, 163, 175)",
                },
            },
            y: {
                beginAtZero: true,
                grid: { drawBorder: false, color: "#F3F4F6" },
                ticks: {
                    font: { size: 14, family: "Inter" },
                    color: "rgb(156, 163, 175)",
                },
            },
        },
    };

    /* src\trading\components\TradingPriceHistory.svelte generated by Svelte v3.37.0 */
    const file$d = "src\\trading\\components\\TradingPriceHistory.svelte";

    // (67:0) <Card title="Price History">
    function create_default_slot$8(ctx) {
    	let canvas;

    	const block = {
    		c: function create() {
    			canvas = element("canvas");
    			attr_dev(canvas, "id", "priceHistoryChart");
    			attr_dev(canvas, "class", "w-full");
    			add_location(canvas, file$d, 70, 2, 3043);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(67:0) <Card title=\\\"Price History\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:2) 
    function create_action_slot(ctx) {
    	let span;
    	let intervalselector;
    	let current;

    	intervalselector = new IntervalSelector({
    			props: { onChange: /*func*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(intervalselector.$$.fragment);
    			attr_dev(span, "slot", "action");
    			add_location(span, file$d, 67, 2, 2935);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(intervalselector, span, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(intervalselector.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(intervalselector.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(intervalselector);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_action_slot.name,
    		type: "slot",
    		source: "(68:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				title: "Price History",
    				$$slots: {
    					action: [create_action_slot],
    					default: [create_default_slot$8]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TradingPriceHistory", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	
    	let chart;
    	let interval = 1;

    	let labels = arrayFromRange(1, 10).map((_, i) => {
    		const date = subHours(new Date(), i * interval);
    		return `${date.getHours()} h`;
    	}).reverse();

    	let dataset = [
    		{
    			fill: true,
    			backgroundColor: "#00966922",
    			borderColor: "#009669",
    			data: []
    		}
    	];

    	onMount(() => {
    		const canvas = document.getElementById("priceHistoryChart");
    		chart = createChart(canvas.getContext("2d"), "line", dataset, labels, priceHistoryOptions);
    		updateChart();
    	});

    	function updateChart(interval = "1h") {
    		return __awaiter(this, void 0, void 0, function* () {
    			//const { data } = await transactionsService.fetchPriceHistory(interval, 12);
    			let data;

    			//Static Values for IHC
    			if (interval === "1h") {
    				data = [1.12, 1.13, 1.25, 1.2, 1.12, 1.07, 1.05, 0.98, 1.05, 1.09, 1.13, 1.17];
    			} else if (interval === "1d") {
    				data = [1.01, 1.13, 1.28, 1.22, 1.22, 1.12, 1.05, 0.98, 1.15, 1.39, 1.13, 1.2];
    			} else if (interval === "1w") {
    				data = [1.02, 1.03, 1.05, 1.12, 1.14, 1.19, 1.05, 1, 1.09, 1.18, 1.23, 1.27];
    			} else if (interval === "1m") {
    				data = [0.95, 0.81, 0.99, 1.01, 1.05, 1.07, 1.05, 0.91, 1.15, 1.29, 1.13, 1.27];
    			} else if (interval === "1y") {
    				data = [0.58, 0.6, 0.69, 0.74, 0.99, 0.75, 0.85, 0.95, 1.05, 1.09, 1.18, 1.23];
    			}

    			chart.data.datasets[0].data = data;
    			chart.data.labels = intervalToChartLabel(interval, 12);
    			chart.update();
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TradingPriceHistory> was created with unknown prop '${key}'`);
    	});

    	const func = interval => updateChart(interval);

    	$$self.$capture_state = () => ({
    		__awaiter,
    		Card,
    		onMount,
    		createChart,
    		subHours,
    		arrayFromRange,
    		intervalToChartLabel,
    		transactionsService,
    		IntervalSelector,
    		priceHistoryOptions,
    		chart,
    		interval,
    		labels,
    		dataset,
    		updateChart
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("chart" in $$props) chart = $$props.chart;
    		if ("interval" in $$props) interval = $$props.interval;
    		if ("labels" in $$props) labels = $$props.labels;
    		if ("dataset" in $$props) dataset = $$props.dataset;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [updateChart, func];
    }

    class TradingPriceHistory extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TradingPriceHistory",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src\common\components\badge\Badge.svelte generated by Svelte v3.37.0 */

    const file$c = "src\\common\\components\\badge\\Badge.svelte";

    function create_fragment$c(ctx) {
    	let span;
    	let span_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", span_class_value = "flex bg-" + /*color*/ ctx[0] + "-" + (/*isDarkMode*/ ctx[1] ? "700" : "100") + " text-" + /*color*/ ctx[0] + "-" + (/*isDarkMode*/ ctx[1] ? "50" : "800") + " px-2 rounded-full font-medium items-center text-sm");
    			add_location(span, file$c, 4, 0, 74);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 4) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*color, isDarkMode*/ 3 && span_class_value !== (span_class_value = "flex bg-" + /*color*/ ctx[0] + "-" + (/*isDarkMode*/ ctx[1] ? "700" : "100") + " text-" + /*color*/ ctx[0] + "-" + (/*isDarkMode*/ ctx[1] ? "50" : "800") + " px-2 rounded-full font-medium items-center text-sm")) {
    				attr_dev(span, "class", span_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Badge", slots, ['default']);
    	let { color } = $$props;
    	let { isDarkMode } = $$props;
    	const writable_props = ["color", "isDarkMode"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Badge> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("isDarkMode" in $$props) $$invalidate(1, isDarkMode = $$props.isDarkMode);
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ color, isDarkMode });

    	$$self.$inject_state = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("isDarkMode" in $$props) $$invalidate(1, isDarkMode = $$props.isDarkMode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [color, isDarkMode, $$scope, slots];
    }

    class Badge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { color: 0, isDarkMode: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Badge",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*color*/ ctx[0] === undefined && !("color" in props)) {
    			console.warn("<Badge> was created without expected prop 'color'");
    		}

    		if (/*isDarkMode*/ ctx[1] === undefined && !("isDarkMode" in props)) {
    			console.warn("<Badge> was created without expected prop 'isDarkMode'");
    		}
    	}

    	get color() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDarkMode() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDarkMode(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\trading\components\TradingPricesLatest.svelte generated by Svelte v3.37.0 */
    const file$b = "src\\trading\\components\\TradingPricesLatest.svelte";

    function get_then_context$1(ctx) {
    	ctx[0] = ctx[1].data;
    }

    // (1:0) <script>    import Card from "../../common/components/card/Card.svelte";    import Icon, { ArrowUp }
    function create_catch_block$1(ctx) {
    	const block = { c: noop$2, m: noop$2, d: noop$2 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(1:0) <script>    import Card from \\\"../../common/components/card/Card.svelte\\\";    import Icon, { ArrowUp }",
    		ctx
    	});

    	return block;
    }

    // (14:8) {:then { data }}
    function create_then_block$1(ctx) {
    	get_then_context$1(ctx);
    	let t0;
    	let span;

    	const block = {
    		c: function create() {
    			t0 = text("$1.17\r\n          ");
    			span = element("span");
    			span.textContent = "/ kWh";
    			attr_dev(span, "class", "text-sm text-gray-400 font-normal");
    			add_location(span, file$b, 15, 10, 617);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(14:8) {:then { data }}",
    		ctx
    	});

    	return block;
    }

    // (12:60)             ...          {:then { data }}
    function create_pending_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(12:60)             ...          {:then { data }}",
    		ctx
    	});

    	return block;
    }

    // (22:6) <Badge color="green" isDarkMode>
    function create_default_slot_1$1(ctx) {
    	let icon;
    	let t;
    	let current;

    	icon = new Icon({
    			props: {
    				src: ArrowUp,
    				class: "w-4 h-4 text-green-400 mr-1",
    				solid: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = text("\r\n        3.53%");
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(22:6) <Badge color=\\\"green\\\" isDarkMode>",
    		ctx
    	});

    	return block;
    }

    // (8:0) <Card bgColor="bg-gray-900">
    function create_default_slot$7(ctx) {
    	let div2;
    	let div0;
    	let span0;
    	let t0;
    	let span1;
    	let t2;
    	let div1;
    	let badge;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 1
    	};

    	handle_promise(transactionsService.fetchPriceLast24Hours(), info);

    	badge = new Badge({
    			props: {
    				color: "green",
    				isDarkMode: true,
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			info.block.c();
    			t0 = space();
    			span1 = element("span");
    			span1.textContent = "Last 24 hours";
    			t2 = space();
    			div1 = element("div");
    			create_component(badge.$$.fragment);
    			attr_dev(span0, "class", "text-2xl font-semibold text-gray-50");
    			add_location(span0, file$b, 10, 6, 410);
    			attr_dev(span1, "class", "text-sm text-gray-400");
    			add_location(span1, file$b, 18, 6, 719);
    			attr_dev(div0, "class", "flex flex-col");
    			add_location(div0, file$b, 9, 4, 375);
    			add_location(div1, file$b, 20, 4, 793);
    			attr_dev(div2, "class", "flex justify-between items-center");
    			add_location(div2, file$b, 8, 2, 322);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			info.block.m(span0, info.anchor = null);
    			info.mount = () => span0;
    			info.anchor = null;
    			append_dev(div0, t0);
    			append_dev(div0, span1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			mount_component(badge, div1, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const badge_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				badge_changes.$$scope = { dirty, ctx };
    			}

    			badge.$set(badge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			info.block.d();
    			info.token = null;
    			info = null;
    			destroy_component(badge);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(8:0) <Card bgColor=\\\"bg-gray-900\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				bgColor: "bg-gray-900",
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TradingPricesLatest", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TradingPricesLatest> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Card,
    		Icon,
    		ArrowUp,
    		Badge,
    		transactionsService
    	});

    	return [];
    }

    class TradingPricesLatest extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TradingPricesLatest",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src\trading\components\TradingPricesSettings.svelte generated by Svelte v3.37.0 */

    const file$a = "src\\trading\\components\\TradingPricesSettings.svelte";

    // (30:0) <Card title="My Prices">
    function create_default_slot$6(ctx) {
    	let form;
    	let div0;
    	let label0;
    	let t0;
    	let span0;
    	let t2;
    	let input0;
    	let t3;
    	let div1;
    	let label1;
    	let t4;
    	let span1;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			t0 = text("Sell Price ");
    			span0 = element("span");
    			span0.textContent = "$ / kWh";
    			t2 = space();
    			input0 = element("input");
    			t3 = space();
    			div1 = element("div");
    			label1 = element("label");
    			t4 = text("Buy Price ");
    			span1 = element("span");
    			span1.textContent = "$ / kWh";
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			button = element("button");
    			button.textContent = "Save";
    			attr_dev(span0, "class", "text-sm text-gray-500");
    			add_location(span0, file$a, 33, 19, 861);
    			attr_dev(label0, "for", "sellPrice");
    			attr_dev(label0, "class", "text-gray-800");
    			add_location(label0, file$a, 32, 6, 795);
    			attr_dev(input0, "class", "input mt-1");
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "min", "0.01");
    			attr_dev(input0, "step", "0.01");
    			attr_dev(input0, "placeholder", "1.02");
    			add_location(input0, file$a, 35, 6, 936);
    			attr_dev(div0, "class", "mb-8");
    			add_location(div0, file$a, 31, 4, 769);
    			attr_dev(span1, "class", "text-sm text-gray-500");
    			add_location(span1, file$a, 46, 18, 1228);
    			attr_dev(label1, "for", "sellPrice");
    			attr_dev(label1, "class", "text-gray-800");
    			add_location(label1, file$a, 45, 6, 1163);
    			attr_dev(input1, "class", "input mt-1");
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "0.01");
    			attr_dev(input1, "step", "0.01");
    			attr_dev(input1, "placeholder", "1.02");
    			add_location(input1, file$a, 48, 6, 1303);
    			attr_dev(div1, "class", "mb-8");
    			add_location(div1, file$a, 44, 4, 1137);
    			attr_dev(button, "class", "btn text-lg flex items-center");
    			add_location(button, file$a, 58, 6, 1525);
    			attr_dev(div2, "class", "");
    			add_location(div2, file$a, 57, 4, 1503);
    			add_location(form, file$a, 30, 2, 719);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t0);
    			append_dev(label0, span0);
    			append_dev(div0, t2);
    			append_dev(div0, input0);
    			set_input_value(input0, /*pricesFormData*/ ctx[0].sellPrice);
    			append_dev(form, t3);
    			append_dev(form, div1);
    			append_dev(div1, label1);
    			append_dev(label1, t4);
    			append_dev(label1, span1);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*pricesFormData*/ ctx[0].buyPrice);
    			append_dev(form, t7);
    			append_dev(form, div2);
    			append_dev(div2, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(form, "submit", prevent_default(/*handleSave*/ ctx[1]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pricesFormData*/ 1 && to_number(input0.value) !== /*pricesFormData*/ ctx[0].sellPrice) {
    				set_input_value(input0, /*pricesFormData*/ ctx[0].sellPrice);
    			}

    			if (dirty & /*pricesFormData*/ 1 && to_number(input1.value) !== /*pricesFormData*/ ctx[0].buyPrice) {
    				set_input_value(input1, /*pricesFormData*/ ctx[0].buyPrice);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(30:0) <Card title=\\\"My Prices\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				title: "My Prices",
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope, pricesFormData*/ 17) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TradingPricesSettings", slots, []);
    	let pricesFormData = { buyPrice: 0, sellPrice: 0 };

    	async function handleSave() {
    		try {
    			notificationsService.push({
    				title: "Prices updated",
    				description: "Your price settings were updated with success",
    				type: "success"
    			});
    		} catch {
    			
    		}
    	}

    	onMount(async () => {
    		const { data, error } = await usersService.fetchPrices();

    		if (!error) {
    			$$invalidate(0, pricesFormData = data);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TradingPricesSettings> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		pricesFormData.sellPrice = to_number(this.value);
    		$$invalidate(0, pricesFormData);
    	}

    	function input1_input_handler() {
    		pricesFormData.buyPrice = to_number(this.value);
    		$$invalidate(0, pricesFormData);
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		Card,
    		notificationsService,
    		usersService,
    		pricesFormData,
    		handleSave
    	});

    	$$self.$inject_state = $$props => {
    		if ("pricesFormData" in $$props) $$invalidate(0, pricesFormData = $$props.pricesFormData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [pricesFormData, handleSave, input0_input_handler, input1_input_handler];
    }

    class TradingPricesSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TradingPricesSettings",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src\trading\routes\Trading.svelte generated by Svelte v3.37.0 */
    const file$9 = "src\\trading\\routes\\Trading.svelte";

    // (8:0) <Shell title="Trading">
    function create_default_slot$5(ctx) {
    	let div5;
    	let div0;
    	let tradingpricehistory;
    	let t0;
    	let div4;
    	let div3;
    	let div1;
    	let tradingpriceslatest;
    	let t1;
    	let div2;
    	let tradingpricessettings;
    	let current;
    	tradingpricehistory = new TradingPriceHistory({ $$inline: true });
    	tradingpriceslatest = new TradingPricesLatest({ $$inline: true });
    	tradingpricessettings = new TradingPricesSettings({ $$inline: true });

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			create_component(tradingpricehistory.$$.fragment);
    			t0 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			create_component(tradingpriceslatest.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(tradingpricessettings.$$.fragment);
    			attr_dev(div0, "class", "col-span-12 lg:col-span-8");
    			add_location(div0, file$9, 9, 4, 402);
    			attr_dev(div1, "class", "mb-12");
    			add_location(div1, file$9, 14, 8, 581);
    			attr_dev(div2, "class", "h-full");
    			add_location(div2, file$9, 17, 8, 661);
    			attr_dev(div3, "class", "flex flex-col h-full");
    			add_location(div3, file$9, 13, 6, 537);
    			attr_dev(div4, "class", "col-span-12 lg:col-span-4");
    			add_location(div4, file$9, 12, 4, 490);
    			attr_dev(div5, "class", "grid grid-cols-12 gap-12");
    			add_location(div5, file$9, 8, 2, 358);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			mount_component(tradingpricehistory, div0, null);
    			append_dev(div5, t0);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			mount_component(tradingpriceslatest, div1, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			mount_component(tradingpricessettings, div2, null);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tradingpricehistory.$$.fragment, local);
    			transition_in(tradingpriceslatest.$$.fragment, local);
    			transition_in(tradingpricessettings.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tradingpricehistory.$$.fragment, local);
    			transition_out(tradingpriceslatest.$$.fragment, local);
    			transition_out(tradingpricessettings.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_component(tradingpricehistory);
    			destroy_component(tradingpriceslatest);
    			destroy_component(tradingpricessettings);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(8:0) <Shell title=\\\"Trading\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let shell;
    	let current;

    	shell = new Shell({
    			props: {
    				title: "Trading",
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(shell.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(shell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const shell_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				shell_changes.$$scope = { dirty, ctx };
    			}

    			shell.$set(shell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(shell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(shell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(shell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Trading", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Trading> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Shell,
    		TradingPriceHistory,
    		TradingPricesLatest,
    		TradingPricesSettings
    	});

    	return [];
    }

    class Trading extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Trading",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    var tradingRoutes = {
        "/trading": wrap$1({
            component: Trading,
            //conditions: [async () => await authService.isLoggedIn()],
        }),
    };

    /* src\wallet\components\WalletBalance.svelte generated by Svelte v3.37.0 */
    const file$8 = "src\\wallet\\components\\WalletBalance.svelte";

    // (5:0) <Card bgColor="bg-gray-900">
    function create_default_slot$4(ctx) {
    	let div2;
    	let div0;
    	let span0;
    	let t1;
    	let span1;
    	let t3;
    	let div1;
    	let button;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "75ℏ";
    			t1 = space();
    			span1 = element("span");
    			span1.textContent = "≈ $15.0";
    			t3 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "Add Funds";
    			attr_dev(span0, "class", "text-3xl text-gray-50 font-semibold");
    			add_location(span0, file$8, 7, 6, 287);
    			attr_dev(span1, "class", "text-lg text-gray-400 font-medium");
    			add_location(span1, file$8, 15, 6, 524);
    			attr_dev(div0, "class", "flex flex-col");
    			add_location(div0, file$8, 6, 4, 252);
    			attr_dev(button, "class", "btn flex items-center");
    			add_location(button, file$8, 18, 6, 617);
    			add_location(div1, file$8, 17, 4, 604);
    			attr_dev(div2, "class", "flex justify-between items-center");
    			add_location(div2, file$8, 5, 2, 199);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t1);
    			append_dev(div0, span1);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(5:0) <Card bgColor=\\\"bg-gray-900\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				bgColor: "bg-gray-900",
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("WalletBalance", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WalletBalance> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Card, hederaService });
    	return [];
    }

    class WalletBalance extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WalletBalance",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src\wallet\components\WalletInformation.svelte generated by Svelte v3.37.0 */
    const file$7 = "src\\wallet\\components\\WalletInformation.svelte";

    // (35:2) {:else}
    function create_else_block$1(ctx) {
    	let div1;
    	let div0;
    	let icon;
    	let t0;
    	let t1;
    	let div2;
    	let input;
    	let t2;
    	let button;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { src: Exclamation, class: "mr-2 w-8 h-8" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(icon.$$.fragment);
    			t0 = text("\r\n        This device doesn't contain your wallet private key.");
    			t1 = space();
    			div2 = element("div");
    			input = element("input");
    			t2 = space();
    			button = element("button");
    			button.textContent = "Import";
    			attr_dev(div0, "class", "flex items-center bg-yellow-100 text-yellow-800 p-2 rounded-md \r\n      text-sm my-8");
    			add_location(div0, file$7, 36, 6, 1305);
    			add_location(div1, file$7, 35, 4, 1292);
    			attr_dev(input, "class", "input mr-3");
    			attr_dev(input, "placeholder", "Private key");
    			add_location(input, file$7, 45, 6, 1609);
    			attr_dev(button, "class", "btn-secundary flex items-center");
    			add_location(button, file$7, 46, 6, 1695);
    			attr_dev(div2, "class", "flex items-center");
    			add_location(div2, file$7, 44, 4, 1570);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(icon, div0, null);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, input);
    			set_input_value(input, /*privateKey*/ ctx[0]);
    			append_dev(div2, t2);
    			append_dev(div2, button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[4]),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*privateKey*/ 1 && input.value !== /*privateKey*/ ctx[0]) {
    				set_input_value(input, /*privateKey*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(icon);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(35:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (17:2) {#if $hederaAccountInfo.privateKey}
    function create_if_block$1(ctx) {
    	let dl;
    	let div;
    	let dt;
    	let t1;
    	let a;
    	let t2;
    	let a_href_value;
    	let t3;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			dl = element("dl");
    			div = element("div");
    			dt = element("dt");
    			dt.textContent = "Explore";
    			t1 = space();
    			a = element("a");
    			t2 = text("Kabuto Explorer");
    			t3 = space();
    			button = element("button");
    			button.textContent = "Export";
    			attr_dev(dt, "class", "text-sm font-medium text-gray-500");
    			add_location(dt, file$7, 19, 8, 792);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", a_href_value = "https://explorer.kabuto.sh/testnet/id/" + /*$hederaAccountInfo*/ ctx[1].accountId);
    			attr_dev(a, "class", "underline text-green-800 mt-1 text-sm sm:mt-0 sm:col-span-2");
    			add_location(a, file$7, 20, 8, 860);
    			attr_dev(div, "class", "py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 ");
    			add_location(div, file$7, 18, 6, 723);
    			attr_dev(dl, "class", "mb-4");
    			add_location(dl, file$7, 17, 4, 698);
    			attr_dev(button, "class", "btn-secundary flex items-center");
    			add_location(button, file$7, 28, 4, 1128);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, dl, anchor);
    			append_dev(dl, div);
    			append_dev(div, dt);
    			append_dev(div, t1);
    			append_dev(div, a);
    			append_dev(a, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$hederaAccountInfo*/ 2 && a_href_value !== (a_href_value = "https://explorer.kabuto.sh/testnet/id/" + /*$hederaAccountInfo*/ ctx[1].accountId)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(dl);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(17:2) {#if $hederaAccountInfo.privateKey}",
    		ctx
    	});

    	return block;
    }

    // (8:0) <Card title="Informations">
    function create_default_slot$3(ctx) {
    	let dl;
    	let div;
    	let dt;
    	let t1;
    	let dd;
    	let t3;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$1, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$hederaAccountInfo*/ ctx[1].privateKey) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			dl = element("dl");
    			div = element("div");
    			dt = element("dt");
    			dt.textContent = "Account Id";
    			t1 = space();
    			dd = element("dd");
    			dd.textContent = "0.0.00050";
    			t3 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(dt, "class", "text-sm font-medium text-gray-500");
    			add_location(dt, file$7, 10, 6, 432);
    			attr_dev(dd, "class", "mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2");
    			add_location(dd, file$7, 11, 6, 501);
    			attr_dev(div, "class", "py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 ");
    			add_location(div, file$7, 9, 4, 365);
    			attr_dev(dl, "class", "border-b border-gray-200");
    			add_location(dl, file$7, 8, 2, 322);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, dl, anchor);
    			append_dev(dl, div);
    			append_dev(div, dt);
    			append_dev(div, t1);
    			append_dev(div, dd);
    			insert_dev(target, t3, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(dl);
    			if (detaching) detach_dev(t3);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(8:0) <Card title=\\\"Informations\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				title: "Informations",
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope, $hederaAccountInfo, privateKey*/ 67) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $hederaAccountInfo;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("WalletInformation", slots, []);
    	const { hederaAccountInfo } = hederaService;
    	validate_store(hederaAccountInfo, "hederaAccountInfo");
    	component_subscribe($$self, hederaAccountInfo, value => $$invalidate(1, $hederaAccountInfo = value));
    	let privateKey = "";
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WalletInformation> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => hederaService.exportPrivateKey();

    	function input_input_handler() {
    		privateKey = this.value;
    		$$invalidate(0, privateKey);
    	}

    	const click_handler_1 = () => hederaService.importPrivateKey(privateKey);

    	$$self.$capture_state = () => ({
    		Icon,
    		Exclamation,
    		Card,
    		hederaService,
    		hederaAccountInfo,
    		privateKey,
    		$hederaAccountInfo
    	});

    	$$self.$inject_state = $$props => {
    		if ("privateKey" in $$props) $$invalidate(0, privateKey = $$props.privateKey);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		privateKey,
    		$hederaAccountInfo,
    		hederaAccountInfo,
    		click_handler,
    		input_input_handler,
    		click_handler_1
    	];
    }

    class WalletInformation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WalletInformation",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src\common\components\table\Table.svelte generated by Svelte v3.37.0 */

    const file$6 = "src\\common\\components\\table\\Table.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (11:14) {#each headers as header}
    function create_each_block$3(ctx) {
    	let th;
    	let t0_value = /*header*/ ctx[3] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			th = element("th");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(th, "scope", "col");
    			attr_dev(th, "class", "px-6 py-3 text-left text-xs font-medium text-gray-500 \r\n                    uppercase tracking-wider");
    			add_location(th, file$6, 11, 16, 472);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, t0);
    			append_dev(th, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*headers*/ 1 && t0_value !== (t0_value = /*header*/ ctx[3] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(11:14) {#each headers as header}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div3;
    	let div2;
    	let div1;
    	let div0;
    	let table;
    	let thead;
    	let tr;
    	let t;
    	let tbody;
    	let current;
    	let each_value = /*headers*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			tbody = element("tbody");
    			if (default_slot) default_slot.c();
    			add_location(tr, file$6, 9, 12, 409);
    			attr_dev(thead, "class", "bg-gray-50");
    			add_location(thead, file$6, 8, 10, 369);
    			attr_dev(tbody, "class", "bg-white divide-y divide-gray-200");
    			add_location(tbody, file$6, 21, 10, 778);
    			attr_dev(table, "class", "min-w-full divide-y divide-gray-200");
    			add_location(table, file$6, 7, 8, 306);
    			attr_dev(div0, "class", "shadow overflow-hidden border-b border-gray-200 sm:rounded-lg");
    			add_location(div0, file$6, 6, 6, 221);
    			attr_dev(div1, "class", "py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8");
    			add_location(div1, file$6, 5, 4, 142);
    			attr_dev(div2, "class", "-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8");
    			add_location(div2, file$6, 4, 2, 83);
    			attr_dev(div3, "class", "flex flex-col");
    			add_location(div3, file$6, 3, 0, 52);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(table, t);
    			append_dev(table, tbody);

    			if (default_slot) {
    				default_slot.m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*headers*/ 1) {
    				each_value = /*headers*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Table", slots, ['default']);
    	let { headers } = $$props;
    	const writable_props = ["headers"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Table> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("headers" in $$props) $$invalidate(0, headers = $$props.headers);
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ headers });

    	$$self.$inject_state = $$props => {
    		if ("headers" in $$props) $$invalidate(0, headers = $$props.headers);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [headers, $$scope, slots];
    }

    class Table extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { headers: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Table",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*headers*/ ctx[0] === undefined && !("headers" in props)) {
    			console.warn("<Table> was created without expected prop 'headers'");
    		}
    	}

    	get headers() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set headers(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\table\TableNotFound.svelte generated by Svelte v3.37.0 */

    const file$5 = "src\\common\\components\\table\\TableNotFound.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (6:2) {#each Array(headersNum - 1) as _}
    function create_each_block$2(ctx) {
    	let td;

    	const block = {
    		c: function create() {
    			td = element("td");
    			attr_dev(td, "class", "px-6 py-4");
    			add_location(td, file$5, 6, 4, 165);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(6:2) {#each Array(headersNum - 1) as _}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let tr;
    	let td;
    	let t1;
    	let each_value = Array(/*headersNum*/ ctx[0] - 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td = element("td");
    			td.textContent = "No results found.";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(td, "class", "px-6 py-4 text-gray-500");
    			add_location(td, file$5, 4, 2, 63);
    			add_location(tr, file$5, 3, 0, 55);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td);
    			append_dev(tr, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*headersNum*/ 1) {
    				const old_length = each_value.length;
    				each_value = Array(/*headersNum*/ ctx[0] - 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = old_length; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (!each_blocks[i]) {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, null);
    					}
    				}

    				for (i = each_value.length; i < old_length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TableNotFound", slots, []);
    	let { headersNum } = $$props;
    	const writable_props = ["headersNum"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TableNotFound> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("headersNum" in $$props) $$invalidate(0, headersNum = $$props.headersNum);
    	};

    	$$self.$capture_state = () => ({ headersNum });

    	$$self.$inject_state = $$props => {
    		if ("headersNum" in $$props) $$invalidate(0, headersNum = $$props.headersNum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [headersNum];
    }

    class TableNotFound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { headersNum: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableNotFound",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*headersNum*/ ctx[0] === undefined && !("headersNum" in props)) {
    			console.warn("<TableNotFound> was created without expected prop 'headersNum'");
    		}
    	}

    	get headersNum() {
    		throw new Error("<TableNotFound>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set headersNum(value) {
    		throw new Error("<TableNotFound>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\common\components\table\TableSkeleton.svelte generated by Svelte v3.37.0 */

    const file$4 = "src\\common\\components\\table\\TableSkeleton.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (7:4) {#each Array(headersNum) as _}
    function create_each_block_1(ctx) {
    	let td;
    	let div;

    	const block = {
    		c: function create() {
    			td = element("td");
    			div = element("div");
    			attr_dev(div, "class", "h-4 bg-gray-200 rounded");
    			add_location(div, file$4, 8, 8, 205);
    			attr_dev(td, "class", "animate-pulse px-6 py-4");
    			add_location(td, file$4, 7, 6, 159);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, div);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(7:4) {#each Array(headersNum) as _}",
    		ctx
    	});

    	return block;
    }

    // (5:0) {#each Array(rowsNum) as _}
    function create_each_block$1(ctx) {
    	let tr;
    	let t;
    	let each_value_1 = Array(/*headersNum*/ ctx[0]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			add_location(tr, file$4, 5, 2, 111);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(tr, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*headersNum*/ 1) {
    				const old_length = each_value_1.length;
    				each_value_1 = Array(/*headersNum*/ ctx[0]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = old_length; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (!each_blocks[i]) {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, t);
    					}
    				}

    				for (i = each_value_1.length; i < old_length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(5:0) {#each Array(rowsNum) as _}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let each_1_anchor;
    	let each_value = Array(/*rowsNum*/ ctx[1]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*Array, headersNum, rowsNum*/ 3) {
    				each_value = Array(/*rowsNum*/ ctx[1]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TableSkeleton", slots, []);
    	let { headersNum } = $$props;
    	let { rowsNum = 5 } = $$props;
    	const writable_props = ["headersNum", "rowsNum"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TableSkeleton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("headersNum" in $$props) $$invalidate(0, headersNum = $$props.headersNum);
    		if ("rowsNum" in $$props) $$invalidate(1, rowsNum = $$props.rowsNum);
    	};

    	$$self.$capture_state = () => ({ headersNum, rowsNum });

    	$$self.$inject_state = $$props => {
    		if ("headersNum" in $$props) $$invalidate(0, headersNum = $$props.headersNum);
    		if ("rowsNum" in $$props) $$invalidate(1, rowsNum = $$props.rowsNum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [headersNum, rowsNum];
    }

    class TableSkeleton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { headersNum: 0, rowsNum: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableSkeleton",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*headersNum*/ ctx[0] === undefined && !("headersNum" in props)) {
    			console.warn("<TableSkeleton> was created without expected prop 'headersNum'");
    		}
    	}

    	get headersNum() {
    		throw new Error("<TableSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set headersNum(value) {
    		throw new Error("<TableSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rowsNum() {
    		throw new Error("<TableSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rowsNum(value) {
    		throw new Error("<TableSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\wallet\components\WalletPaymentsFilter.svelte generated by Svelte v3.37.0 */
    const file$3 = "src\\wallet\\components\\WalletPaymentsFilter.svelte";

    // (13:2) <Dropdown name="Filter" buttonClass="btn-secundary" width={96}>
    function create_default_slot$2(ctx) {
    	let div10;
    	let span0;
    	let t1;
    	let div3;
    	let div0;
    	let input0;
    	let t2;
    	let span1;
    	let t4;
    	let div1;
    	let input1;
    	let t5;
    	let span2;
    	let t7;
    	let div2;
    	let input2;
    	let t8;
    	let span3;
    	let t10;
    	let div4;
    	let t12;
    	let div5;
    	let input3;
    	let t13;
    	let div6;
    	let t15;
    	let div7;
    	let input4;
    	let t16;
    	let div8;
    	let t18;
    	let div9;
    	let input5;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			span0 = element("span");
    			span0.textContent = "Type";
    			t1 = space();
    			div3 = element("div");
    			div0 = element("div");
    			input0 = element("input");
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "Buy";
    			t4 = space();
    			div1 = element("div");
    			input1 = element("input");
    			t5 = space();
    			span2 = element("span");
    			span2.textContent = "Sell";
    			t7 = space();
    			div2 = element("div");
    			input2 = element("input");
    			t8 = space();
    			span3 = element("span");
    			span3.textContent = "All";
    			t10 = space();
    			div4 = element("div");
    			div4.textContent = "Min. Price";
    			t12 = space();
    			div5 = element("div");
    			input3 = element("input");
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "Max. Price";
    			t15 = space();
    			div7 = element("div");
    			input4 = element("input");
    			t16 = space();
    			div8 = element("div");
    			div8.textContent = "Date";
    			t18 = space();
    			div9 = element("div");
    			input5 = element("input");
    			attr_dev(span0, "class", "uppercase text-xs text-gray-500 mb-2 font-semibold");
    			add_location(span0, file$3, 14, 6, 443);
    			input0.__value = "buy";
    			input0.value = input0.__value;
    			attr_dev(input0, "type", "radio");
    			attr_dev(input0, "class", "mr-2");
    			/*$$binding_groups*/ ctx[7][0].push(input0);
    			add_location(input0, file$3, 17, 10, 646);
    			attr_dev(span1, "class", "text-gray-900");
    			add_location(span1, file$3, 18, 10, 748);
    			attr_dev(div0, "class", "flex items-center mr-4");
    			add_location(div0, file$3, 16, 8, 598);
    			input1.__value = "sell";
    			input1.value = input1.__value;
    			attr_dev(input1, "type", "radio");
    			attr_dev(input1, "class", "mr-2");
    			/*$$binding_groups*/ ctx[7][0].push(input1);
    			add_location(input1, file$3, 21, 10, 860);
    			attr_dev(span2, "class", "text-gray-900");
    			add_location(span2, file$3, 28, 10, 1039);
    			attr_dev(div1, "class", "flex items-center mr-4");
    			add_location(div1, file$3, 20, 8, 812);
    			input2.__value = "all";
    			input2.value = input2.__value;
    			attr_dev(input2, "type", "radio");
    			attr_dev(input2, "class", "mr-2");
    			/*$$binding_groups*/ ctx[7][0].push(input2);
    			add_location(input2, file$3, 31, 10, 1147);
    			attr_dev(span3, "class", "text-gray-900");
    			add_location(span3, file$3, 32, 10, 1249);
    			attr_dev(div2, "class", "flex items-center");
    			add_location(div2, file$3, 30, 8, 1104);
    			attr_dev(div3, "class", "flex items-center pb-2 border-b border-gray-200");
    			add_location(div3, file$3, 15, 6, 527);
    			attr_dev(div4, "class", "uppercase text-xs text-gray-500 mt-2 font-semibold");
    			add_location(div4, file$3, 35, 6, 1325);
    			attr_dev(input3, "class", "input");
    			attr_dev(input3, "step", 0.01);
    			attr_dev(input3, "min", 0);
    			attr_dev(input3, "type", "number");
    			add_location(input3, file$3, 37, 8, 1441);
    			attr_dev(div5, "class", "mt-2");
    			add_location(div5, file$3, 36, 6, 1413);
    			attr_dev(div6, "class", "uppercase text-xs text-gray-500 mt-2 font-semibold");
    			add_location(div6, file$3, 46, 6, 1642);
    			attr_dev(input4, "class", "input");
    			attr_dev(input4, "step", 0.01);
    			attr_dev(input4, "min", 0);
    			attr_dev(input4, "type", "number");
    			add_location(input4, file$3, 48, 8, 1758);
    			attr_dev(div7, "class", "mt-2");
    			add_location(div7, file$3, 47, 6, 1730);
    			attr_dev(div8, "class", "uppercase text-xs text-gray-500 mt-2 font-semibold");
    			add_location(div8, file$3, 57, 6, 1959);
    			attr_dev(input5, "class", "input");
    			attr_dev(input5, "type", "date");
    			add_location(input5, file$3, 59, 8, 2069);
    			attr_dev(div9, "class", "mt-2");
    			add_location(div9, file$3, 58, 6, 2041);
    			attr_dev(div10, "class", "p-4");
    			add_location(div10, file$3, 13, 4, 418);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, span0);
    			append_dev(div10, t1);
    			append_dev(div10, div3);
    			append_dev(div3, div0);
    			append_dev(div0, input0);
    			input0.checked = input0.__value === /*type*/ ctx[0];
    			append_dev(div0, t2);
    			append_dev(div0, span1);
    			append_dev(div3, t4);
    			append_dev(div3, div1);
    			append_dev(div1, input1);
    			input1.checked = input1.__value === /*type*/ ctx[0];
    			append_dev(div1, t5);
    			append_dev(div1, span2);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, input2);
    			input2.checked = input2.__value === /*type*/ ctx[0];
    			append_dev(div2, t8);
    			append_dev(div2, span3);
    			append_dev(div10, t10);
    			append_dev(div10, div4);
    			append_dev(div10, t12);
    			append_dev(div10, div5);
    			append_dev(div5, input3);
    			set_input_value(input3, /*minPrice*/ ctx[1]);
    			append_dev(div10, t13);
    			append_dev(div10, div6);
    			append_dev(div10, t15);
    			append_dev(div10, div7);
    			append_dev(div7, input4);
    			set_input_value(input4, /*maxPrice*/ ctx[2]);
    			append_dev(div10, t16);
    			append_dev(div10, div8);
    			append_dev(div10, t18);
    			append_dev(div10, div9);
    			append_dev(div9, input5);
    			set_input_value(input5, /*date*/ ctx[3]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[6]),
    					listen_dev(input0, "change", /*handleFilter*/ ctx[4], false, false, false),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[8]),
    					listen_dev(input1, "change", /*handleFilter*/ ctx[4], false, false, false),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[9]),
    					listen_dev(input2, "change", /*handleFilter*/ ctx[4], false, false, false),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen_dev(input3, "change", /*handleFilter*/ ctx[4], false, false, false),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[11]),
    					listen_dev(input4, "change", /*handleFilter*/ ctx[4], false, false, false),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[12]),
    					listen_dev(input5, "change", /*handleFilter*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*type*/ 1) {
    				input0.checked = input0.__value === /*type*/ ctx[0];
    			}

    			if (dirty & /*type*/ 1) {
    				input1.checked = input1.__value === /*type*/ ctx[0];
    			}

    			if (dirty & /*type*/ 1) {
    				input2.checked = input2.__value === /*type*/ ctx[0];
    			}

    			if (dirty & /*minPrice*/ 2 && to_number(input3.value) !== /*minPrice*/ ctx[1]) {
    				set_input_value(input3, /*minPrice*/ ctx[1]);
    			}

    			if (dirty & /*maxPrice*/ 4 && to_number(input4.value) !== /*maxPrice*/ ctx[2]) {
    				set_input_value(input4, /*maxPrice*/ ctx[2]);
    			}

    			if (dirty & /*date*/ 8) {
    				set_input_value(input5, /*date*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input0), 1);
    			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input1), 1);
    			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input2), 1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(13:2) <Dropdown name=\\\"Filter\\\" buttonClass=\\\"btn-secundary\\\" width={96}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let dropdown;
    	let current;

    	dropdown = new Dropdown({
    			props: {
    				name: "Filter",
    				buttonClass: "btn-secundary",
    				width: 96,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(dropdown.$$.fragment);
    			attr_dev(div, "class", "flex items-center");
    			add_location(div, file$3, 11, 0, 314);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(dropdown, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const dropdown_changes = {};

    			if (dirty & /*$$scope, date, maxPrice, minPrice, type*/ 8207) {
    				dropdown_changes.$$scope = { dirty, ctx };
    			}

    			dropdown.$set(dropdown_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(dropdown);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("WalletPaymentsFilter", slots, []);
    	let type = "buy";
    	let minPrice = "1";
    	let maxPrice = "5";
    	let date;
    	let { onFiltered } = $$props;

    	function handleFilter() {
    		onFiltered(type, parseFloat(minPrice), parseFloat(maxPrice), new Date(date));
    	}

    	const writable_props = ["onFiltered"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WalletPaymentsFilter> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[]];

    	function input0_change_handler() {
    		type = this.__value;
    		$$invalidate(0, type);
    	}

    	function input1_change_handler() {
    		type = this.__value;
    		$$invalidate(0, type);
    	}

    	function input2_change_handler() {
    		type = this.__value;
    		$$invalidate(0, type);
    	}

    	function input3_input_handler() {
    		minPrice = to_number(this.value);
    		$$invalidate(1, minPrice);
    	}

    	function input4_input_handler() {
    		maxPrice = to_number(this.value);
    		$$invalidate(2, maxPrice);
    	}

    	function input5_input_handler() {
    		date = this.value;
    		$$invalidate(3, date);
    	}

    	$$self.$$set = $$props => {
    		if ("onFiltered" in $$props) $$invalidate(5, onFiltered = $$props.onFiltered);
    	};

    	$$self.$capture_state = () => ({
    		Dropdown,
    		type,
    		minPrice,
    		maxPrice,
    		date,
    		onFiltered,
    		handleFilter
    	});

    	$$self.$inject_state = $$props => {
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("minPrice" in $$props) $$invalidate(1, minPrice = $$props.minPrice);
    		if ("maxPrice" in $$props) $$invalidate(2, maxPrice = $$props.maxPrice);
    		if ("date" in $$props) $$invalidate(3, date = $$props.date);
    		if ("onFiltered" in $$props) $$invalidate(5, onFiltered = $$props.onFiltered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		type,
    		minPrice,
    		maxPrice,
    		date,
    		handleFilter,
    		onFiltered,
    		input0_change_handler,
    		$$binding_groups,
    		input1_change_handler,
    		input2_change_handler,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler
    	];
    }

    class WalletPaymentsFilter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { onFiltered: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WalletPaymentsFilter",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onFiltered*/ ctx[5] === undefined && !("onFiltered" in props)) {
    			console.warn("<WalletPaymentsFilter> was created without expected prop 'onFiltered'");
    		}
    	}

    	get onFiltered() {
    		throw new Error("<WalletPaymentsFilter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFiltered(value) {
    		throw new Error("<WalletPaymentsFilter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\wallet\components\WalletPayments.svelte generated by Svelte v3.37.0 */

    const { console: console_1 } = globals;
    const file$2 = "src\\wallet\\components\\WalletPayments.svelte";

    function get_then_context(ctx) {
    	ctx[3] = ctx[4].data;
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (1:0) <script>    import { formatDistanceToNow }
    function create_catch_block(ctx) {
    	const block = {
    		c: noop$2,
    		m: noop$2,
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: noop$2
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <script>    import { formatDistanceToNow }",
    		ctx
    	});

    	return block;
    }

    // (37:2) {:then { data }}
    function create_then_block(ctx) {
    	get_then_context(ctx);
    	let t;
    	let each_1_anchor;
    	let current;
    	let if_block = /*data*/ ctx[3].length === 0 && create_if_block_1(ctx);
    	let each_value = /*data*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			get_then_context(ctx);

    			if (dirty & /*paymentsService, formatDistanceToNow, Date, userId*/ 0) {
    				each_value = /*data*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(37:2) {:then { data }}",
    		ctx
    	});

    	return block;
    }

    // (38:4) {#if data.length === 0}
    function create_if_block_1(ctx) {
    	let tablenotfound;
    	let current;
    	tablenotfound = new TableNotFound({ props: { headersNum: 5 }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(tablenotfound.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tablenotfound, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablenotfound.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablenotfound.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tablenotfound, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(38:4) {#if data.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (50:12) {:else}
    function create_else_block(ctx) {
    	let badge;
    	let current;

    	badge = new Badge({
    			props: {
    				color: "green",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(badge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(badge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const badge_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				badge_changes.$$scope = { dirty, ctx };
    			}

    			badge.$set(badge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(badge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(50:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:12) {#if payment.consumerId === userId}
    function create_if_block(ctx) {
    	let badge;
    	let current;

    	badge = new Badge({
    			props: {
    				color: "red",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(badge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(badge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const badge_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				badge_changes.$$scope = { dirty, ctx };
    			}

    			badge.$set(badge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(badge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(48:12) {#if payment.consumerId === userId}",
    		ctx
    	});

    	return block;
    }

    // (51:14) <Badge color="green">
    function create_default_slot_2(ctx) {
    	let t0;
    	let t1_value = /*payment*/ ctx[5].amount.toFixed(2) + "";
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text("$");
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(51:14) <Badge color=\\\"green\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:14) <Badge color="red">
    function create_default_slot_1(ctx) {
    	let t0;
    	let t1_value = /*payment*/ ctx[5].amount.toFixed(2) + "";
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text("$");
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(49:14) <Badge color=\\\"red\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:4) {#each data as payment}
    function create_each_block(ctx) {
    	let tr;
    	let td0;
    	let div0;
    	let t1;
    	let td1;
    	let div1;
    	let current_block_type_index;
    	let if_block;
    	let t2;
    	let td2;
    	let div2;
    	let t3_value = formatDistanceToNow(new Date(/*payment*/ ctx[5].createdAt)) + "";
    	let t3;
    	let t4;
    	let t5;
    	let td3;
    	let a;
    	let t6;
    	let t7;
    	let td4;
    	let button;
    	let t9;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*payment*/ ctx[5].consumerId === userId) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			div0 = element("div");
    			div0.textContent = "50 kW";
    			t1 = space();
    			td1 = element("td");
    			div1 = element("div");
    			if_block.c();
    			t2 = space();
    			td2 = element("td");
    			div2 = element("div");
    			t3 = text(t3_value);
    			t4 = text(" ago");
    			t5 = space();
    			td3 = element("td");
    			a = element("a");
    			t6 = text("Explore");
    			t7 = space();
    			td4 = element("td");
    			button = element("button");
    			button.textContent = "Invoice";
    			t9 = space();
    			attr_dev(div0, "class", "text-sm text-gray-900");
    			add_location(div0, file$2, 43, 10, 1669);
    			attr_dev(td0, "class", "px-6 py-4 whitespace-nowrap");
    			add_location(td0, file$2, 42, 8, 1617);
    			attr_dev(div1, "class", "flex items-center");
    			add_location(div1, file$2, 46, 10, 1792);
    			attr_dev(td1, "class", "px-6 py-4 whitespace-nowrap");
    			add_location(td1, file$2, 45, 8, 1740);
    			attr_dev(div2, "class", "text-sm text-gray-900");
    			add_location(div2, file$2, 55, 10, 2151);
    			attr_dev(td2, "class", "px-6 py-4 whitespace-nowrap");
    			add_location(td2, file$2, 54, 8, 2099);
    			attr_dev(a, "class", "underline text-green-800");
    			attr_dev(a, "href", "https://explorer.kabuto.sh/testnet/transaction/" + /*payment*/ ctx[5].hederaTransactionId);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$2, 60, 10, 2349);
    			attr_dev(td3, "class", "px-6 py-4 whitespace-nowrap");
    			add_location(td3, file$2, 59, 8, 2297);
    			attr_dev(button, "class", "btn-secundary");
    			add_location(button, file$2, 67, 10, 2624);
    			attr_dev(td4, "class", "px-6 py-4 whitespace-nowrap");
    			add_location(td4, file$2, 66, 8, 2572);
    			add_location(tr, file$2, 41, 6, 1603);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, div0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, div1);
    			if_blocks[current_block_type_index].m(div1, null);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, div2);
    			append_dev(div2, t3);
    			append_dev(div2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, a);
    			append_dev(a, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, button);
    			append_dev(tr, t9);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(41:4) {#each data as payment}",
    		ctx
    	});

    	return block;
    }

    // (35:42)       <TableSkeleton headersNum={5}
    function create_pending_block(ctx) {
    	let tableskeleton;
    	let current;

    	tableskeleton = new TableSkeleton({
    			props: { headersNum: 5, rowsNum: 5 },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tableskeleton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tableskeleton, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tableskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tableskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tableskeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(35:42)       <TableSkeleton headersNum={5}",
    		ctx
    	});

    	return block;
    }

    // (34:0) <Table headers={["Amount", "Price", "Date", "Explore", "Invoice"]}>
    function create_default_slot$1(ctx) {
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 4,
    		blocks: [,,,]
    	};

    	handle_promise(paymentsService.fetchPayments(), info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			{
    				const child_ctx = ctx.slice();
    				child_ctx[4] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(34:0) <Table headers={[\\\"Amount\\\", \\\"Price\\\", \\\"Date\\\", \\\"Explore\\\", \\\"Invoice\\\"]}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let walletpaymentsfilter;
    	let t2;
    	let table;
    	let current;

    	walletpaymentsfilter = new WalletPaymentsFilter({
    			props: {
    				onFiltered: /*handleFilterPayments*/ ctx[0]
    			},
    			$$inline: true
    		});

    	table = new Table({
    			props: {
    				headers: ["Amount", "Price", "Date", "Explore", "Invoice"],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "Latest Payments";
    			t1 = space();
    			create_component(walletpaymentsfilter.$$.fragment);
    			t2 = space();
    			create_component(table.$$.fragment);
    			attr_dev(h3, "class", "text-gray-900 text-xl font-semibold");
    			add_location(h3, file$2, 29, 2, 1163);
    			attr_dev(div, "class", "flex items-center justify-between mb-6");
    			add_location(div, file$2, 28, 0, 1107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);
    			mount_component(walletpaymentsfilter, div, null);
    			insert_dev(target, t2, anchor);
    			mount_component(table, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const table_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				table_changes.$$scope = { dirty, ctx };
    			}

    			table.$set(table_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(walletpaymentsfilter.$$.fragment, local);
    			transition_in(table.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(walletpaymentsfilter.$$.fragment, local);
    			transition_out(table.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(walletpaymentsfilter);
    			if (detaching) detach_dev(t2);
    			destroy_component(table, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const userId = 10;

    function updatePayments() {
    	
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("WalletPayments", slots, []);
    	const { user } = authService;
    	let payments = paymentsService.fetchPayments();

    	function handleFilterPayments(type, minPrice, maxPrice, date) {
    		if (type === "buy") {
    			payments.data = payments.data?.filter(p => p.consumerId = userId);
    		} else if (type === "sell") {
    			payments.data = payments.data?.filter(p => p.prosumerId = userId);
    			console.log(payments);
    		} else {
    			payments = paymentsService.fetchPayments();
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<WalletPayments> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		formatDistanceToNow,
    		onMount,
    		Badge,
    		Table,
    		TableNotFound,
    		TableSkeleton,
    		authService,
    		paymentsService,
    		WalletPaymentsFilter,
    		user,
    		payments,
    		userId,
    		handleFilterPayments,
    		updatePayments
    	});

    	$$self.$inject_state = $$props => {
    		if ("payments" in $$props) payments = $$props.payments;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [handleFilterPayments];
    }

    class WalletPayments extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WalletPayments",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\wallet\routes\Wallet.svelte generated by Svelte v3.37.0 */
    const file$1 = "src\\wallet\\routes\\Wallet.svelte";

    // (8:0) <Shell title="Wallet">
    function create_default_slot(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let walletbalance;
    	let t0;
    	let walletinformation;
    	let t1;
    	let div2;
    	let walletpayments;
    	let current;
    	walletbalance = new WalletBalance({ $$inline: true });
    	walletinformation = new WalletInformation({ $$inline: true });
    	walletpayments = new WalletPayments({ $$inline: true });

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(walletbalance.$$.fragment);
    			t0 = space();
    			create_component(walletinformation.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(walletpayments.$$.fragment);
    			attr_dev(div0, "class", "mb-8");
    			add_location(div0, file$1, 10, 6, 432);
    			attr_dev(div1, "class", "flex flex-col col-span-12 lg:col-span-4");
    			add_location(div1, file$1, 9, 4, 371);
    			attr_dev(div2, "class", "col-span-12 lg:col-span-8");
    			add_location(div2, file$1, 15, 4, 538);
    			attr_dev(div3, "class", "grid grid-cols-12 gap-12");
    			add_location(div3, file$1, 8, 2, 327);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			mount_component(walletbalance, div0, null);
    			append_dev(div1, t0);
    			mount_component(walletinformation, div1, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			mount_component(walletpayments, div2, null);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(walletbalance.$$.fragment, local);
    			transition_in(walletinformation.$$.fragment, local);
    			transition_in(walletpayments.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(walletbalance.$$.fragment, local);
    			transition_out(walletinformation.$$.fragment, local);
    			transition_out(walletpayments.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(walletbalance);
    			destroy_component(walletinformation);
    			destroy_component(walletpayments);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(8:0) <Shell title=\\\"Wallet\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let shell;
    	let current;

    	shell = new Shell({
    			props: {
    				title: "Wallet",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(shell.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(shell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const shell_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				shell_changes.$$scope = { dirty, ctx };
    			}

    			shell.$set(shell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(shell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(shell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(shell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Wallet", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Wallet> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Shell,
    		WalletBalance,
    		WalletInformation,
    		WalletPayments
    	});

    	return [];
    }

    class Wallet extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Wallet",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    var walletRoutes = {
        "/wallet": wrap$1({
            component: Wallet,
            //conditions: [async () => await authService.isLoggedIn()],
        }),
    };

    /* src\App.svelte generated by Svelte v3.37.0 */
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let div;
    	let router;
    	let t;
    	let notificationmanager;
    	let current;

    	router = new Router({
    			props: {
    				routes: {
    					...authRoutes,
    					...tradingRoutes,
    					...walletRoutes,
    					...dashboardRoutes
    				}
    			},
    			$$inline: true
    		});

    	notificationmanager = new NotificationManager({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(router.$$.fragment);
    			t = space();
    			create_component(notificationmanager.$$.fragment);
    			add_location(div, file, 13, 0, 529);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(router, div, null);
    			append_dev(div, t);
    			mount_component(notificationmanager, div, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			transition_in(notificationmanager.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			transition_out(notificationmanager.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(router);
    			destroy_component(notificationmanager);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);

    	onMount(() => {
    		Chart.register(...registerables);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Chart,
    		registerables,
    		onMount,
    		Router,
    		authRoutes,
    		NotificationManager,
    		dashboardRoutes,
    		tradingRoutes,
    		walletRoutes
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    new App({ target: document.body });

}());
//# sourceMappingURL=bundle.js.map
